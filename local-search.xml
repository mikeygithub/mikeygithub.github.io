<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Kubernetes-启动/存活/就绪探针</title>
    <link href="/2024/04/03/yuque/zx312dnypmmv0mdm/"/>
    <url>/2024/04/03/yuque/zx312dnypmmv0mdm/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2024/png/2630542/1712139573476-75cf646c-71a2-42e8-a627-2187be99e919.png#averageHue=%23356fe6&clientId=ubd34eeec-8db2-4&from=ui&id=u4cef4e96&originHeight=630&originWidth=1200&originalType=binary&ratio=1&rotation=0&showTitle=false&size=91377&status=done&style=none&taskId=u1e9f854b-5f49-471d-b180-61388c613cd&title=" alt="kubernetes-liveness-probes-1687281791644-compressed.png"></p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>当一个新Pod创建后，Service就能立即选择到它，并会把请求转发给Pod 。但是通常一个Pod启动是需要时间的，部分应用在启动时需要进行加载上游相关服务连接等，如果Pod还没准备好，这时把请求转给Pod的话，Pod也无法处理，会造成请求失败的情况发生。</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><strong>启动探针（Startup Probe）</strong>：用于检查容器中的应用是否已经启动。如果启动探针失败，Kubernetes会等待一段时间，然后再次进行检查，直到应用启动。这可以用于应用启动时间较长，需要一段时间初始化的场景。如果配置了这类探针，存活探针和就绪探针成功之前不会重启，确保这些探针不会影响应用的启动。 启动探针可以用于对慢启动容器进行存活性检测，避免它们在启动运行之前就被杀掉。</p><p><strong>存活探针（Liveness Probe）</strong>：用于检查容器是否还在运行。如果存活探针失败，Kubernetes会杀掉容器，然后根据我们的部署配置来重启它。可以用于应用自身无法恢复的问题，需要重启来恢复的场景（如死锁）。</p><p><strong>就绪探针（Readiness Probe）</strong>：用于检查容器是否准备好服务请求。如果就绪探针失败，Kubernetes会停止将流量转发到该Pod，直到探针再次成功。这可以用于控制哪些Pod应该接收流量，哪些不应该。 </p><h2 id="探测方式"><a href="#探测方式" class="headerlink" title="探测方式"></a>探测方式</h2><ul><li>支持 存活命令 （命令返回0值则表示存活）</li><li>http接口（返回大于或等于 200 并且小于 400 的任何代码都表示成功）</li><li>tcp探活（如果能建立连接，这个容器就被看作是健康的）</li><li>grpc探活（需要实现监控检查接口）</li></ul><h2 id="相关参数"><a href="#相关参数" class="headerlink" title="相关参数"></a>相关参数</h2><ul><li><p>initialDelaySeconds：容器启动后要等待多少秒后才启动启动、存活和就绪探针。 如果定义了启动探针则存活探针和就绪探针的延迟将在启动探针已成功之后才开始计算。 如果 periodSeconds 的值大于 initialDelaySeconds，则 initialDelaySeconds 将被忽略。默认是 0 秒，最小值是 0。</p></li><li><p>periodSeconds：执行探测的时间间隔（单位是秒）。默认是 10 秒。最小值是 1。</p></li><li><p>timeoutSeconds：探测的超时后等待多少秒。默认值是 1 秒。最小值是 1。</p></li><li><p>successThreshold：探针在失败后，被视为成功的最小连续成功数。默认值是 1。 存活和启动探测的这个值必须是 1。最小值是 1。</p></li><li><p>failureThreshold：探针连续失败了 failureThreshold 次之后， Kubernetes 认为总体上检查已失败：容器状态未就绪、不健康、不活跃。 对于启动探针或存活探针而言，如果至少有 failureThreshold 个探针已失败， Kubernetes 会将容器视为不健康并为这个特定的容器触发重启操作。 kubelet 遵循该容器的 terminationGracePeriodSeconds 设置。 对于失败的就绪探针，kubelet 继续运行检查失败的容器，并继续运行更多探针； 因为检查失败，kubelet 将 Pod 的 Ready 状况 设置为 false。</p></li><li><p>terminationGracePeriodSeconds：为 kubelet 配置从为失败的容器触发终止操作到强制容器运行时停止该容器之前等待的宽限时长。 默认值是继承 Pod 级别的 terminationGracePeriodSeconds 值（如果不设置则为 30 秒），最小值为 1。 </p></li></ul><h2 id="启动探针"><a href="#启动探针" class="headerlink" title="启动探针"></a>启动探针</h2><p>例子：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">ports:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">liveness-port</span><br>  <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8080</span><br><span class="hljs-comment"># 配置存活探针</span><br><span class="hljs-attr">livenessProbe:</span><br>  <span class="hljs-attr">httpGet:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/healthz</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-string">liveness-port</span><br>  <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 失败一次就会进行重启</span><br>  <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">10</span> <span class="hljs-comment"># 每10秒进行一次探活</span><br>  <br><span class="hljs-comment"># 配置启动探针</span><br><span class="hljs-attr">startupProbe:</span><br>  <span class="hljs-attr">httpGet:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/healthz</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-string">liveness-port</span><br>  <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">30</span> <span class="hljs-comment"># 最多失败30次（10*30=300s）超过</span><br>  <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">10</span> <span class="hljs-comment"># 每10秒进行检查一次</span><br></code></pre></td></tr></table></figure><p>应用将会有最多 5 分钟（30 * 10 = 300s）的时间来完成其启动过程。 一旦启动探测成功一次，存活探测任务就会接管对容器的探测，对容器状态作出快速响应。 如果启动探测一直没有成功，容器会在 300 秒后被杀死，并且根据 restartPolicy 来执行进一步处置。</p><h2 id="存活探针"><a href="#存活探针" class="headerlink" title="存活探针"></a>存活探针</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">livenessProbe:</span><br>  <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">3</span> <span class="hljs-comment"># 执行第一次探测前应该等待 3 秒</span><br>  <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 失败一次就会进行重启</span><br>  <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">3</span> <span class="hljs-comment"># 每三秒执行一次</span><br>  <span class="hljs-attr">httpGet:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/healthz</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br></code></pre></td></tr></table></figure><p> 在上面的配置中，执行第一次探测前会等待 3 秒，然后每3秒执行一次，如果http接口返回大于或等于 200 并且小于 400 的任何代码则认为容器是健康存活的。 如果处理程序返回失败代码，则 kubelet 会杀死这个容器然后将其重启。</p><h2 id="就绪探针"><a href="#就绪探针" class="headerlink" title="就绪探针"></a>就绪探针</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">readinessProbe:</span> <br>  <span class="hljs-attr">httpGet:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/healthz</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>  <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">10</span> <span class="hljs-comment"># 每10秒进行一次检查是否就绪</span><br>  <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">3</span> <span class="hljs-comment"># 首次执行前先等待3s</span><br></code></pre></td></tr></table></figure><p>就绪探针检查容器是否已经准备好接收请求（流量），如果探测成功则会进行转发请求。就绪探针确保服务中的pod都是可用的，确保客户端只与正常的pod交互并且客户端永远不会知道系统存在问题。<strong>不会像存活探针探测失败会重启pod。</strong></p><blockquote><p><strong>注意：</strong>就绪探针和存活探针在容器的整个生命周期中保持运行状态。</p></blockquote><p>就绪和存活探测可以在同一个容器上并行使用。 两者共同使用，可以确保流量不会发给还未就绪的容器，当这些探测失败时容器会被重新启动。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">livenessProbe:</span><br>  <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">3</span> <span class="hljs-comment"># 执行第一次探测前应该等待 3 秒</span><br>  <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 失败一次就会进行重启</span><br>  <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">3</span> <span class="hljs-comment"># 每三秒执行一次</span><br>  <span class="hljs-attr">httpGet:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/healthz</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br><span class="hljs-attr">readinessProbe:</span> <br>  <span class="hljs-attr">httpGet:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/healthz</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>  <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">10</span> <span class="hljs-comment"># 每10秒进行一次检查是否就绪</span><br>  <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">3</span> <span class="hljs-comment"># 首次执行前先等待3s</span><br></code></pre></td></tr></table></figure><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><h2 id="探针接口日志排除"><a href="#探针接口日志排除" class="headerlink" title="探针接口日志排除"></a>探针接口日志排除</h2><p>因为探测的接口比较频繁，如果都采集到es会导致大量的日志数据都是healthz接口的日志，所以决定不采集该接口的日志。</p><ol><li><p>fluentd配置文件新增过滤器排除掉healthz接口（end filter）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;filter kubernetes.**&gt;<br>      @<span class="hljs-built_in">type</span> grep<br>      &lt;exclude&gt;<br>        key message<br>        pattern /.*\/healthz/<br>      &lt;/exclude&gt;<br>    &lt;/filter&gt;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/2630542/1712139596527-82baf397-53ff-4d2a-8613-0c4c24e61fce.png#averageHue=%236d7880&clientId=ubd34eeec-8db2-4&from=paste&height=960&id=u145dec2d&originHeight=960&originWidth=1451&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=udb99867f-2b20-4f7b-8648-37a036fb053&title=&width=1451"></p></li><li><p>测试访问healthz接口是否还能落库</p></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2024/png/2630542/1712139596426-4b86afef-e4e8-44eb-a4eb-c11dc811549c.png#averageHue=%23f4f6f9&clientId=ubd34eeec-8db2-4&from=paste&id=u97983ca7&originHeight=1102&originWidth=2920&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=u006e320b-2a8c-432f-8bf6-8daeac82430&title="></p><ol><li>可以看到已经没有healthz日志数据入库</li></ol><h2 id="应用模板改造"><a href="#应用模板改造" class="headerlink" title="应用模板改造"></a>应用模板改造</h2><h3 id="HTTP-应用"><a href="#HTTP-应用" class="headerlink" title="HTTP 应用"></a>HTTP 应用</h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">- containerPort: </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">.Port</span>&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  name: http # 添加http名字方便直接进行引用</span><br></code></pre></td></tr></table></figure><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># 存活探针</span><br><span class="hljs-symbol">  livenessProbe:</span><br><span class="hljs-symbol">    failureThreshold:</span> <span class="hljs-number">3</span> <span class="hljs-meta">#连续3次探测失败则会根据restartPolicy进行处理</span><br><span class="hljs-symbol">    initialDelaySeconds:</span> <span class="hljs-number">5</span> <span class="hljs-meta"># 首次执行前delay 5秒</span><br><span class="hljs-symbol">    periodSeconds:</span> <span class="hljs-number">5</span> <span class="hljs-meta"># 每5s探测一次</span><br><span class="hljs-symbol">    successThreshold:</span> <span class="hljs-number">1</span> <span class="hljs-meta"># 成功1次即可向该pod发送流量</span><br><span class="hljs-symbol">    timeoutSeconds:</span> <span class="hljs-number">1</span> <span class="hljs-meta"># 探测超时时间(秒)</span><br><span class="hljs-symbol">    httpGet:</span><br><span class="hljs-symbol">      path:</span> /healthz<br><span class="hljs-symbol">      port:</span> http<br>  <span class="hljs-meta"># 就绪探针</span><br><span class="hljs-symbol">  readinessProbe:</span><br><span class="hljs-symbol">    failureThreshold:</span> <span class="hljs-number">3</span> <span class="hljs-meta"># 连续3次探测失败则不向该pod发送流量</span><br><span class="hljs-symbol">    initialDelaySeconds:</span> <span class="hljs-number">5</span> <span class="hljs-meta"># 首次执行前delay 5秒</span><br><span class="hljs-symbol">    periodSeconds:</span> <span class="hljs-number">5</span> <span class="hljs-meta"># 每5s探测一次</span><br><span class="hljs-symbol">    successThreshold:</span> <span class="hljs-number">1</span> <span class="hljs-meta"># 成功1次即可向该pod发送流量</span><br><span class="hljs-symbol">    timeoutSeconds:</span> <span class="hljs-number">1</span> <span class="hljs-meta"># 探测超时时间(秒)</span><br><span class="hljs-symbol">    httpGet:</span><br><span class="hljs-symbol">      path:</span> /healthz<br><span class="hljs-symbol">      port:</span> http<br></code></pre></td></tr></table></figure><h3 id="GRPC-应用"><a href="#GRPC-应用" class="headerlink" title="GRPC 应用"></a>GRPC 应用</h3><blockquote><p>需要实现grpc的healthz标准访问接口</p></blockquote><p>TODO</p><h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><ol><li>Fluentd config：<a href="https://docs.fluentd.org/configuration/config-file">https://docs.fluentd.org/configuration/config-file</a></li><li>Liveness readiness probes：<a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/">https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/</a></li><li>Grpc health check：<a href="https://github.com/grpc/grpc/blob/master/doc/health-checking.md">https://github.com/grpc/grpc/blob/master/doc/health-checking.md</a></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Electron在Windows系统编译问题记录</title>
    <link href="/2024/03/30/yuque/xb7ycvq1sk91kibf/"/>
    <url>/2024/03/30/yuque/xb7ycvq1sk91kibf/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2024/png/2630542/1711767315614-53b46cde-03a2-4f34-a659-f1f8d8011d40.png#averageHue=%23fdfcfb&clientId=u76ab4230-375e-4&from=paste&height=960&id=u96cec9e7&originHeight=1920&originWidth=3840&originalType=binary&ratio=2&rotation=0&showTitle=false&size=239957&status=done&style=none&taskId=u015dc460-0653-46e9-9fb3-e9b20190a23&title=&width=1920" alt="image.png"></p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>近期在写一套CI/CD系统，由于部分项目是通过 electron 来实现跨端，需要在同一套代码中在不同平台进打包构建，在Windows下打包的时候总是出现问题，而且错误提示不明显，对于这一领域接触不多的解决起来比较麻烦，在这里记录一下相关的解决方法。</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="缺失-Visual-studio-相关库"><a href="#缺失-Visual-studio-相关库" class="headerlink" title="缺失 Visual studio 相关库"></a>缺失 Visual studio 相关库</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/2630542/1711800715824-9f1705cf-c8e2-4cfb-bc92-7775a3e9ce32.png#averageHue=%23333333&clientId=uc15551ed-e17b-4&from=paste&height=502&id=u9b263cff&originHeight=1004&originWidth=2126&originalType=binary&ratio=2&rotation=0&showTitle=false&size=502554&status=done&style=none&taskId=u13f40dcf-d289-4ff1-8b36-84af036195d&title=&width=1063" alt="image.png"><br>解决方法</p><ol><li>直接下载 visual studio 进行安装，选中 “Desktop development with C++”</li></ol><h2 id="node-gyp-rebuild-失败问题"><a href="#node-gyp-rebuild-失败问题" class="headerlink" title="node-gyp rebuild 失败问题"></a>node-gyp rebuild 失败问题</h2><p>这个问题比较离谱，我所遇到的是在 <code>c:\Users\makeblock\.runner\run\f44367254c6d4386879fe74b7365b291\TASK_NODE_BUILD_UPLOAD\0-0-0\app-repo&gt;</code>路径下构建就会一直报错。当将项目路径缩短，比如去掉uuid那层目录就可以正常编译。</p><p>此时大概率觉得应该是windows的路径长度太深导致出现这个问题，但是在我重新搭建一台机器来执行的时候就完全没问题（相同路径），就很离离原上谱。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/2630542/1711800561159-8cb5830d-3db0-49df-95f0-10db5fafcad4.png#averageHue=%235b5858&clientId=uc15551ed-e17b-4&from=paste&height=796&id=u07633425&originHeight=1592&originWidth=2716&originalType=binary&ratio=2&rotation=0&showTitle=false&size=620324&status=done&style=none&taskId=u16be32da-ff90-4489-b414-9063e2359fe&title=&width=1358" alt="image.png"><br>解决方法 1：</p><ol><li>打开注册表编辑器。可以在开始菜单中搜索regedit来找到它。  </li></ol><p><img src="https://cdn.nlark.com/yuque/0/2024/png/2630542/1711800060670-2633cde2-6090-45ac-8eb1-e0a209fd7b41.png#averageHue=%2324b3ea&clientId=uc15551ed-e17b-4&from=paste&height=348&id=u5d6a5496&originHeight=696&originWidth=2026&originalType=binary&ratio=2&rotation=0&showTitle=false&size=392889&status=done&style=none&taskId=u7dda43f3-e79a-425e-9c0d-828aaa6966f&title=&width=1013" alt="image.png"></p><ol start="2"><li>导航到HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\FileSystem。</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2024/png/2630542/1711800174273-2ed80254-eb9f-4aaf-9a2a-2bc04de4db6b.png#averageHue=%23f6f7f4&clientId=uc15551ed-e17b-4&from=paste&height=363&id=ud8308724&originHeight=726&originWidth=2214&originalType=binary&ratio=2&rotation=0&showTitle=false&size=1331166&status=done&style=none&taskId=u289705ed-6900-40e9-b511-ff0c1acf476&title=&width=1107" alt="image.png">  </p><ol start="3"><li>找到名为LongPathsEnabled的项。如果不存在，需要创建一个新的DWORD值，并命名为LongPathsEnabled。  </li><li>将 LongPathsEnabled 的值设置为1，然后关闭注册表编辑器。  </li><li>重启电脑。</li></ol><h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><ol><li><a href="https://github.com/nodejs/node-gyp">https://github.com/nodejs/node-gyp</a></li><li><a href="https://github.com/Microsoft/nodejs-guidelines/blob/master/windows-environment.md#compiling-native-addon-modules">https://github.com/Microsoft/nodejs-guidelines/blob/master/windows-environment.md#compiling-native-addon-modules</a></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>electron</tag>
      
      <tag>node-gyp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>云原生-Istio 性能测试</title>
    <link href="/2024/03/09/yuque/fqkp3r1netzt9hod/"/>
    <url>/2024/03/09/yuque/fqkp3r1netzt9hod/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2024/png/2630542/1711208800346-046bd192-06d1-4414-9e3b-b15040e9fd1c.png#averageHue=%233e579b&clientId=u7839b57e-777d-4&from=ui&id=u83643790&originHeight=688&originWidth=1380&originalType=binary&ratio=2&rotation=0&showTitle=false&size=59209&status=done&style=none&taskId=u42770a42-e8da-42fa-b4d1-04a4f8d75a2&title=" alt="439aa25d52255816f7296454fe4df24b893f7aaa_2_1380x688.png"></p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>本文主要是记录在使用 istio 作为 servicemesh 的环境中需要对某些应用进行基准测试。</p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul><li>Kubernetes 1.26</li><li>Istio 1.18.2</li><li>压测工具 wrk（）</li></ul><p>本次压测工具使用 wrk 进行压测</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/2630542/1711203269267-75535b77-6ceb-416d-81f8-933fd37e4bb3.png#averageHue=%23303030&clientId=udde4c0bf-27ae-4&from=paste&height=228&id=ubeb916c3&originHeight=456&originWidth=1536&originalType=binary&ratio=2&rotation=0&showTitle=false&size=93216&status=done&style=none&taskId=u2574a4b6-712c-4859-ae96-28e03bdd51c&title=&width=768" alt="image.png"></p><p><code>wrk</code>基准测试工具的输出报告，解释如下：</p><ul><li> <code>Running 30s test @ https://pipeline-dev.ddd.com/healthz</code>：这表示正在对<code>https://pipeline-dev.ddd.com/healthz</code>进行30秒的压力测试。 </li><li> <code>10 threads and 1000 connections</code>：这表示使用10个线程和1000个并发连接进行测试。 </li><li><code>Thread Stats</code>：这是每个线程的统计信息。 <ul><li> <code>Avg</code>：平均延迟，即每个请求的平均响应时间。在这个例子中，平均延迟是692.61毫秒。 </li><li> <code>Stdev</code>：延迟的标准偏差，表示延迟的波动程度。在这个例子中，标准偏差是451.37毫秒。 </li><li> <code>Max</code>：最大延迟，即所有请求中响应时间最长的一个。在这个例子中，最大延迟是2.00秒。 </li><li> <code>+/- Stdev</code>：延迟在平均值加减一个标准偏差范围内的请求的百分比。在这个例子中，67.17%的请求的延迟在平均值的一个标准偏差范围内。 </li></ul></li><li><code>Req/Sec</code>：每秒的请求次数。 <ul><li> <code>Avg</code>：平均每秒请求次数。在这个例子中，平均每秒请求次数是120.72。 </li><li> <code>Stdev</code>：每秒请求次数的标准偏差。在这个例子中，标准偏差是74.64。 </li><li> <code>Max</code>：最大每秒请求次数。在这个例子中，最大每秒请求次数是454.00。 </li><li> <code>+/- Stdev</code>：每秒请求次数在平均值加减一个标准偏差范围内的百分比。在这个例子中，69.57%的每秒请求次数在平均值的一个标准偏差范围内。 </li></ul></li><li> <code>31473 requests in 30.04s, 16.78MB read</code>：在30.04秒内，发送了31473个请求，读取了16.78MB的数据。 </li><li> <code>Socket errors: connect 0, read 0, write 0, timeout 2667</code>：这是套接字错误的统计，包括连接错误、读取错误、写入错误和超时错误的数量。在这个例子中，有2667个请求超时。 </li><li> <code>Requests/sec: 1047.85</code>：平均每秒的请求次数(QPS)。在这个例子中，平均每秒的请求次数是1047.85。 </li><li> <code>Transfer/sec: 572.17KB</code>：平均每秒传输的数据量。在这个例子中，平均每秒传输的数据量是572.17KB。 </li></ul><h1 id="压测"><a href="#压测" class="headerlink" title="压测"></a>压测</h1><p><a href="https://pipeline-dev.makeblock.com/healthz">https://pipeline-dev.xxxx.com/healthz</a></p><h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1>]]></content>
    
    
    
    <tags>
      
      <tag>Istio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基准测试工具-wrk / wrk2 / ab</title>
    <link href="/2023/05/09/yuque/sk7iwsaphdt260gp/"/>
    <url>/2023/05/09/yuque/sk7iwsaphdt260gp/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2024/png/2630542/1711635829184-c84e7943-b35c-4bc7-9981-18dc7789c64a.png#averageHue=%23f4f4f4&clientId=u1ba7001a-3f10-4&from=paste&height=314&id=u13d782eb&originHeight=628&originWidth=1548&originalType=binary&ratio=2&rotation=0&showTitle=true&size=54266&status=done&style=none&taskId=u0cea0ba8-0f9a-4d9f-9350-b12f2ffbfca&title=wrk%2Fwrk2%2Fab&width=774" alt="wrk/wrk2/ab" title="wrk/wrk2/ab"></p><h1 id="wrk"><a href="#wrk" class="headerlink" title="wrk"></a>wrk</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>wrk 是一个HTTP基准测试工具，当在单核CPU上运行时能够产生显著的负载。它将多线程设计与可扩展的事件通知系统（如epoll和kqueue）相结合。</p><p>可选的LuaJIT脚本可以执行HTTP请求生成、响应处理和自定义报告。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="mac下安装"><a href="#mac下安装" class="headerlink" title="mac下安装"></a>mac下安装</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>awk<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/2630542/1711207338174-8eab535e-679d-46c2-b28b-fdd08c07f1c9.png#averageHue=%232e2e2e&clientId=u45a64364-7e04-4&from=paste&height=360&id=u21a2bdec&originHeight=720&originWidth=2074&originalType=binary&ratio=2&rotation=0&showTitle=false&size=111801&status=done&style=none&taskId=u3a66a5df-fa25-4b36-bf6d-3dae8b330a6&title=&width=1037" alt="image.png"></p><h3 id="linux下安装"><a href="#linux下安装" class="headerlink" title="linux下安装"></a>linux下安装</h3><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">wrk2</span> -t8 -c1000 -<span class="hljs-built_in">d30</span> -R1000 --latency https:<span class="hljs-comment">//www.baidu.com/</span><br></code></pre></td></tr></table></figure><h3 id="测试服务的最大QPS"><a href="#测试服务的最大QPS" class="headerlink" title="测试服务的最大QPS"></a>测试服务的最大QPS</h3><p>通过-R参数获取吞吐量参数    每秒请求量的结果</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">wrk2 -t10 -c50 -d30 -R3000 -H “Host:xxx.com” <span class="hljs-keyword">http</span>://localhost/<span class="hljs-keyword">a</span>/<span class="hljs-keyword">a</span>.mp4 -LRequests/<span class="hljs-built_in">sec</span>: <span class="hljs-number">3000.12</span><br>wrk2 -t10 -c50 -d30 -R5000 -H “Host:xxx.com” <span class="hljs-keyword">http</span>://localhost/<span class="hljs-keyword">a</span>/<span class="hljs-keyword">a</span>.mp4 -LRequests/<span class="hljs-built_in">sec</span>: <span class="hljs-number">5000.12</span><br>wrk2 -t10 -c50 -d30 -R10000 -H “Host:xxx.com” <span class="hljs-keyword">http</span>://localhost/<span class="hljs-keyword">a</span>/<span class="hljs-keyword">a</span>.mp4 -LRequests/<span class="hljs-built_in">sec</span>: <span class="hljs-number">9800.12</span><br>wrk2 -t10 -c50 -d30 -R20000 -H “Host:xxx.com” <span class="hljs-keyword">http</span>://localhost/<span class="hljs-keyword">a</span>/<span class="hljs-keyword">a</span>.mp4 -LRequests/<span class="hljs-built_in">sec</span>: <span class="hljs-number">12500.12</span><br>wrk2 -t10 -c50 -d30 -R30000 -H “Host:xxx.com” <span class="hljs-keyword">http</span>://localhost/<span class="hljs-keyword">a</span>/<span class="hljs-keyword">a</span>.mp4 -LRequests/<span class="hljs-built_in">sec</span>: <span class="hljs-number">13000.12</span><br></code></pre></td></tr></table></figure><p> 从以上的测试过程中可以看出，服务最大的每秒请求量为13000，可见性能压测的QPS为1.3万左右，考虑本机测试性能损耗问题，即QPS&gt;1.2万</p><p>TODO</p><h1 id="wrk2"><a href="#wrk2" class="headerlink" title="wrk2"></a>wrk2</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>wrk2 是对 wrk 进行了改进，以产生恒定的吞吐量负载，并将延迟细节精确到高9（即，当运行足够长的时间时，可以产生精确的99.9999%）。除了wrk的参数外，wrk2还通过–rate或-R参数（默认值为1000）获取吞吐量参数（以每秒请求总数为单位）。</p><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><h2 id="教程-1"><a href="#教程-1" class="headerlink" title="教程"></a>教程</h2><h1 id="ab-Apache-HTTP-server-benchmarking-tool"><a href="#ab-Apache-HTTP-server-benchmarking-tool" class="headerlink" title="ab - Apache HTTP server benchmarking tool"></a>ab - Apache HTTP server benchmarking tool</h1><h2 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h2><h2 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h2><h2 id="教程-2"><a href="#教程-2" class="headerlink" title="教程"></a>教程</h2><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>wrk 默认使用的是http1.1，会使用连接复用，其中-c参数并不会每次发请求都会重新进行建立tcp连接，所以测试的数据需要注意这一块。</li><li>ab 缺省会每次都新建请求连接来进行测试，如果需要保持长连接需要加入 -k 参数。</li></ol><h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><ol><li>wrk：<a href="https://github.com/wg/wrk">https://github.com/wg/wrk</a></li><li><a href="https://github.com/giltene/wrk2">https://github.com/giltene/wrk2</a></li><li><a href="https://github.com/rakyll/hey">https://github.com/rakyll/hey</a></li><li><a href="https://github.com/tsenart/vegeta">https://github.com/tsenart/vegeta</a></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>压力测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Istio 大型微服务系统管理工具</title>
    <link href="/2023/01/31/yuque/xogp27/"/>
    <url>/2023/01/31/yuque/xogp27/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2023/png/2630542/1675179704307-331855d3-a6ac-468a-a4f8-cb28fb030aac.png#averageHue=%23296dc7&clientId=u0f282e66-cc15-4&from=paste&height=250&id=ue288f88f&originHeight=500&originWidth=938&originalType=binary&ratio=1&rotation=0&showTitle=false&size=54445&status=done&style=none&taskId=u747e5dbc-e042-4418-834a-67a97bbcf4d&title=&width=469" alt="image.png"></p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><ol><li><p>在基于的微服务体系结构中，都会存在一些需要解决的问题，例如当我们的不同服务（应用）直接进行交互访问，如何进行流量控制、鉴权、服务熔断、治理等问题，不同的微服务架构实现这些功能方式不一，像Spring Cloud与Netflix OSS是偏向于通过使用微服务的框架来实现，而基于Kubernetes的微服务体系是通过服务网格方式来进行实现</p></li><li><p>什么是服务网格（Service Mesh）：服务网格指的是专门处理服务通讯的基础设施层，目前比较主流的有Istio</p></li></ol><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Istio 是一个由谷歌、IBM 与 Lyft 共同开发的开源项目，旨在提供一种统一化的微服务连接、安全保障、管理与监控方式。Istio 项目能够为微服务架构提供流量管理机制，同时亦为其它增值功能（包括安全性、监控、路由、连接管理与策略等）创造了基础。这款软件利用久经考验的 Lyft Envoy 代理进行构建，可在无需对应用程序代码作出任何发动的前提下实现可视性与控制能力。</p><p> Envoy 服务代理扩展了 Kubernetes，以建立一个可编程的、可感知的应用程序网络。Istio 与 Kubernetes 和传统工作负载一起使用，为复杂的部署带来了标准的通用流量管理、遥测和安全性。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>流量管理：部署服务间路由，故障恢复和负载平衡等功能。<br>可观测性：提供流量和服务性能的端到端视图。<br>安全：跨服务进行加密，基于角色的访问和身份验证。</p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="流量管理"><a href="#流量管理" class="headerlink" title="流量管理"></a>流量管理</h2><p>流量管理指的是在Client调用到我们服务的过程中对其进行管理，包括其路由到指定服务，负载均衡，服务熔断超时重试等</p><ol><li>Gateway：它控制网络边界，指定了从外部网络进入Istio网络的请求如何被处理。Gateway定义了负责处理请求的服务器，以及请求的进入端点。</li><li>VirtualService：它控制网络流量，指定了请求如何被路由到服务。VirtualService定义了请求如何到达特定的服务，以及在路由到服务时的其他流量控制策略。</li><li>DestinationRule：它控制服务流量，指定了请求如何被路由到服务的具体实例。DestinationRule定义了服务的抖动行为、负载均衡策略和请求的拆分策略。</li></ol><h2 id="虚拟服务（VirtualService）"><a href="#虚拟服务（VirtualService）" class="headerlink" title="虚拟服务（VirtualService）"></a>虚拟服务（VirtualService）</h2><p>虚拟服务（Virtual Service）是Istio组件之一，用于将服务网格内的请求路由到对应的服务，每个虚拟服务包含一组路由规则</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">VirtualService</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">reviews</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">hosts:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">reviews</span><br>  <span class="hljs-attr">http:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">match:#匹配的规则</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">headers:</span><br>        <span class="hljs-attr">end-user:</span><br>          <span class="hljs-attr">exact:</span> <span class="hljs-string">jason</span><br>    <span class="hljs-string">route:#路由到目标地址及其子集</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">destination:</span><br>        <span class="hljs-attr">host:</span> <span class="hljs-string">reviews</span><br>        <span class="hljs-attr">subset:</span> <span class="hljs-string">v2</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">route:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">destination:</span><br>        <span class="hljs-attr">host:</span> <span class="hljs-string">reviews</span><br>        <span class="hljs-attr">subset:</span> <span class="hljs-string">v3</span><br></code></pre></td></tr></table></figure><ul><li>hosts：虚拟服务主机地址，即用户指定的目标或是路由规则设定的目标。这是客户端向服务发送请求时使用的一个或多个地址。可以是IP、域名、通配符</li><li>match：路由匹配，支持正则</li><li>destination：目的地址</li></ul><p>更多参考官方文档：<a href="https://istio.io/latest/zh/docs/reference/config/networking/virtual-service/">https://istio.io/latest/zh/docs/reference/config/networking/virtual-service/</a></p><h2 id="目标规则（Destination-Rule）"><a href="#目标规则（Destination-Rule）" class="headerlink" title="目标规则（Destination Rule）"></a>目标规则（Destination Rule）</h2><p>目标规则（Destination Rule）配合虚拟服务，用于配置目的地址的负载均衡，服务子集版本等</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">DestinationRule</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">my-destination-rule</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">host:</span> <span class="hljs-string">my-svc</span><br>  <span class="hljs-attr">trafficPolicy:</span><br>    <span class="hljs-attr">loadBalancer:</span><br>      <span class="hljs-attr">simple:</span> <span class="hljs-string">RANDOM</span><br>  <span class="hljs-string">subsets:#配置了三个子集</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">v1</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">version:</span> <span class="hljs-string">v1</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">v2</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">version:</span> <span class="hljs-string">v2</span><br>    <span class="hljs-attr">trafficPolicy:</span><br>      <span class="hljs-attr">loadBalancer:</span><br>        <span class="hljs-attr">simple:</span> <span class="hljs-string">ROUND_ROBIN</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">v3</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">version:</span> <span class="hljs-string">v3</span><br></code></pre></td></tr></table></figure><p>负载均衡支持</p><ul><li>随机：请求以随机的方式转到池中的实例。</li><li>权重：请求根据指定的百分比转到实例。</li><li>最少请求：请求被转到最少被访问的实例。</li></ul><h2 id="网关（Gateway）"><a href="#网关（Gateway）" class="headerlink" title="网关（Gateway）"></a>网关（Gateway）</h2><p>网关主要用于管理入站和出栈流量， Istio 的网关资源可以配置 4-6 层的负载均衡属性，如对外暴露的端口、TLS 设置等</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Gateway</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">ext-host-gwy</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">my-gateway-controller</span><br>  <span class="hljs-attr">servers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span><br>      <span class="hljs-attr">number:</span> <span class="hljs-number">443</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">https</span><br>      <span class="hljs-attr">protocol:</span> <span class="hljs-string">HTTPS</span><br>    <span class="hljs-attr">hosts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ext-host.example.com</span><br>    <span class="hljs-attr">tls:</span><br>      <span class="hljs-attr">mode:</span> <span class="hljs-string">SIMPLE</span><br>      <span class="hljs-attr">serverCertificate:</span> <span class="hljs-string">/tmp/tls.crt</span><br>      <span class="hljs-attr">privateKey:</span> <span class="hljs-string">/tmp/tls.key</span><br></code></pre></td></tr></table></figure><p>这个网关配置让 HTTPS 流量从 ext-host.example.com 通过 443 端口流入网格，但没有为请求指定任何路由规则。为想要工作的网关指定路由，您必须把网关绑定到虚拟服务上</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">VirtualService</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">virtual-svc</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">hosts:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">ext-host.example.com</span><br>  <span class="hljs-attr">gateways:</span> <span class="hljs-comment"># 指定网关</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ext-host-gwy</span><br></code></pre></td></tr></table></figure><h2 id="服务入口（Service-Entry）"><a href="#服务入口（Service-Entry）" class="headerlink" title="服务入口（Service Entry）"></a>服务入口（Service Entry）</h2><p>使用服务入口（Service Entry） 来添加一个入口到 Istio 内部维护的服务注册中心。添加了服务入口后，Envoy 代理可以向服务发送流量，就好像它是网格内部的服务一样。配置服务入口允许你管理运行在<strong>网格外的服务的流量</strong>，它包括以下几种能力：</p><ul><li>为外部目标 redirect 和转发请求，例如来自 web 端的 API 调用，或者流向遗留老系统的服务。</li><li>为外部目标定义重试、超时和故障注入策略。</li><li>添加一个运行在虚拟机的服务来扩展您的网格。</li></ul><p>示例：将 ext-resource 外部依赖项添加到 Istio 的服务注册中心：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceEntry</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">svc-entry</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">hosts:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">ext-svc.example.com</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">number:</span> <span class="hljs-number">443</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">https</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">HTTPS</span><br>  <span class="hljs-attr">location:</span> <span class="hljs-string">MESH_EXTERNAL</span><br>  <span class="hljs-attr">resolution:</span> <span class="hljs-string">DNS</span><br></code></pre></td></tr></table></figure><p>配置DR设置超时时间</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">DestinationRule</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">ext-res-dr</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">host:</span> <span class="hljs-string">ext-svc.example.com</span><br>  <span class="hljs-attr">trafficPolicy:</span><br>    <span class="hljs-attr">connectionPool:</span><br>      <span class="hljs-attr">tcp:</span><br>        <span class="hljs-attr">connectTimeout:</span> <span class="hljs-string">1s</span><br></code></pre></td></tr></table></figure><h2 id="边车（Sidecar）"><a href="#边车（Sidecar）" class="headerlink" title="边车（Sidecar）"></a>边车（Sidecar）</h2><p>sidecar主要的作用是：</p><ul><li>微调 Envoy 代理接受的端口和协议集。</li><li>限制 Envoy 代理可以访问的服务集合。</li></ul><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2630542/1675181708955-987ea658-d414-44fd-bed9-e33b49cfd624.png#averageHue=%23000000&clientId=u0f282e66-cc15-4&from=paste&height=262&id=uc608c7d9&originHeight=524&originWidth=800&originalType=binary&ratio=1&rotation=0&showTitle=false&size=27854&status=done&style=none&taskId=u2eb13f14-8180-493f-b0ee-89a6ff1fa1c&title=&width=400" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/2630542/1676199815898-0750f530-8a64-4295-9b88-7ba51e3dbbf7.jpeg"></p><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><h2 id="安装Istio"><a href="#安装Istio" class="headerlink" title="安装Istio"></a>安装Istio</h2><ol><li><p>获取istio</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">curl</span> <span class="hljs-string">-L</span> <span class="hljs-string">https://istio.io/downloadIstio</span> <span class="hljs-string">|</span> <span class="hljs-string">ISTIO_VERSION=1.16.2</span> <span class="hljs-string">TARGET_ARCH=arm_64</span> <span class="hljs-string">sh</span> <span class="hljs-bullet">-</span><br></code></pre></td></tr></table></figure></li><li><p>移动可执行二进制文件到</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">cp istioctl /usr/bin/<br></code></pre></td></tr></table></figure></li><li><p>查看版本</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">istioctl version<br></code></pre></td></tr></table></figure></li><li><p>安装istio</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">istioctl install --set profile=demo -y<br></code></pre></td></tr></table></figure></li><li><p>给命名空间添加标签，指示 Istio 在部署应用的时候，自动注入 Envoy 边车代理：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">kubectl label namespace <span class="hljs-keyword">default</span> istio-injection=enabled<br></code></pre></td></tr></table></figure></li></ol><h2 id="部署应用"><a href="#部署应用" class="headerlink" title="部署应用"></a>部署应用</h2><p>官方案例</p><p>Bookinfo 应用分为四个单独的微服务：</p><ul><li>productpage. 这个微服务会调用 details 和 reviews 两个微服务，用来生成页面。</li><li>details. 这个微服务中包含了书籍的信息。</li><li>reviews. 这个微服务中包含了书籍相关的评论。它还会调用 ratings 微服务。</li><li>ratings. 这个微服务中包含了由书籍评价组成的评级信息。</li></ul><p>reviews 微服务有 3 个版本：</p><ul><li>v1 版本不会调用 ratings 服务。</li><li>v2 版本会调用 ratings 服务，并使用 1 到 5 个黑色星形图标来显示评分信息。</li><li>v3 版本会调用 ratings 服务，并使用 1 到 5 个红色星形图标来显示评分信息。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2630542/1676191895784-6da9c95b-4ec5-4096-a22a-df7061c47684.png#averageHue=%23212121&clientId=u32d6c77b-a2ce-4&from=paste&height=227&id=ubc16975c&originHeight=453&originWidth=662&originalType=binary&ratio=2&rotation=0&showTitle=false&size=54462&status=done&style=none&taskId=u553d7d44-901c-40f2-8f8c-f110b288651&title=&width=331" alt="image.png"></p><ol><li><p>部署</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Copyright Istio Authors</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#   Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="hljs-comment">#   you may not use this file except in compliance with the License.</span><br><span class="hljs-comment">#   You may obtain a copy of the License at</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#       http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#   Unless required by applicable law or agreed to in writing, software</span><br><span class="hljs-comment">#   distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="hljs-comment">#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="hljs-comment">#   See the License for the specific language governing permissions and</span><br><span class="hljs-comment">#   limitations under the License.</span><br><br><span class="hljs-comment">##################################################################################################</span><br><span class="hljs-comment"># This file defines the services, service accounts, and deployments for the Bookinfo sample.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># To apply all 4 Bookinfo services, their corresponding service accounts, and deployments:</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#   kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Alternatively, you can deploy any resource separately:</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#   kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml -l service=reviews # reviews Service</span><br><span class="hljs-comment">#   kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml -l account=reviews # reviews ServiceAccount</span><br><span class="hljs-comment">#   kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml -l app=reviews,version=v3 # reviews-v3 Deployment</span><br><span class="hljs-comment">##################################################################################################</span><br><br><span class="hljs-comment">##################################################################################################</span><br><span class="hljs-comment"># Details service</span><br><span class="hljs-comment">##################################################################################################</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">details</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">details</span><br>    <span class="hljs-attr">service:</span> <span class="hljs-string">details</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">9080</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">details</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">bookinfo-details</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">account:</span> <span class="hljs-string">details</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">details-v1</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">details</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">details</span><br>      <span class="hljs-attr">version:</span> <span class="hljs-string">v1</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">details</span><br>        <span class="hljs-attr">version:</span> <span class="hljs-string">v1</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">bookinfo-details</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">details</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">docker.io/istio/examples-bookinfo-details-v1:1.17.0</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">9080</span><br>        <span class="hljs-attr">securityContext:</span><br>          <span class="hljs-attr">runAsUser:</span> <span class="hljs-number">1000</span><br><span class="hljs-meta">---</span><br><span class="hljs-comment">##################################################################################################</span><br><span class="hljs-comment"># Ratings service</span><br><span class="hljs-comment">##################################################################################################</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">ratings</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">ratings</span><br>    <span class="hljs-attr">service:</span> <span class="hljs-string">ratings</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">9080</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">ratings</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">bookinfo-ratings</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">account:</span> <span class="hljs-string">ratings</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">ratings-v1</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">ratings</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">ratings</span><br>      <span class="hljs-attr">version:</span> <span class="hljs-string">v1</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">ratings</span><br>        <span class="hljs-attr">version:</span> <span class="hljs-string">v1</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">bookinfo-ratings</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">ratings</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">docker.io/istio/examples-bookinfo-ratings-v1:1.17.0</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">9080</span><br>        <span class="hljs-attr">securityContext:</span><br>          <span class="hljs-attr">runAsUser:</span> <span class="hljs-number">1000</span><br><span class="hljs-meta">---</span><br><span class="hljs-comment">##################################################################################################</span><br><span class="hljs-comment"># Reviews service</span><br><span class="hljs-comment">##################################################################################################</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">reviews</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">reviews</span><br>    <span class="hljs-attr">service:</span> <span class="hljs-string">reviews</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">9080</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">reviews</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">bookinfo-reviews</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">account:</span> <span class="hljs-string">reviews</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">reviews-v1</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">reviews</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">reviews</span><br>      <span class="hljs-attr">version:</span> <span class="hljs-string">v1</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">reviews</span><br>        <span class="hljs-attr">version:</span> <span class="hljs-string">v1</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">bookinfo-reviews</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">reviews</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">docker.io/istio/examples-bookinfo-reviews-v1:1.17.0</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>        <span class="hljs-attr">env:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">LOG_DIR</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;/tmp/logs&quot;</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">9080</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">tmp</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/tmp</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">wlp-output</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/opt/ibm/wlp/output</span><br>        <span class="hljs-attr">securityContext:</span><br>          <span class="hljs-attr">runAsUser:</span> <span class="hljs-number">1000</span><br>      <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">wlp-output</span><br>        <span class="hljs-attr">emptyDir:</span> &#123;&#125;<br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">tmp</span><br>        <span class="hljs-attr">emptyDir:</span> &#123;&#125;<br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">reviews-v2</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">reviews</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-string">v2</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">reviews</span><br>      <span class="hljs-attr">version:</span> <span class="hljs-string">v2</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">reviews</span><br>        <span class="hljs-attr">version:</span> <span class="hljs-string">v2</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">bookinfo-reviews</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">reviews</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">docker.io/istio/examples-bookinfo-reviews-v2:1.17.0</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>        <span class="hljs-attr">env:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">LOG_DIR</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;/tmp/logs&quot;</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">9080</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">tmp</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/tmp</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">wlp-output</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/opt/ibm/wlp/output</span><br>        <span class="hljs-attr">securityContext:</span><br>          <span class="hljs-attr">runAsUser:</span> <span class="hljs-number">1000</span><br>      <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">wlp-output</span><br>        <span class="hljs-attr">emptyDir:</span> &#123;&#125;<br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">tmp</span><br>        <span class="hljs-attr">emptyDir:</span> &#123;&#125;<br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">reviews-v3</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">reviews</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-string">v3</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">reviews</span><br>      <span class="hljs-attr">version:</span> <span class="hljs-string">v3</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">reviews</span><br>        <span class="hljs-attr">version:</span> <span class="hljs-string">v3</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">bookinfo-reviews</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">reviews</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">docker.io/istio/examples-bookinfo-reviews-v3:1.17.0</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>        <span class="hljs-attr">env:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">LOG_DIR</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;/tmp/logs&quot;</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">9080</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">tmp</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/tmp</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">wlp-output</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/opt/ibm/wlp/output</span><br>        <span class="hljs-attr">securityContext:</span><br>          <span class="hljs-attr">runAsUser:</span> <span class="hljs-number">1000</span><br>      <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">wlp-output</span><br>        <span class="hljs-attr">emptyDir:</span> &#123;&#125;<br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">tmp</span><br>        <span class="hljs-attr">emptyDir:</span> &#123;&#125;<br><span class="hljs-meta">---</span><br><span class="hljs-comment">##################################################################################################</span><br><span class="hljs-comment"># Productpage services</span><br><span class="hljs-comment">##################################################################################################</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">productpage</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">productpage</span><br>    <span class="hljs-attr">service:</span> <span class="hljs-string">productpage</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">9080</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">productpage</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">bookinfo-productpage</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">account:</span> <span class="hljs-string">productpage</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">productpage-v1</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">productpage</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">productpage</span><br>      <span class="hljs-attr">version:</span> <span class="hljs-string">v1</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">productpage</span><br>        <span class="hljs-attr">version:</span> <span class="hljs-string">v1</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">bookinfo-productpage</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">productpage</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">docker.io/istio/examples-bookinfo-productpage-v1:1.17.0</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">9080</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">tmp</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/tmp</span><br>        <span class="hljs-attr">securityContext:</span><br>          <span class="hljs-attr">runAsUser:</span> <span class="hljs-number">1000</span><br>      <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">tmp</span><br>        <span class="hljs-attr">emptyDir:</span> &#123;&#125;<br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go">service/details created<br>serviceaccount/bookinfo-details created<br>deployment.apps/details-v1 created<br>service/ratings created<br>serviceaccount/bookinfo-ratings created<br>deployment.apps/ratings-v1 created<br>service/reviews created<br>serviceaccount/bookinfo-reviews created<br>deployment.apps/reviews-v1 created<br>deployment.apps/reviews-v2 created<br>deployment.apps/reviews-v3 created<br>service/productpage created<br>serviceaccount/bookinfo-productpage created<br>deployment.apps/productpage-v1 created<br></code></pre></td></tr></table></figure></li><li><p>查看Service</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go">[root@k8s-master01 bookinfo]# kubectl get services<br>NAME          TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE<br>demo          ClusterIP   <span class="hljs-number">10.105</span><span class="hljs-number">.133</span><span class="hljs-number">.95</span>    &lt;none&gt;        <span class="hljs-number">80</span>/TCP     <span class="hljs-number">91</span>d<br>details       ClusterIP   <span class="hljs-number">10.98</span><span class="hljs-number">.114</span><span class="hljs-number">.171</span>    &lt;none&gt;        <span class="hljs-number">9080</span>/TCP   <span class="hljs-number">3</span>m26s<br>kubernetes    ClusterIP   <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>        &lt;none&gt;        <span class="hljs-number">443</span>/TCP    <span class="hljs-number">98</span>d<br>nginx         ClusterIP   None             &lt;none&gt;        <span class="hljs-number">80</span>/TCP     <span class="hljs-number">14</span>d<br>productpage   ClusterIP   <span class="hljs-number">10.102</span><span class="hljs-number">.82</span><span class="hljs-number">.121</span>    &lt;none&gt;        <span class="hljs-number">9080</span>/TCP   <span class="hljs-number">3</span>m15s<br>ratings       ClusterIP   <span class="hljs-number">10.101</span><span class="hljs-number">.219</span><span class="hljs-number">.48</span>    &lt;none&gt;        <span class="hljs-number">9080</span>/TCP   <span class="hljs-number">3</span>m15s<br>reviews       ClusterIP   <span class="hljs-number">10.111</span><span class="hljs-number">.191</span><span class="hljs-number">.190</span>   &lt;none&gt;        <span class="hljs-number">9080</span>/TCP   <span class="hljs-number">3</span>m15s<br></code></pre></td></tr></table></figure></li><li><p>查看Pod</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">kubectl</span> <span class="hljs-string">get</span> <span class="hljs-string">pod</span><br></code></pre></td></tr></table></figure></li><li><p>访问</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">kubectl</span> <span class="hljs-string">exec</span> <span class="hljs-string">&quot;$(kubectl get pod -l app=ratings -o jsonpath=&#x27;&#123;.items[0].metadata.name&#125;&#x27;)&quot;</span> <span class="hljs-string">-c</span> <span class="hljs-string">ratings</span> <span class="hljs-string">--</span> <span class="hljs-string">curl</span> <span class="hljs-string">-sS</span> <span class="hljs-string">productpage:9080/productpage</span> <span class="hljs-string">|</span> <span class="hljs-string">grep</span> <span class="hljs-string">-o</span> <span class="hljs-string">&quot;&lt;title&gt;.*&lt;/title&gt;&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">&lt;title&gt;Simple</span> <span class="hljs-string">Bookstore</span> <span class="hljs-string">App&lt;/title&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="对外开放"><a href="#对外开放" class="headerlink" title="对外开放"></a>对外开放</h2><blockquote><p>经上述步骤部署成功后我们需要对其进行提供外部访问，需要创建 Istio 入站网关（Ingress Gateway）， 它会在网格边缘把一个路径映射到路由。</p></blockquote><ol><li><p>把应用关联到istio网关</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">kubectl</span> <span class="hljs-string">apply</span> <span class="hljs-string">-f</span> <span class="hljs-string">samples/bookinfo/networking/bookinfo-gateway.yaml</span><br></code></pre></td></tr></table></figure></li><li><p>查看集群是否支持外部负载均衡</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">kubectl</span> <span class="hljs-string">get</span> <span class="hljs-string">svc</span> <span class="hljs-string">istio-ingressgateway</span> <span class="hljs-string">-n</span> <span class="hljs-string">istio-system</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">NAME</span>                   <span class="hljs-string">TYPE</span>           <span class="hljs-string">CLUSTER-IP</span>      <span class="hljs-string">EXTERNAL-IP</span>   <span class="hljs-string">PORT(S)</span>                                                                      <span class="hljs-string">AGE</span><br><span class="hljs-string">istio-ingressgateway</span>   <span class="hljs-string">LoadBalancer</span>   <span class="hljs-number">10.96</span><span class="hljs-number">.248</span><span class="hljs-number">.193</span>   <span class="hljs-string">&lt;pending&gt;</span>     <span class="hljs-number">15021</span><span class="hljs-string">:31675/TCP,80:30703/TCP,443:32396/TCP,31400:31654/TCP,15443:30816/TCP</span>   <span class="hljs-string">88m</span><br></code></pre></td></tr></table></figure><p>设置 EXTERNAL-IP 的值之后， 您的环境就有了一个外部的负载均衡器，可以将其用作入站网关。 但如果 EXTERNAL-IP 的值为 <none> (或者一直是 <pending> 状态)， 则您的环境则没有提供可作为入站流量网关的外部负载均衡器。 在这个情况下，您还可以用服务（Service）的节点端口访问网关。</p></li><li><p>通过节点端口访问网关，设置入站端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath=<span class="hljs-string">&#x27;&#123;.spec.ports[?(@.name==&quot;http2&quot;)].nodePort&#125;&#x27;</span>)<br><span class="hljs-built_in">export</span> SECURE_INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath=<span class="hljs-string">&#x27;&#123;.spec.ports[?(@.name==&quot;https&quot;)].nodePort&#125;&#x27;</span>)<br></code></pre></td></tr></table></figure></li><li><p>设置入站访问入口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> INGRESS_HOST=worker-node-address<br>//如<br><span class="hljs-built_in">export</span> INGRESS_HOST=192.168.100.21<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> INGRESS_HOST=$(kubectl get po -l istio=ingressgateway -n istio-system -o jsonpath=<span class="hljs-string">&#x27;&#123;.items[0].status.hostIP&#125;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>设置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> GATEWAY_URL=<span class="hljs-variable">$INGRESS_HOST</span>:<span class="hljs-variable">$INGRESS_PORT</span><br></code></pre></td></tr></table></figure><p>查看访问Endpoint</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$GATEWAY_URL</span>&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>验证外部访问</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">echo</span> <span class="hljs-string">&quot;http://$GATEWAY_URL/productpage&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">http://192.168.100.21:30703/productpage</span><br></code></pre></td></tr></table></figure></li><li><p>我们在访问的时候会随机的打到三个服务上，</p></li><li><p>修改路由把全部流量指向v1</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">kubectl</span> <span class="hljs-string">apply</span> <span class="hljs-string">-f</span> <span class="hljs-string">samples/bookinfo/networking/virtual-service-all-v1.yaml</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">VirtualService</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">productpage</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">hosts:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">productpage</span><br>  <span class="hljs-attr">http:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">route:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">destination:</span><br>        <span class="hljs-attr">host:</span> <span class="hljs-string">productpage</span><br>        <span class="hljs-attr">subset:</span> <span class="hljs-string">v1</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">VirtualService</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">reviews</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">hosts:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">reviews</span><br>  <span class="hljs-attr">http:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">route:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">destination:</span><br>        <span class="hljs-attr">host:</span> <span class="hljs-string">reviews</span><br>        <span class="hljs-attr">subset:</span> <span class="hljs-string">v1</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">VirtualService</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">ratings</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">hosts:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">ratings</span><br>  <span class="hljs-attr">http:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">route:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">destination:</span><br>        <span class="hljs-attr">host:</span> <span class="hljs-string">ratings</span><br>        <span class="hljs-attr">subset:</span> <span class="hljs-string">v1</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">VirtualService</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">details</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">hosts:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">details</span><br>  <span class="hljs-attr">http:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">route:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">destination:</span><br>        <span class="hljs-attr">host:</span> <span class="hljs-string">details</span><br>        <span class="hljs-attr">subset:</span> <span class="hljs-string">v1</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="安装仪表盘"><a href="#安装仪表盘" class="headerlink" title="安装仪表盘"></a>安装仪表盘</h2><blockquote><p>创建可视化仪表盘</p></blockquote><ol><li><p>创建可视化仪表盘</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">kubectl</span> <span class="hljs-string">apply</span> <span class="hljs-string">-f</span> <span class="hljs-string">samples/addons</span><br><span class="hljs-string">kubectl</span> <span class="hljs-string">rollout</span> <span class="hljs-string">status</span> <span class="hljs-string">deployment/kiali</span> <span class="hljs-string">-n</span> <span class="hljs-string">istio-system</span><br></code></pre></td></tr></table></figure></li><li><p>访问仪表盘</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">istioctl</span> <span class="hljs-string">dashboard</span> <span class="hljs-string">kiali</span><br><span class="hljs-comment">#上面的只能是集群内部访问，想要外部访问可以指定开发的节点地址</span><br><span class="hljs-string">istioctl</span> <span class="hljs-string">dashboard</span> <span class="hljs-string">kiali</span> <span class="hljs-string">--address</span> <span class="hljs-number">192.168</span><span class="hljs-number">.100</span><span class="hljs-number">.21</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2630542/1675589568529-1e523781-de93-4a94-a0d0-9f3f74015f3c.png#averageHue=%23d0d4ce&clientId=u9ba69729-1ff6-4&from=paste&height=896&id=u3aaa4020&originHeight=1792&originWidth=3008&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1351688&status=done&style=none&taskId=uf7c9ec51-a852-4ff4-8f44-66d3f9433b4&title=&width=1504" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2630542/1675589689538-38335be0-ad5b-456d-9b20-7beb9b8059a6.png#averageHue=%23d3d4d3&clientId=ubc6e0991-1779-4&from=paste&height=868&id=u3323ad7d&originHeight=1736&originWidth=3020&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1319564&status=done&style=none&taskId=u1505847c-ab4f-4547-9cca-06ab41d0470&title=&width=1510" alt="image.png"><br>以上案例体验完后想删除可直接直接clean脚本进行清除</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">samples/bookinfo/platform/kube/cleanup.sh</span><br></code></pre></td></tr></table></figure></li></ol><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><h2 id="配置请求路由"><a href="#配置请求路由" class="headerlink" title="配置请求路由"></a>配置请求路由</h2><ol><li><p>如何将请求动态路由到微服务的多个版本</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">DestinationRule</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">reviews</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">host:</span> <span class="hljs-string">reviews</span><br>  <span class="hljs-attr">subsets:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">v1</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">version:</span> <span class="hljs-string">v1</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">v2</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">version:</span> <span class="hljs-string">v2</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">v3</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">version:</span> <span class="hljs-string">v3</span><br></code></pre></td></tr></table></figure></li><li><p>所有请求指向同一个版本</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">VirtualService</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">reviews</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">hosts:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">reviews</span><br>  <span class="hljs-attr">http:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">route:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">destination:</span><br>        <span class="hljs-attr">host:</span> <span class="hljs-string">reviews</span><br>        <span class="hljs-attr">subset:</span> <span class="hljs-string">v1</span><br></code></pre></td></tr></table></figure></li><li><p>基于用户身份的路由</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">VirtualService</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">reviews</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">hosts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">reviews</span><br>  <span class="hljs-attr">http:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">match:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">headers:</span><br>        <span class="hljs-attr">end-user:</span><br>          <span class="hljs-attr">exact:</span> <span class="hljs-string">jason</span><br>    <span class="hljs-attr">route:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">destination:</span><br>        <span class="hljs-attr">host:</span> <span class="hljs-string">reviews</span><br>        <span class="hljs-attr">subset:</span> <span class="hljs-string">v2</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">route:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">destination:</span><br>        <span class="hljs-attr">host:</span> <span class="hljs-string">reviews</span><br>        <span class="hljs-attr">subset:</span> <span class="hljs-string">v1</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="故障注入"><a href="#故障注入" class="headerlink" title="故障注入"></a>故障注入</h2><p>此任务说明如何注入故障并测试应用程序的弹性。</p><h2 id="流量转移"><a href="#流量转移" class="headerlink" title="流量转移"></a>流量转移</h2><p>展示如何将流量从旧版本迁移到新版本的服务。</p><h2 id="TCP-流量转移"><a href="#TCP-流量转移" class="headerlink" title="TCP 流量转移"></a>TCP 流量转移</h2><p>展示如何将一个服务的 TCP 流量从旧版本迁移到新版本。</p><h2 id="设置请求超时"><a href="#设置请求超时" class="headerlink" title="设置请求超时"></a>设置请求超时</h2><p>本任务用于示范如何使用 Istio 在 Envoy 中设置请求超时。</p><h2 id="熔断"><a href="#熔断" class="headerlink" title="熔断"></a>熔断</h2><p>本任务展示如何为连接、请求以及异常检测配置熔断。</p><h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><p>此任务演示了 Istio 的流量镜像/影子功能。</p><h2 id="地域负载均衡"><a href="#地域负载均衡" class="headerlink" title="地域负载均衡"></a>地域负载均衡</h2><p>本系列任务演示如何在 Istio 中配置地域负载均衡。</p><h2 id="Ingress"><a href="#Ingress" class="headerlink" title="Ingress"></a>Ingress</h2><p>控制 Istio 服务网格的入口流量。</p><h2 id="Egress"><a href="#Egress" class="headerlink" title="Egress"></a>Egress</h2><p>控制 Istio 服务网格的出口流量。</p><h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><ol><li>官网 ：<a href="https://istio.io/latest/zh/">https://istio.io/latest/zh/</a></li><li>github：<a href="https://github.com/istio/istio">https://github.com/istio/istio</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>云原生篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Istio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Golang篇-深入理解GMP调度模型</title>
    <link href="/2022/12/20/yuque/luiivx/"/>
    <url>/2022/12/20/yuque/luiivx/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1671631720102-1878858c-7a86-4ab6-b343-f43072de0437.png#averageHue=%23f7f7f7&clientId=u9e145136-ab54-4&from=paste&height=399&id=u512062ac&originHeight=798&originWidth=2056&originalType=binary&ratio=1&rotation=0&showTitle=false&size=220215&status=done&style=none&taskId=u049194f3-b745-4c94-93c2-cc467463ac0&title=&width=1028" alt="image.png"></p><blockquote><p>之前对GMP的认识较为浅显，一直没有很深入的分析过GMP的调度模型，趁着这阵子有时间写一篇笔记记录一下</p></blockquote><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote><p>携程是go中的一大特色，其占用较低的内存，通过携程使我们的应用能支持更大的并发，下面我们来剖析他的工作原理</p></blockquote><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="G-goroutine"><a href="#G-goroutine" class="headerlink" title="G(goroutine)"></a>G(goroutine)</h2><p>即Go协程，每个go关键字都会创建一个协程,它存储了goroutine的执行stack信息(运行时栈信息)、goroutine状态以及goroutine的任务函数等在G眼中只有P，P就是运行G的 CPU</p><h2 id="M-machine"><a href="#M-machine" class="headerlink" title="M(machine)"></a>M(machine)</h2><p>工作线程，在Go中称为Machine。M是真正调度系统的执行者，它会优先从关联的 P 的本地队列中直接获取中可运行的G，如果本地队列没有的话， 再到调度器持有的全局队列中领取一些任务或是向其他的MP组合偷一半可以执行的G来执行，M 运行 G，G 执行之后，M 会从 P 获取下一个 G，不断重复下去。</p><h2 id="P-processor"><a href="#P-processor" class="headerlink" title="P(processor)"></a>P(processor)</h2><p>processor处理器，它包含了运行 goroutine 的资源，它用于处理M与G的关系：如果线程想运行 goroutine，必须先获取 P，P 中还包含了可运行的 G 队列<br>P的个数在程序启动时决定，默认等同与CPU的核数，通过 runtime.GOMAXPROCS() 设置P的个数M必须拥有P才可以执行G中的代码，P含有一个包含多个G的队列，P可以调度G交由M执行</p><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><blockquote><p>以下源码均参考自 release-branch.go1.19</p></blockquote><h2 id="G-goroutine-1"><a href="#G-goroutine-1" class="headerlink" title="G(goroutine)"></a>G(goroutine)</h2><blockquote><p>runtime/runtime2.go</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs go"><br><span class="hljs-keyword">type</span> g <span class="hljs-keyword">struct</span> &#123;<br><span class="hljs-comment">// Stack parameters.</span><br><span class="hljs-comment">// stack describes the actual stack memory: [stack.lo, stack.hi).</span><br><span class="hljs-comment">// stackguard0 is the stack pointer compared in the Go stack growth prologue.</span><br><span class="hljs-comment">// It is stack.lo+StackGuard normally, but can be StackPreempt to trigger a preemption.</span><br><span class="hljs-comment">// stackguard1 is the stack pointer compared in the C stack growth prologue.</span><br><span class="hljs-comment">// It is stack.lo+StackGuard on g0 and gsignal stacks.</span><br><span class="hljs-comment">// It is ~0 on other goroutine stacks, to trigger a call to morestackc (and crash).</span><br>stack       stack   <span class="hljs-comment">// offset known to runtime/cgo </span><br>    <span class="hljs-comment">//当前g的栈</span><br>stackguard0 <span class="hljs-type">uintptr</span> <span class="hljs-comment">// offset known to liblink</span><br>    <span class="hljs-comment">//判断当前g是否被抢占</span><br>stackguard1 <span class="hljs-type">uintptr</span> <span class="hljs-comment">// offset known to liblink</span><br><span class="hljs-comment">//</span><br>_panic    *_panic <span class="hljs-comment">// innermost panic - offset known to liblink</span><br>    <span class="hljs-comment">//内部panic</span><br>_defer    *_defer <span class="hljs-comment">// innermost defer</span><br>    <span class="hljs-comment">//内部defer</span><br>m         *m      <span class="hljs-comment">// current m; offset known to arm liblink</span><br>    <span class="hljs-comment">//当前g占用的线程</span><br>sched     gobuf<br>    <span class="hljs-comment">//调度相关数据的存储，goroutine切换时，用于保存g的上下文</span><br>syscallsp <span class="hljs-type">uintptr</span> <span class="hljs-comment">// if status==Gsyscall, syscallsp = sched.sp to use during gc</span><br>syscallpc <span class="hljs-type">uintptr</span> <span class="hljs-comment">// if status==Gsyscall, syscallpc = sched.pc to use during gc</span><br>stktopsp  <span class="hljs-type">uintptr</span> <span class="hljs-comment">// expected sp at top of stack, to check in traceback</span><br><span class="hljs-comment">// param is a generic pointer parameter field used to pass</span><br><span class="hljs-comment">// values in particular contexts where other storage for the</span><br><span class="hljs-comment">// parameter would be difficult to find. It is currently used</span><br><span class="hljs-comment">// in three ways:</span><br><span class="hljs-comment">// 1. When a channel operation wakes up a blocked goroutine, it sets param to</span><br><span class="hljs-comment">//    point to the sudog of the completed blocking operation.</span><br><span class="hljs-comment">// 2. By gcAssistAlloc1 to signal back to its caller that the goroutine completed</span><br><span class="hljs-comment">//    the GC cycle. It is unsafe to do so in any other way, because the goroutine&#x27;s</span><br><span class="hljs-comment">//    stack may have moved in the meantime.</span><br><span class="hljs-comment">// 3. By debugCallWrap to pass parameters to a new goroutine because allocating a</span><br><span class="hljs-comment">//    closure in the runtime is forbidden.</span><br>param        unsafe.Pointer<br>    <span class="hljs-comment">//用于传递参数，睡眠时其他goroutine可以设置param，唤醒时该goroutine可以获取</span><br>atomicstatus atomic.Uint32<br>    <span class="hljs-comment">//G的状态</span><br>stackLock    <span class="hljs-type">uint32</span> <span class="hljs-comment">// sigprof/scang lock; <span class="hljs-doctag">TODO:</span> fold in to atomicstatus</span><br>    <span class="hljs-comment">//</span><br>goid         <span class="hljs-type">uint64</span> <br>    <span class="hljs-comment">//协程id</span><br>schedlink    guintptr<br>    <span class="hljs-comment">//g链表指针</span><br>waitsince    <span class="hljs-type">int64</span>      <span class="hljs-comment">// approx time when the g become blocked</span><br>    <span class="hljs-comment">//g被阻塞的大体时间</span><br>waitreason   waitReason <span class="hljs-comment">// if status==Gwaiting</span><br>    <span class="hljs-comment">//阻塞原因</span><br>preempt       <span class="hljs-type">bool</span> <span class="hljs-comment">// preemption signal, duplicates stackguard0 = stackpreempt</span><br>    <span class="hljs-comment">//抢占标记</span><br>preemptStop   <span class="hljs-type">bool</span> <span class="hljs-comment">// transition to _Gpreempted on preemption; otherwise, just deschedule</span><br>preemptShrink <span class="hljs-type">bool</span> <span class="hljs-comment">// shrink stack at synchronous safe point</span><br><br><span class="hljs-comment">// asyncSafePoint is set if g is stopped at an asynchronous</span><br><span class="hljs-comment">// safe point. This means there are frames on the stack</span><br><span class="hljs-comment">// without precise pointer information.</span><br>asyncSafePoint <span class="hljs-type">bool</span><br><br>paniconfault <span class="hljs-type">bool</span> <span class="hljs-comment">// panic (instead of crash) on unexpected fault address</span><br>gcscandone   <span class="hljs-type">bool</span> <span class="hljs-comment">// g has scanned stack; protected by _Gscan bit in status</span><br>throwsplit   <span class="hljs-type">bool</span> <span class="hljs-comment">// must not split stack</span><br><span class="hljs-comment">// activeStackChans indicates that there are unlocked channels</span><br><span class="hljs-comment">// pointing into this goroutine&#x27;s stack. If true, stack</span><br><span class="hljs-comment">// copying needs to acquire channel locks to protect these</span><br><span class="hljs-comment">// areas of the stack.</span><br>activeStackChans <span class="hljs-type">bool</span><br><span class="hljs-comment">// parkingOnChan indicates that the goroutine is about to</span><br><span class="hljs-comment">// park on a chansend or chanrecv. Used to signal an unsafe point</span><br><span class="hljs-comment">// for stack shrinking.</span><br>parkingOnChan atomic.Bool<br><br>raceignore     <span class="hljs-type">int8</span>     <span class="hljs-comment">// ignore race detection events</span><br>sysblocktraced <span class="hljs-type">bool</span>     <span class="hljs-comment">// StartTrace has emitted EvGoInSyscall about this goroutine</span><br>tracking       <span class="hljs-type">bool</span>     <span class="hljs-comment">// whether we&#x27;re tracking this G for sched latency statistics</span><br>trackingSeq    <span class="hljs-type">uint8</span>    <span class="hljs-comment">// used to decide whether to track this G</span><br>trackingStamp  <span class="hljs-type">int64</span>    <span class="hljs-comment">// timestamp of when the G last started being tracked</span><br>runnableTime   <span class="hljs-type">int64</span>    <span class="hljs-comment">// the amount of time spent runnable, cleared when running, only used when tracking</span><br>sysexitticks   <span class="hljs-type">int64</span>    <span class="hljs-comment">// cputicks when syscall has returned (for tracing)</span><br>traceseq       <span class="hljs-type">uint64</span>   <span class="hljs-comment">// trace event sequencer</span><br>tracelastp     puintptr <span class="hljs-comment">// last P emitted an event for this goroutine</span><br>lockedm        muintptr<br>    <span class="hljs-comment">//G被锁定只在这个m上运行</span><br>sig            <span class="hljs-type">uint32</span><br>writebuf       []<span class="hljs-type">byte</span><br>sigcode0       <span class="hljs-type">uintptr</span><br>sigcode1       <span class="hljs-type">uintptr</span><br>sigpc          <span class="hljs-type">uintptr</span><br>gopc           <span class="hljs-type">uintptr</span>         <span class="hljs-comment">// pc of go statement that created this goroutine</span><br>    <span class="hljs-comment">//创建该goroutine的指令地址</span><br>ancestors      *[]ancestorInfo <span class="hljs-comment">// ancestor information goroutine(s) that created this goroutine (only used if debug.tracebackancestors)</span><br>startpc        <span class="hljs-type">uintptr</span>         <span class="hljs-comment">// pc of goroutine function</span><br>    <span class="hljs-comment">//goroutine 函数的指令地址</span><br>racectx        <span class="hljs-type">uintptr</span><br>waiting        *sudog         <span class="hljs-comment">// sudog structures this g is waiting on (that have a valid elem ptr); in lock order</span><br>cgoCtxt        []<span class="hljs-type">uintptr</span>      <span class="hljs-comment">// cgo traceback context</span><br>labels         unsafe.Pointer <span class="hljs-comment">// profiler labels</span><br>timer          *timer         <span class="hljs-comment">// cached timer for time.Sleep</span><br>selectDone     atomic.Uint32  <span class="hljs-comment">// are we participating in a select and did someone win the race?</span><br><br><span class="hljs-comment">// goroutineProfiled indicates the status of this goroutine&#x27;s stack for the</span><br><span class="hljs-comment">// current in-progress goroutine profile</span><br>goroutineProfiled goroutineProfileStateHolder<br><br><span class="hljs-comment">// Per-G GC state</span><br><br><span class="hljs-comment">// gcAssistBytes is this G&#x27;s GC assist credit in terms of</span><br><span class="hljs-comment">// bytes allocated. If this is positive, then the G has credit</span><br><span class="hljs-comment">// to allocate gcAssistBytes bytes without assisting. If this</span><br><span class="hljs-comment">// is negative, then the G must correct this by performing</span><br><span class="hljs-comment">// scan work. We track this in bytes to make it fast to update</span><br><span class="hljs-comment">// and check for debt in the malloc hot path. The assist ratio</span><br><span class="hljs-comment">// determines how this corresponds to scan work debt.</span><br>gcAssistBytes <span class="hljs-type">int64</span><br>&#125;<br></code></pre></td></tr></table></figure><p>保存g上下文结构体，里面存储执行g的一些相关指针</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> gobuf <span class="hljs-keyword">struct</span> &#123;<br><span class="hljs-comment">// The offsets of sp, pc, and g are known to (hard-coded in) libmach.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// ctxt is unusual with respect to GC: it may be a</span><br><span class="hljs-comment">// heap-allocated funcval, so GC needs to track it, but it</span><br><span class="hljs-comment">// needs to be set and cleared from assembly, where it&#x27;s</span><br><span class="hljs-comment">// difficult to have write barriers. However, ctxt is really a</span><br><span class="hljs-comment">// saved, live register, and we only ever exchange it between</span><br><span class="hljs-comment">// the real register and the gobuf. Hence, we treat it as a</span><br><span class="hljs-comment">// root during stack scanning, which means assembly that saves</span><br><span class="hljs-comment">// and restores it doesn&#x27;t need write barriers. It&#x27;s still</span><br><span class="hljs-comment">// typed as a pointer so that any other writes from Go get</span><br><span class="hljs-comment">// write barriers.</span><br>sp   <span class="hljs-type">uintptr</span><br>pc   <span class="hljs-type">uintptr</span><br>g    guintptr<span class="hljs-comment">//g指针</span><br>ctxt unsafe.Pointer<br>ret  <span class="hljs-type">uintptr</span><br>lr   <span class="hljs-type">uintptr</span><br>bp   <span class="hljs-type">uintptr</span> <span class="hljs-comment">// for framepointer-enabled architectures</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="G-status"><a href="#G-status" class="headerlink" title="G status"></a>G status</h2><blockquote><p>枚举协程十种状态</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> (<br><span class="hljs-comment">// G status</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Beyond indicating the general state of a G, the G status</span><br><span class="hljs-comment">// acts like a lock on the goroutine&#x27;s stack (and hence its</span><br><span class="hljs-comment">// ability to execute user code).</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// If you add to this list, add to the list</span><br><span class="hljs-comment">// of &quot;okay during garbage collection&quot; status</span><br><span class="hljs-comment">// in mgcmark.go too.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// TODO(austin): The _Gscan bit could be much lighter-weight.</span><br><span class="hljs-comment">// For example, we could choose not to run _Gscanrunnable</span><br><span class="hljs-comment">// goroutines found in the run queue, rather than CAS-looping</span><br><span class="hljs-comment">// until they become _Grunnable. And transitions like</span><br><span class="hljs-comment">// _Gscanwaiting -&gt; _Gscanrunnable are actually okay because</span><br><span class="hljs-comment">// they don&#x27;t affect stack ownership.</span><br><br><span class="hljs-comment">// _Gidle means this goroutine was just allocated and has not</span><br><span class="hljs-comment">// yet been initialized.</span><br>_Gidle = <span class="hljs-literal">iota</span> <span class="hljs-comment">// 0  //刚分配但是未进行初始化</span><br><br><span class="hljs-comment">// _Grunnable means this goroutine is on a run queue. It is</span><br><span class="hljs-comment">// not currently executing user code. The stack is not owned.</span><br>_Grunnable <span class="hljs-comment">// 1</span><br><br><span class="hljs-comment">// _Grunning means this goroutine may execute user code. The</span><br><span class="hljs-comment">// stack is owned by this goroutine. It is not on a run queue.</span><br><span class="hljs-comment">// It is assigned an M and a P (g.m and g.m.p are valid).</span><br>_Grunning <span class="hljs-comment">// 2</span><br><br><span class="hljs-comment">// _Gsyscall means this goroutine is executing a system call.</span><br><span class="hljs-comment">// It is not executing user code. The stack is owned by this</span><br><span class="hljs-comment">// goroutine. It is not on a run queue. It is assigned an M.</span><br>_Gsyscall <span class="hljs-comment">// 3</span><br><br><span class="hljs-comment">// _Gwaiting means this goroutine is blocked in the runtime.</span><br><span class="hljs-comment">// It is not executing user code. It is not on a run queue,</span><br><span class="hljs-comment">// but should be recorded somewhere (e.g., a channel wait</span><br><span class="hljs-comment">// queue) so it can be ready()d when necessary. The stack is</span><br><span class="hljs-comment">// not owned *except* that a channel operation may read or</span><br><span class="hljs-comment">// write parts of the stack under the appropriate channel</span><br><span class="hljs-comment">// lock. Otherwise, it is not safe to access the stack after a</span><br><span class="hljs-comment">// goroutine enters _Gwaiting (e.g., it may get moved).</span><br>_Gwaiting <span class="hljs-comment">// 4</span><br><br><span class="hljs-comment">// _Gmoribund_unused is currently unused, but hardcoded in gdb</span><br><span class="hljs-comment">// scripts.</span><br>_Gmoribund_unused <span class="hljs-comment">// 5</span><br><br><span class="hljs-comment">// _Gdead means this goroutine is currently unused. It may be</span><br><span class="hljs-comment">// just exited, on a free list, or just being initialized. It</span><br><span class="hljs-comment">// is not executing user code. It may or may not have a stack</span><br><span class="hljs-comment">// allocated. The G and its stack (if any) are owned by the M</span><br><span class="hljs-comment">// that is exiting the G or that obtained the G from the free</span><br><span class="hljs-comment">// list.</span><br>_Gdead <span class="hljs-comment">// 6</span><br><br><span class="hljs-comment">// _Genqueue_unused is currently unused.</span><br>_Genqueue_unused <span class="hljs-comment">// 7</span><br><br><span class="hljs-comment">// _Gcopystack means this goroutine&#x27;s stack is being moved. It</span><br><span class="hljs-comment">// is not executing user code and is not on a run queue. The</span><br><span class="hljs-comment">// stack is owned by the goroutine that put it in _Gcopystack.</span><br>_Gcopystack <span class="hljs-comment">// 8</span><br><br><span class="hljs-comment">// _Gpreempted means this goroutine stopped itself for a</span><br><span class="hljs-comment">// suspendG preemption. It is like _Gwaiting, but nothing is</span><br><span class="hljs-comment">// yet responsible for ready()ing it. Some suspendG must CAS</span><br><span class="hljs-comment">// the status to _Gwaiting to take responsibility for</span><br><span class="hljs-comment">// ready()ing this G.</span><br>_Gpreempted <span class="hljs-comment">// 9</span><br><br><span class="hljs-comment">// _Gscan combined with one of the above states other than</span><br><span class="hljs-comment">// _Grunning indicates that GC is scanning the stack. The</span><br><span class="hljs-comment">// goroutine is not executing user code and the stack is owned</span><br><span class="hljs-comment">// by the goroutine that set the _Gscan bit.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// _Gscanrunning is different: it is used to briefly block</span><br><span class="hljs-comment">// state transitions while GC signals the G to scan its own</span><br><span class="hljs-comment">// stack. This is otherwise like _Grunning.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// atomicstatus&amp;~Gscan gives the state the goroutine will</span><br><span class="hljs-comment">// return to when the scan completes.</span><br>_Gscan          = <span class="hljs-number">0x1000</span><br>_Gscanrunnable  = _Gscan + _Grunnable  <span class="hljs-comment">// 0x1001</span><br>_Gscanrunning   = _Gscan + _Grunning   <span class="hljs-comment">// 0x1002</span><br>_Gscansyscall   = _Gscan + _Gsyscall   <span class="hljs-comment">// 0x1003</span><br>_Gscanwaiting   = _Gscan + _Gwaiting   <span class="hljs-comment">// 0x1004</span><br>_Gscanpreempted = _Gscan + _Gpreempted <span class="hljs-comment">// 0x1009</span><br>)<br></code></pre></td></tr></table></figure><h2 id="M-machine-1"><a href="#M-machine-1" class="headerlink" title="M(machine)"></a>M(machine)</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs go"><br><span class="hljs-keyword">type</span> m <span class="hljs-keyword">struct</span> &#123;<br>g0      *g     <span class="hljs-comment">// goroutine with scheduling stack</span><br>    <span class="hljs-comment">//g的调度栈</span><br>morebuf gobuf  <span class="hljs-comment">// gobuf arg to morestack</span><br>divmod  <span class="hljs-type">uint32</span> <span class="hljs-comment">// div/mod denominator for arm - known to liblink</span><br>_       <span class="hljs-type">uint32</span> <span class="hljs-comment">// align next field to 8 bytes</span><br><br><span class="hljs-comment">// Fields not known to debuggers.</span><br>procid        <span class="hljs-type">uint64</span>            <span class="hljs-comment">// for debuggers, but offset not hard-coded</span><br>gsignal       *g                <span class="hljs-comment">// signal-handling g</span><br>    <span class="hljs-comment">//处理信号的goroutine</span><br>goSigStack    gsignalStack      <span class="hljs-comment">// Go-allocated signal handling stack</span><br>sigmask       sigset            <span class="hljs-comment">// storage for saved signal mask</span><br>tls           [tlsSlots]<span class="hljs-type">uintptr</span> <span class="hljs-comment">// thread-local storage (for x86 extern register)</span><br>mstartfn      <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span><br>curg          *g       <span class="hljs-comment">// current running goroutine</span><br>    <span class="hljs-comment">//当前运行的g</span><br>caughtsig     guintptr <span class="hljs-comment">// goroutine running during fatal signal</span><br>p             puintptr <span class="hljs-comment">// attached p for executing go code (nil if not executing go code)</span><br>    <span class="hljs-comment">//正在运行的p</span><br>nextp         puintptr<br>    <span class="hljs-comment">//接下来运行的p</span><br>oldp          puintptr <span class="hljs-comment">// the p that was attached before executing a syscall</span><br>    <span class="hljs-comment">//之前运行的p</span><br>id            <span class="hljs-type">int64</span><br>mallocing     <span class="hljs-type">int32</span><br>throwing      throwType<br>preemptoff    <span class="hljs-type">string</span> <span class="hljs-comment">// if != &quot;&quot;, keep curg running on this m</span><br>locks         <span class="hljs-type">int32</span><br>dying         <span class="hljs-type">int32</span><br>profilehz     <span class="hljs-type">int32</span><br>spinning      <span class="hljs-type">bool</span> <span class="hljs-comment">// m is out of work and is actively looking for work</span><br>    <span class="hljs-comment">//</span><br>blocked       <span class="hljs-type">bool</span> <span class="hljs-comment">// m is blocked on a note</span><br>    <span class="hljs-comment">//m是否被阻塞</span><br>newSigstack   <span class="hljs-type">bool</span> <span class="hljs-comment">// minit on C thread called sigaltstack</span><br>printlock     <span class="hljs-type">int8</span><br>incgo         <span class="hljs-type">bool</span>          <span class="hljs-comment">// m is executing a cgo call</span><br>isextra       <span class="hljs-type">bool</span>          <span class="hljs-comment">// m is an extra m</span><br>freeWait      atomic.Uint32 <span class="hljs-comment">// Whether it is safe to free g0 and delete m (one of freeMRef, freeMStack, freeMWait)</span><br>fastrand      <span class="hljs-type">uint64</span><br>needextram    <span class="hljs-type">bool</span><br>traceback     <span class="hljs-type">uint8</span><br>ncgocall      <span class="hljs-type">uint64</span>        <span class="hljs-comment">// number of cgo calls in total</span><br>ncgo          <span class="hljs-type">int32</span>         <span class="hljs-comment">// number of cgo calls currently in progress</span><br>cgoCallersUse atomic.Uint32 <span class="hljs-comment">// if non-zero, cgoCallers in use temporarily</span><br>cgoCallers    *cgoCallers   <span class="hljs-comment">// cgo traceback if crashing in cgo call</span><br>park          note<br>alllink       *m <span class="hljs-comment">// on allm</span><br>schedlink     muintptr<br>lockedg       guintptr<br>createstack   [<span class="hljs-number">32</span>]<span class="hljs-type">uintptr</span> <span class="hljs-comment">// stack that created this thread.</span><br>lockedExt     <span class="hljs-type">uint32</span>      <span class="hljs-comment">// tracking for external LockOSThread</span><br>lockedInt     <span class="hljs-type">uint32</span>      <span class="hljs-comment">// tracking for internal lockOSThread</span><br>nextwaitm     muintptr    <span class="hljs-comment">// next m waiting for lock</span><br>waitunlockf   <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(*g, unsafe.Pointer)</span></span> <span class="hljs-type">bool</span><br>waitlock      unsafe.Pointer<br>waittraceev   <span class="hljs-type">byte</span><br>waittraceskip <span class="hljs-type">int</span><br>startingtrace <span class="hljs-type">bool</span><br>syscalltick   <span class="hljs-type">uint32</span><br>freelink      *m <span class="hljs-comment">// on sched.freem</span><br><br><span class="hljs-comment">// these are here because they are too large to be on the stack</span><br><span class="hljs-comment">// of low-level NOSPLIT functions.</span><br>libcall   libcall<br>libcallpc <span class="hljs-type">uintptr</span> <span class="hljs-comment">// for cpu profiler</span><br>libcallsp <span class="hljs-type">uintptr</span><br>libcallg  guintptr<br>syscall   libcall <span class="hljs-comment">// stores syscall parameters on windows</span><br><br>vdsoSP <span class="hljs-type">uintptr</span> <span class="hljs-comment">// SP for traceback while in VDSO call (0 if not in call)</span><br>vdsoPC <span class="hljs-type">uintptr</span> <span class="hljs-comment">// PC for traceback while in VDSO call</span><br><br><span class="hljs-comment">// preemptGen counts the number of completed preemption</span><br><span class="hljs-comment">// signals. This is used to detect when a preemption is</span><br><span class="hljs-comment">// requested, but fails.</span><br>preemptGen atomic.Uint32<br><br><span class="hljs-comment">// Whether this is a pending preemption signal on this M.</span><br>signalPending atomic.Uint32<br><br>dlogPerM<br><br>mOS<br><br><span class="hljs-comment">// Up to 10 locks held by this m, maintained by the lock ranking code.</span><br>locksHeldLen <span class="hljs-type">int</span><br>locksHeld    [<span class="hljs-number">10</span>]heldLockInfo<br>&#125;<br></code></pre></td></tr></table></figure><p>结构体M中有两个G是需要关注一下的，一个是curg，代表结构体M当前绑定的结构体G。另一个是g0，是带有调度栈的goroutine，这是一个比较特殊的goroutine。普通的goroutine的栈是在堆上分配的可增长的栈，而g0的栈是M对应的线程的栈。所有调度相关的代码，会先切换到该goroutine的栈中再执行。也就是说线程的栈也是用的g实现，而不是使用的OS的。</p><h2 id="P-processor-1"><a href="#P-processor-1" class="headerlink" title="P(processor)"></a>P(processor)</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><code class="hljs go"><br><span class="hljs-keyword">type</span> p <span class="hljs-keyword">struct</span> &#123;<br>id          <span class="hljs-type">int32</span><br>status      <span class="hljs-type">uint32</span> <span class="hljs-comment">// one of pidle/prunning/...</span><br>    <span class="hljs-comment">//当前p状态</span><br>link        puintptr<br>    <span class="hljs-comment">//</span><br>schedtick   <span class="hljs-type">uint32</span>     <span class="hljs-comment">// incremented on every scheduler call</span><br>syscalltick <span class="hljs-type">uint32</span>     <span class="hljs-comment">// incremented on every system call</span><br>sysmontick  sysmontick <span class="hljs-comment">// last tick observed by sysmon</span><br>m           muintptr   <span class="hljs-comment">// back-link to associated m (nil if idle)</span><br>    <span class="hljs-comment">//调度的m</span><br>mcache      *mcache<br>    <span class="hljs-comment">//</span><br>pcache      pageCache<br>    <span class="hljs-comment">//页缓存</span><br>raceprocctx <span class="hljs-type">uintptr</span><br><br>deferpool    []*_defer <span class="hljs-comment">// pool of available defer structs (see panic.go)</span><br>deferpoolbuf [<span class="hljs-number">32</span>]*_defer<br><br><span class="hljs-comment">// Cache of goroutine ids, amortizes accesses to runtime·sched.goidgen.</span><br>goidcache    <span class="hljs-type">uint64</span><br>goidcacheend <span class="hljs-type">uint64</span><br>    <span class="hljs-comment">//goroutine id 缓存</span><br><br><span class="hljs-comment">// Queue of runnable goroutines. Accessed without lock.</span><br>runqhead <span class="hljs-type">uint32</span><br>    <span class="hljs-comment">//运行队列队头</span><br>runqtail <span class="hljs-type">uint32</span><br>    <span class="hljs-comment">//运行队列队尾</span><br>runq     [<span class="hljs-number">256</span>]guintptr<br>    <span class="hljs-comment">//运行队列</span><br><span class="hljs-comment">// runnext, if non-nil, is a runnable G that was ready&#x27;d by</span><br><span class="hljs-comment">// the current G and should be run next instead of what&#x27;s in</span><br><span class="hljs-comment">// runq if there&#x27;s time remaining in the running G&#x27;s time</span><br><span class="hljs-comment">// slice. It will inherit the time left in the current time</span><br><span class="hljs-comment">// slice. If a set of goroutines is locked in a</span><br><span class="hljs-comment">// communicate-and-wait pattern, this schedules that set as a</span><br><span class="hljs-comment">// unit and eliminates the (potentially large) scheduling</span><br><span class="hljs-comment">// latency that otherwise arises from adding the ready&#x27;d</span><br><span class="hljs-comment">// goroutines to the end of the run queue.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Note that while other P&#x27;s may atomically CAS this to zero,</span><br><span class="hljs-comment">// only the owner P can CAS it to a valid G.</span><br>runnext guintptr<br>    <span class="hljs-comment">//下一个要运行的协程地址指针</span><br><br><span class="hljs-comment">// Available G&#x27;s (status == Gdead)</span><br>gFree <span class="hljs-keyword">struct</span> &#123;<br>gList<br>n <span class="hljs-type">int32</span><br>&#125;<br><br>sudogcache []*sudog<br>sudogbuf   [<span class="hljs-number">128</span>]*sudog<br><br><span class="hljs-comment">// Cache of mspan objects from the heap.</span><br>mspancache <span class="hljs-keyword">struct</span> &#123;<br><span class="hljs-comment">// We need an explicit length here because this field is used</span><br><span class="hljs-comment">// in allocation codepaths where write barriers are not allowed,</span><br><span class="hljs-comment">// and eliminating the write barrier/keeping it eliminated from</span><br><span class="hljs-comment">// slice updates is tricky, moreso than just managing the length</span><br><span class="hljs-comment">// ourselves.</span><br><span class="hljs-built_in">len</span> <span class="hljs-type">int</span><br>buf [<span class="hljs-number">128</span>]*mspan<br>&#125;<br><br>tracebuf traceBufPtr<br><br><span class="hljs-comment">// traceSweep indicates the sweep events should be traced.</span><br><span class="hljs-comment">// This is used to defer the sweep start event until a span</span><br><span class="hljs-comment">// has actually been swept.</span><br>traceSweep <span class="hljs-type">bool</span><br><span class="hljs-comment">// traceSwept and traceReclaimed track the number of bytes</span><br><span class="hljs-comment">// swept and reclaimed by sweeping in the current sweep loop.</span><br>traceSwept, traceReclaimed <span class="hljs-type">uintptr</span><br><br>palloc persistentAlloc <span class="hljs-comment">// per-P to avoid mutex</span><br><br><span class="hljs-comment">// The when field of the first entry on the timer heap.</span><br><span class="hljs-comment">// This is 0 if the timer heap is empty.</span><br>timer0When atomic.Int64<br><br><span class="hljs-comment">// The earliest known nextwhen field of a timer with</span><br><span class="hljs-comment">// timerModifiedEarlier status. Because the timer may have been</span><br><span class="hljs-comment">// modified again, there need not be any timer with this value.</span><br><span class="hljs-comment">// This is 0 if there are no timerModifiedEarlier timers.</span><br>timerModifiedEarliest atomic.Int64<br><br><span class="hljs-comment">// Per-P GC state</span><br>gcAssistTime         <span class="hljs-type">int64</span> <span class="hljs-comment">// Nanoseconds in assistAlloc</span><br>gcFractionalMarkTime <span class="hljs-type">int64</span> <span class="hljs-comment">// Nanoseconds in fractional mark worker (atomic)</span><br><br><span class="hljs-comment">// limiterEvent tracks events for the GC CPU limiter.</span><br>limiterEvent limiterEvent<br><br><span class="hljs-comment">// gcMarkWorkerMode is the mode for the next mark worker to run in.</span><br><span class="hljs-comment">// That is, this is used to communicate with the worker goroutine</span><br><span class="hljs-comment">// selected for immediate execution by</span><br><span class="hljs-comment">// gcController.findRunnableGCWorker. When scheduling other goroutines,</span><br><span class="hljs-comment">// this field must be set to gcMarkWorkerNotWorker.</span><br>gcMarkWorkerMode gcMarkWorkerMode<br><span class="hljs-comment">// gcMarkWorkerStartTime is the nanotime() at which the most recent</span><br><span class="hljs-comment">// mark worker started.</span><br>gcMarkWorkerStartTime <span class="hljs-type">int64</span><br><br><span class="hljs-comment">// gcw is this P&#x27;s GC work buffer cache. The work buffer is</span><br><span class="hljs-comment">// filled by write barriers, drained by mutator assists, and</span><br><span class="hljs-comment">// disposed on certain GC state transitions.</span><br>gcw gcWork<br><br><span class="hljs-comment">// wbBuf is this P&#x27;s GC write barrier buffer.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Consider caching this in the running G.</span><br>wbBuf wbBuf<br><br>runSafePointFn <span class="hljs-type">uint32</span> <span class="hljs-comment">// if 1, run sched.safePointFn at next safe point</span><br><br><span class="hljs-comment">// statsSeq is a counter indicating whether this P is currently</span><br><span class="hljs-comment">// writing any stats. Its value is even when not, odd when it is.</span><br>statsSeq atomic.Uint32<br><br><span class="hljs-comment">// Lock for timers. We normally access the timers while running</span><br><span class="hljs-comment">// on this P, but the scheduler can also do it from a different P.</span><br>timersLock mutex<br><br><span class="hljs-comment">// Actions to take at some time. This is used to implement the</span><br><span class="hljs-comment">// standard library&#x27;s time package.</span><br><span class="hljs-comment">// Must hold timersLock to access.</span><br>timers []*timer<br><br><span class="hljs-comment">// Number of timers in P&#x27;s heap.</span><br>numTimers atomic.Uint32<br><br><span class="hljs-comment">// Number of timerDeleted timers in P&#x27;s heap.</span><br>deletedTimers atomic.Uint32<br><br><span class="hljs-comment">// Race context used while executing timer functions.</span><br>timerRaceCtx <span class="hljs-type">uintptr</span><br><br><span class="hljs-comment">// maxStackScanDelta accumulates the amount of stack space held by</span><br><span class="hljs-comment">// live goroutines (i.e. those eligible for stack scanning).</span><br><span class="hljs-comment">// Flushed to gcController.maxStackScan once maxStackScanSlack</span><br><span class="hljs-comment">// or -maxStackScanSlack is reached.</span><br>maxStackScanDelta <span class="hljs-type">int64</span><br><br><span class="hljs-comment">// gc-time statistics about current goroutines</span><br><span class="hljs-comment">// Note that this differs from maxStackScan in that this</span><br><span class="hljs-comment">// accumulates the actual stack observed to be used at GC time (hi - sp),</span><br><span class="hljs-comment">// not an instantaneous measure of the total stack size that might need</span><br><span class="hljs-comment">// to be scanned (hi - lo).</span><br>scannedStackSize <span class="hljs-type">uint64</span> <span class="hljs-comment">// stack size of goroutines scanned by this P</span><br>scannedStacks    <span class="hljs-type">uint64</span> <span class="hljs-comment">// number of goroutines scanned by this P</span><br><br><span class="hljs-comment">// preempt is set to indicate that this P should be enter the</span><br><span class="hljs-comment">// scheduler ASAP (regardless of what G is running on it).</span><br>preempt <span class="hljs-type">bool</span><br><br><span class="hljs-comment">// pageTraceBuf is a buffer for writing out page allocation/free/scavenge traces.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Used only if GOEXPERIMENT=pagetrace.</span><br>pageTraceBuf pageTraceBuf<br><br><span class="hljs-comment">// Padding is no longer needed. False sharing is now not a worry because p is large enough</span><br><span class="hljs-comment">// that its size class is an integer multiple of the cache line size (for any of our architectures).</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Schedt（调度器）"><a href="#Schedt（调度器）" class="headerlink" title="Schedt（调度器）"></a>Schedt（调度器）</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> schedt <span class="hljs-keyword">struct</span> &#123;<br><span class="hljs-comment">// accessed atomically. keep at top to ensure alignment on 32-bit systems.</span><br>goidgen   <span class="hljs-type">uint64</span><br>lastpoll  <span class="hljs-type">uint64</span> <span class="hljs-comment">// time of last network poll, 0 if currently polling</span><br>pollUntil <span class="hljs-type">uint64</span> <span class="hljs-comment">// time to which current poll is sleeping</span><br><br>lock mutex<br><br><span class="hljs-comment">// When increasing nmidle, nmidlelocked, nmsys, or nmfreed, be</span><br><span class="hljs-comment">// sure to call checkdead().</span><br><br>midle        muintptr <span class="hljs-comment">// idle m&#x27;s waiting for work</span><br>    <span class="hljs-comment">//空闲M链表</span><br>nmidle       <span class="hljs-type">int32</span>    <span class="hljs-comment">// number of idle m&#x27;s waiting for work</span><br>    <span class="hljs-comment">//空闲M数量</span><br>nmidlelocked <span class="hljs-type">int32</span>    <span class="hljs-comment">// number of locked m&#x27;s waiting for work</span><br>    <span class="hljs-comment">//被锁住的M的数量</span><br>mnext        <span class="hljs-type">int64</span>    <span class="hljs-comment">// number of m&#x27;s that have been created and next M ID</span><br>    <span class="hljs-comment">//已创建M的数量，以及下一个M ID</span><br>maxmcount    <span class="hljs-type">int32</span>    <span class="hljs-comment">// maximum number of m&#x27;s allowed (or die)</span><br>    <span class="hljs-comment">//允许创建最大的M数量</span><br>nmsys        <span class="hljs-type">int32</span>    <span class="hljs-comment">// number of system m&#x27;s not counted for deadlock</span><br>    <span class="hljs-comment">//不计入死锁的M数量</span><br>nmfreed      <span class="hljs-type">int64</span>    <span class="hljs-comment">// cumulative number of freed m&#x27;s</span><br>    <span class="hljs-comment">//累计释放M的数量</span><br><br>ngsys <span class="hljs-type">uint32</span> <span class="hljs-comment">// number of system goroutines; updated atomically</span><br><br>pidle      puintptr <span class="hljs-comment">// idle p&#x27;s</span><br>    <span class="hljs-comment">//空闲的P链表</span><br>npidle     <span class="hljs-type">uint32</span><br>    <span class="hljs-comment">//空闲的P数量</span><br>nmspinning <span class="hljs-type">uint32</span> <span class="hljs-comment">// See &quot;Worker thread parking/unparking&quot; comment in proc.go.</span><br><br><span class="hljs-comment">// Global runnable queue.</span><br>runq     gQueue<br>    <span class="hljs-comment">//全局runnable的G队列</span><br>runqsize <span class="hljs-type">int32</span><br>    <span class="hljs-comment">//全局runnable的G数量</span><br><br><span class="hljs-comment">// disable controls selective disabling of the scheduler.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Use schedEnableUser to control this.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// disable is protected by sched.lock.</span><br>disable <span class="hljs-keyword">struct</span> &#123;<br><span class="hljs-comment">// user disables scheduling of user goroutines.</span><br>user     <span class="hljs-type">bool</span><br>runnable gQueue <span class="hljs-comment">// pending runnable Gs</span><br>n        <span class="hljs-type">int32</span>  <span class="hljs-comment">// length of runnable</span><br>&#125;<br><br><span class="hljs-comment">// Global cache of dead G&#x27;s.</span><br>gFree <span class="hljs-keyword">struct</span> &#123;<br>lock    mutex<br>stack   gList <span class="hljs-comment">// Gs with stacks</span><br>noStack gList <span class="hljs-comment">// Gs without stacks</span><br>n       <span class="hljs-type">int32</span><br>&#125;<br><br><span class="hljs-comment">// Central cache of sudog structs.</span><br>sudoglock  mutex<br>sudogcache *sudog<br><br><span class="hljs-comment">// Central pool of available defer structs.</span><br>deferlock mutex<br>deferpool *_defer<br><br><span class="hljs-comment">// freem is the list of m&#x27;s waiting to be freed when their</span><br><span class="hljs-comment">// m.exited is set. Linked through m.freelink.</span><br>freem *m<br><br>gcwaiting  <span class="hljs-type">uint32</span> <span class="hljs-comment">// gc is waiting to run</span><br>stopwait   <span class="hljs-type">int32</span><br>stopnote   note<br>sysmonwait <span class="hljs-type">uint32</span><br>sysmonnote note<br><br><span class="hljs-comment">// safepointFn should be called on each P at the next GC</span><br><span class="hljs-comment">// safepoint if p.runSafePointFn is set.</span><br>safePointFn   <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(*p)</span></span><br>safePointWait <span class="hljs-type">int32</span><br>safePointNote note<br><br>profilehz <span class="hljs-type">int32</span> <span class="hljs-comment">// cpu profiling rate</span><br><br>procresizetime <span class="hljs-type">int64</span> <span class="hljs-comment">// nanotime() of last change to gomaxprocs</span><br>totaltime      <span class="hljs-type">int64</span> <span class="hljs-comment">// ∫gomaxprocs dt up to procresizetime</span><br><br><span class="hljs-comment">// sysmonlock protects sysmon&#x27;s actions on the runtime.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Acquire and hold this mutex to block sysmon from interacting</span><br><span class="hljs-comment">// with the rest of the runtime.</span><br>sysmonlock mutex<br><br><span class="hljs-comment">// timeToRun is a distribution of scheduling latencies, defined</span><br><span class="hljs-comment">// as the sum of time a G spends in the _Grunnable state before</span><br><span class="hljs-comment">// it transitions to _Grunning.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// timeToRun is protected by sched.lock.</span><br>timeToRun timeHistogram<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h1><h2 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/2630542/1671872781068-1ad9e2e9-af74-43f5-a893-bb5ab286d313.jpeg"></p><p>G-M-P分别代表：</p><ul><li>G - Goroutine，Go协程，是参与调度与执行的最小单位</li><li>M - Machine，指的是系统级线程</li><li>P - Processor，指的是逻辑处理器，P关联了的本地可运行G的队列(也称为LRQ)，最多可存放256个G。</li></ul><p>GMP调度流程大致如下：</p><ul><li>线程M想运行任务就需得获取 P，即与P关联。</li><li>然从 P 的本地队列(LRQ)获取 G，P更加偏向于类似G资源供给器的职责功能</li><li>若LRQ中没有可运行的G，M 会尝试从全局队列(GRQ)拿一批G放到P的本地队列，</li><li>若全局队列也未找到可运行的G时候，M会随机从其他 P 的本地队列偷一半放到自己 P 的本地队列。</li><li>拿到可运行的G之后，M 运行 G，G 执行之后，M 会从 P 获取下一个 G，不断重复下去。</li></ul><h2 id="数量问题"><a href="#数量问题" class="headerlink" title="数量问题"></a>数量问题</h2><p>P的数量：</p><ul><li>p的最大运行数量由GOMAXPROCS控制，一般设置为cpu的核数，比如 GOMAXPROCS = 核数/2，则最多利用了一半的 CPU 核进行并行，又因为一个协程goroutine让出 CPU 后，才执行下一个协程，所以程序执行的任意时刻都只有 GOMAXPROCS 个 goroutine 在同时运行，在 Go 中，一个 goroutine 最多占用 CPU 10ms，防止其他 goroutine 被饿死</li></ul><p>M的数量：</p><ul><li> go 程序启动时，会设置 M 的最大数量，默认 10000. 但是内核很难支持这么多的线程数，所以这个限制可以忽略</li><li> runtime/debug 中的 SetMaxThreads 函数，设置 M 的最大数量</li><li> 一个 M 阻塞了，会创建新的 M</li></ul><p>M 与 P 的数量关系：</p><ul><li>M 与 P 的数量没有绝对关系，一个 M 阻塞，P 就会去创建或者切换另一个 M，所以，即使 P 的默认数量是 1，也有可能会创建很多个 M 出来</li></ul><p>P 和 M 何时被创建：</p><ul><li> P 何时创建：在确定了 P 的最大数量 n 后，运行时系统会根据这个数量创建 n 个 P</li><li> M 何时创建：没有足够的 M 来关联 P 并运行其中的可运行的 G时。比如所有的 M 此时都在忙，而 P 中还有很多就绪任务，就会去寻找空闲的 M，而没有空闲的，就会去创建新的 M</li></ul><h2 id="窃取式工作分配机制"><a href="#窃取式工作分配机制" class="headerlink" title="窃取式工作分配机制"></a>窃取式工作分配机制</h2><ul><li>优先在本地队列中查找G，本地没有去全局查找，如果在本地或者全局都找不到G则去别的P中进行窃取，增强线程的利用率</li></ul><h2 id="创建协程"><a href="#创建协程" class="headerlink" title="创建协程"></a>创建协程</h2><ul><li>随机寻找一个P</li><li>将新协程放入P的runnext（插队）队列中</li><li>若P本地队列满，放入全局队列</li></ul><p>go/src/runtime/proc.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Create a new g running fn.</span><br><span class="hljs-comment">// Put it on the queue of g&#x27;s waiting to run.</span><br><span class="hljs-comment">// The compiler turns a go statement into a call to this.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">newproc</span><span class="hljs-params">(fn *funcval)</span></span> &#123;<br>gp := getg()<br>pc := getcallerpc()<br>systemstack(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>        <span class="hljs-comment">//创建新的G</span><br>newg := newproc1(fn, gp, pc)<br>_p_ := getg().m.p.ptr()<br>        <span class="hljs-comment">//放入G到运行队列中</span><br>runqput(_p_, newg, <span class="hljs-literal">true</span>)<br><span class="hljs-keyword">if</span> mainStarted &#123;<br>wakep()<br>&#125;<br>&#125;)<br>&#125;<br><br><span class="hljs-comment">// Create a new g in state _Grunnable, starting at fn. callerpc is the</span><br><span class="hljs-comment">// address of the go statement that created this. The caller is responsible</span><br><span class="hljs-comment">// for adding the new g to the scheduler.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">newproc1</span><span class="hljs-params">(fn *funcval, callergp *g, callerpc <span class="hljs-type">uintptr</span>)</span></span> *g &#123;<br>_g_ := getg()<br><br><span class="hljs-keyword">if</span> fn == <span class="hljs-literal">nil</span> &#123;<br>fatal(<span class="hljs-string">&quot;go of nil func value&quot;</span>)<br>&#125;<br>acquirem() <span class="hljs-comment">// disable preemption because it can be holding p in a local var</span><br><br>_p_ := _g_.m.p.ptr()<br>newg := gfget(_p_)<br><span class="hljs-keyword">if</span> newg == <span class="hljs-literal">nil</span> &#123;<br>newg = malg(_StackMin)<br>casgstatus(newg, _Gidle, _Gdead)<br>allgadd(newg) <span class="hljs-comment">// publishes with a g-&gt;status of Gdead so GC scanner doesn&#x27;t look at uninitialized stack.</span><br>&#125;<br><span class="hljs-keyword">if</span> newg.stack.hi == <span class="hljs-number">0</span> &#123;<br>throw(<span class="hljs-string">&quot;newproc1: newg missing stack&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">if</span> readgstatus(newg) != _Gdead &#123;<br>throw(<span class="hljs-string">&quot;newproc1: new g is not Gdead&quot;</span>)<br>&#125;<br><br>totalSize := <span class="hljs-type">uintptr</span>(<span class="hljs-number">4</span>*goarch.PtrSize + sys.MinFrameSize) <span class="hljs-comment">// extra space in case of reads slightly beyond frame</span><br>totalSize = alignUp(totalSize, sys.StackAlign)<br>sp := newg.stack.hi - totalSize<br>spArg := sp<br><span class="hljs-keyword">if</span> usesLR &#123;<br><span class="hljs-comment">// caller&#x27;s LR</span><br>*(*<span class="hljs-type">uintptr</span>)(unsafe.Pointer(sp)) = <span class="hljs-number">0</span><br>prepGoExitFrame(sp)<br>spArg += sys.MinFrameSize<br>&#125;<br><br>memclrNoHeapPointers(unsafe.Pointer(&amp;newg.sched), unsafe.Sizeof(newg.sched))<br>newg.sched.sp = sp<br>newg.stktopsp = sp<br>newg.sched.pc = abi.FuncPCABI0(goexit) + sys.PCQuantum <span class="hljs-comment">// +PCQuantum so that previous instruction is in same function</span><br>newg.sched.g = guintptr(unsafe.Pointer(newg))<br>gostartcallfn(&amp;newg.sched, fn)<br>newg.gopc = callerpc<br>newg.ancestors = saveAncestors(callergp)<br>newg.startpc = fn.fn<br><span class="hljs-keyword">if</span> isSystemGoroutine(newg, <span class="hljs-literal">false</span>) &#123;<br>atomic.Xadd(&amp;sched.ngsys, +<span class="hljs-number">1</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// Only user goroutines inherit pprof labels.</span><br><span class="hljs-keyword">if</span> _g_.m.curg != <span class="hljs-literal">nil</span> &#123;<br>newg.labels = _g_.m.curg.labels<br>&#125;<br><span class="hljs-keyword">if</span> goroutineProfile.active &#123;<br><span class="hljs-comment">// A concurrent goroutine profile is running. It should include</span><br><span class="hljs-comment">// exactly the set of goroutines that were alive when the goroutine</span><br><span class="hljs-comment">// profiler first stopped the world. That does not include newg, so</span><br><span class="hljs-comment">// mark it as not needing a profile before transitioning it from</span><br><span class="hljs-comment">// _Gdead.</span><br>newg.goroutineProfiled.Store(goroutineProfileSatisfied)<br>&#125;<br>&#125;<br><span class="hljs-comment">// Track initial transition?</span><br>newg.trackingSeq = <span class="hljs-type">uint8</span>(fastrand())<br><span class="hljs-keyword">if</span> newg.trackingSeq%gTrackingPeriod == <span class="hljs-number">0</span> &#123;<br>newg.tracking = <span class="hljs-literal">true</span><br>&#125;<br>casgstatus(newg, _Gdead, _Grunnable)<br>gcController.addScannableStack(_p_, <span class="hljs-type">int64</span>(newg.stack.hi-newg.stack.lo))<br><br><span class="hljs-keyword">if</span> _p_.goidcache == _p_.goidcacheend &#123;<br><span class="hljs-comment">// Sched.goidgen is the last allocated id,</span><br><span class="hljs-comment">// this batch must be [sched.goidgen+1, sched.goidgen+GoidCacheBatch].</span><br><span class="hljs-comment">// At startup sched.goidgen=0, so main goroutine receives goid=1.</span><br>_p_.goidcache = atomic.Xadd64(&amp;sched.goidgen, _GoidCacheBatch)<br>_p_.goidcache -= _GoidCacheBatch - <span class="hljs-number">1</span><br>_p_.goidcacheend = _p_.goidcache + _GoidCacheBatch<br>&#125;<br>newg.goid = <span class="hljs-type">int64</span>(_p_.goidcache)<br>_p_.goidcache++<br><span class="hljs-keyword">if</span> raceenabled &#123;<br>newg.racectx = racegostart(callerpc)<br><span class="hljs-keyword">if</span> newg.labels != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-comment">// See note in proflabel.go on labelSync&#x27;s role in synchronizing</span><br><span class="hljs-comment">// with the reads in the signal handler.</span><br>racereleasemergeg(newg, unsafe.Pointer(&amp;labelSync))<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> trace.enabled &#123;<br>traceGoCreate(newg, newg.startpc)<br>&#125;<br>releasem(_g_.m)<br><br><span class="hljs-keyword">return</span> newg<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，其优先会放到本地运行队列中，如果本地运行队列已满，则会将其放入全局队列中去</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// runqput tries to put g on the local runnable queue.</span><br><span class="hljs-comment">// If next is false, runqput adds g to the tail of the runnable queue.</span><br><span class="hljs-comment">// If next is true, runqput puts g in the _p_.runnext slot.</span><br><span class="hljs-comment">// If the run queue is full, runnext puts g on the global queue.</span><br><span class="hljs-comment">// Executed only by the owner P.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">runqput</span><span class="hljs-params">(_p_ *p, gp *g, next <span class="hljs-type">bool</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> randomizeScheduler &amp;&amp; next &amp;&amp; fastrandn(<span class="hljs-number">2</span>) == <span class="hljs-number">0</span> &#123;<br>next = <span class="hljs-literal">false</span><br>&#125;<br><br><span class="hljs-keyword">if</span> next &#123;<br>retryNext:<br>oldnext := _p_.runnext<br><span class="hljs-keyword">if</span> !_p_.runnext.cas(oldnext, guintptr(unsafe.Pointer(gp))) &#123;<br><span class="hljs-keyword">goto</span> retryNext<br>&#125;<br><span class="hljs-keyword">if</span> oldnext == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">// Kick the old runnext out to the regular run queue.</span><br>gp = oldnext.ptr()<br>&#125;<br><br>retry:<br>h := atomic.LoadAcq(&amp;_p_.runqhead) <span class="hljs-comment">// load-acquire, synchronize with consumers</span><br>t := _p_.runqtail<br><span class="hljs-keyword">if</span> t-h &lt; <span class="hljs-type">uint32</span>(<span class="hljs-built_in">len</span>(_p_.runq)) &#123;<br>_p_.runq[t%<span class="hljs-type">uint32</span>(<span class="hljs-built_in">len</span>(_p_.runq))].set(gp)<br>atomic.StoreRel(&amp;_p_.runqtail, t+<span class="hljs-number">1</span>) <span class="hljs-comment">// store-release, makes the item available for consumption</span><br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">if</span> runqputslow(_p_, gp, h, t) &#123;<span class="hljs-comment">//放入全局队列</span><br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">// the queue is not full, now the put above must succeed</span><br><span class="hljs-keyword">goto</span> retry<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><p><a href="https://github.com/golang/go">https://github.com/golang/go</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>GMP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ETCD-高可用的 Key/Value 存储系统</title>
    <link href="/2022/12/19/yuque/dhgu5d/"/>
    <url>/2022/12/19/yuque/dhgu5d/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1671452861647-b3dcb811-96e9-4c3b-a21a-52a6f58caa77.png#averageHue=%233a5b7f&clientId=uc5f43ee2-b7a1-4&from=paste&height=228&id=ub8475457&originHeight=456&originWidth=1396&originalType=binary&ratio=1&rotation=0&showTitle=false&size=116113&status=done&style=none&taskId=u814d36ab-adb0-4e21-848d-c040e5d3607&title=&width=698" alt="image.png"></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>是一种强一致性的分布式键值存储，它提供了一种可靠的方式来存储需要由分布式系统或机器集群访问的数据。它可以在网络分区期间优雅地处理领导者选举（Raft）</p><h3 id="简单接口"><a href="#简单接口" class="headerlink" title="简单接口"></a>简单接口</h3><blockquote><p>读写使用标准HTTP工具，例如CURL</p></blockquote><h3 id="键值存储"><a href="#键值存储" class="headerlink" title="键值存储"></a>键值存储</h3><blockquote><p>将数据存储在分层组织的目录中，如标准文件系统中</p></blockquote><h3 id="观察变化"><a href="#观察变化" class="headerlink" title="观察变化"></a>观察变化</h3><p>监视特定键或目录的更改，并对值的更改做出反应</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>1.获取二进制文件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">wget https:<span class="hljs-comment">//github.com/etcd-io/etcd/releases/download/v3.5.0/etcd-v3.5.0-linux-arm64.tar.gz</span><br></code></pre></td></tr></table></figure><p>2.解压</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">tar zxvf etcd-v3<span class="hljs-number">.5</span><span class="hljs-number">.0</span>-linux-arm64.tar.gz<br></code></pre></td></tr></table></figure><p>3.移动二进制文件到指定目录</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">mkdir /usr/local/bin/etcd<br>cd zxvf etcd-v3<span class="hljs-number">.5</span><span class="hljs-number">.0</span>-linux-arm64<br>mv mv etcd etcdctl etcdutl /usr/local/bin/etcd<br></code></pre></td></tr></table></figure><p>4.查看帮助文档</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br></pre></td><td class="code"><pre><code class="hljs go">Usage:<br><br>  etcd [flags]<br>    Start an etcd server.<br><br>  etcd --version<br>    Show the version of etcd.<br><br>  etcd -h | --help<br>    Show the help information about etcd.<br><br>  etcd --config-file<br>    Path to the server configuration file. Note that <span class="hljs-keyword">if</span> a configuration file is provided, other command line flags and environment variables will be ignored.<br><br>  etcd gateway<br>    Run the stateless pass-through etcd TCP connection forwarding proxy.<br><br>  etcd grpc-proxy<br>    Run the stateless etcd v3 gRPC L7 reverse proxy.<br><br><br>Member:<br>  --name <span class="hljs-string">&#x27;default&#x27;</span><br>    Human-readable name <span class="hljs-keyword">for</span> this member.<br>  --data-dir <span class="hljs-string">&#x27;$&#123;name&#125;.etcd&#x27;</span><br>    Path to the data directory.<br>  --wal-dir <span class="hljs-string">&#x27;&#x27;</span><br>    Path to the dedicated wal directory.<br>  --snapshot-count <span class="hljs-string">&#x27;100000&#x27;</span><br>    Number of committed transactions to trigger a snapshot to disk.<br>  --heartbeat-interval <span class="hljs-string">&#x27;100&#x27;</span><br>    Time (in milliseconds) of a heartbeat interval.<br>  --election-timeout <span class="hljs-string">&#x27;1000&#x27;</span><br>    Time (in milliseconds) <span class="hljs-keyword">for</span> an election to timeout. See tuning documentation <span class="hljs-keyword">for</span> details.<br>  --initial-election-tick-advance <span class="hljs-string">&#x27;true&#x27;</span><br>    Whether to fast-forward initial election ticks on boot <span class="hljs-keyword">for</span> faster election.<br>  --listen-peer-urls <span class="hljs-string">&#x27;http://localhost:2380&#x27;</span><br>    List of URLs to listen on <span class="hljs-keyword">for</span> peer traffic.<br>  --listen-client-urls <span class="hljs-string">&#x27;http://localhost:2379&#x27;</span><br>    List of URLs to listen on <span class="hljs-keyword">for</span> client traffic.<br>  --max-snapshots <span class="hljs-string">&#x27;5&#x27;</span><br>    Maximum number of snapshot files to retain (<span class="hljs-number">0</span> is unlimited).<br>  --max-wals <span class="hljs-string">&#x27;5&#x27;</span><br>    Maximum number of wal files to retain (<span class="hljs-number">0</span> is unlimited).<br>  --quota-backend-bytes <span class="hljs-string">&#x27;0&#x27;</span><br>    Raise alarms when backend size exceeds the given quota (<span class="hljs-number">0</span> defaults to low space quota).<br>  --backend-bbolt-freelist-<span class="hljs-keyword">type</span> <span class="hljs-string">&#x27;map&#x27;</span><br>    BackendFreelistType specifies the <span class="hljs-keyword">type</span> of freelist that boltdb backend uses(array and <span class="hljs-keyword">map</span> are supported types).<br>  --backend-batch-interval <span class="hljs-string">&#x27;&#x27;</span><br>    BackendBatchInterval is the maximum time before commit the backend transaction.<br>  --backend-batch-limit <span class="hljs-string">&#x27;0&#x27;</span><br>    BackendBatchLimit is the maximum operations before commit the backend transaction.<br>  --max-txn-ops <span class="hljs-string">&#x27;128&#x27;</span><br>    Maximum number of operations permitted in a transaction.<br>  --max-request-bytes <span class="hljs-string">&#x27;1572864&#x27;</span><br>    Maximum client request size in bytes the server will accept.<br>  --grpc-keepalive-min-time <span class="hljs-string">&#x27;5s&#x27;</span><br>    Minimum duration interval that a client should wait before pinging server.<br>  --grpc-keepalive-interval <span class="hljs-string">&#x27;2h&#x27;</span><br>    Frequency duration of server-to-client ping to check <span class="hljs-keyword">if</span> a connection is alive (<span class="hljs-number">0</span> to disable).<br>  --grpc-keepalive-timeout <span class="hljs-string">&#x27;20s&#x27;</span><br>    Additional duration of wait before closing a non-responsive connection (<span class="hljs-number">0</span> to disable).<br>  --socket-reuse-port <span class="hljs-string">&#x27;false&#x27;</span><br>    Enable to set socket option SO_REUSEPORT on listeners allowing rebinding of a port already in use.<br>  --socket-reuse-address <span class="hljs-string">&#x27;false&#x27;</span><br>        Enable to set socket option SO_REUSEADDR on listeners allowing binding to an address in TIME_WAIT state.<br><br>Clustering:<br>  --initial-advertise-peer-urls <span class="hljs-string">&#x27;http://localhost:2380&#x27;</span><br>    List of this member<span class="hljs-string">&#x27;s peer URLs to advertise to the rest of the cluster.</span><br><span class="hljs-string">  --initial-cluster &#x27;</span><span class="hljs-keyword">default</span>=http:<span class="hljs-comment">//localhost:2380&#x27;</span><br>    Initial cluster configuration <span class="hljs-keyword">for</span> bootstrapping.<br>  --initial-cluster-state <span class="hljs-string">&#x27;new&#x27;</span><br>    Initial cluster state (<span class="hljs-string">&#x27;new&#x27;</span> or <span class="hljs-string">&#x27;existing&#x27;</span>).<br>  --initial-cluster-token <span class="hljs-string">&#x27;etcd-cluster&#x27;</span><br>    Initial cluster token <span class="hljs-keyword">for</span> the etcd cluster during bootstrap.<br>    Specifying this can protect you from unintended cross-cluster interaction when running multiple clusters.<br>  --advertise-client-urls <span class="hljs-string">&#x27;http://localhost:2379&#x27;</span><br>    List of this member<span class="hljs-string">&#x27;s client URLs to advertise to the public.</span><br><span class="hljs-string">    The client URLs advertised should be accessible to machines that talk to etcd cluster. etcd client libraries parse these URLs to connect to the cluster.</span><br><span class="hljs-string">  --discovery &#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">    Discovery URL used to bootstrap the cluster.</span><br><span class="hljs-string">  --discovery-fallback &#x27;</span>proxy<span class="hljs-string">&#x27;</span><br><span class="hljs-string">    Expected behavior (&#x27;</span>exit<span class="hljs-string">&#x27; or &#x27;</span>proxy<span class="hljs-string">&#x27;) when discovery services fails.</span><br><span class="hljs-string">    &quot;proxy&quot; supports v2 API only.</span><br><span class="hljs-string">  --discovery-proxy &#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">    HTTP proxy to use for traffic to discovery service.</span><br><span class="hljs-string">  --discovery-srv &#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">    DNS srv domain used to bootstrap the cluster.</span><br><span class="hljs-string">  --discovery-srv-name &#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">    Suffix to the dns srv name queried when bootstrapping.</span><br><span class="hljs-string">  --strict-reconfig-check &#x27;</span><span class="hljs-literal">true</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">    Reject reconfiguration requests that would cause quorum loss.</span><br><span class="hljs-string">  --pre-vote &#x27;</span><span class="hljs-literal">true</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">    Enable to run an additional Raft election phase.</span><br><span class="hljs-string">  --auto-compaction-retention &#x27;</span><span class="hljs-number">0</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">    Auto compaction retention length. 0 means disable auto compaction.</span><br><span class="hljs-string">  --auto-compaction-mode &#x27;</span>periodic<span class="hljs-string">&#x27;</span><br><span class="hljs-string">    Interpret &#x27;</span>auto-compaction-retention<span class="hljs-string">&#x27; one of: periodic|revision. &#x27;</span>periodic<span class="hljs-string">&#x27; for duration based retention, defaulting to hours if no time unit is provided (e.g. &#x27;</span><span class="hljs-number">5</span>m<span class="hljs-string">&#x27;). &#x27;</span>revision<span class="hljs-string">&#x27; for revision number based retention.</span><br><span class="hljs-string">  --enable-v2 &#x27;</span><span class="hljs-literal">false</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">    Accept etcd V2 client requests. Deprecated and to be decommissioned in v3.6.</span><br><span class="hljs-string">  --v2-deprecation &#x27;</span>not-yet<span class="hljs-string">&#x27;</span><br><span class="hljs-string">    Phase of v2store deprecation. Allows to opt-in for higher compatibility mode.</span><br><span class="hljs-string">    Supported values:</span><br><span class="hljs-string">      &#x27;</span>not-yet<span class="hljs-string">&#x27;                // Issues a warning if v2store have meaningful content (default in v3.5)</span><br><span class="hljs-string">      &#x27;</span>write-only<span class="hljs-string">&#x27;             // Custom v2 state is not allowed (planned default in v3.6)</span><br><span class="hljs-string">      &#x27;</span>write-only-drop-data<span class="hljs-string">&#x27;   // Custom v2 state will get DELETED !</span><br><span class="hljs-string">      &#x27;</span>gone<span class="hljs-string">&#x27;                   // v2store is not maintained any longer. (planned default in v3.7)</span><br><span class="hljs-string"></span><br><span class="hljs-string">Security:</span><br><span class="hljs-string">  --cert-file &#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">    Path to the client server TLS cert file.</span><br><span class="hljs-string">  --key-file &#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">    Path to the client server TLS key file.</span><br><span class="hljs-string">  --client-cert-auth &#x27;</span><span class="hljs-literal">false</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">    Enable client cert authentication.</span><br><span class="hljs-string">  --client-crl-file &#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">    Path to the client certificate revocation list file.</span><br><span class="hljs-string">  --client-cert-allowed-hostname &#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">    Allowed TLS hostname for client cert authentication.</span><br><span class="hljs-string">  --trusted-ca-file &#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">    Path to the client server TLS trusted CA cert file.</span><br><span class="hljs-string">  --auto-tls &#x27;</span><span class="hljs-literal">false</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">    Client TLS using generated certificates.</span><br><span class="hljs-string">  --peer-cert-file &#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">    Path to the peer server TLS cert file.</span><br><span class="hljs-string">  --peer-key-file &#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">    Path to the peer server TLS key file.</span><br><span class="hljs-string">  --peer-client-cert-auth &#x27;</span><span class="hljs-literal">false</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">    Enable peer client cert authentication.</span><br><span class="hljs-string">  --peer-trusted-ca-file &#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">    Path to the peer server TLS trusted CA file.</span><br><span class="hljs-string">  --peer-cert-allowed-cn &#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">    Required CN for client certs connecting to the peer endpoint.</span><br><span class="hljs-string">  --peer-cert-allowed-hostname &#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">    Allowed TLS hostname for inter peer authentication.</span><br><span class="hljs-string">  --peer-auto-tls &#x27;</span><span class="hljs-literal">false</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">    Peer TLS using self-generated certificates if --peer-key-file and --peer-cert-file are not provided.</span><br><span class="hljs-string">  --self-signed-cert-validity &#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">    The validity period of the client and peer certificates that are automatically generated by etcd when you specify ClientAutoTLS and PeerAutoTLS, the unit is year, and the default is 1.</span><br><span class="hljs-string">  --peer-crl-file &#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">    Path to the peer certificate revocation list file.</span><br><span class="hljs-string">  --cipher-suites &#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">    Comma-separated list of supported TLS cipher suites between client/server and peers (empty will be auto-populated by Go).</span><br><span class="hljs-string">  --cors &#x27;</span>*<span class="hljs-string">&#x27;</span><br><span class="hljs-string">    Comma-separated whitelist of origins for CORS, or cross-origin resource sharing, (empty or * means allow all).</span><br><span class="hljs-string">  --host-whitelist &#x27;</span>*<span class="hljs-string">&#x27;</span><br><span class="hljs-string">    Acceptable hostnames from HTTP client requests, if server is not secure (empty or * means allow all).</span><br><span class="hljs-string"></span><br><span class="hljs-string">Auth:</span><br><span class="hljs-string">  --auth-token &#x27;</span>simple<span class="hljs-string">&#x27;</span><br><span class="hljs-string">    Specify a v3 authentication token type and its options (&#x27;</span>simple<span class="hljs-string">&#x27; or &#x27;</span>jwt<span class="hljs-string">&#x27;).</span><br><span class="hljs-string">  --bcrypt-cost 10</span><br><span class="hljs-string">    Specify the cost / strength of the bcrypt algorithm for hashing auth passwords. Valid values are between 4 and 31.</span><br><span class="hljs-string">  --auth-token-ttl 300</span><br><span class="hljs-string">    Time (in seconds) of the auth-token-ttl.</span><br><span class="hljs-string"></span><br><span class="hljs-string">Profiling and Monitoring:</span><br><span class="hljs-string">  --enable-pprof &#x27;</span><span class="hljs-literal">false</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">    Enable runtime profiling data via HTTP server. Address is at client URL + &quot;/debug/pprof/&quot;</span><br><span class="hljs-string">  --metrics &#x27;</span>basic<span class="hljs-string">&#x27;</span><br><span class="hljs-string">    Set level of detail for exported metrics, specify &#x27;</span>extensive<span class="hljs-string">&#x27; to include server side grpc histogram metrics.</span><br><span class="hljs-string">  --listen-metrics-urls &#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">    List of URLs to listen on for the metrics and health endpoints.</span><br><span class="hljs-string"></span><br><span class="hljs-string">Logging:</span><br><span class="hljs-string">  --logger &#x27;</span>zap<span class="hljs-string">&#x27;</span><br><span class="hljs-string">    Currently only supports &#x27;</span>zap<span class="hljs-string">&#x27; for structured logging.</span><br><span class="hljs-string">  --log-outputs &#x27;</span><span class="hljs-keyword">default</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">    Specify &#x27;</span>stdout<span class="hljs-string">&#x27; or &#x27;</span>stderr<span class="hljs-string">&#x27; to skip journald logging even when running under systemd, or list of comma separated output targets.</span><br><span class="hljs-string">  --log-level &#x27;</span>info<span class="hljs-string">&#x27;</span><br><span class="hljs-string">    Configures log level. Only supports debug, info, warn, error, panic, or fatal.</span><br><span class="hljs-string">  --enable-log-rotation &#x27;</span><span class="hljs-literal">false</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">    Enable log rotation of a single log-outputs file target.</span><br><span class="hljs-string">  --log-rotation-config-json &#x27;</span>&#123;<span class="hljs-string">&quot;maxsize&quot;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&quot;maxage&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;maxbackups&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;localtime&quot;</span>: <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;compress&quot;</span>: <span class="hljs-literal">false</span>&#125;<span class="hljs-string">&#x27;</span><br><span class="hljs-string">    Configures log rotation if enabled with a JSON logger config. MaxSize(MB), MaxAge(days,0=no limit), MaxBackups(0=no limit), LocalTime(use computers local time), Compress(gzip)&quot;. </span><br><span class="hljs-string"></span><br><span class="hljs-string">Experimental distributed tracing:</span><br><span class="hljs-string">  --experimental-enable-distributed-tracing &#x27;</span><span class="hljs-literal">false</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">    Enable experimental distributed tracing.</span><br><span class="hljs-string">  --experimental-distributed-tracing-address &#x27;</span>localhost:<span class="hljs-number">4317</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">    Distributed tracing collector address.</span><br><span class="hljs-string">  --experimental-distributed-tracing-service-name &#x27;</span>etcd<span class="hljs-string">&#x27;</span><br><span class="hljs-string">    Distributed tracing service name, must be same across all etcd instances.</span><br><span class="hljs-string">  --experimental-distributed-tracing-instance-id &#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">    Distributed tracing instance ID, must be unique per each etcd instance.</span><br><span class="hljs-string"></span><br><span class="hljs-string">v2 Proxy (to be deprecated in v3.6):</span><br><span class="hljs-string">  --proxy &#x27;</span>off<span class="hljs-string">&#x27;</span><br><span class="hljs-string">    Proxy mode setting (&#x27;</span>off<span class="hljs-string">&#x27;, &#x27;</span>readonly<span class="hljs-string">&#x27; or &#x27;</span>on<span class="hljs-string">&#x27;).</span><br><span class="hljs-string">  --proxy-failure-wait 5000</span><br><span class="hljs-string">    Time (in milliseconds) an endpoint will be held in a failed state.</span><br><span class="hljs-string">  --proxy-refresh-interval 30000</span><br><span class="hljs-string">    Time (in milliseconds) of the endpoints refresh interval.</span><br><span class="hljs-string">  --proxy-dial-timeout 1000</span><br><span class="hljs-string">    Time (in milliseconds) for a dial to timeout.</span><br><span class="hljs-string">  --proxy-write-timeout 5000</span><br><span class="hljs-string">    Time (in milliseconds) for a write to timeout.</span><br><span class="hljs-string">  --proxy-read-timeout 0</span><br><span class="hljs-string">    Time (in milliseconds) for a read to timeout.</span><br><span class="hljs-string"></span><br><span class="hljs-string">Experimental feature:</span><br><span class="hljs-string">  --experimental-initial-corrupt-check &#x27;</span><span class="hljs-literal">false</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">    Enable to check data corruption before serving any client/peer traffic.</span><br><span class="hljs-string">  --experimental-corrupt-check-time &#x27;</span><span class="hljs-number">0</span>s<span class="hljs-string">&#x27;</span><br><span class="hljs-string">    Duration of time between cluster corruption check passes.</span><br><span class="hljs-string">  --experimental-enable-v2v3 &#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">    Serve v2 requests through the v3 backend under a given prefix. Deprecated and to be decommissioned in v3.6.</span><br><span class="hljs-string">  --experimental-enable-lease-checkpoint &#x27;</span><span class="hljs-literal">false</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">    ExperimentalEnableLeaseCheckpoint enables primary lessor to persist lease remainingTTL to prevent indefinite auto-renewal of long lived leases.</span><br><span class="hljs-string">  --experimental-compaction-batch-limit 1000</span><br><span class="hljs-string">    ExperimentalCompactionBatchLimit sets the maximum revisions deleted in each compaction batch.</span><br><span class="hljs-string">  --experimental-peer-skip-client-san-verification &#x27;</span><span class="hljs-literal">false</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">    Skip verification of SAN field in client certificate for peer connections.</span><br><span class="hljs-string">  --experimental-watch-progress-notify-interval &#x27;</span><span class="hljs-number">10</span>m<span class="hljs-string">&#x27;</span><br><span class="hljs-string">    Duration of periodical watch progress notification.</span><br><span class="hljs-string">  --experimental-warning-apply-duration &#x27;</span><span class="hljs-number">100</span>ms<span class="hljs-string">&#x27;</span><br><span class="hljs-string">        Warning is generated if requests take more than this duration.</span><br><span class="hljs-string">  --experimental-txn-mode-write-with-shared-buffer &#x27;</span><span class="hljs-literal">true</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">    Enable the write transaction to use a shared buffer in its readonly check operations.</span><br><span class="hljs-string">  --experimental-bootstrap-defrag-threshold-megabytes</span><br><span class="hljs-string">    Enable the defrag during etcd server bootstrap on condition that it will free at least the provided threshold of disk space. Needs to be set to non-zero value to take effect.</span><br><span class="hljs-string"></span><br><span class="hljs-string">Unsafe feature:</span><br><span class="hljs-string">  --force-new-cluster &#x27;</span><span class="hljs-literal">false</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">    Force to create a new one-member cluster.</span><br><span class="hljs-string">  --unsafe-no-fsync &#x27;</span><span class="hljs-literal">false</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">    Disables fsync, unsafe, will cause data loss.</span><br><span class="hljs-string"></span><br><span class="hljs-string">CAUTIOUS with unsafe flag! It may break the guarantees given by the consensus protocol!</span><br></code></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><ol><li><p>启动服务</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">nohup etcd &gt;/dev/null <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> &amp;<br></code></pre></td></tr></table></figure></li><li><p>通过ctl来与etcd交互</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">etcdctl help<br></code></pre></td></tr></table></figure></li><li><p>查看节点状态</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">[root@k8s-node03 ~]# etcdctl endpoint status --write-out=table<br>+----------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>|    ENDPOINT    |        ID        | VERSION | DB SIZE | IS LEADER | IS LEARNER | RAFT TERM | RAFT INDEX | RAFT APPLIED INDEX | ERRORS |<br>+----------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>| <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">2379</span> | <span class="hljs-number">8e9</span>e05c52164694d |   <span class="hljs-number">3.5</span><span class="hljs-number">.5</span> |   <span class="hljs-number">20</span> kB |      <span class="hljs-literal">true</span> |      <span class="hljs-literal">false</span> |         <span class="hljs-number">4</span> |          <span class="hljs-number">9</span> |                  <span class="hljs-number">9</span> |        |<br>+----------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>[root@k8s-node03 ~]# <br></code></pre></td></tr></table></figure></li></ol><h2 id="插入和获取"><a href="#插入和获取" class="headerlink" title="插入和获取"></a>插入和获取</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">[root@k8s-node03 ~]# etcdctl put mk <span class="hljs-string">&quot;hello world&quot;</span><br>OK<br>[root@k8s-node03 ~]# etcdctl get mk<br>mk<br>hello world<br></code></pre></td></tr></table></figure><h2 id="前缀读取"><a href="#前缀读取" class="headerlink" title="前缀读取"></a>前缀读取</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">etcdctl get gsrde/org/hello-service/ --prefix<br></code></pre></td></tr></table></figure><h2 id="监听key变化"><a href="#监听key变化" class="headerlink" title="监听key变化"></a>监听key变化</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">etcdctl watch key1<br></code></pre></td></tr></table></figure><h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">etcdctl lock mutex1<br></code></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h1 id="类库"><a href="#类库" class="headerlink" title="类库"></a>类库</h1><p><a href="https://etcd.io/docs/v3.5/integrations/">https://etcd.io/docs/v3.5/integrations/</a></p><p>1.下载依赖</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">go</span> get <span class="hljs-keyword">go</span>.etcd.io/etcd/client/v3<br></code></pre></td></tr></table></figure><p>2.启动服务</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">nohup etcd --listen-client-urls http:<span class="hljs-comment">//0.0.0.0:2379 --advertise-client-urls http://0.0.0.0:2379 &gt; /dev/null 2&gt;&amp;1 &amp;</span><br></code></pre></td></tr></table></figure><p>3.编写代码测试</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br>clientv3 <span class="hljs-string">&quot;go.etcd.io/etcd/client/v3&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">const</span> timeout = <span class="hljs-number">5</span> * time.Second<br><br><span class="hljs-keyword">var</span> cli *clientv3.Client<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>initialize()<br>Put(<span class="hljs-string">&quot;mykey&quot;</span>, <span class="hljs-string">&quot;simple value &quot;</span>)<br>Get(<span class="hljs-string">&quot;mykey&quot;</span>)<br>Get(<span class="hljs-string">&quot;mk&quot;</span>)<br>Do()<br><span class="hljs-keyword">defer</span> cli.Close()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">initialize</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> err <span class="hljs-type">error</span><br>cli, err = clientv3.New(clientv3.Config&#123;<br>Endpoints:   []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;192.168.100.24:2379&quot;</span>&#125;,<br>DialTimeout: timeout,<br>&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;error : %v&quot;</span>, err)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Get</span><span class="hljs-params">(key <span class="hljs-type">string</span>)</span></span> (ret []<span class="hljs-type">byte</span>) &#123;<br>ctx, cancel := context.WithTimeout(context.Background(), timeout)<br>resp, err := cli.Get(ctx, key)<br>cancel()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;error : %v&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">for</span> _, ev := <span class="hljs-keyword">range</span> resp.Kvs &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%s : %s\n&quot;</span>, ev.Key, ev.Value)<br>ret = ev.Value<br><span class="hljs-keyword">break</span><br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Put</span><span class="hljs-params">(key, val <span class="hljs-type">string</span>)</span></span> &#123;<br>ctx, cancel := context.WithTimeout(context.Background(), timeout)<br>resp, err := cli.Put(ctx, key, val)<br>cancel()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;error : %v&quot;</span>, err)<br>&#125;<br>fmt.Println(resp)<br>&#125;<br><br><span class="hljs-comment">// Do 在创建任意操作时很有用</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Do</span><span class="hljs-params">()</span></span> &#123;<br>ops := []clientv3.Op&#123;<br>clientv3.OpPut(<span class="hljs-string">&quot;put-key&quot;</span>, <span class="hljs-string">&quot;123&quot;</span>),<br>clientv3.OpGet(<span class="hljs-string">&quot;put-key&quot;</span>),<br>clientv3.OpGet(<span class="hljs-string">&quot;put-key&quot;</span>),<br>clientv3.OpPut(<span class="hljs-string">&quot;put-key&quot;</span>, <span class="hljs-string">&quot;456&quot;</span>),<br>clientv3.OpPut(<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-string">&quot;bbbbbb&quot;</span>),<br>clientv3.OpGet(<span class="hljs-string">&quot;aaa&quot;</span>),<br>&#125;<br><span class="hljs-keyword">for</span> _, op := <span class="hljs-keyword">range</span> ops &#123;<br><span class="hljs-keyword">if</span> resp, err := cli.Do(context.TODO(), op); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>fmt.Println(resp.Get())<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h1><h2 id="Raft选举算法"><a href="#Raft选举算法" class="headerlink" title="Raft选举算法"></a>Raft选举算法</h2><p>Raft透过选举<strong>领袖</strong>（leader）的方式做共识算法。</p><h3 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h3><ul><li><p>节点类型：主节点（leader）、从节点（Follower）、候选者（candidate）正常情况下只会有一个leader，leader负责所有外部请求，如果不是leader的节点接收到请求会转给leader处理。</p></li><li><p>心跳：主节点会在固定时间内节点向其他节点发送消息，让从节点知道主节点正常，如果在一定时间内收不到消息，集群会进入选举状态。</p></li><li><p>任期：当集群leader节点宕机，需要进行选举，此时进入新的任期（term）。</p></li></ul><h3 id="复制状态机"><a href="#复制状态机" class="headerlink" title="复制状态机"></a>复制状态机</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2630542/1673325090459-fbe76dfe-20b4-4db9-af3d-de868a4ceac6.png#averageHue=%23d9d9c8&clientId=u4188c503-5e47-4&from=paste&height=332&id=u248e99b4&originHeight=664&originWidth=1076&originalType=binary&ratio=1&rotation=0&showTitle=false&size=116340&status=done&style=none&taskId=u595b9a75-571c-4c61-b340-d45815b9349&title=&width=538" alt="image.png"><br>在多个节点上相同的初始化状态，在按序执行相同的输入后，返回相同的结果</p><p>在Raft中，leader将客户端请求（command）封装到一个个log entry中，将这些log entries复制到所有follower节点，然后大家按相同顺序应用log entries中 command，根据复制状态机的理论，所有节点的结束状态肯定是一致的。</p><h3 id="请求选举RPC"><a href="#请求选举RPC" class="headerlink" title="请求选举RPC"></a>请求选举RPC</h3><p>Raft算法中服务器节点之间使用<strong>RPC</strong>进行通信，并且Raft中只有两种主要的RPC:</p><ul><li><strong>RequestVoteRPC（请求投票）</strong>：由candidate在选举期间发起。</li><li>**AppendEntriesRPC(追加条目)**：由leader发起，用来复制日志和提供一种心跳机制。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2630542/1673277446062-a2b70bd4-b1d6-4704-be08-2ae531a80777.png#averageHue=%23f3f3f2&clientId=ua9ef6e06-8b0d-4&from=paste&height=506&id=u1ea620b3&originHeight=1218&originWidth=1010&originalType=binary&ratio=1&rotation=0&showTitle=false&size=653039&status=done&style=none&taskId=uc16caebc-e479-4b82-9e91-299d7775dc2&title=&width=420" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2630542/1673277463482-93d32374-4950-4508-9616-f5553c68263d.png#averageHue=%23ebebeb&clientId=ua9ef6e06-8b0d-4&from=paste&height=531&id=uc36ea677&originHeight=1302&originWidth=1018&originalType=binary&ratio=1&rotation=0&showTitle=false&size=249828&status=done&style=none&taskId=u61fd5ae3-0872-42d0-a75a-51117bf8925&title=&width=415" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2630542/1673277506427-d0c02254-b63a-4768-937e-9621c5b2351f.png#averageHue=%23ededed&clientId=ua9ef6e06-8b0d-4&from=paste&height=321&id=ue53723fc&originHeight=776&originWidth=1014&originalType=binary&ratio=1&rotation=0&showTitle=false&size=147324&status=done&style=none&taskId=u4318da49-11b9-487a-a500-0e1db68c5ac&title=&width=420" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2630542/1673277575701-01d08a03-0253-4d6c-8bf3-6e347ecec985.png#averageHue=%23e8e8e8&clientId=ua9ef6e06-8b0d-4&from=paste&height=247&id=uc9b9f209&originHeight=1300&originWidth=2222&originalType=binary&ratio=1&rotation=270&showTitle=false&size=603260&status=done&style=none&taskId=ubb9f4817-4b48-4dad-b964-bc4ba8486aa&title=&width=422" alt="image.png"></p><h3 id="领导人选举"><a href="#领导人选举" class="headerlink" title="领导人选举"></a>领导人选举</h3><p>选举是由候选人发动的。当领袖的心跳超时的时候，追随者就会把自己的任期编号（term counter）加一、宣告竞选（将自己变成candidate）、投自己一票、并向其他服务器拉票。每个服务器在每个任期只会投一票，固定投给最早拉票的服务器。</p><p>在投票后可能会出现的三种情况</p><ol><li>当前节点获得的投票数过半，当前节点作为leader并向其他follower发送心跳包。</li><li>其他节点赢得选举，当前节点收到心跳后判断其任期号是否大于等于当前节点任期号，如果满足当前节点candidate从进入follower状态。</li><li>选举一段时间后没有获胜者（没有投票数过半的），每个候选节点将进入一个随机选举超时时间（150-300ms），进入下一局选举选举。</li></ol><p>Raft每个服务器的超时期限是随机的，这降低伺服务同时竞选的几率，也降低因两个竞选人得票都不过半而选举失败的几率</p><h3 id="日志复制"><a href="#日志复制" class="headerlink" title="日志复制"></a>日志复制</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2630542/1673278113373-1d8b394d-c0f1-447e-ac1a-4c4598376491.png#averageHue=%23dcefd0&clientId=u4188c503-5e47-4&from=paste&height=278&id=uc4b10723&originHeight=934&originWidth=1194&originalType=binary&ratio=1&rotation=0&showTitle=true&size=408265&status=done&style=none&taskId=ua841d160-0cc1-440a-b755-207c0ad00a8&title=%E4%B8%80%E4%B8%AA%E4%BB%BB%E6%9C%9F%E5%8F%B7%E7%94%A8%E4%B8%80%E7%A7%8D%E9%A2%9C%E8%89%B2%E8%A1%A8%E7%A4%BA&width=355" alt="一个任期号用一种颜色表示" title="一个任期号用一种颜色表示"><br>Leader 并行发送 AppendEntries RPC给 follower，让它们复制该条目。当该条目被走过半数的follower复制后，leader就可以在本地执行该指令并把结果返回客户端。我们把本地执行指令，也就是leader应用日志与状态机这一步，称作<strong>提交</strong>。</p><p>在日志复制的过程中可能会出现leader或者follower宕机或者延迟的情况，所以raft需要一系列的机制来支持日志的复制，保证日志的复制的顺序一致性</p><ol><li><p>follower宕机或者延迟响应：此时leader会重复的发送AppendEntries RPC给 follower，即使是leader已经响应了client。</p></li><li><p>follower宕机恢复：此时或做raft一致性检查，保证follower同步崩溃后缺失的日志</p><blockquote><p>raft一致性检查：leader在发往每个follower的AppendEntries RPC中会加入前一个日志的索引号和任期号，如果follower在它的日志中找不到前一个日志，那么它就会拒绝此日志，leader收到follower的拒绝后，会发送前一个日志条且，从而逐渐向前定位到follower第一个缺失的日志。</p></blockquote></li></ol><p>当然你可能说这种逐个定位的方式效率并不高，为何follower不直接返回最后的日志后给leader，然后leader直接查找返回其后面一个日志，这种方式是可行的，但是在实践中，认为这种优化是没有必要的，因为失败不经常发生并且也不可能有很多不一致的日志条目。</p><ol start="3"><li>leader宕机：此时leader可能已经向部分follower发送日志，但是leader还没有提交就已经宕机了，而新一轮选出来的leader并没有前者的日志，导致部分follower中的日志和和新leader日志不相同。在这种情况下 raft 会强制follower<strong>复制</strong>新leader的日志来拒绝，这就意味着follower的冲突日志被新leader日志覆盖。因为没有提交，因此没有违法外部一致性。对于follower而言,接收到了leader的日志,并不能立即提交,因为这时候还没有确认这个日志是否被复制到了大多数节点，所以follower只能是等待下一个AppendEntries RPC：心跳 或者 新日志，才能完成提交。</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2630542/1673320908521-68ff7fee-c17b-4634-9039-586f65b03207.png#averageHue=%23e5e2df&clientId=u4188c503-5e47-4&from=paste&height=376&id=u7e06c066&originHeight=752&originWidth=1124&originalType=binary&ratio=1&rotation=0&showTitle=false&size=101220&status=done&style=none&taskId=ua5594e54-b2cc-4924-ae18-f471bb96ef5&title=&width=562" alt="image.png"></p><p>注意：leader从来不会覆盖或者删除自己的日志条目  (Append-Only)</p><h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><blockquote><p>为了保证每一个状态机都按照相同的顺序去执行相同的命令，还存在很多边界问题，Raft还添加以下一些限制</p></blockquote><h4 id="Leader宕机处理：选举限制"><a href="#Leader宕机处理：选举限制" class="headerlink" title="Leader宕机处理：选举限制"></a>Leader宕机处理：选举限制</h4><p><strong>如果两份日志最后条目的任期号不同，那么任期号大的日志更“新”。 **<br>**如果两份日志最后条目的任期号相同，那么日志较长的那个更“新”。</strong><br><strong>选民只会投票给任期比自己大，最后一条日志比自己新( 任期大于 或者 等于时索引更大)的候选人。</strong></p><h4 id="Leader宕机处理：新leader是否提交之前任期内的日志条目"><a href="#Leader宕机处理：新leader是否提交之前任期内的日志条目" class="headerlink" title="Leader宕机处理：新leader是否提交之前任期内的日志条目"></a>Leader宕机处理：新leader是否提交之前任期内的日志条目</h4><blockquote><p>如果某个leader在提交某个日志条目之前崩溃了，以后的leader会试图完成该日志条目的<strong>复制</strong>。</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2630542/1673326828205-983ef3ba-5570-4ea5-864c-4c480620d9c6.png#averageHue=%23e5e2df&clientId=u4188c503-5e47-4&from=paste&height=290&id=UJVly&originHeight=580&originWidth=1276&originalType=binary&ratio=1&rotation=0&showTitle=false&size=105441&status=done&style=none&taskId=ucdad6c35-e6d6-45af-ad94-b12c2492a73&title=&width=638" alt="image.png"><br>leader为何无法使用旧任期的日志条目确定提交的时间序列</p><ul><li>（a）S1是leader；部分节点复制索引处的日志条目（复制到s2并提交了）。</li><li>（b）S1发生宕机；S5以选票当选第3任期领导人从S3、S4和其自身获取选票。产生日志但还未来得及发送就宕机了。</li><li>（c）S5发生宕机；此时S5未发生任何同步日志，S1重新启动，当选领导人继续复制日志。此时，任期2的日志条目已在大多数服务器上复制，但不是提交。</li><li>（d）S1发生宕机；S5可以当选为领导人（由S2、S3和S4投票因为S5任期号最高）并用它自己从第3任期开始发送日志进行同步。此时因为之前S1同步日志2时未提交就已经宕机了，即使是大多数服务器上已经复制日志，S5在同步日志过程中会把日志2覆盖掉。就造成原本应该被提交的日志被覆盖了。</li><li>（e）为了解决以上问题，增加了一个额外的限制：要求Leader在当前任期至少有一条日志被提交，即被超过半数的节点写盘。如（e）S1作为Leader．在崩溃之前，将3号位置的日志（任期号为4） 在大多数节点上复制了一条日志条目（指的是条目3，term 4），那么即使这时S1宕机了，S5也不可能赢得选举—因为S2和S3最新日志条目的任期号为4，比S5的3要大，S3无法获得超过半数的选。“无法赢得选举，这就意味着2号位置的日志条目不会被覆写。</li></ul><p><strong>所以新上任的领导者在接受客户端写入命令之前 需要提交一个no-op(空命令)，携带自己任期号的日志复制到大多数集群节点上才能真正的保证选举限制的成立。</strong></p><h4 id="Follower和Candidate宕机处理"><a href="#Follower和Candidate宕机处理" class="headerlink" title="Follower和Candidate宕机处理"></a>Follower和Candidate宕机处理</h4><p>若follower和candidate宕机，此时leader方式的日志或者请求投票的RPC都会失败，但leader的日志通过无限重试的方式发送，如果该节点重新启动了就可接收到。</p><h4 id="时间与可用性限制"><a href="#时间与可用性限制" class="headerlink" title="时间与可用性限制"></a>时间与可用性限制</h4><p>广播时间 broadcastTime ≪ 选举超时时间 electionTimeout ≪ 平均故障时间 MTBF</p><h3 id="图文演示"><a href="#图文演示" class="headerlink" title="图文演示"></a>图文演示</h3><p><a href="https://raft.github.io/raftscope-replay/">https://raft.github.io/raftscope-replay/</a></p><h3 id="集群成员变更"><a href="#集群成员变更" class="headerlink" title="集群成员变更"></a>集群成员变更</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2630542/1673346585666-17dc53fd-62f8-41b1-aa80-ee64f3a2bd92.png#averageHue=%23f7f7f7&clientId=u25f46783-0d1c-4&from=paste&height=347&id=u40d9b32e&originHeight=694&originWidth=1296&originalType=binary&ratio=1&rotation=0&showTitle=true&size=66740&status=done&style=none&taskId=u72f5b022-97d4-4df1-a78a-c32fca7ae41&title=%E4%B8%89%E8%8A%82%E7%82%B9%E6%89%A9%E5%AE%B9%E4%B8%BA%E4%BA%94%E8%8A%82%E7%82%B9%E5%87%BA%E7%8E%B0%E7%9A%84%E8%84%91%E8%A3%82%E9%97%AE%E9%A2%98&width=648" alt="三节点扩容为五节点出现的脑裂问题" title="三节点扩容为五节点出现的脑裂问题"><br>在新增集群节点的过程中可能会出现新老配置共存的情况，导致选举出多个leader，出现了脑裂问题。</p><p>Raft的解决方法是使用一种二阶段的方法</p><ul><li>集群先切换到一个过渡的配置，称之为联合一致(joint consensus) 。(这样我们只需要关注怎样避免在联合一致状态发生脑裂问题就可以了。)</li><li>而配置信息作为一个日志体包装为一个普通的AppendEntries RPC,发送给所有的follower。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//追加日志RPC Request</span><br><span class="hljs-keyword">type</span> AppendEntriesRequest <span class="hljs-keyword">struct</span> &#123;<br>    term<span class="hljs-type">int</span><span class="hljs-comment">//自己当前的任期号</span><br>    leaderld <span class="hljs-type">int</span><span class="hljs-comment">//leader(也就是自己)的ID,告诉follower自己是谁</span><br>    prevLogIndex <span class="hljs-type">int</span> <span class="hljs-comment">//前一个日志的日志号用于进行一致性检查</span><br>    prevLogTerm <span class="hljs-type">int</span> <span class="hljs-comment">//前一个日志的任期号用于进行一致性检查,只有这两个都与follower中的相同,follower才会认为日志是一致的</span><br>    <span class="hljs-comment">//如果只有日志号相同,这可能就是上图中f的情况,依旧需要向前回溯</span><br>    entries []<span class="hljs-type">byte</span><span class="hljs-comment">//当前日志体,也就是命令内容</span><br>    leaderCommit <span class="hljs-type">int</span><span class="hljs-comment">//leader的已提交日志号</span><br>&#125;<br></code></pre></td></tr></table></figure>第一阶段，leader发起<img src="https://cdn.nlark.com/yuque/__latex/7b0d86ec1d63c936c63cfb657308c78c.svg#card=math&code=C_%7Bold%2Cnew%7D&id=Cw8Mj">,使整个集群进入联合一致状态。这时，所有RPC都要在新旧两个配置中都达到大多数才算成功。这个限制是联合一致能够避免脑裂问题的核心点。<br>第二阶段，leader发起<img src="https://cdn.nlark.com/yuque/__latex/4d5184f44df9eb3aefac92955a593778.svg#card=math&code=C_%7Bnew%7D&id=Bez3z">，作使整个集群进入新配置状态。这时，所有RPC只要在新配置下能达到大多数就算成功。</li></ul><p>一旦某个服务器将该新配置日志条目增加到自己的日志中，他就会用该配置来做出未来所有的决策（服务器总是使用它日志中最新的配置，无论该配置日志是否已经被提交）。</p><p>这意味着Leader不用等待 <img src="https://cdn.nlark.com/yuque/__latex/7b0d86ec1d63c936c63cfb657308c78c.svg#card=math&code=C_%7Bold%2Cnew%7D&id=VzvfU">和<img src="https://cdn.nlark.com/yuque/__latex/4d5184f44df9eb3aefac92955a593778.svg#card=math&code=C_%7Bnew%7D&id=HuaUz"> 返回，就会直接使用其中的新规则来作出决策。</p><p>我们假设leader可以在集群成员变更任何时候宕机，大概有以下几种可能：</p><ol><li>leader在 <img src="https://cdn.nlark.com/yuque/__latex/7b0d86ec1d63c936c63cfb657308c78c.svg#card=math&code=C_%7Bold%2Cnew%7D&id=SikFB"> 未提交时宕机</li><li>leader在<img src="https://cdn.nlark.com/yuque/__latex/7b0d86ec1d63c936c63cfb657308c78c.svg#card=math&code=C_%7Bold%2Cnew%7D&id=ikhhL">已提交但 <img src="https://cdn.nlark.com/yuque/__latex/4d5184f44df9eb3aefac92955a593778.svg#card=math&code=C_%7Bnew%7D&id=w0DWH">未发起时宕机</li><li>leader在<img src="https://cdn.nlark.com/yuque/__latex/f3873884455c4f4df0947348eb5e32b1.svg#card=math&code=%20C_%7Bnew%7D&id=Swo22">已发起时宕机</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2630542/1673346751838-24ec6b84-533d-4dba-9907-ab84de2fe121.png#averageHue=%23f2f2f2&clientId=u25f46783-0d1c-4&from=paste&height=310&id=u5312767f&originHeight=620&originWidth=1208&originalType=binary&ratio=1&rotation=0&showTitle=false&size=83329&status=done&style=none&taskId=uce6fee87-e84e-4a6b-937b-66e6339f556&title=&width=604" alt="image.png"></p><h3 id="日志压缩"><a href="#日志压缩" class="headerlink" title="日志压缩"></a>日志压缩</h3><h2 id="Etcd-Raft-源码分析"><a href="#Etcd-Raft-源码分析" class="headerlink" title="Etcd Raft 源码分析"></a>Etcd Raft 源码分析</h2><p><a href="https://github.com/etcd-io/etcd/blob/108cd9abaa947bf3e6f606ed57715ee26ed57087/server/etcdserver/raft.go">https://github.com/etcd-io/etcd/blob/108cd9abaa947bf3e6f606ed57715ee26ed57087/server/etcdserver/raft.go</a></p><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><ul><li><a href="https://github.com/etcd-io/etcd/tree/master/etcdctl">etcdctl</a> - etcd命令行工具</li><li><a href="https://npmjs.org/package/etcd-dump">etcd-dump</a> - etcd存储和恢复工具</li><li><a href="https://github.com/xetorthio/etcd-fs">etcd-fs</a> - etcd 的 FUSE 文件系统 </li><li><a href="https://github.com/rekby/etcddir">etcddir</a> - 实时同步etcd和本地目录。使用windows和linux。</li><li><a href="https://github.com/henszey/etcd-browser">etcd-browser</a> - 基于web的键/值编辑器，用于使用AngularJS的etcd</li><li><a href="https://github.com/datawisesystems/etcd-lock">etcd-lock</a> - 主选择和使用etcd的分布式r/w锁实现-支持v2</li><li><a href="https://github.com/matishsiao/etcd-console">etcd-console</a> - 使用PHP的etcd的web基密钥/值编辑器</li><li><a href="https://github.com/nikfoundas/etcd-viewer">etcd-viewer</a> - 用Java编写的etcd键值存储编辑器/查看器</li><li><a href="https://github.com/mickep76/etcdtool">etcdtool</a> - 将etcd目录导出/导入/编辑为JSON/YAML/TOML，并使用JSON模式验证目录</li><li><a href="https://github.com/sinsharat/etcdloadtest">etcdloadtest</a> - etcd 3.0及以上版本的命令行负载测试客户端。</li><li><a href="https://github.com/ringtail/lucas">lucas</a> - kubernetes etcd3.0+集群的基于web的键值查看器。</li><li><a href="https://etcdmanager.io/">etcd-manager</a> - 一个现代、高效、多平台和免费etcd 3.x GUI和客户端工具。适用于Windows、Linux和Mac。</li><li><a href="https://github.com/gardener/etcd-backup-restore">etcd-backup-restore</a> - 用于定期和增量备份和恢复etcd的实用程序。</li><li><a href="https://github.com/kubernetes-sigs/etcdadm">etcdadm</a> - 用于操作etcd集群的命令行工具。</li></ul><h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><ol><li><p><a href="https://etcd.io/docs/v3.5/tutorials/">https://etcd.io/docs/v3.5/tutorials/</a></p></li><li><p><a href="https://etcd.io/">https://etcd.io/</a></p></li><li><p><a href="https://github.com/etcd-io/etcd">https://github.com/etcd-io/etcd</a></p></li><li><p><a href="https://www.yuque.com/attachments/yuque/0/2023/pdf/2630542/1673237030542-1f1af6fb-f469-43d2-8282-4a0ed911f68c.pdf?_lake_card=%7B%22src%22:%22https://www.yuque.com/attachments/yuque/0/2023/pdf/2630542/1673237030542-1f1af6fb-f469-43d2-8282-4a0ed911f68c.pdf%22,%22name%22:%22raft.pdf%22,%22size%22:567533,%22ext%22:%22pdf%22,%22source%22:%22%22,%22status%22:%22done%22,%22download%22:true,%22type%22:%22application/pdf%22,%22mode%22:%22title%22,%22taskId%22:%22u4bd76558-097e-4e7b-b407-dfef246299f%22,%22taskType%22:%22upload%22,%22__spacing%22:%22both%22,%22id%22:%22u5c34e42e%22,%22margin%22:%7B%22top%22:true,%22bottom%22:true%7D,%22card%22:%22file%22%7D">raft.pdf</a></p></li><li><p><a href="https://www.yuque.com/attachments/yuque/0/2023/pdf/2630542/1673252913015-d525c19d-2b7e-4784-9773-22958c6d693c.pdf?_lake_card=%7B%22src%22:%22https://www.yuque.com/attachments/yuque/0/2023/pdf/2630542/1673252913015-d525c19d-2b7e-4784-9773-22958c6d693c.pdf%22,%22name%22:%22buildstuff2015.pdf%22,%22size%22:694744,%22ext%22:%22pdf%22,%22source%22:%22%22,%22status%22:%22done%22,%22download%22:true,%22type%22:%22application/pdf%22,%22mode%22:%22title%22,%22taskId%22:%22ua72e0a69-0155-4d4b-bc2a-c83ded1b47d%22,%22taskType%22:%22upload%22,%22__spacing%22:%22both%22,%22id%22:%22u5d0c4b4b%22,%22margin%22:%7B%22top%22:true,%22bottom%22:true%7D,%22card%22:%22file%22%7D">buildstuff2015.pdf</a></p></li><li><p><a href="https://raft.github.io/">https://raft.github.io/</a></p></li><li><p><a href="https://raft.github.io/raftscope-replay/">https://raft.github.io/raftscope-replay/</a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>中间件篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Golang篇-pprof性能调优工具</title>
    <link href="/2022/12/15/yuque/gb4k14/"/>
    <url>/2022/12/15/yuque/gb4k14/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1671631521337-10e6faab-9a03-4fdd-af45-6104b15a0b3d.png#averageHue=%23f8f8f7&clientId=ufb6a6985-60b0-4&from=paste&height=384&id=u73ebeb64&originHeight=768&originWidth=1638&originalType=binary&ratio=1&rotation=0&showTitle=false&size=221500&status=done&style=none&taskId=u18056f5f-119f-4a03-a265-7545c7161ad&title=&width=819" alt="image.png"></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>pprof是一种可视化和分析数据的工具，可以生成类似火焰图、堆栈图，内存分析图等。</p><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><h2 id="配置导出数据"><a href="#配置导出数据" class="headerlink" title="配置导出数据"></a>配置导出数据</h2><ul><li><p>导入依赖</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-string">&quot;net/http&quot;</span><br>_ <span class="hljs-string">&quot;net/http/pprof&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>开启协程</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>runtime.SetBlockProfileRate(<span class="hljs-number">1</span>)     <span class="hljs-comment">// 开启对阻塞操作的跟踪，block</span><br>runtime.SetMutexProfileFraction(<span class="hljs-number">1</span>) <span class="hljs-comment">// 开启对锁调用的跟踪，mutex</span><br>log.Println(http.ListenAndServe(<span class="hljs-string">&quot;:6060&quot;</span>, <span class="hljs-literal">nil</span>))<br>&#125;()<br></code></pre></td></tr></table></figure></li></ul><h2 id="导出数据"><a href="#导出数据" class="headerlink" title="导出数据"></a>导出数据</h2><blockquote><p>基于上面的配置后我们可以通过两种方式访问</p></blockquote><p>1.通过 <a href="http://127.0.0.1:6060/debug/pprof/">http://127.0.0.1:6060/debug/pprof/</a> 访问</p><blockquote><p>我们可以通过访问web的方式去查看对应的数据，但其实可读性并不是很好</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1671208671833-0c8810c0-961f-4fd9-8389-b3b32f850021.png#averageHue=%23f1f1f1&clientId=u1346c173-3f26-4&from=paste&height=733&id=tsqGu&originHeight=1466&originWidth=3012&originalType=binary&ratio=1&rotation=0&showTitle=false&size=397462&status=done&style=none&taskId=u098de179-749c-4fec-a8c0-75b492bec56&title=&width=1506" alt="image.png"><br>相关信息详解</p><table><thead><tr><th><strong>Profile项</strong></th><th><strong>说明</strong></th><th><strong>详情</strong></th></tr></thead><tbody><tr><td>allocs</td><td><strong>内存分配</strong></td><td>从程序启动开始，分配的全部内存</td></tr><tr><td>block</td><td><strong>阻塞</strong></td><td>导致同步原语阻塞的堆栈跟踪</td></tr><tr><td>cmdline</td><td>命令行调用</td><td>当前程序的命令行调用</td></tr><tr><td>goroutine</td><td>gorouting</td><td>所有当前 goroutine 的堆栈跟踪</td></tr><tr><td>heap</td><td><strong>堆</strong></td><td>活动对象的内存分配抽样。您可以指定 gc 参数以在获取堆样本之前运行 GC</td></tr><tr><td>mutex</td><td><strong>互斥锁</strong></td><td>争用互斥锁持有者的堆栈跟踪</td></tr><tr><td>profile</td><td><strong>CPU分析</strong></td><td>CPU 使用率分析。可以在url中，通过seconds指定持续时间（默认30s）。获取配置文件后，使用 go tool pprof 命令分析CPU使用情况</td></tr><tr><td>threadcreate</td><td>线程创建</td><td>导致创建新操作系统线程的堆栈跟踪</td></tr><tr><td>trace</td><td>追踪</td><td>当前程序的执行轨迹。可以在url中，通过seconds指定持续时间（默认30s）。获取跟踪文件后，使用 go tool trace 命令调查跟踪</td></tr></tbody></table><p>2.直接通过命令进行交互（需要安装graphviz）</p><blockquote><p>在安装过程中出现依赖安装失败的情况需先独立安装依赖</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">brew install graphviz<br></code></pre></td></tr></table></figure><p>导出数据默认30s</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">go</span> tool pprof http:<span class="hljs-comment">//127.0.0.1:6060/debug/pprof/xxx</span><br></code></pre></td></tr></table></figure><p>example</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">go</span> tool pprof http:<span class="hljs-comment">//127.0.0.1:6060/debug/pprof/allocs</span><br></code></pre></td></tr></table></figure><p>进行命令访问后我们可以查看相关帮助文档，键入<code>help</code>查看可以进行哪些操作</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs go">(pprof) help<br>  Commands:<br>    callgrind        Outputs a graph in callgrind format<br>    comments         Output all profile comments<br>    disasm           Output assembly listings annotated with samples<br>    dot              Outputs a graph in DOT format<br>    eog              Visualize graph through eog<br>    evince           Visualize graph through evince<br>    gif              Outputs a graph image in GIF format<br>    gv               Visualize graph through gv<br>    kcachegrind      Visualize report in KCachegrind<br>    list             Output annotated source <span class="hljs-keyword">for</span> functions matching regexp<br>    pdf              Outputs a graph in PDF format<br>    peek             Output callers/callees of functions matching regexp<br>    png              Outputs a graph image in PNG format<br>    proto            Outputs the profile in compressed protobuf format<br>    ps               Outputs a graph in PS format<br>    raw              Outputs a text representation of the raw profile<br>    svg              Outputs a graph in SVG format<br>    tags             Outputs all tags in the profile<br>    text             Outputs top entries in text form<br>    top              Outputs top entries in text form<br>    topproto         Outputs top entries in compressed protobuf format<br>    traces           Outputs all profile samples in text form<br>    tree             Outputs a text rendering of call graph<br>    web              Visualize graph through web browser<br>    weblist          Display annotated source in a web browser<br>    o/options        List options and their current values<br>    q/quit/exit/^D   Exit pprof<br><br>  Options:<br>    call_tree        Create a context-sensitive call tree<br>    compact_labels   Show minimal headers<br>    divide_by        Ratio to divide all samples before visualization<br>    drop_negative    Ignore negative differences<br>    edgefraction     Hide edges below &lt;f&gt;*total<br>    focus            Restricts to samples going through a node matching regexp<br>    hide             Skips nodes matching regexp<br>    ignore           Skips paths going through any nodes matching regexp<br>    intel_syntax     Show assembly in Intel syntax<br>    mean             Average sample value over first value (count)<br>    nodecount        Max number of nodes to show<br>    nodefraction     Hide nodes below &lt;f&gt;*total<br>    noinlines        Ignore inlines.<br>    normalize        Scales profile based on the base profile.<br>    output           Output filename <span class="hljs-keyword">for</span> file-based outputs<br>    prune_from       Drops any functions below the matched frame.<br>    relative_percentages Show percentages relative to focused subgraph<br>    sample_index     Sample value to report (<span class="hljs-number">0</span>-based index or name)<br>    show             Only show nodes matching regexp<br>    show_from        Drops functions above the highest matched frame.<br>    source_path      Search path <span class="hljs-keyword">for</span> source files<br>    tagfocus         Restricts to samples with tags in <span class="hljs-keyword">range</span> or matched by regexp<br>    taghide          Skip tags matching this regexp<br>    tagignore        Discard samples with tags in <span class="hljs-keyword">range</span> or matched by regexp<br>    tagleaf          Adds pseudo stack frames <span class="hljs-keyword">for</span> labels key/value pairs at the callstack leaf.<br>    tagroot          Adds pseudo stack frames <span class="hljs-keyword">for</span> labels key/value pairs at the callstack root.<br>    tagshow          Only consider tags matching this regexp<br>    trim             Honor nodefraction/edgefraction/nodecount defaults<br>    trim_path        Path to trim from source paths before search<br>    unit             Measurement units to display<br><br>  Option groups (only set one per group):<br>    granularity      <br>      functions        Aggregate at the function level.<br>      filefunctions    Aggregate at the function level.<br>      files            Aggregate at the file level.<br>      lines            Aggregate at the source code line level.<br>      addresses        Aggregate at the address level.<br>    sort             <br>      cum              Sort entries based on cumulative weight<br>      flat             Sort entries based on own weight<br>  :   Clear focus/ignore/hide/tagfocus/tagignore<br><br>  <span class="hljs-keyword">type</span> <span class="hljs-string">&quot;help &lt;cmd|option&gt;&quot;</span> <span class="hljs-keyword">for</span> more information<br></code></pre></td></tr></table></figure><h2 id="Profile项详解"><a href="#Profile项详解" class="headerlink" title="Profile项详解"></a>Profile项详解</h2><h3 id="allocs"><a href="#allocs" class="headerlink" title="allocs"></a>allocs</h3><blockquote><p><strong>内存分配</strong>从程序启动开始，分配的全部内存</p></blockquote><p>1.进入控制台</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">go</span> tool pprof http:<span class="hljs-comment">//127.0.0.1:6060/debug/pprof/allocs</span><br></code></pre></td></tr></table></figure><p>2.先查看帮助文档</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs go">Type: alloc_space<br>Time: Dec <span class="hljs-number">18</span>, <span class="hljs-number">2022</span> at <span class="hljs-number">2</span>:<span class="hljs-number">01</span>pm (CST)<br>Entering interactive mode (<span class="hljs-keyword">type</span> <span class="hljs-string">&quot;help&quot;</span> <span class="hljs-keyword">for</span> commands, <span class="hljs-string">&quot;o&quot;</span> <span class="hljs-keyword">for</span> options)<br>(pprof) help<br>  Commands:<br>    callgrind        Outputs a graph in callgrind format<br>    comments         Output all profile comments<br>    disasm           Output assembly listings annotated with samples<br>    dot              Outputs a graph in DOT format<br>    eog              Visualize graph through eog<br>    evince           Visualize graph through evince<br>    gif              Outputs a graph image in GIF format<br>    gv               Visualize graph through gv<br>    kcachegrind      Visualize report in KCachegrind<br>    list             Output annotated source <span class="hljs-keyword">for</span> functions matching regexp<br>    pdf              Outputs a graph in PDF format<br>    peek             Output callers/callees of functions matching regexp<br>    png              Outputs a graph image in PNG format<br>    proto            Outputs the profile in compressed protobuf format<br>    ps               Outputs a graph in PS format<br>    raw              Outputs a text representation of the raw profile<br>    svg              Outputs a graph in SVG format<br>    tags             Outputs all tags in the profile<br>    text             Outputs top entries in text form<br>    top              Outputs top entries in text form<br>    topproto         Outputs top entries in compressed protobuf format<br>    traces           Outputs all profile samples in text form<br>    tree             Outputs a text rendering of call graph<br>    web              Visualize graph through web browser<br>    weblist          Display annotated source in a web browser<br>    o/options        List options and their current values<br>    q/quit/exit/^D   Exit pprof<br><br>  Options:<br>    call_tree        Create a context-sensitive call tree<br>    compact_labels   Show minimal headers<br>    divide_by        Ratio to divide all samples before visualization<br>    drop_negative    Ignore negative differences<br>    edgefraction     Hide edges below &lt;f&gt;*total<br>    focus            Restricts to samples going through a node matching regexp<br>    hide             Skips nodes matching regexp<br>    ignore           Skips paths going through any nodes matching regexp<br>    intel_syntax     Show assembly in Intel syntax<br>    mean             Average sample value over first value (count)<br>    nodecount        Max number of nodes to show<br>    nodefraction     Hide nodes below &lt;f&gt;*total<br>    noinlines        Ignore inlines.<br>    normalize        Scales profile based on the base profile.<br>    output           Output filename <span class="hljs-keyword">for</span> file-based outputs<br>    prune_from       Drops any functions below the matched frame.<br>    relative_percentages Show percentages relative to focused subgraph<br>    sample_index     Sample value to report (<span class="hljs-number">0</span>-based index or name)<br>    show             Only show nodes matching regexp<br>    show_from        Drops functions above the highest matched frame.<br>    source_path      Search path <span class="hljs-keyword">for</span> source files<br>    tagfocus         Restricts to samples with tags in <span class="hljs-keyword">range</span> or matched by regexp<br>    taghide          Skip tags matching this regexp<br>    tagignore        Discard samples with tags in <span class="hljs-keyword">range</span> or matched by regexp<br>    tagleaf          Adds pseudo stack frames <span class="hljs-keyword">for</span> labels key/value pairs at the callstack leaf.<br>    tagroot          Adds pseudo stack frames <span class="hljs-keyword">for</span> labels key/value pairs at the callstack root.<br>    tagshow          Only consider tags matching this regexp<br>    trim             Honor nodefraction/edgefraction/nodecount defaults<br>    trim_path        Path to trim from source paths before search<br>    unit             Measurement units to display<br><br>  Option groups (only set one per group):<br>    granularity      <br>      functions        Aggregate at the function level.<br>      filefunctions    Aggregate at the function level.<br>      files            Aggregate at the file level.<br>      lines            Aggregate at the source code line level.<br>      addresses        Aggregate at the address level.<br>    sort             <br>      cum              Sort entries based on cumulative weight<br>      flat             Sort entries based on own weight<br>  :   Clear focus/ignore/hide/tagfocus/tagignore<br><br>  <span class="hljs-keyword">type</span> <span class="hljs-string">&quot;help &lt;cmd|option&gt;&quot;</span> <span class="hljs-keyword">for</span> more information<br></code></pre></td></tr></table></figure><p>3.以gif方式进行导出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">gif<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/gif/2630542/1671343686218-574382c4-36f1-449d-b3bb-e52ff20f2e67.gif#averageHue=%23fafaf9&clientId=u488f3e47-9652-4&from=ui&id=WNSxM&originHeight=1661&originWidth=3656&originalType=binary&ratio=1&rotation=0&showTitle=false&size=208707&status=done&style=none&taskId=u0393061a-fcbc-4b97-ae38-0b8658ba3a2&title=" alt="profile001.gif"></p><h3 id="block"><a href="#block" class="headerlink" title="block"></a>block</h3><blockquote><p>阻塞，导致同步原语阻塞的堆栈跟踪</p></blockquote><p>1.以http服务器web页面展示数据</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">go</span> tool pprof -http=:<span class="hljs-number">8000</span> http:<span class="hljs-comment">//127.0.0.1:6060/debug/pprof/block</span><br></code></pre></td></tr></table></figure><p>2.进入web查看,可以选择下拉框查看不同项目的数据，占用情况、连线图、火焰图、窥探数据、结合源码分析、<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1671619964077-c6282139-cf25-40c2-8062-5a944e1c6c8b.png#averageHue=%23e8e3de&clientId=u2db1c9bb-eaf5-4&from=paste&height=903&id=eVSwg&originHeight=1806&originWidth=3020&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1558696&status=done&style=none&taskId=u27ad9aa6-1f54-4f8d-a890-825ac435098&title=&width=1510" alt="image.png"><br>3.选择下拉菜单 top 查看占用情况<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1671620171420-593de98f-f463-4794-bd80-e2c5023b0715.png#averageHue=%23efefef&clientId=u2db1c9bb-eaf5-4&from=paste&height=903&id=QIF2L&originHeight=1806&originWidth=3018&originalType=binary&ratio=1&rotation=0&showTitle=false&size=603186&status=done&style=none&taskId=ub9435ecb-695e-4e5c-a4b2-59acd578d83&title=&width=1509" alt="image.png"><br>4.查看火焰图<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1671620381336-214afceb-bb54-4803-8719-74d2488a151c.png#averageHue=%23e5c2a3&clientId=u2db1c9bb-eaf5-4&from=paste&height=897&id=X4rNM&originHeight=1794&originWidth=3014&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1179938&status=done&style=none&taskId=u5f04b01d-38c3-4d5d-b0e9-4803dda6480&title=&width=1507" alt="image.png"><br>5.窥探耗时<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1671626287057-ba2ec2b9-0e7f-473e-8ae2-1ed4ed6c63aa.png#averageHue=%23e7e7e6&clientId=u2db1c9bb-eaf5-4&from=paste&height=460&id=OM6hx&originHeight=920&originWidth=3018&originalType=binary&ratio=1&rotation=0&showTitle=false&size=997715&status=done&style=none&taskId=u40da2ce6-3a82-4447-b366-ef57f31037d&title=&width=1509" alt="image.png"><br>6.结合源码进行分析<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1671626354764-edbcb99d-e5d6-4b75-9962-3c2ddd67e1c7.png#averageHue=%23f4f4f3&clientId=u2db1c9bb-eaf5-4&from=paste&height=898&id=mDuIR&originHeight=1796&originWidth=3020&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1376002&status=done&style=none&taskId=u58a2772a-8607-4bfd-b493-a32547e1b05&title=&width=1510" alt="image.png"></p><h3 id="cmdline"><a href="#cmdline" class="headerlink" title="cmdline"></a>cmdline</h3><blockquote><p>命令行调用   当前程序的命令行调用</p></blockquote><h3 id="goroutine"><a href="#goroutine" class="headerlink" title="goroutine"></a>goroutine</h3><blockquote><p>gorouting   所有当前 goroutine 的堆栈跟踪</p></blockquote><h3 id="heap"><a href="#heap" class="headerlink" title="heap"></a>heap</h3><blockquote><p>堆   活动对象的内存分配抽样。您可以指定 gc 参数以在获取堆样本之前运行 GC</p></blockquote><p>1.同上操作开启web可视化界面</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">go</span> tool pprof -http=:<span class="hljs-number">8000</span> http:<span class="hljs-comment">//127.0.0.1:6060/debug/pprof/heap</span><br></code></pre></td></tr></table></figure><p>2.同样包含各种选项来提供我们查看<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1671626749721-a7a815da-6a7a-4b76-b276-3fe7914d05df.png#averageHue=%23f8f7f7&clientId=u2db1c9bb-eaf5-4&from=paste&height=832&id=PWNjd&originHeight=1664&originWidth=3014&originalType=binary&ratio=1&rotation=0&showTitle=false&size=548940&status=done&style=none&taskId=u832fe3a4-47e9-4a8f-9a14-3be2a04dc0c&title=&width=1507" alt="image.png"></p><h3 id="mutex"><a href="#mutex" class="headerlink" title="mutex"></a>mutex</h3><blockquote><p>互斥锁 争用互斥锁持有者的堆栈跟踪</p></blockquote><h3 id="profile"><a href="#profile" class="headerlink" title="profile"></a>profile</h3><blockquote><p>CPU分析   CPU 使用率分析。可以在url中，通过seconds指定持续时间（默认30s）。获取配置文件后，使用 go tool pprof 命令分析CPU使用情况</p></blockquote><h3 id="threadcreate"><a href="#threadcreate" class="headerlink" title="threadcreate"></a>threadcreate</h3><blockquote><p>线程创建    导致创建新操作系统线程的堆栈跟踪</p></blockquote><h3 id="trace"><a href="#trace" class="headerlink" title="trace"></a>trace</h3><blockquote><p>追踪  当前程序的执行轨迹。可以在url中，通过seconds指定持续时间（默认30s）。获取跟踪文件后，使用 go tool trace 命令调查跟踪</p></blockquote><h2 id="帮助文档"><a href="#帮助文档" class="headerlink" title="帮助文档"></a>帮助文档</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">go</span> tool pprof<br>usage:<br><br>Produce output in the specified format.<br><br>   pprof &lt;format&gt; [options] [binary] &lt;source&gt; ...<br><br>Omit the format to get an interactive shell whose commands can be used<br>to generate various views of a profile<br><br>   pprof [options] [binary] &lt;source&gt; ...<br><br>Omit the format and provide the <span class="hljs-string">&quot;-http&quot;</span> flag to get an interactive web<br><span class="hljs-keyword">interface</span> at the specified host:port that can be used to navigate through<br>various views of a profile.<br><br>   pprof -http [host]:[port] [options] [binary] &lt;source&gt; ...<br><br>Details:<br>  Output formats (<span class="hljs-keyword">select</span> at most one):<br>    -callgrind       Outputs a graph in callgrind format<br>    -comments        Output all profile comments<br>    -disasm          Output assembly listings annotated with samples<br>    -dot             Outputs a graph in DOT format<br>    -eog             Visualize graph through eog<br>    -evince          Visualize graph through evince<br>    -gif             Outputs a graph image in GIF format<br>    -gv              Visualize graph through gv<br>    -kcachegrind     Visualize report in KCachegrind<br>    -list            Output annotated source <span class="hljs-keyword">for</span> functions matching regexp<br>    -pdf             Outputs a graph in PDF format<br>    -peek            Output callers/callees of functions matching regexp<br>    -png             Outputs a graph image in PNG format<br>    -proto           Outputs the profile in compressed protobuf format<br>    -ps              Outputs a graph in PS format<br>    -raw             Outputs a text representation of the raw profile<br>    -svg             Outputs a graph in SVG format<br>    -tags            Outputs all tags in the profile<br>    -text            Outputs top entries in text form<br>    -top             Outputs top entries in text form<br>    -topproto        Outputs top entries in compressed protobuf format<br>    -traces          Outputs all profile samples in text form<br>    -tree            Outputs a text rendering of call graph<br>    -web             Visualize graph through web browser<br>    -weblist         Display annotated source in a web browser<br><br>  Options:<br>    -call_tree       Create a context-sensitive call tree<br>    -compact_labels  Show minimal headers<br>    -divide_by       Ratio to divide all samples before visualization<br>    -drop_negative   Ignore negative differences<br>    -edgefraction    Hide edges below &lt;f&gt;*total<br>    -focus           Restricts to samples going through a node matching regexp<br>    -hide            Skips nodes matching regexp<br>    -ignore          Skips paths going through any nodes matching regexp<br>    -intel_syntax    Show assembly in Intel syntax<br>    -mean            Average sample value over first value (count)<br>    -nodecount       Max number of nodes to show<br>    -nodefraction    Hide nodes below &lt;f&gt;*total<br>    -noinlines       Ignore inlines.<br>    -normalize       Scales profile based on the base profile.<br>    -output          Output filename <span class="hljs-keyword">for</span> file-based outputs<br>    -prune_from      Drops any functions below the matched frame.<br>    -relative_percentages Show percentages relative to focused subgraph<br>    -sample_index    Sample value to report (<span class="hljs-number">0</span>-based index or name)<br>    -show            Only show nodes matching regexp<br>    -show_from       Drops functions above the highest matched frame.<br>    -source_path     Search path <span class="hljs-keyword">for</span> source files<br>    -tagfocus        Restricts to samples with tags in <span class="hljs-keyword">range</span> or matched by regexp<br>    -taghide         Skip tags matching this regexp<br>    -tagignore       Discard samples with tags in <span class="hljs-keyword">range</span> or matched by regexp<br>    -tagleaf         Adds pseudo stack frames <span class="hljs-keyword">for</span> labels key/value pairs at the callstack leaf.<br>    -tagroot         Adds pseudo stack frames <span class="hljs-keyword">for</span> labels key/value pairs at the callstack root.<br>    -tagshow         Only consider tags matching this regexp<br>    -trim            Honor nodefraction/edgefraction/nodecount defaults<br>    -trim_path       Path to trim from source paths before search<br>    -unit            Measurement units to display<br><br>  Option groups (only set one per group):<br>    granularity      <br>      -functions       Aggregate at the function level.<br>      -filefunctions   Aggregate at the function level.<br>      -files           Aggregate at the file level.<br>      -lines           Aggregate at the source code line level.<br>      -addresses       Aggregate at the address level.<br>    sort             <br>      -cum             Sort entries based on cumulative weight<br>      -flat            Sort entries based on own weight<br><br>  Source options:<br>    -seconds              Duration <span class="hljs-keyword">for</span> time-based profile collection<br>    -timeout              Timeout in seconds <span class="hljs-keyword">for</span> profile collection<br>    -buildid              Override build id <span class="hljs-keyword">for</span> main binary<br>    -add_comment          Free-form annotation to add to the profile<br>                          Displayed on some reports or with pprof -comments<br>    -diff_base source     Source of base profile <span class="hljs-keyword">for</span> comparison<br>    -base source          Source of base profile <span class="hljs-keyword">for</span> profile subtraction<br>    profile.pb.gz         Profile in compressed protobuf format<br>    legacy_profile        Profile in legacy pprof format<br>    http:<span class="hljs-comment">//host/profile   URL for profile handler to retrieve</span><br>    -symbolize=           Controls source of symbol information<br>      none                  Do not attempt symbolization<br>      local                 Examine only local binaries<br>      fastlocal             Only get function names from local binaries<br>      remote                Do not examine local binaries<br>      force                 Force re-symbolization<br>    Binary                  Local path or build id of binary <span class="hljs-keyword">for</span> symbolization<br>    -tls_cert             TLS client certificate file <span class="hljs-keyword">for</span> fetching profile and symbols<br>    -tls_key              TLS private key file <span class="hljs-keyword">for</span> fetching profile and symbols<br>    -tls_ca               TLS CA certs file <span class="hljs-keyword">for</span> fetching profile and symbols<br><br>  Misc options:<br>   -http              Provide web <span class="hljs-keyword">interface</span> at host:port.<br>                      Host is optional and <span class="hljs-string">&#x27;localhost&#x27;</span> by <span class="hljs-keyword">default</span>.<br>                      Port is optional and a randomly available port by <span class="hljs-keyword">default</span>.<br>   -no_browser        Skip opening a browser <span class="hljs-keyword">for</span> the interactive web UI.<br>   -tools             Search path <span class="hljs-keyword">for</span> object tools<br><br>  Legacy convenience options:<br>   -inuse_space           Same as -sample_index=inuse_space<br>   -inuse_objects         Same as -sample_index=inuse_objects<br>   -alloc_space           Same as -sample_index=alloc_space<br>   -alloc_objects         Same as -sample_index=alloc_objects<br>   -total_delay           Same as -sample_index=delay<br>   -contentions           Same as -sample_index=contentions<br>   -mean_delay            Same as -mean -sample_index=delay<br><br>  Environment Variables:<br>   PPROF_TMPDIR       Location <span class="hljs-keyword">for</span> saved profiles (<span class="hljs-keyword">default</span> $HOME/pprof)<br>   PPROF_TOOLS        Search path <span class="hljs-keyword">for</span> object-level tools<br>   PPROF_BINARY_PATH  Search path <span class="hljs-keyword">for</span> local binary files<br>                      <span class="hljs-keyword">default</span>: $HOME/pprof/binaries<br>                      searches $name, $path, $buildid/$name, $path/$buildid<br>   * On Windows, %USERPROFILE% is used instead of $HOME<br>no profile source specified<br><br></code></pre></td></tr></table></figure><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><p>todo</p><h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><p><a href="https://github.com/google/pprof">https://github.com/google/pprof</a><br><a href="http://www.graphviz.org/">http://www.graphviz.org/</a></p>]]></content>
    
    
    <categories>
      
      <category>性能调优</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pprof</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Golang-如何实现服务的优雅关停/更新</title>
    <link href="/2022/11/24/yuque/bsicekk0deonse56/"/>
    <url>/2022/11/24/yuque/bsicekk0deonse56/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1669274434097-f701a43e-c352-476d-9e58-b08be5c30e9d.png#averageHue=%23edcb9c&clientId=ua1043824-91b2-4&from=paste&height=445&id=u0a4be335&originHeight=890&originWidth=1576&originalType=binary&ratio=1&rotation=0&showTitle=false&size=84583&status=done&style=none&taskId=u6c0fa686-7b5e-4192-8c17-e418df66ebf&title=&width=788" alt="image.png"></p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>如果我们的应用在kubernetes上我们可以通过滚动更新，每次只更新一部分副本实现服务的不停机更新发布，那如果我们的项目不依托于kubernetes想要达到这种效果该如何实现呢 ？</p><p>我们想要达到的效果：</p><ol><li>不关闭现有连接（正在运行中的程序）</li><li>新的进程启动并替代旧进程</li><li>新的进程接管新的连接</li><li>连接要随时响应用户的请求，当用户仍在请求旧进程时要保持连接，新用户应请求新进程，不会出现拒绝请求的情况</li></ol><h1 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h1><p>什么是信号？</p><blockquote><p>在Linux中，信号其实就是软中断，用来通知进程发生了事件。进程之间可以通过调用kill库函数发送软中断信号。Linux内核也可能给进程发送信号，通知进程发生了某个事件（例如内存越界）。注意，信号只是用来通知某进程发生了什么事件，无法给进程传递任何数据。</p></blockquote><p>进程对信号的处理方法有三种：</p><ol><li>第一种方法是，忽略某个信号，对该信号不做任何处理，就像未发生过一样。</li><li>第二种是设置中断的处理函数，收到信号后，由该函数来处理。</li><li>第三种方法是，对该信号的处理采用系统的默认操作，大部分的信号的默认操作是终止进程。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go">kill -l<br> <span class="hljs-number">1</span>) SIGHUP       <span class="hljs-number">2</span>) SIGINT       <span class="hljs-number">3</span>) SIGQUIT      <span class="hljs-number">4</span>) SIGILL       <span class="hljs-number">5</span>) SIGTRAP<br> <span class="hljs-number">6</span>) SIGABRT      <span class="hljs-number">7</span>) SIGBUS       <span class="hljs-number">8</span>) SIGFPE       <span class="hljs-number">9</span>) SIGKILL     <span class="hljs-number">10</span>) SIGUSR1<br><span class="hljs-number">11</span>) SIGSEGV     <span class="hljs-number">12</span>) SIGUSR2     <span class="hljs-number">13</span>) SIGPIPE     <span class="hljs-number">14</span>) SIGALRM     <span class="hljs-number">15</span>) SIGTERM<br><span class="hljs-number">16</span>) SIGSTKFLT   <span class="hljs-number">17</span>) SIGCHLD     <span class="hljs-number">18</span>) SIGCONT     <span class="hljs-number">19</span>) SIGSTOP     <span class="hljs-number">20</span>) SIGTSTP<br><span class="hljs-number">21</span>) SIGTTIN     <span class="hljs-number">22</span>) SIGTTOU     <span class="hljs-number">23</span>) SIGURG      <span class="hljs-number">24</span>) SIGXCPU     <span class="hljs-number">25</span>) SIGXFSZ<br><span class="hljs-number">26</span>) SIGVTALRM   <span class="hljs-number">27</span>) SIGPROF     <span class="hljs-number">28</span>) SIGWINCH    <span class="hljs-number">29</span>) SIGIO       <span class="hljs-number">30</span>) SIGPWR<br><span class="hljs-number">31</span>) SIGSYS      <span class="hljs-number">34</span>) SIGRTMIN    <span class="hljs-number">35</span>) SIGRTMIN+<span class="hljs-number">1</span>  <span class="hljs-number">36</span>) SIGRTMIN+<span class="hljs-number">2</span>  <span class="hljs-number">37</span>) SIGRTMIN+<span class="hljs-number">3</span><br><span class="hljs-number">38</span>) SIGRTMIN+<span class="hljs-number">4</span>  <span class="hljs-number">39</span>) SIGRTMIN+<span class="hljs-number">5</span>  <span class="hljs-number">40</span>) SIGRTMIN+<span class="hljs-number">6</span>  <span class="hljs-number">41</span>) SIGRTMIN+<span class="hljs-number">7</span>  <span class="hljs-number">42</span>) SIGRTMIN+<span class="hljs-number">8</span><br><span class="hljs-number">43</span>) SIGRTMIN+<span class="hljs-number">9</span>  <span class="hljs-number">44</span>) SIGRTMIN+<span class="hljs-number">10</span> <span class="hljs-number">45</span>) SIGRTMIN+<span class="hljs-number">11</span> <span class="hljs-number">46</span>) SIGRTMIN+<span class="hljs-number">12</span> <span class="hljs-number">47</span>) SIGRTMIN+<span class="hljs-number">13</span><br><span class="hljs-number">48</span>) SIGRTMIN+<span class="hljs-number">14</span> <span class="hljs-number">49</span>) SIGRTMIN+<span class="hljs-number">15</span> <span class="hljs-number">50</span>) SIGRTMAX<span class="hljs-number">-14</span> <span class="hljs-number">51</span>) SIGRTMAX<span class="hljs-number">-13</span> <span class="hljs-number">52</span>) SIGRTMAX<span class="hljs-number">-12</span><br><span class="hljs-number">53</span>) SIGRTMAX<span class="hljs-number">-11</span> <span class="hljs-number">54</span>) SIGRTMAX<span class="hljs-number">-10</span> <span class="hljs-number">55</span>) SIGRTMAX<span class="hljs-number">-9</span>  <span class="hljs-number">56</span>) SIGRTMAX<span class="hljs-number">-8</span>  <span class="hljs-number">57</span>) SIGRTMAX<span class="hljs-number">-7</span><br><span class="hljs-number">58</span>) SIGRTMAX<span class="hljs-number">-6</span>  <span class="hljs-number">59</span>) SIGRTMAX<span class="hljs-number">-5</span>  <span class="hljs-number">60</span>) SIGRTMAX<span class="hljs-number">-4</span>  <span class="hljs-number">61</span>) SIGRTMAX<span class="hljs-number">-3</span>  <span class="hljs-number">62</span>) SIGRTMAX<span class="hljs-number">-2</span><br><span class="hljs-number">63</span>) SIGRTMAX<span class="hljs-number">-1</span>  <span class="hljs-number">64</span>) SIGRTMAX<br></code></pre></td></tr></table></figure>信号的相关解释</li></ol><table><thead><tr><th><strong>Signal Name</strong></th><th><strong>Number</strong></th><th><strong>Description</strong></th><th><strong>Signal Name</strong></th><th><strong>Number</strong></th><th><strong>Description</strong></th></tr></thead><tbody><tr><td>SIGHUP</td><td>1</td><td>Hangup (POSIX) 终端控制进程结束(终端连接断开)</td><td>SIGSTKFLT</td><td>16</td><td>Stack fault</td></tr><tr><td>SIGINT</td><td>2</td><td>Terminal interrupt (ANSI)</td><td>SIGCHLD</td><td>17</td><td>Child process has stopped or exited, changed (POSIX)</td></tr><tr><td>SIGQUIT</td><td>3</td><td>Terminal quit (POSIX)</td><td>SIGCONT</td><td>18</td><td>Continue executing, if stopped (POSIX)</td></tr><tr><td>SIGILL</td><td>4</td><td>Illegal instruction (ANSI)</td><td>SIGSTOP</td><td>19</td><td>Stop executing(can’t be caught or ignored) (POSIX)</td></tr><tr><td>SIGTRAP</td><td>5</td><td>Trace trap (POSIX)</td><td>SIGTSTP</td><td>20</td><td>Terminal stop signal (POSIX)</td></tr><tr><td>SIGIOT</td><td>6</td><td>IOT Trap (4.2 BSD)</td><td>SIGTTIN</td><td>21</td><td>Background process trying to read, from TTY (POSIX)</td></tr><tr><td>SIGBUS</td><td>7</td><td>BUS error (4.2 BSD)</td><td>SIGTTOU</td><td>22</td><td>Background process trying to write, to TTY (POSIX)</td></tr><tr><td>SIGFPE</td><td>8</td><td>Floating point exception (ANSI)</td><td>SIGURG</td><td>23</td><td>Urgent condition on socket (4.2 BSD)</td></tr><tr><td>SIGKILL</td><td>9</td><td>Kill(can’t be caught or ignored) (POSIX)</td><td>SIGXCPU</td><td>24</td><td>CPU limit exceeded (4.2 BSD)</td></tr><tr><td>SIGUSR1</td><td>10</td><td>User defined signal 1 (POSIX)</td><td>SIGXFSZ</td><td>25</td><td>File size limit exceeded (4.2 BSD)</td></tr><tr><td>SIGSEGV</td><td>11</td><td>Invalid memory segment access (ANSI)</td><td>SIGVTALRM</td><td>26</td><td>Virtual alarm clock (4.2 BSD)</td></tr><tr><td>SIGUSR2</td><td>12</td><td>User defined signal 2 (POSIX)</td><td>SIGPROF</td><td>27</td><td>Profiling alarm clock (4.2 BSD)</td></tr><tr><td>SIGPIPE</td><td>13</td><td>Write on a pipe with no reader, Broken pipe (POSIX)</td><td>SIGWINCH</td><td>28</td><td>Window size change (4.3 BSD, Sun)</td></tr><tr><td>SIGALRM</td><td>14</td><td>Alarm clock (POSIX)</td><td>SIGIO</td><td>29</td><td>I/O now possible (4.2 BSD)</td></tr><tr><td>SIGTERM</td><td>15</td><td>Termination (ANSI)</td><td>SIGPWR</td><td>30</td><td>Power failure restart (System V)</td></tr></tbody></table><p>我们可以通过监听信号量的变化来实现关闭前的一些操作。一个可行的方案如下：</p><blockquote><p>为了方便我们称旧应用为old server，需要更新的应用为new server</p></blockquote><ol><li>old server 监听 SIGHUP 信号；</li><li>old server 收到信号SIGHUP时 fork 子进程（使用相同的启动命令），将服务监听的 socket 文件描述符传递给子进程 new server；</li><li>子进程(new server)监听父进程(new server)的 socket，这个时候父进程和子进程都可以接收请求；</li><li>子进程启动成功之后发送 SIGTERM 信号给父进程，父进程停止接收新的连接，等待旧连接处理完成（或超时）；</li><li>父进程退出，此时只剩下子进程，丝滑升级完成；</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/2630542/1669364413375-094c7db6-26c9-4197-8f32-f37bd414bcff.jpeg"></p><h1 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h1><blockquote><p>以下案例是比较粗糙的案例，如果是想生产环境使用建议参考文末的资料链接，有相关成熟的开源组件</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;os/exec&quot;</span><br><span class="hljs-string">&quot;os/signal&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br><span class="hljs-string">&quot;syscall&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Server <span class="hljs-keyword">struct</span> &#123;<br>http.Server       <span class="hljs-comment">//http服务器</span><br>net.Listener      <span class="hljs-comment">//监听端口</span><br>isChild      <span class="hljs-type">bool</span> <span class="hljs-comment">//当前服务器是否是子进程</span><br>wg sync.WaitGroup <span class="hljs-comment">//还剩多少请求待处理</span><br>&#125;<br><br><span class="hljs-keyword">var</span> srvMap = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]*Server)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> os.Signal)<br><span class="hljs-comment">//监听信号</span><br>signal.Notify(c, syscall.SIGHUP, syscall.SIGTERM)<br>pid:=syscall.Getpid()<br>fmt.Println(<span class="hljs-string">&quot;当前进程号&quot;</span>,pid)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> &#123;<br>s := &lt;-c<br>fmt.Println(<span class="hljs-string">&quot;收到退出信号&quot;</span>, s)<br><span class="hljs-keyword">switch</span> s &#123;<br><span class="hljs-keyword">case</span> syscall.SIGHUP:<br>fork()<br><span class="hljs-keyword">case</span> syscall.SIGTERM:<br>down()<br>&#125;<br>&#125;<br>&#125;()<br>http.HandleFunc(<span class="hljs-string">&quot;/ok&quot;</span>, ok)<br>addr := <span class="hljs-string">&quot;localhost:8001&quot;</span><br>server := &amp;Server&#123;<br>Server:  http.Server&#123;Addr: addr, Handler: <span class="hljs-literal">nil</span>&#125;,<br>wg: sync.WaitGroup&#123;&#125;,<br>isChild: os.Getenv(<span class="hljs-string">&quot;CHILD&quot;</span>) != <span class="hljs-string">&quot;&quot;</span>,<br>&#125;<br>listen, err := server.listener(addr)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br>&#125;<br>server.Listener = listen<br><span class="hljs-keyword">if</span> server.isChild &#123;<br>fmt.Println(<span class="hljs-string">&quot;当前是子进程，需要kill掉父进程&quot;</span>, syscall.Getppid())<br>err := syscall.Kill(syscall.Getppid(), syscall.SIGTERM)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;kill父进程失败&quot;</span>, err)<br>&#125;<br>&#125;<br>srvMap[pid] = server<br>fmt.Println(<span class="hljs-string">&quot;启动服务器&quot;</span>)<br>err = server.Serve(listen)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">down</span><span class="hljs-params">()</span></span> &#123;<br>pid:=syscall.Getpid()<br>fmt.Println(<span class="hljs-string">&quot;等待服务处理完成或超时&quot;</span>, pid)<br>server:=srvMap[pid]<br>server.wg.Wait()<br>fmt.Println(<span class="hljs-string">&quot;所有请求完成关闭服务器&quot;</span>, pid)<br>server.Listener.Close()<br><span class="hljs-built_in">delete</span>(srvMap,pid)<br>os.Exit(<span class="hljs-number">0</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fork</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//检查是否已经fork过了</span><br>path := os.Args[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">var</span> args []<span class="hljs-type">string</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(os.Args) &gt; <span class="hljs-number">1</span> &#123;<br>args = os.Args[<span class="hljs-number">1</span>:]<br>&#125;<br>cmd := exec.Command(path, args...)<br>cmd.Stdout = os.Stdout<br>cmd.Stderr = os.Stderr<br>cmd.Env = <span class="hljs-built_in">append</span>(<br>os.Environ(),<br><span class="hljs-string">&quot;CHILD=1&quot;</span>,<br>)<br><span class="hljs-comment">//接管父进程的fd</span><br>pid := syscall.Getpid()<br>fmt.Println(<span class="hljs-string">&quot;pid = &quot;</span>,pid)<br>server := srvMap[pid]<br>cmd.ExtraFiles = []*os.File&#123;server.File()&#125;<br>err := cmd.Start()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;fork进程失败&quot;</span>, err)<br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;当前子进程号&quot;</span>, cmd.Process.Pid)<br>&#125;<br><br><span class="hljs-comment">// File 获取当前server的fd，因为我们无法多个进程同时监听一个端口，但是通过子进程的方式</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(srv *Server)</span></span> File() *os.File &#123;<br>tl := srv.Listener.(*net.TCPListener)<br>fl, _ := tl.File()<br><span class="hljs-keyword">return</span> fl<br>&#125;<br><span class="hljs-comment">// listener 获取监听器</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(srv *Server)</span></span> listener(addr <span class="hljs-type">string</span>) (ln net.Listener, err <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">if</span> srv.isChild &#123; <span class="hljs-comment">//如果是子进程</span><br>file := os.NewFile(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;&quot;</span>)<br>ln, err = net.FileListener(file)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>err = fmt.Errorf(<span class="hljs-string">&quot;net.FileListener error: %v&quot;</span>, err)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>ln, err = net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, addr)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>err = fmt.Errorf(<span class="hljs-string">&quot;net.Listen error: %v&quot;</span>, err)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ok</span><span class="hljs-params">(w http.ResponseWriter, _ *http.Request)</span></span> &#123;<br>pid := syscall.Getpid()<br>server:=srvMap[pid]<br><span class="hljs-keyword">defer</span> server.wg.Done()<br>fmt.Println(<span class="hljs-string">&quot;当前请求处理进程号&quot;</span>, pid)<br>server.wg.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">30</span>; i++ &#123;<br>time.Sleep(time.Second)<br>fmt.Println(pid, <span class="hljs-string">&quot; 正在处理请求 &quot;</span>, i)<br>&#125;<br>io.WriteString(w, <span class="hljs-string">&quot;ok\n&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><p>1.启动服务</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">go</span> run server.<span class="hljs-keyword">go</span><br></code></pre></td></tr></table></figure><p>2.开启两个或者两个以上请求接口</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">curl localhost:<span class="hljs-number">8001</span>/ok<br></code></pre></td></tr></table></figure><p>3.服务端打印信息显示我们的请求正在处理</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go">当前进程号 <span class="hljs-number">67045</span><br>启动服务器<br>当前请求处理进程号 <span class="hljs-number">67045</span><br><span class="hljs-number">67045</span>  正在处理请求  <span class="hljs-number">0</span><br><span class="hljs-number">67045</span>  正在处理请求  <span class="hljs-number">1</span><br><span class="hljs-number">67045</span>  正在处理请求  <span class="hljs-number">2</span><br><span class="hljs-number">67045</span>  正在处理请求  <span class="hljs-number">3</span><br><span class="hljs-number">67045</span>  正在处理请求  <span class="hljs-number">4</span><br><span class="hljs-number">67045</span>  正在处理请求  <span class="hljs-number">5</span><br><span class="hljs-number">67045</span>  正在处理请求  <span class="hljs-number">6</span><br><span class="hljs-number">67045</span>  正在处理请求  <span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><p>3.发送信号结束进程</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">kill <span class="hljs-number">-1</span> <span class="hljs-number">67045</span><br></code></pre></td></tr></table></figure><p>4.查看控制台，发现我们的服务还在进行中，并未立即结束</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-number">67045</span>  正在处理请求  <span class="hljs-number">10</span><br><span class="hljs-number">67045</span>  正在处理请求  <span class="hljs-number">9</span><br><span class="hljs-number">67045</span>  正在处理请求  <span class="hljs-number">11</span><br>收到退出信号 hangup<br>pid =  <span class="hljs-number">67045</span><br>当前子进程号 <span class="hljs-number">67055</span><br>当前进程号 <span class="hljs-number">67055</span><br>当前是子进程，需要kill掉父进程 <span class="hljs-number">67045</span><br>启动服务器<br>收到退出信号 terminated<br>等待服务处理完成或超时 <span class="hljs-number">67045</span><br><span class="hljs-number">67045</span>  正在处理请求  <span class="hljs-number">10</span><br><span class="hljs-number">67045</span>  正在处理请求  <span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><p>5.查看进程，发现开启了两个server进程（一个是子进程），当请求执行完父进程退出，只剩下子进程</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go">mikey@mikeydeMacBook-Pro demo % ps -ef|grep server<br>   <span class="hljs-number">55</span>   <span class="hljs-number">474</span>     <span class="hljs-number">1</span>   <span class="hljs-number">0</span> <span class="hljs-number">17</span>Nov22 ??         <span class="hljs-number">0</span>:<span class="hljs-number">02.26</span> /System/Library/CoreServices/appleeventsd --server<br>    <span class="hljs-number">0</span>  <span class="hljs-number">1068</span>     <span class="hljs-number">1</span>   <span class="hljs-number">0</span> <span class="hljs-number">17</span>Nov22 ??         <span class="hljs-number">0</span>:<span class="hljs-number">00.05</span> /System/Library/CoreServices/CrashReporterSupportHelper server-init<br>    <span class="hljs-number">0</span>  <span class="hljs-number">1092</span>     <span class="hljs-number">1</span>   <span class="hljs-number">0</span> <span class="hljs-number">17</span>Nov22 ??         <span class="hljs-number">0</span>:<span class="hljs-number">00.59</span> /System/Library/CoreServices/SubmitDiagInfo server-init<br>    <span class="hljs-number">0</span>  <span class="hljs-number">1182</span>     <span class="hljs-number">1</span>   <span class="hljs-number">0</span> <span class="hljs-number">17</span>Nov22 ??         <span class="hljs-number">0</span>:<span class="hljs-number">00.03</span> /System/Library/CoreServices/osanalyticshelper server-init<br>    <span class="hljs-number">0</span> <span class="hljs-number">66730</span>     <span class="hljs-number">1</span>   <span class="hljs-number">0</span>  <span class="hljs-number">3</span>:<span class="hljs-number">53</span>PM ??         <span class="hljs-number">0</span>:<span class="hljs-number">00.09</span> /usr/sbin/systemsoundserverd<br>  <span class="hljs-number">501</span> <span class="hljs-number">67059</span> <span class="hljs-number">66776</span>   <span class="hljs-number">0</span>  <span class="hljs-number">3</span>:<span class="hljs-number">56</span>PM ttys000    <span class="hljs-number">0</span>:<span class="hljs-number">00.00</span> grep server<br>  <span class="hljs-number">501</span> <span class="hljs-number">67045</span> <span class="hljs-number">62588</span>   <span class="hljs-number">0</span>  <span class="hljs-number">3</span>:<span class="hljs-number">56</span>PM ttys001    <span class="hljs-number">0</span>:<span class="hljs-number">00.02</span> ./server<br>  <span class="hljs-number">501</span> <span class="hljs-number">67055</span> <span class="hljs-number">67045</span>   <span class="hljs-number">0</span>  <span class="hljs-number">3</span>:<span class="hljs-number">56</span>PM ttys001    <span class="hljs-number">0</span>:<span class="hljs-number">00.01</span> ./server<br>mikey@mikeydeMacBook-Pro demo % ps -ef|grep server<br>   <span class="hljs-number">55</span>   <span class="hljs-number">474</span>     <span class="hljs-number">1</span>   <span class="hljs-number">0</span> <span class="hljs-number">17</span>Nov22 ??         <span class="hljs-number">0</span>:<span class="hljs-number">02.26</span> /System/Library/CoreServices/appleeventsd --server<br>    <span class="hljs-number">0</span>  <span class="hljs-number">1068</span>     <span class="hljs-number">1</span>   <span class="hljs-number">0</span> <span class="hljs-number">17</span>Nov22 ??         <span class="hljs-number">0</span>:<span class="hljs-number">00.05</span> /System/Library/CoreServices/CrashReporterSupportHelper server-init<br>    <span class="hljs-number">0</span>  <span class="hljs-number">1092</span>     <span class="hljs-number">1</span>   <span class="hljs-number">0</span> <span class="hljs-number">17</span>Nov22 ??         <span class="hljs-number">0</span>:<span class="hljs-number">00.59</span> /System/Library/CoreServices/SubmitDiagInfo server-init<br>    <span class="hljs-number">0</span>  <span class="hljs-number">1182</span>     <span class="hljs-number">1</span>   <span class="hljs-number">0</span> <span class="hljs-number">17</span>Nov22 ??         <span class="hljs-number">0</span>:<span class="hljs-number">00.03</span> /System/Library/CoreServices/osanalyticshelper server-init<br>    <span class="hljs-number">0</span> <span class="hljs-number">66730</span>     <span class="hljs-number">1</span>   <span class="hljs-number">0</span>  <span class="hljs-number">3</span>:<span class="hljs-number">53</span>PM ??         <span class="hljs-number">0</span>:<span class="hljs-number">00.09</span> /usr/sbin/systemsoundserverd<br>  <span class="hljs-number">501</span> <span class="hljs-number">67063</span> <span class="hljs-number">66776</span>   <span class="hljs-number">0</span>  <span class="hljs-number">3</span>:<span class="hljs-number">56</span>PM ttys000    <span class="hljs-number">0</span>:<span class="hljs-number">00.00</span> grep server<br>  <span class="hljs-number">501</span> <span class="hljs-number">67055</span>     <span class="hljs-number">1</span>   <span class="hljs-number">0</span>  <span class="hljs-number">3</span>:<span class="hljs-number">56</span>PM ttys001    <span class="hljs-number">0</span>:<span class="hljs-number">00.01</span> ./server<br>mikey@mikeydeMacBook-Pro demo % <br></code></pre></td></tr></table></figure><h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><p><a href="https://github.com/fvbock/endless">https://github.com/fvbock/endless</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Nginx+Keepalived实现高可用案例</title>
    <link href="/2022/11/06/yuque/wialacng51dbzd9z/"/>
    <url>/2022/11/06/yuque/wialacng51dbzd9z/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1667668596113-505f014f-0f0a-48d1-9b17-a00bdadc59c5.png#averageHue=%2397897a&clientId=u63d6da2e-fb93-4&from=paste&height=252&id=uadc627b6&originHeight=504&originWidth=1022&originalType=binary&ratio=1&rotation=0&showTitle=false&size=406914&status=done&style=none&taskId=ub08a0baa-2b3e-4feb-aff1-0ff3fa3607a&title=&width=511" alt="image.png"></p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><blockquote><p>实现高可用，防止单点发生故障导致服务下线影响业务正常进行</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/2630542/1668004880208-e2088da3-8776-4e58-8c9d-79766b50ac47.jpeg"></p><p>Keepalived软件主要是通过VRRP协议实现高可用功能的。VRRP是Virtual Router RedundancyProtocol(虚拟路由器冗余协议）的缩写,VRRP出现的目的就是为了解决静态路由单点故障问题的，它能够保证当个别节点宕机时，整个网络可以不间断地运行。（当一个节点挂掉，走另外一个节点）</p><h1 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h1><p>1.下载keepalived</p><blockquote><p><a href="https://www.keepalived.org/index.html">https://www.keepalived.org/index.html</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://www.keepalived.org/software/keepalived-2.2.7.tar.gz --no-check-certificate<br>tar -xzvf keepalived-2.2.7.tar.gz<br><span class="hljs-built_in">mv</span> keepalived-2.2.7 keepalived<br><span class="hljs-built_in">cd</span> keepalived<br>yum -y install gcc openssl openssl-devel<br>./configure --prefix=/usr/local/keepalived<br>make install<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export PATH=$PATH:/usr/local/keepalived/sbin/&#x27;</span> &gt;&gt; ~/.bash_profile<br>keepalived -v<br>keepalived -h<br></code></pre></td></tr></table></figure><p>2.下载nginx</p><blockquote><p><a href="http://nginx.org/">http://nginx.org/</a></p></blockquote><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">wget https:<span class="hljs-string">//nginx.org/download/nginx-1.22.1.tar.gz</span> <span class="hljs-params">--no-check-certificate</span><br>tar zxvf nginx-1.22.1.tar.gz <br><span class="hljs-keyword">cd</span> nginx-1.22.1/<br><span class="hljs-string">./configure</span> <span class="hljs-params">--prefix=/usr/local/nginx</span><br>make<br>make install<br><span class="hljs-string">./nginx</span> -v<br><span class="hljs-keyword">echo</span> &#x27;export PATH=$PATH:<span class="hljs-string">/usr/local/nginx/sbin/</span>&#x27; &gt;&gt; ~<span class="hljs-string">/.bash_profile</span><br>nginx<br></code></pre></td></tr></table></figure><p>机器配置</p><blockquote><p>关闭防火墙和enforce</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">setenforce 0<br>systemctl <span class="hljs-built_in">disable</span> --now firewalld<br></code></pre></td></tr></table></figure><p>3.配置keepalived</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/etc/</span>keepalived/keepalived.conf<br></code></pre></td></tr></table></figure><blockquote><p>主服务器</p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">global_defs &#123;<br>   router_id LVS_DEVEL<br>&#125;<br><br>vrrp_instance VI_1 &#123;<br>    state MASTER<br>    <span class="hljs-keyword">interface</span> <span class="hljs-symbol">ens160</span><br>    <span class="hljs-symbol">virtual_router_id</span> <span class="hljs-symbol">51</span><br>    <span class="hljs-symbol">priority</span> <span class="hljs-symbol">100</span><br>    <span class="hljs-symbol">advert_int</span> <span class="hljs-symbol">1</span><br>    <span class="hljs-symbol">authentication</span> &#123;<br>        auth_type PASS<br>        auth_pass <span class="hljs-number">1111</span><br>    &#125;<br>    virtual_ipaddress &#123;<br>        <span class="hljs-number">192.168</span><span class="hljs-number">.100</span><span class="hljs-number">.100</span><br>    &#125;<br>&#125;<br><br>virtual_server <span class="hljs-number">192.168</span><span class="hljs-number">.100</span><span class="hljs-number">.100</span> <span class="hljs-number">80</span> &#123;<br>    delay_loop <span class="hljs-number">6</span><br>    lb_algo rr<br>    lb_kind DR<br>    persistence_timeout <span class="hljs-number">50</span><br>    protocol TCP<br><br>    real_server <span class="hljs-number">192.168</span><span class="hljs-number">.100</span><span class="hljs-number">.21</span> <span class="hljs-number">80</span> &#123;<br>        weight <span class="hljs-number">1</span><br>        TCP_CHECK &#123;<br>            connect_timeout <span class="hljs-number">3</span><br>            retry <span class="hljs-number">3</span><br>            delay_before_retry <span class="hljs-number">3</span><br>        &#125;<br>    &#125;<br>    real_server <span class="hljs-number">192.168</span><span class="hljs-number">.100</span><span class="hljs-number">.22</span> <span class="hljs-number">80</span> &#123;<br>        weight <span class="hljs-number">1</span><br>        TCP_CHECK &#123;<br>            connect_timeout <span class="hljs-number">3</span><br>            retry <span class="hljs-number">3</span><br>            delay_before_retry <span class="hljs-number">3</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>备服务器</p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">global_defs &#123;<br>   router_id LVS_DEVEL_SALVE<br>&#125;<br><br>vrrp_instance VI_1 &#123;<br>    state MASTER<br>    <span class="hljs-keyword">interface</span> <span class="hljs-symbol">ens160</span><br>    <span class="hljs-symbol">virtual_router_id</span> <span class="hljs-symbol">51</span><br>    <span class="hljs-symbol">priority</span> <span class="hljs-symbol">80</span><br>    <span class="hljs-symbol">advert_int</span> <span class="hljs-symbol">1</span><br>    <span class="hljs-symbol">authentication</span> &#123;<br>        auth_type PASS<br>        auth_pass <span class="hljs-number">1111</span><br>    &#125;<br>    virtual_ipaddress &#123;<br>        <span class="hljs-number">192.168</span><span class="hljs-number">.100</span><span class="hljs-number">.100</span><br>    &#125;<br>&#125;<br><br>virtual_server <span class="hljs-number">192.168</span><span class="hljs-number">.100</span><span class="hljs-number">.100</span> <span class="hljs-number">80</span> &#123;<br>    delay_loop <span class="hljs-number">6</span><br>    lb_algo rr<br>    lb_kind DR<br>    persistence_timeout <span class="hljs-number">50</span><br>    protocol TCP<br><br>    real_server <span class="hljs-number">192.168</span><span class="hljs-number">.100</span><span class="hljs-number">.21</span> <span class="hljs-number">80</span> &#123;<br>        weight <span class="hljs-number">1</span><br>        TCP_CHECK &#123;<br>            connect_timeout <span class="hljs-number">3</span><br>            retry <span class="hljs-number">3</span><br>            delay_before_retry <span class="hljs-number">3</span><br>        &#125;<br>    &#125;<br>    real_server <span class="hljs-number">192.168</span><span class="hljs-number">.100</span><span class="hljs-number">.22</span> <span class="hljs-number">80</span> &#123;<br>        weight <span class="hljs-number">1</span><br>        TCP_CHECK &#123;<br>            connect_timeout <span class="hljs-number">3</span><br>            retry <span class="hljs-number">3</span><br>            delay_before_retry <span class="hljs-number">3</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>启动keepalived</p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">systemctl <span class="hljs-keyword">enable</span> <span class="hljs-comment">--now keepalived</span><br></code></pre></td></tr></table></figure><blockquote><p>查看vip</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">ip <span class="hljs-selector-tag">a</span><br></code></pre></td></tr></table></figure><p>我们配置的vip</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu <span class="hljs-number">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="hljs-number">1000</span><br>    <span class="hljs-attribute">link</span>/loopback <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> brd <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span><br>    <span class="hljs-attribute">inet</span> <span class="hljs-number">127.0.0.1</span>/<span class="hljs-number">8</span> scope host lo<br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br>    <span class="hljs-attribute">inet6</span> ::<span class="hljs-number">1</span>/<span class="hljs-number">128</span> scope host <br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br><span class="hljs-attribute">2</span>: ens160: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="hljs-number">1500</span> qdisc fq_codel state UP group default qlen <span class="hljs-number">1000</span><br>    <span class="hljs-attribute">link</span>/ether <span class="hljs-number">00</span>:<span class="hljs-number">0</span>c:<span class="hljs-number">29</span>:c2:de:<span class="hljs-number">91</span> brd ff:ff:ff:ff:ff:ff<br>    <span class="hljs-attribute">inet</span> <span class="hljs-number">192.168.100.21</span>/<span class="hljs-number">24</span> brd <span class="hljs-number">192.168.100.255</span> scope global noprefixroute ens160<br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br>    <span class="hljs-attribute">inet</span> <span class="hljs-number">192.168.100.100</span>/<span class="hljs-number">32</span> scope global ens160 (VIP)<br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br>    <span class="hljs-attribute">inet6</span> fe80::<span class="hljs-number">20</span>c:<span class="hljs-number">29</span>ff:fec2:de91/<span class="hljs-number">64</span> scope link noprefixroute <br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br><span class="hljs-attribute">3</span>: tunl0@NONE: &lt;NOARP&gt; mtu <span class="hljs-number">1480</span> qdisc noop state DOWN group default qlen <span class="hljs-number">1000</span><br>    <span class="hljs-attribute">link</span>/ipip <span class="hljs-number">0.0.0.0</span> brd <span class="hljs-number">0.0.0.0</span><br><span class="hljs-attribute">4</span>: dummy0: &lt;BROADCAST,NOARP&gt; mtu <span class="hljs-number">1500</span> qdisc noop state DOWN group default qlen <span class="hljs-number">1000</span><br>    <span class="hljs-attribute">link</span>/ether e2:d1:<span class="hljs-number">8</span>c:f6:aa:e8 brd ff:ff:ff:ff:ff:ff<br><span class="hljs-attribute">5</span>: kube-ipvs0: &lt;BROADCAST,NOARP&gt; mtu <span class="hljs-number">1500</span> qdisc noop state DOWN group default <br>    <span class="hljs-attribute">link</span>/ether <span class="hljs-number">0</span>a:bd:<span class="hljs-number">4</span>c:<span class="hljs-number">73</span>:<span class="hljs-number">69</span>:b2 brd ff:ff:ff:ff:ff:ff<br>    <span class="hljs-attribute">inet</span> <span class="hljs-number">10.98.13.147</span>/<span class="hljs-number">32</span> scope global kube-ipvs0<br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br>    <span class="hljs-attribute">inet</span> <span class="hljs-number">10.98.126.203</span>/<span class="hljs-number">32</span> scope global kube-ipvs0<br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br>    <span class="hljs-attribute">inet</span> <span class="hljs-number">10.108.37.26</span>/<span class="hljs-number">32</span> scope global kube-ipvs0<br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br>    <span class="hljs-attribute">inet</span> <span class="hljs-number">10.96.0.1</span>/<span class="hljs-number">32</span> scope global kube-ipvs0<br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br>    <span class="hljs-attribute">inet</span> <span class="hljs-number">10.96.0.10</span>/<span class="hljs-number">32</span> scope global kube-ipvs0<br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br>    <span class="hljs-attribute">inet</span> <span class="hljs-number">10.109.253.213</span>/<span class="hljs-number">32</span> scope global kube-ipvs0<br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br>    <span class="hljs-attribute">inet</span> <span class="hljs-number">10.100.200.149</span>/<span class="hljs-number">32</span> scope global kube-ipvs0<br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br>    <span class="hljs-attribute">inet</span> <span class="hljs-number">10.105.133.95</span>/<span class="hljs-number">32</span> scope global kube-ipvs0<br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br>    <span class="hljs-attribute">inet</span> <span class="hljs-number">10.109.192.172</span>/<span class="hljs-number">32</span> scope global kube-ipvs0<br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br></code></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><blockquote><p>默认正常走master节点</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1668005651631-bde34b53-82fa-4284-b008-1bd61dc38eea.png#averageHue=%23e4e4e3&clientId=ucea0a325-83bc-4&from=paste&height=390&id=u87b46692&originHeight=812&originWidth=1900&originalType=binary&ratio=1&rotation=0&showTitle=false&size=490419&status=done&style=none&taskId=u197c2681-05a6-4159-bfd4-df35807acb5&title=&width=913" alt="image.png"></p><blockquote><p>down掉master节点，VIP会飘到salve节点</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1668005792293-104cd9cc-e078-4348-934c-aea0aabf4343.png#averageHue=%23e5e5e5&clientId=ucea0a325-83bc-4&from=paste&height=408&id=u2ad67a36&originHeight=816&originWidth=1826&originalType=binary&ratio=1&rotation=0&showTitle=false&size=161227&status=done&style=none&taskId=uf0dfed80-b2d7-4a50-a7b7-0a26a21d2e1&title=&width=913" alt="image.png"></p><blockquote><p>重启master节点后VIP会飘会master节点</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1668005651631-bde34b53-82fa-4284-b008-1bd61dc38eea.png#averageHue=%23e4e4e3&clientId=ucea0a325-83bc-4&from=paste&height=390&id=UtHEe&originHeight=812&originWidth=1900&originalType=binary&ratio=1&rotation=0&showTitle=false&size=490419&status=done&style=none&taskId=u197c2681-05a6-4159-bfd4-df35807acb5&title=&width=913" alt="image.png"></p><h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><p>官网：<a href="https://www.keepalived.org/">https://www.keepalived.org/</a><br>github：<a href="https://github.com/acassen/keepalived">https://github.com/acassen/keepalived</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>linux/arm64架构下kubernetes集群的搭建</title>
    <link href="/2022/11/05/yuque/ii4c5fmarlf7iqma/"/>
    <url>/2022/11/05/yuque/ii4c5fmarlf7iqma/</url>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><ul><li>机器信息：三台linux/arm64架构</li><li>系统版本：centos7.6版本</li></ul><table><thead><tr><th>主机名称</th><th>IP地址</th><th>说明</th><th>软件</th></tr></thead><tbody><tr><td>Master01</td><td>192.168.100.21</td><td>master节点</td><td>kube-apiserver、kube-controller-manager、kube-scheduler、etcd、 kubelet、kube-proxy</td></tr><tr><td>Node01</td><td>192.168.100.22</td><td>node节点</td><td>kubelet、kube-proxy</td></tr><tr><td>Node02</td><td>192.168.100.23</td><td>node节点</td><td>kubelet、kube-proxy</td></tr></tbody></table><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><h3 id="设置主机名"><a href="#设置主机名" class="headerlink" title="设置主机名"></a>设置主机名</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hostnamectl set-hostname k8s-master01<br>hostnamectl set-hostname k8s-node01<br>hostnamectl set-hostname k8s-node02<br></code></pre></td></tr></table></figure><h3 id="安装必要工具"><a href="#安装必要工具" class="headerlink" title="安装必要工具"></a>安装必要工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install wget jq psmisc vim net-tools nfs-utils telnet yum-utils device-mapper-persistent-data lvm2 git network-scripts tar curl -y<br></code></pre></td></tr></table></figure><h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">systemctl <span class="hljs-keyword">disable</span> <span class="hljs-comment">--now firewalld</span><br></code></pre></td></tr></table></figure><h3 id="关闭SELinux"><a href="#关闭SELinux" class="headerlink" title="关闭SELinux"></a>关闭SELinux</h3><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs leaf">setenforce 0<br>sed -i &#x27;s<span class="hljs-punctuation">#</span><span class="hljs-keyword">SELINUX</span>=enforcing<span class="hljs-punctuation">#</span><span class="hljs-keyword">SELINUX</span>=disabled<span class="hljs-punctuation">#</span><span class="hljs-keyword">g</span>&#x27; /etc/selinux/config<br></code></pre></td></tr></table></figure><h3 id="关闭交换分区"><a href="#关闭交换分区" class="headerlink" title="关闭交换分区"></a>关闭交换分区</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">sed -ri <span class="hljs-string">&#x27;s/.*swap.*/#&amp;/&#x27;</span> /etc/fstab<br>swapoff -a &amp;&amp; sysctl -w vm.swappiness=0<br><br><span class="hljs-built_in">cat</span> /etc/fstab<br><span class="hljs-comment"># /dev/mapper/centos-swap swap                    swap    defaults        0 0</span><br></code></pre></td></tr></table></figure><h3 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 方式一</span><br><span class="hljs-comment"># systemctl disable --now NetworkManager</span><br><span class="hljs-comment"># systemctl start network &amp;&amp; systemctl enable network</span><br><br><span class="hljs-comment"># 方式二</span><br><span class="hljs-built_in">cat</span> &gt; /etc/NetworkManager/conf.d/calico.conf &lt;&lt; <span class="hljs-string">EOF </span><br><span class="hljs-string">[keyfile]</span><br><span class="hljs-string">unmanaged-devices=interface-name:cali*;interface-name:tunl*</span><br><span class="hljs-string">EOF</span><br>systemctl restart NetworkManager<br></code></pre></td></tr></table></figure><h3 id="时间同步"><a href="#时间同步" class="headerlink" title="时间同步"></a>时间同步</h3><blockquote><p>设置时区</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> /etc/localtime /etc/localtime.bak<br><span class="hljs-built_in">ln</span> -s /usr/share/zoneinfo/Asia/Shanghai  /etc/localtime<br></code></pre></td></tr></table></figure><blockquote><p>设置时间同步</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 服务端</span><br><br>yum install chrony -y<br><span class="hljs-built_in">cat</span> &gt; /etc/chrony.conf &lt;&lt; <span class="hljs-string">EOF </span><br><span class="hljs-string">pool ntp.aliyun.com iburst</span><br><span class="hljs-string">driftfile /var/lib/chrony/drift</span><br><span class="hljs-string">makestep 1.0 3</span><br><span class="hljs-string">rtcsync</span><br><span class="hljs-string">allow 10.0.0.0/24</span><br><span class="hljs-string">allow 192.168.0.0/16</span><br><span class="hljs-string">local stratum 10</span><br><span class="hljs-string">keyfile /etc/chrony.keys</span><br><span class="hljs-string">leapsectz right/UTC</span><br><span class="hljs-string">logdir /var/log/chrony</span><br><span class="hljs-string">EOF</span><br><br>systemctl restart chronyd <br>systemctl <span class="hljs-built_in">enable</span> chronyd<br><br><span class="hljs-comment"># 客户端</span><br><br>yum install chrony -y<br><span class="hljs-built_in">cat</span> &gt; /etc/chrony.conf &lt;&lt; <span class="hljs-string">EOF </span><br><span class="hljs-string">pool 192.168.100.21 iburst</span><br><span class="hljs-string">driftfile /var/lib/chrony/drift</span><br><span class="hljs-string">makestep 1.0 3</span><br><span class="hljs-string">allow 192.168.100.21 # 服务器的ip地址</span><br><span class="hljs-string">rtcsync</span><br><span class="hljs-string">keyfile /etc/chrony.keys</span><br><span class="hljs-string">leapsectz right/UTC</span><br><span class="hljs-string">logdir /var/log/chrony</span><br><span class="hljs-string">EOF</span><br><br>systemctl restart chronyd<br>systemctl <span class="hljs-built_in">enable</span> chronyd<br><br><span class="hljs-comment">#使用客户端进行验证</span><br>chronyc sources -v<br></code></pre></td></tr></table></figure><p>立即手动同步</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">chronyc -a makestep<br></code></pre></td></tr></table></figure><h3 id="配置ulimit"><a href="#配置ulimit" class="headerlink" title="配置ulimit"></a>配置ulimit</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stata">ulimit -SHn 65535<br><span class="hljs-keyword">cat</span> &gt;&gt; /etc/security/limits.<span class="hljs-keyword">conf</span> &lt;&lt;EOF<br><span class="hljs-comment">* soft nofile 655360</span><br><span class="hljs-comment">* hard nofile 131072</span><br><span class="hljs-comment">* soft nproc 655350</span><br><span class="hljs-comment">* hard nproc 655350</span><br><span class="hljs-comment">* seft memlock unlimited</span><br><span class="hljs-comment">* hard memlock unlimitedd</span><br>EOF<br></code></pre></td></tr></table></figure><h3 id="安装ipvsadm"><a href="#安装ipvsadm" class="headerlink" title="安装ipvsadm"></a>安装ipvsadm</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">yum</span> install ipvsadm ipset sysstat conntrack libseccomp -y<br><span class="hljs-attribute">cat</span> &gt;&gt; /etc/modules-load.d/ipvs.conf &lt;&lt;EOF <br><span class="hljs-attribute">ip_vs</span><br><span class="hljs-attribute">ip_vs_rr</span><br><span class="hljs-attribute">ip_vs_wrr</span><br><span class="hljs-attribute">ip_vs_sh</span><br><span class="hljs-attribute">nf_conntrack</span><br><span class="hljs-attribute">ip_tables</span><br><span class="hljs-attribute">ip_set</span><br><span class="hljs-attribute">xt_set</span><br><span class="hljs-attribute">ipt_set</span><br><span class="hljs-attribute">ipt_rpfilter</span><br><span class="hljs-attribute">ipt_REJECT</span><br><span class="hljs-attribute">ipip</span><br><span class="hljs-attribute">EOF</span><br><br><span class="hljs-attribute">systemctl</span> restart systemd-modules-load.service<br><br><span class="hljs-attribute">lsmod</span> | grep -e ip_vs -e nf_conntrack<br><span class="hljs-attribute">ip_vs_sh</span>               <span class="hljs-number">16384</span>  <span class="hljs-number">0</span><br><span class="hljs-attribute">ip_vs_wrr</span>              <span class="hljs-number">16384</span>  <span class="hljs-number">0</span><br><span class="hljs-attribute">ip_vs_rr</span>               <span class="hljs-number">16384</span>  <span class="hljs-number">0</span><br><span class="hljs-attribute">ip_vs</span>                 <span class="hljs-number">180224</span>  <span class="hljs-number">6</span> ip_vs_rr,ip_vs_sh,ip_vs_wrr<br><span class="hljs-attribute">nf_conntrack</span>          <span class="hljs-number">176128</span>  <span class="hljs-number">1</span> ip_vs<br><span class="hljs-attribute">nf_defrag_ipv6</span>         <span class="hljs-number">24576</span>  <span class="hljs-number">2</span> nf_conntrack,ip_vs<br><span class="hljs-attribute">nf_defrag_ipv4</span>         <span class="hljs-number">16384</span>  <span class="hljs-number">1</span> nf_conntrack<br><span class="hljs-attribute">libcrc32c</span>              <span class="hljs-number">16384</span>  <span class="hljs-number">3</span> nf_conntrack,xfs,ip_vs<br></code></pre></td></tr></table></figure><h3 id="修改内核参数"><a href="#修改内核参数" class="headerlink" title="修改内核参数"></a>修改内核参数</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs stylus">cat &lt;&lt;EOF &gt; /etc/sysctl.d/k8s<span class="hljs-selector-class">.conf</span><br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.ip_forward</span> = <span class="hljs-number">1</span><br>net<span class="hljs-selector-class">.bridge</span><span class="hljs-selector-class">.bridge-nf-call-iptables</span> = <span class="hljs-number">1</span><br>fs<span class="hljs-selector-class">.may_detach_mounts</span> = <span class="hljs-number">1</span><br>vm.overcommit_memory=<span class="hljs-number">1</span><br>vm.panic_on_oom=<span class="hljs-number">0</span><br>fs<span class="hljs-selector-class">.inotify</span>.max_user_watches=<span class="hljs-number">89100</span><br>fs.file-max=<span class="hljs-number">52706963</span><br>fs.nr_open=<span class="hljs-number">52706963</span><br>net<span class="hljs-selector-class">.netfilter</span>.nf_conntrack_max=<span class="hljs-number">2310720</span><br><br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_keepalive_time</span> = <span class="hljs-number">600</span><br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_keepalive_probes</span> = <span class="hljs-number">3</span><br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_keepalive_intvl</span> =<span class="hljs-number">15</span><br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_max_tw_buckets</span> = <span class="hljs-number">36000</span><br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_tw_reuse</span> = <span class="hljs-number">1</span><br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_max_orphans</span> = <span class="hljs-number">327680</span><br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_orphan_retries</span> = <span class="hljs-number">3</span><br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_syncookies</span> = <span class="hljs-number">1</span><br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_max_syn_backlog</span> = <span class="hljs-number">16384</span><br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.ip_conntrack_max</span> = <span class="hljs-number">65536</span><br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_max_syn_backlog</span> = <span class="hljs-number">16384</span><br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.tcp_timestamps</span> = <span class="hljs-number">0</span><br>net<span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.somaxconn</span> = <span class="hljs-number">16384</span><br><br>net<span class="hljs-selector-class">.ipv6</span><span class="hljs-selector-class">.conf</span><span class="hljs-selector-class">.all</span><span class="hljs-selector-class">.disable_ipv6</span> = <span class="hljs-number">0</span><br>net<span class="hljs-selector-class">.ipv6</span><span class="hljs-selector-class">.conf</span><span class="hljs-selector-class">.default</span><span class="hljs-selector-class">.disable_ipv6</span> = <span class="hljs-number">0</span><br>net<span class="hljs-selector-class">.ipv6</span><span class="hljs-selector-class">.conf</span><span class="hljs-selector-class">.lo</span><span class="hljs-selector-class">.disable_ipv6</span> = <span class="hljs-number">0</span><br>net<span class="hljs-selector-class">.ipv6</span><span class="hljs-selector-class">.conf</span><span class="hljs-selector-class">.all</span><span class="hljs-selector-class">.forwarding</span> = <span class="hljs-number">1</span><br>EOF<br><br>sysctl <span class="hljs-attr">--system</span><br></code></pre></td></tr></table></figure><h3 id="节点配置hosts本地解析"><a href="#节点配置hosts本地解析" class="headerlink" title="节点配置hosts本地解析"></a>节点配置hosts本地解析</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">cat &gt; /etc/hosts &lt;&lt;EOF<br><span class="hljs-number">127.0.0.1</span>   localhost localhost.localdomain localhost4 localhost4.localdomain4<br>::<span class="hljs-number">1</span>         localhost localhost.localdomain localhost6 localhost6.localdomain6<br><br><span class="hljs-number">192.168.100.21</span> k8s-master01<br><span class="hljs-number">192.168.100.22</span> k8s-node01<br><span class="hljs-number">192.168.100.23</span> k8s-node02<br>EOF<br></code></pre></td></tr></table></figure><h2 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h2><h3 id="1-下载cfssl二进制包"><a href="#1-下载cfssl二进制包" class="headerlink" title="1.下载cfssl二进制包"></a>1.下载cfssl二进制包</h3><blockquote><p>github二进制包下载地址：<a href="https://github.com/cloudflare/cfssl/releases">https://github.com/cloudflare/cfssl/releases</a> （没看到有linux/arm64的我就直接自己编译了）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> git@github.com:cloudflare/cfssl.git<br><span class="hljs-built_in">cd</span> cfssl<br>make<br><span class="hljs-built_in">mv</span> bin/* /usr/local/bin/<br><span class="hljs-built_in">chmod</span> +x /usr/local/bin/cfssl /usr/local/bin/cfssljson<br></code></pre></td></tr></table></figure><h3 id="2-创建目录存放生成证书信息"><a href="#2-创建目录存放生成证书信息" class="headerlink" title="2.创建目录存放生成证书信息"></a>2.创建目录存放生成证书信息</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">mkdir pki<br>cd pki<br>cat &gt; admin-csr.<span class="hljs-keyword">json </span>&lt;&lt; EOF <br>&#123;<br>  <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;admin&quot;</span>,<br>  <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>    <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">2048</span><br>  &#125;,<br>  <span class="hljs-string">&quot;names&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>      <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;Beijing&quot;</span>,<br>      <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;Beijing&quot;</span>,<br>      <span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;system:masters&quot;</span>,<br>      <span class="hljs-string">&quot;OU&quot;</span>: <span class="hljs-string">&quot;Kubernetes-manual&quot;</span><br>    &#125;<br>  ]<br>&#125;<br>EOF<br><br>cat &gt; ca-<span class="hljs-built_in">config</span>.<span class="hljs-keyword">json </span>&lt;&lt; EOF <br>&#123;<br>  <span class="hljs-string">&quot;signing&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;default&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;expiry&quot;</span>: <span class="hljs-string">&quot;876000h&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;profiles&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;kubernetes&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;usages&quot;</span>: [<br>            <span class="hljs-string">&quot;signing&quot;</span>,<br>            <span class="hljs-string">&quot;key encipherment&quot;</span>,<br>            <span class="hljs-string">&quot;server auth&quot;</span>,<br>            <span class="hljs-string">&quot;client auth&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;expiry&quot;</span>: <span class="hljs-string">&quot;876000h&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br>EOF<br><br>cat &gt; etcd-ca-csr.<span class="hljs-keyword">json </span> &lt;&lt; EOF <br>&#123;<br>  <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;etcd&quot;</span>,<br>  <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>    <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">2048</span><br>  &#125;,<br>  <span class="hljs-string">&quot;names&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>      <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;Beijing&quot;</span>,<br>      <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;Beijing&quot;</span>,<br>      <span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;etcd&quot;</span>,<br>      <span class="hljs-string">&quot;OU&quot;</span>: <span class="hljs-string">&quot;Etcd Security&quot;</span><br>    &#125;<br>  ],<br>  <span class="hljs-string">&quot;ca&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;expiry&quot;</span>: <span class="hljs-string">&quot;876000h&quot;</span><br>  &#125;<br>&#125;<br>EOF<br><br>cat &gt; front-proxy-ca-csr.<span class="hljs-keyword">json </span> &lt;&lt; EOF <br>&#123;<br>  <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;kubernetes&quot;</span>,<br>  <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>     <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>     <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">2048</span><br>  &#125;,<br>  <span class="hljs-string">&quot;ca&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;expiry&quot;</span>: <span class="hljs-string">&quot;876000h&quot;</span><br>  &#125;<br>&#125;<br>EOF<br><br>cat &gt; kubelet-csr.<span class="hljs-keyword">json </span> &lt;&lt; EOF <br>&#123;<br>  <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;system:node:\$NODE&quot;</span>,<br>  <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>    <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">2048</span><br>  &#125;,<br>  <span class="hljs-string">&quot;names&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>      <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;Beijing&quot;</span>,<br>      <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;Beijing&quot;</span>,<br>      <span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;system:nodes&quot;</span>,<br>      <span class="hljs-string">&quot;OU&quot;</span>: <span class="hljs-string">&quot;Kubernetes-manual&quot;</span><br>    &#125;<br>  ]<br>&#125;<br>EOF<br><br>cat &gt; manager-csr.<span class="hljs-keyword">json </span>&lt;&lt; EOF <br>&#123;<br>  <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;system:kube-controller-manager&quot;</span>,<br>  <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>    <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">2048</span><br>  &#125;,<br>  <span class="hljs-string">&quot;names&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>      <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;Beijing&quot;</span>,<br>      <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;Beijing&quot;</span>,<br>      <span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;system:kube-controller-manager&quot;</span>,<br>      <span class="hljs-string">&quot;OU&quot;</span>: <span class="hljs-string">&quot;Kubernetes-manual&quot;</span><br>    &#125;<br>  ]<br>&#125;<br>EOF<br><br>cat &gt; apiserver-csr.<span class="hljs-keyword">json </span>&lt;&lt; EOF <br>&#123;<br>  <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;kube-apiserver&quot;</span>,<br>  <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>    <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">2048</span><br>  &#125;,<br>  <span class="hljs-string">&quot;names&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>      <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;Beijing&quot;</span>,<br>      <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;Beijing&quot;</span>,<br>      <span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;Kubernetes&quot;</span>,<br>      <span class="hljs-string">&quot;OU&quot;</span>: <span class="hljs-string">&quot;Kubernetes-manual&quot;</span><br>    &#125;<br>  ]<br>&#125;<br>EOF<br><br><br>cat &gt; ca-csr.<span class="hljs-keyword">json </span>  &lt;&lt; EOF <br>&#123;<br>  <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;kubernetes&quot;</span>,<br>  <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>    <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">2048</span><br>  &#125;,<br>  <span class="hljs-string">&quot;names&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>      <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;Beijing&quot;</span>,<br>      <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;Beijing&quot;</span>,<br>      <span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;Kubernetes&quot;</span>,<br>      <span class="hljs-string">&quot;OU&quot;</span>: <span class="hljs-string">&quot;Kubernetes-manual&quot;</span><br>    &#125;<br>  ],<br>  <span class="hljs-string">&quot;ca&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;expiry&quot;</span>: <span class="hljs-string">&quot;876000h&quot;</span><br>  &#125;<br>&#125;<br>EOF<br><br>cat &gt; etcd-csr.<span class="hljs-keyword">json </span>&lt;&lt; EOF <br>&#123;<br>  <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;etcd&quot;</span>,<br>  <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>    <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">2048</span><br>  &#125;,<br>  <span class="hljs-string">&quot;names&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>      <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;Beijing&quot;</span>,<br>      <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;Beijing&quot;</span>,<br>      <span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;etcd&quot;</span>,<br>      <span class="hljs-string">&quot;OU&quot;</span>: <span class="hljs-string">&quot;Etcd Security&quot;</span><br>    &#125;<br>  ]<br>&#125;<br>EOF<br><br><br>cat &gt; front-proxy-client-csr.<span class="hljs-keyword">json </span> &lt;&lt; EOF <br>&#123;<br>  <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;front-proxy-client&quot;</span>,<br>  <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>     <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>     <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">2048</span><br>  &#125;<br>&#125;<br>EOF<br><br><br>cat &gt; kube-proxy-csr.<span class="hljs-keyword">json </span> &lt;&lt; EOF <br>&#123;<br>  <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;system:kube-proxy&quot;</span>,<br>  <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>    <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">2048</span><br>  &#125;,<br>  <span class="hljs-string">&quot;names&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>      <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;Beijing&quot;</span>,<br>      <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;Beijing&quot;</span>,<br>      <span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;system:kube-proxy&quot;</span>,<br>      <span class="hljs-string">&quot;OU&quot;</span>: <span class="hljs-string">&quot;Kubernetes-manual&quot;</span><br>    &#125;<br>  ]<br>&#125;<br>EOF<br><br><br>cat &gt; <span class="hljs-keyword">scheduler-csr.json </span>&lt;&lt; EOF <br>&#123;<br>  <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;system:kube-scheduler&quot;</span>,<br>  <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>    <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">2048</span><br>  &#125;,<br>  <span class="hljs-string">&quot;names&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>      <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;Beijing&quot;</span>,<br>      <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;Beijing&quot;</span>,<br>      <span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;system:kube-scheduler&quot;</span>,<br>      <span class="hljs-string">&quot;OU&quot;</span>: <span class="hljs-string">&quot;Kubernetes-manual&quot;</span><br>    &#125;<br>  ]<br>&#125;<br>EOF<br><br></code></pre></td></tr></table></figure><h3 id="3-配置bootstrap定义"><a href="#3-配置bootstrap定义" class="headerlink" title="3.配置bootstrap定义"></a>3.配置bootstrap定义</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><br><span class="hljs-string">cd</span> <span class="hljs-string">..</span><br><span class="hljs-string">mkdir</span> <span class="hljs-string">bootstrap</span><br><span class="hljs-string">cd</span> <span class="hljs-string">bootstrap</span><br><span class="hljs-string">cat</span> <span class="hljs-string">&gt;</span> <span class="hljs-string">bootstrap.secret.yaml</span> <span class="hljs-string">&lt;&lt;</span> <span class="hljs-string">EOF</span> <br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Secret</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">bootstrap-token-c8ad9c</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">bootstrap.kubernetes.io/token</span><br><span class="hljs-attr">stringData:</span><br>  <span class="hljs-attr">description:</span> <span class="hljs-string">&quot;The default bootstrap token generated by &#x27;kubelet &#x27;.&quot;</span><br>  <span class="hljs-attr">token-id:</span> <span class="hljs-string">c8ad9c</span><br>  <span class="hljs-attr">token-secret:</span> <span class="hljs-string">2e4d610cf3e7426e</span><br>  <span class="hljs-attr">usage-bootstrap-authentication:</span> <span class="hljs-string">&quot;true&quot;</span><br>  <span class="hljs-attr">usage-bootstrap-signing:</span> <span class="hljs-string">&quot;true&quot;</span><br>  <span class="hljs-attr">auth-extra-groups:</span>  <span class="hljs-string">system:bootstrappers:default-node-token,system:bootstrappers:worker,system:bootstrappers:ingress</span><br> <br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubelet-bootstrap</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:node-bootstrapper</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">Group</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:bootstrappers:default-node-token</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">node-autoapprove-bootstrap</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:certificates.k8s.io:certificatesigningrequests:nodeclient</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">Group</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:bootstrappers:default-node-token</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">node-autoapprove-certificate-rotation</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:certificates.k8s.io:certificatesigningrequests:selfnodeclient</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">Group</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:nodes</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">rbac.authorization.kubernetes.io/autoupdate:</span> <span class="hljs-string">&quot;true&quot;</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">kubernetes.io/bootstrapping:</span> <span class="hljs-string">rbac-defaults</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:kube-apiserver-to-kubelet</span><br><span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-attr">resources:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">nodes/proxy</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">nodes/stats</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">nodes/log</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">nodes/spec</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">nodes/metrics</span><br>    <span class="hljs-attr">verbs:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;*&quot;</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:kube-apiserver</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:kube-apiserver-to-kubelet</span><br><span class="hljs-attr">subjects:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>    <span class="hljs-attr">kind:</span> <span class="hljs-string">User</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">kube-apiserver</span><br><span class="hljs-string">EOF</span><br><br></code></pre></td></tr></table></figure><h3 id="4-配置coredns"><a href="#4-配置coredns" class="headerlink" title="4.配置coredns"></a>4.配置coredns</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">cd</span> <span class="hljs-string">..</span><br><span class="hljs-string">mkdir</span> <span class="hljs-string">coredns</span><br><span class="hljs-string">cd</span> <span class="hljs-string">coredns</span><br><span class="hljs-string">cat</span> <span class="hljs-string">&gt;</span> <span class="hljs-string">coredns.yaml</span> <span class="hljs-string">&lt;&lt;</span> <span class="hljs-string">EOF</span> <br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">coredns</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">kubernetes.io/bootstrapping:</span> <span class="hljs-string">rbac-defaults</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:coredns</span><br><span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-attr">resources:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">endpoints</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">services</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">pods</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">namespaces</span><br>    <span class="hljs-attr">verbs:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">discovery.k8s.io</span><br>    <span class="hljs-attr">resources:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">endpointslices</span><br>    <span class="hljs-attr">verbs:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">rbac.authorization.kubernetes.io/autoupdate:</span> <span class="hljs-string">&quot;true&quot;</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">kubernetes.io/bootstrapping:</span> <span class="hljs-string">rbac-defaults</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:coredns</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:coredns</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">coredns</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">coredns</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">Corefile:</span> <span class="hljs-string">|</span><br><span class="hljs-string">    .:53 &#123;</span><br><span class="hljs-string">        errors</span><br><span class="hljs-string">        health &#123;</span><br><span class="hljs-string">          lameduck 5s</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        ready</span><br><span class="hljs-string">        kubernetes cluster.local in-addr.arpa ip6.arpa &#123;</span><br><span class="hljs-string">          fallthrough in-addr.arpa ip6.arpa</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        prometheus :9153</span><br><span class="hljs-string">        forward . /etc/resolv.conf &#123;</span><br><span class="hljs-string">          max_concurrent 1000</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        cache 30</span><br><span class="hljs-string">        loop</span><br><span class="hljs-string">        reload</span><br><span class="hljs-string">        loadbalance</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">coredns</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-dns</span><br>    <span class="hljs-attr">kubernetes.io/name:</span> <span class="hljs-string">&quot;CoreDNS&quot;</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-comment"># replicas: not specified here:</span><br>  <span class="hljs-comment"># 1. Default is 1.</span><br>  <span class="hljs-comment"># 2. Will be tuned in real time if DNS horizontal auto-scaling is turned on.</span><br>  <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">RollingUpdate</span><br>    <span class="hljs-attr">rollingUpdate:</span><br>      <span class="hljs-attr">maxUnavailable:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-dns</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-dns</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">priorityClassName:</span> <span class="hljs-string">system-cluster-critical</span><br>      <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">coredns</span><br>      <span class="hljs-attr">tolerations:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;CriticalAddonsOnly&quot;</span><br>          <span class="hljs-attr">operator:</span> <span class="hljs-string">&quot;Exists&quot;</span><br>      <span class="hljs-attr">nodeSelector:</span><br>        <span class="hljs-attr">kubernetes.io/os:</span> <span class="hljs-string">linux</span><br>      <span class="hljs-attr">affinity:</span><br>         <span class="hljs-attr">podAntiAffinity:</span><br>           <span class="hljs-attr">preferredDuringSchedulingIgnoredDuringExecution:</span><br>           <span class="hljs-bullet">-</span> <span class="hljs-attr">weight:</span> <span class="hljs-number">100</span><br>             <span class="hljs-attr">podAffinityTerm:</span><br>               <span class="hljs-attr">labelSelector:</span><br>                 <span class="hljs-attr">matchExpressions:</span><br>                   <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">k8s-app</span><br>                     <span class="hljs-attr">operator:</span> <span class="hljs-string">In</span><br>                     <span class="hljs-attr">values:</span> [<span class="hljs-string">&quot;kube-dns&quot;</span>]<br>               <span class="hljs-attr">topologyKey:</span> <span class="hljs-string">kubernetes.io/hostname</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">coredns</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">registry.cn-beijing.aliyuncs.com/dotbalo/coredns:1.8.6</span> <br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">limits:</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">170Mi</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">70Mi</span><br>        <span class="hljs-attr">args:</span> [ <span class="hljs-string">&quot;-conf&quot;</span>, <span class="hljs-string">&quot;/etc/coredns/Corefile&quot;</span> ]<br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config-volume</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/coredns</span><br>          <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">53</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">dns</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">UDP</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">53</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">dns-tcp</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">9153</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">metrics</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>        <span class="hljs-attr">securityContext:</span><br>          <span class="hljs-attr">allowPrivilegeEscalation:</span> <span class="hljs-literal">false</span><br>          <span class="hljs-attr">capabilities:</span><br>            <span class="hljs-attr">add:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">NET_BIND_SERVICE</span><br>            <span class="hljs-attr">drop:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">all</span><br>          <span class="hljs-attr">readOnlyRootFilesystem:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">livenessProbe:</span><br>          <span class="hljs-attr">httpGet:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/health</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>            <span class="hljs-attr">scheme:</span> <span class="hljs-string">HTTP</span><br>          <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">60</span><br>          <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">5</span><br>          <span class="hljs-attr">successThreshold:</span> <span class="hljs-number">1</span><br>          <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">5</span><br>        <span class="hljs-attr">readinessProbe:</span><br>          <span class="hljs-attr">httpGet:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/ready</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-number">8181</span><br>            <span class="hljs-attr">scheme:</span> <span class="hljs-string">HTTP</span><br>      <span class="hljs-attr">dnsPolicy:</span> <span class="hljs-string">Default</span><br>      <span class="hljs-attr">volumes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config-volume</span><br>          <span class="hljs-attr">configMap:</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">coredns</span><br>            <span class="hljs-attr">items:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">Corefile</span><br>              <span class="hljs-attr">path:</span> <span class="hljs-string">Corefile</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kube-dns</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">prometheus.io/port:</span> <span class="hljs-string">&quot;9153&quot;</span><br>    <span class="hljs-attr">prometheus.io/scrape:</span> <span class="hljs-string">&quot;true&quot;</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-dns</span><br>    <span class="hljs-attr">kubernetes.io/cluster-service:</span> <span class="hljs-string">&quot;true&quot;</span><br>    <span class="hljs-attr">kubernetes.io/name:</span> <span class="hljs-string">&quot;CoreDNS&quot;</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-dns</span><br>  <span class="hljs-attr">clusterIP:</span> <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.10</span> <br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">dns</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">53</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">UDP</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">dns-tcp</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">53</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">metrics</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">9153</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h3 id="5-配置metrics"><a href="#5-配置metrics" class="headerlink" title="5.配置metrics"></a>5.配置metrics</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><br><br><span class="hljs-string">cd</span> <span class="hljs-string">..</span><br><span class="hljs-string">mkdir</span> <span class="hljs-string">metrics-server</span><br><span class="hljs-string">cd</span> <span class="hljs-string">metrics-server</span><br><span class="hljs-string">cat</span> <span class="hljs-string">&gt;</span> <span class="hljs-string">metrics-server.yaml</span> <span class="hljs-string">&lt;&lt;</span> <span class="hljs-string">EOF</span> <br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">metrics-server</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">metrics-server</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">metrics-server</span><br>    <span class="hljs-attr">rbac.authorization.k8s.io/aggregate-to-admin:</span> <span class="hljs-string">&quot;true&quot;</span><br>    <span class="hljs-attr">rbac.authorization.k8s.io/aggregate-to-edit:</span> <span class="hljs-string">&quot;true&quot;</span><br>    <span class="hljs-attr">rbac.authorization.k8s.io/aggregate-to-view:</span> <span class="hljs-string">&quot;true&quot;</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:aggregated-metrics-reader</span><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">metrics.k8s.io</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">pods</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">nodes</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">metrics-server</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:metrics-server</span><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">pods</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">nodes</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">nodes/stats</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">namespaces</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">configmaps</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">RoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">metrics-server</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">metrics-server-auth-reader</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">Role</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">extension-apiserver-authentication-reader</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">metrics-server</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">metrics-server</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">metrics-server:system:auth-delegator</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:auth-delegator</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">metrics-server</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">metrics-server</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:metrics-server</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:metrics-server</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">metrics-server</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">metrics-server</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">metrics-server</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">https</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">443</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-string">https</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">metrics-server</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">metrics-server</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">metrics-server</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">metrics-server</span><br>  <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">rollingUpdate:</span><br>      <span class="hljs-attr">maxUnavailable:</span> <span class="hljs-number">0</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">metrics-server</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">args:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--cert-dir=/tmp</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--secure-port=4443</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--kubelet-use-node-status-port</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--metric-resolution=15s</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--kubelet-insecure-tls</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.pem</span> <span class="hljs-comment"># change to front-proxy-ca.crt for kubeadm</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--requestheader-username-headers=X-Remote-User</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--requestheader-group-headers=X-Remote-Group</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--requestheader-extra-headers-prefix=X-Remote-Extra-</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">registry.cn-beijing.aliyuncs.com/dotbalo/metrics-server:0.5.0</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>        <span class="hljs-attr">livenessProbe:</span><br>          <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">3</span><br>          <span class="hljs-attr">httpGet:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/livez</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-string">https</span><br>            <span class="hljs-attr">scheme:</span> <span class="hljs-string">HTTPS</span><br>          <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">10</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">metrics-server</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">4443</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">https</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>        <span class="hljs-attr">readinessProbe:</span><br>          <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">3</span><br>          <span class="hljs-attr">httpGet:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/readyz</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-string">https</span><br>            <span class="hljs-attr">scheme:</span> <span class="hljs-string">HTTPS</span><br>          <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">20</span><br>          <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">10</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">200Mi</span><br>        <span class="hljs-attr">securityContext:</span><br>          <span class="hljs-attr">readOnlyRootFilesystem:</span> <span class="hljs-literal">true</span><br>          <span class="hljs-attr">runAsNonRoot:</span> <span class="hljs-literal">true</span><br>          <span class="hljs-attr">runAsUser:</span> <span class="hljs-number">1000</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/tmp</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">tmp-dir</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">ca-ssl</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/kubernetes/pki</span><br>      <span class="hljs-attr">nodeSelector:</span><br>        <span class="hljs-attr">kubernetes.io/os:</span> <span class="hljs-string">linux</span><br>      <span class="hljs-attr">priorityClassName:</span> <span class="hljs-string">system-cluster-critical</span><br>      <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">metrics-server</span><br>      <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">emptyDir:</span> &#123;&#125;<br>        <span class="hljs-attr">name:</span> <span class="hljs-string">tmp-dir</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">ca-ssl</span><br>        <span class="hljs-attr">hostPath:</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/kubernetes/pki</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apiregistration.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">APIService</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">metrics-server</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">v1beta1.metrics.k8s.io</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">group:</span> <span class="hljs-string">metrics.k8s.io</span><br>  <span class="hljs-attr">groupPriorityMinimum:</span> <span class="hljs-number">100</span><br>  <span class="hljs-attr">insecureSkipTLSVerify:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">service:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">metrics-server</span><br>    <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">version:</span> <span class="hljs-string">v1beta1</span><br>  <span class="hljs-attr">versionPriority:</span> <span class="hljs-number">100</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h3 id="6-生成Etcd证书"><a href="#6-生成Etcd证书" class="headerlink" title="6.生成Etcd证书"></a>6.生成Etcd证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#创建目录</span><br><span class="hljs-built_in">mkdir</span> /etc/etcd/ssl -p<br><span class="hljs-comment">#生成证书</span><br><span class="hljs-built_in">cd</span> pki<br><span class="hljs-comment"># 生成etcd证书和etcd证书的key（如果你觉得以后可能会扩容，可以在ip那多写几个预留出来）</span><br><span class="hljs-comment"># 若没有IPv6 可删除可保留 </span><br>cfssl gencert -initca etcd-ca-csr.json | cfssljson -bare /etc/etcd/ssl/etcd-ca<br>cfssl gencert \<br>   -ca=/etc/etcd/ssl/etcd-ca.pem \<br>   -ca-key=/etc/etcd/ssl/etcd-ca-key.pem \<br>   -config=ca-config.json \<br>   -hostname=127.0.0.1,k8s-master01,192.168.100.21,192.168.100.22,192.168.100.23 \<br>   -profile=kubernetes \<br>   etcd-csr.json | cfssljson -bare /etc/etcd/ssl/etcd<br></code></pre></td></tr></table></figure><p>如果是多个master节点则将证书复制过去</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">Master=<span class="hljs-string">&#x27;k8s-master02 k8s-master03&#x27;</span><br><span class="hljs-keyword">for</span> NODE <span class="hljs-keyword">in</span> <span class="hljs-variable">$Master</span>; <span class="hljs-keyword">do</span> ssh <span class="hljs-variable">$NODE</span> <span class="hljs-string">&quot;mkdir -p /etc/etcd/ssl&quot;</span>; <span class="hljs-keyword">for</span> FILE <span class="hljs-keyword">in</span> etcd-ca-key.pem  etcd-ca.pem  etcd-key.pem  etcd.pem; <span class="hljs-keyword">do</span> scp /etc/etcd/ssl/<span class="hljs-variable">$&#123;FILE&#125;</span> <span class="hljs-variable">$NODE</span>:/etc/etcd/ssl/<span class="hljs-variable">$&#123;FILE&#125;</span>; <span class="hljs-keyword">done</span>; <span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h3 id="7-生成Kubernetes证书"><a href="#7-生成Kubernetes证书" class="headerlink" title="7.生成Kubernetes证书"></a>7.生成Kubernetes证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /etc/kubernetes/pki<br>cfssl gencert -initca ca-csr.json | cfssljson -bare /etc/kubernetes/pki/ca<br><br><span class="hljs-comment"># 生成一个根证书 ，多写了一些IP作为预留IP，为将来添加node做准备</span><br><span class="hljs-comment"># 10.96.0.1是service网段的第一个地址，需要计算，192.168.1.69为高可用vip地址</span><br><span class="hljs-comment"># 若没有IPv6 可删除可保留 </span><br><br>cfssl gencert   \<br>-ca=/etc/kubernetes/pki/ca.pem   \<br>-ca-key=/etc/kubernetes/pki/ca-key.pem   \<br>-config=ca-config.json   \<br>-hostname=10.96.0.1,192.168.1.69,127.0.0.1,kubernetes,kubernetes.default,kubernetes.default.svc,kubernetes.default.svc.cluster,kubernetes.default.svc.cluster.local,x.oiox.cn,k.oiox.cn,l.oiox.cn,o.oiox.cn,192.168.1.61,192.168.1.62,192.168.1.63,192.168.1.64,192.168.1.65,192.168.1.66,192.168.1.67,192.168.1.68,192.168.1.75,192.168.1.75,10.0.0.40,10.0.0.41   \<br>-profile=kubernetes   apiserver-csr.json | cfssljson -bare /etc/kubernetes/pki/apiserver<br></code></pre></td></tr></table></figure><h3 id="8-生成apiserver证书"><a href="#8-生成apiserver证书" class="headerlink" title="8.生成apiserver证书"></a>8.生成apiserver证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">cfssl gencert   -initca front-proxy-ca-csr.json | cfssljson -bare /etc/kubernetes/pki/front-proxy-ca <br><br><span class="hljs-comment"># 有一个警告，可以忽略</span><br><br>cfssl gencert  \<br>-ca=/etc/kubernetes/pki/front-proxy-ca.pem   \<br>-ca-key=/etc/kubernetes/pki/front-proxy-ca-key.pem   \<br>-config=ca-config.json   \<br>-profile=kubernetes   front-proxy-client-csr.json | cfssljson -bare /etc/kubernetes/pki/front-proxy-client<br></code></pre></td></tr></table></figure><h3 id="9-生成controller-manage的证书"><a href="#9-生成controller-manage的证书" class="headerlink" title="9.生成controller-manage的证书"></a>9.生成controller-manage的证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs bash">cfssl gencert \<br>   -ca=/etc/kubernetes/pki/ca.pem \<br>   -ca-key=/etc/kubernetes/pki/ca-key.pem \<br>   -config=ca-config.json \<br>   -profile=kubernetes \<br>   manager-csr.json | cfssljson -bare /etc/kubernetes/pki/controller-manager<br><br><span class="hljs-comment"># 设置一个集群项</span><br><br>kubectl config set-cluster kubernetes \<br>     --certificate-authority=/etc/kubernetes/pki/ca.pem \<br>     --embed-certs=<span class="hljs-literal">true</span> \<br>     --server=https://192.168.1.69:8443 \<br>     --kubeconfig=/etc/kubernetes/controller-manager.kubeconfig<br><br><span class="hljs-comment"># 设置一个环境项，一个上下文</span><br><br>kubectl config set-context system:kube-controller-manager@kubernetes \<br>    --cluster=kubernetes \<br>    --user=system:kube-controller-manager \<br>    --kubeconfig=/etc/kubernetes/controller-manager.kubeconfig<br><br><span class="hljs-comment"># 设置一个用户项</span><br><br>kubectl config set-credentials system:kube-controller-manager \<br>     --client-certificate=/etc/kubernetes/pki/controller-manager.pem \<br>     --client-key=/etc/kubernetes/pki/controller-manager-key.pem \<br>     --embed-certs=<span class="hljs-literal">true</span> \<br>     --kubeconfig=/etc/kubernetes/controller-manager.kubeconfig<br><br><span class="hljs-comment"># 设置默认环境</span><br><br>kubectl config use-context system:kube-controller-manager@kubernetes \<br>     --kubeconfig=/etc/kubernetes/controller-manager.kubeconfig<br><br>cfssl gencert \<br>   -ca=/etc/kubernetes/pki/ca.pem \<br>   -ca-key=/etc/kubernetes/pki/ca-key.pem \<br>   -config=ca-config.json \<br>   -profile=kubernetes \<br>   scheduler-csr.json | cfssljson -bare /etc/kubernetes/pki/scheduler<br><br>kubectl config set-cluster kubernetes \<br>     --certificate-authority=/etc/kubernetes/pki/ca.pem \<br>     --embed-certs=<span class="hljs-literal">true</span> \<br>     --server=https://192.168.1.69:8443 \<br>     --kubeconfig=/etc/kubernetes/scheduler.kubeconfig<br><br>kubectl config set-credentials system:kube-scheduler \<br>     --client-certificate=/etc/kubernetes/pki/scheduler.pem \<br>     --client-key=/etc/kubernetes/pki/scheduler-key.pem \<br>     --embed-certs=<span class="hljs-literal">true</span> \<br>     --kubeconfig=/etc/kubernetes/scheduler.kubeconfig<br><br>kubectl config set-context system:kube-scheduler@kubernetes \<br>     --cluster=kubernetes \<br>     --user=system:kube-scheduler \<br>     --kubeconfig=/etc/kubernetes/scheduler.kubeconfig<br><br>kubectl config use-context system:kube-scheduler@kubernetes \<br>     --kubeconfig=/etc/kubernetes/scheduler.kubeconfig<br><br>cfssl gencert \<br>   -ca=/etc/kubernetes/pki/ca.pem \<br>   -ca-key=/etc/kubernetes/pki/ca-key.pem \<br>   -config=ca-config.json \<br>   -profile=kubernetes \<br>   admin-csr.json | cfssljson -bare /etc/kubernetes/pki/admin<br><br>kubectl config set-cluster kubernetes     \<br>  --certificate-authority=/etc/kubernetes/pki/ca.pem     \<br>  --embed-certs=<span class="hljs-literal">true</span>     \<br>  --server=https://192.168.1.69:8443     \<br>  --kubeconfig=/etc/kubernetes/admin.kubeconfig<br><br>kubectl config set-credentials kubernetes-admin  \<br>  --client-certificate=/etc/kubernetes/pki/admin.pem     \<br>  --client-key=/etc/kubernetes/pki/admin-key.pem     \<br>  --embed-certs=<span class="hljs-literal">true</span>     \<br>  --kubeconfig=/etc/kubernetes/admin.kubeconfig<br><br>kubectl config set-context kubernetes-admin@kubernetes    \<br>  --cluster=kubernetes     \<br>  --user=kubernetes-admin     \<br>  --kubeconfig=/etc/kubernetes/admin.kubeconfig<br><br>kubectl config use-context kubernetes-admin@kubernetes  --kubeconfig=/etc/kubernetes/admin.kubeconfig<br></code></pre></td></tr></table></figure><h3 id="10-生成kube-proxy证书"><a href="#10-生成kube-proxy证书" class="headerlink" title="10.生成kube-proxy证书"></a>10.生成kube-proxy证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash">cfssl gencert \<br>   -ca=/etc/kubernetes/pki/ca.pem \<br>   -ca-key=/etc/kubernetes/pki/ca-key.pem \<br>   -config=ca-config.json \<br>   -profile=kubernetes \<br>   kube-proxy-csr.json | cfssljson -bare /etc/kubernetes/pki/kube-proxy<br>   <br>kubectl config set-cluster kubernetes     \<br>  --certificate-authority=/etc/kubernetes/pki/ca.pem     \<br>  --embed-certs=<span class="hljs-literal">true</span>     \<br>  --server=https://192.168.1.69:8443     \<br>  --kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig<br><br>kubectl config set-credentials kube-proxy  \<br>  --client-certificate=/etc/kubernetes/pki/kube-proxy.pem     \<br>  --client-key=/etc/kubernetes/pki/kube-proxy-key.pem     \<br>  --embed-certs=<span class="hljs-literal">true</span>     \<br>  --kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig<br><br>kubectl config set-context kube-proxy@kubernetes    \<br>  --cluster=kubernetes     \<br>  --user=kube-proxy     \<br>  --kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig<br><br>kubectl config use-context kube-proxy@kubernetes  --kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig<br></code></pre></td></tr></table></figure><h3 id="11-创建ServiceAccount-Key-secret"><a href="#11-创建ServiceAccount-Key-secret" class="headerlink" title="11.创建ServiceAccount Key secret"></a>11.创建ServiceAccount Key secret</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">openssl genrsa -out /etc/kubernetes/pki/sa.key 2048<br>openssl rsa -<span class="hljs-keyword">in</span> /etc/kubernetes/pki/sa.key -pubout -out /etc/kubernetes/pki/sa.pub<br></code></pre></td></tr></table></figure><h3 id="12-查看证书"><a href="#12-查看证书" class="headerlink" title="12.查看证书"></a>12.查看证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> /etc/kubernetes/pki/<br><span class="hljs-comment"># 26个证书</span><br></code></pre></td></tr></table></figure><h3 id="13-复制证书到其他节点"><a href="#13-复制证书到其他节点" class="headerlink" title="13.复制证书到其他节点"></a>13.复制证书到其他节点</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">cd</span> <span class="hljs-string">/etc/kubernetes/</span><br><br><span class="hljs-string">for</span> <span class="hljs-string">NODE</span> <span class="hljs-string">in</span> <span class="hljs-string">k8s-node01</span> <span class="hljs-string">k8s-node02;</span> <span class="hljs-string">do</span> <span class="hljs-string">ssh</span> <span class="hljs-string">$NODE</span> <span class="hljs-string">mkdir</span> <span class="hljs-string">-p</span> <span class="hljs-string">/etc/kubernetes/pki;</span> <span class="hljs-string">for</span> <span class="hljs-string">FILE</span> <span class="hljs-string">in</span> <span class="hljs-string">pki/ca.pem</span> <span class="hljs-string">pki/ca-key.pem</span> <span class="hljs-string">pki/front-proxy-ca.pem</span> <span class="hljs-string">bootstrap-kubelet.kubeconfig</span> <span class="hljs-string">kube-proxy.kubeconfig;</span> <span class="hljs-string">do</span> <span class="hljs-string">scp</span> <span class="hljs-string">/etc/kubernetes/$FILE</span> <span class="hljs-string">$NODE:/etc/kubernetes/$&#123;FILE&#125;;</span> <span class="hljs-string">done;</span> <span class="hljs-string">done</span><br></code></pre></td></tr></table></figure><h2 id="安装Etcd"><a href="#安装Etcd" class="headerlink" title="安装Etcd"></a>安装Etcd</h2><h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h3><blockquote><p>github二进制包下载地址：<a href="https://github.com/etcd-io/etcd/releases">https://github.com/etcd-io/etcd/releases</a></p></blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">https</span>://github.com/etcd-io/etcd/releases/download/v3.<span class="hljs-number">4</span>.<span class="hljs-number">22</span>/etcd-v3.<span class="hljs-number">4</span>.<span class="hljs-number">22</span>-linux-arm64.tar.gz<br></code></pre></td></tr></table></figure><h3 id="2-解压"><a href="#2-解压" class="headerlink" title="2.解压"></a>2.解压</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -xf etcd*.tar.gz &amp;&amp; <span class="hljs-built_in">mv</span> etcd-*/etcd /usr/local/bin/ &amp;&amp; <span class="hljs-built_in">mv</span> etcd-*/etcdctl /usr/local/bin/<br></code></pre></td></tr></table></figure><h3 id="3-查看版本"><a href="#3-查看版本" class="headerlink" title="3.查看版本"></a>3.查看版本</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">etcdctl <span class="hljs-built_in">version</span><br></code></pre></td></tr></table></figure><h3 id="4-配置etcd"><a href="#4-配置etcd" class="headerlink" title="4.配置etcd"></a>4.配置etcd</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 如果要用IPv6那么把IPv4地址修改为IPv6即可</span><br><span class="hljs-string">cat</span> <span class="hljs-string">&gt;</span> <span class="hljs-string">/etc/etcd/etcd.config.yml</span> <span class="hljs-string">&lt;&lt;</span> <span class="hljs-string">EOF</span> <br><span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;k8s-master01&#x27;</span><br><span class="hljs-attr">data-dir:</span> <span class="hljs-string">/var/lib/etcd</span><br><span class="hljs-attr">wal-dir:</span> <span class="hljs-string">/var/lib/etcd/wal</span><br><span class="hljs-attr">snapshot-count:</span> <span class="hljs-number">5000</span><br><span class="hljs-attr">heartbeat-interval:</span> <span class="hljs-number">100</span><br><span class="hljs-attr">election-timeout:</span> <span class="hljs-number">1000</span><br><span class="hljs-attr">quota-backend-bytes:</span> <span class="hljs-number">0</span><br><span class="hljs-attr">listen-peer-urls:</span> <span class="hljs-string">&#x27;https://192.168.1.61:2380&#x27;</span><br><span class="hljs-attr">listen-client-urls:</span> <span class="hljs-string">&#x27;https://192.168.1.61:2379,http://127.0.0.1:2379&#x27;</span><br><span class="hljs-attr">max-snapshots:</span> <span class="hljs-number">3</span><br><span class="hljs-attr">max-wals:</span> <span class="hljs-number">5</span><br><span class="hljs-attr">cors:</span><br><span class="hljs-attr">initial-advertise-peer-urls:</span> <span class="hljs-string">&#x27;https://192.168.100.21:2380&#x27;</span><br><span class="hljs-attr">advertise-client-urls:</span> <span class="hljs-string">&#x27;https://192.168.100.21:2379&#x27;</span><br><span class="hljs-attr">discovery:</span><br><span class="hljs-attr">discovery-fallback:</span> <span class="hljs-string">&#x27;proxy&#x27;</span><br><span class="hljs-attr">discovery-proxy:</span><br><span class="hljs-attr">discovery-srv:</span><br><span class="hljs-attr">initial-cluster:</span> <span class="hljs-string">&#x27;k8s-master01=https://192.168.100.21:2380&#x27;</span><br><span class="hljs-attr">initial-cluster-token:</span> <span class="hljs-string">&#x27;etcd-k8s-cluster&#x27;</span><br><span class="hljs-attr">initial-cluster-state:</span> <span class="hljs-string">&#x27;new&#x27;</span><br><span class="hljs-attr">strict-reconfig-check:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">enable-v2:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">enable-pprof:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">proxy:</span> <span class="hljs-string">&#x27;off&#x27;</span><br><span class="hljs-attr">proxy-failure-wait:</span> <span class="hljs-number">5000</span><br><span class="hljs-attr">proxy-refresh-interval:</span> <span class="hljs-number">30000</span><br><span class="hljs-attr">proxy-dial-timeout:</span> <span class="hljs-number">1000</span><br><span class="hljs-attr">proxy-write-timeout:</span> <span class="hljs-number">5000</span><br><span class="hljs-attr">proxy-read-timeout:</span> <span class="hljs-number">0</span><br><span class="hljs-attr">client-transport-security:</span><br>  <span class="hljs-attr">cert-file:</span> <span class="hljs-string">&#x27;/etc/kubernetes/pki/etcd/etcd.pem&#x27;</span><br>  <span class="hljs-attr">key-file:</span> <span class="hljs-string">&#x27;/etc/kubernetes/pki/etcd/etcd-key.pem&#x27;</span><br>  <span class="hljs-attr">client-cert-auth:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">trusted-ca-file:</span> <span class="hljs-string">&#x27;/etc/kubernetes/pki/etcd/etcd-ca.pem&#x27;</span><br>  <span class="hljs-attr">auto-tls:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">peer-transport-security:</span><br>  <span class="hljs-attr">cert-file:</span> <span class="hljs-string">&#x27;/etc/kubernetes/pki/etcd/etcd.pem&#x27;</span><br>  <span class="hljs-attr">key-file:</span> <span class="hljs-string">&#x27;/etc/kubernetes/pki/etcd/etcd-key.pem&#x27;</span><br>  <span class="hljs-attr">peer-client-cert-auth:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">trusted-ca-file:</span> <span class="hljs-string">&#x27;/etc/kubernetes/pki/etcd/etcd-ca.pem&#x27;</span><br>  <span class="hljs-attr">auto-tls:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">debug:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">log-package-levels:</span><br><span class="hljs-attr">log-outputs:</span> [<span class="hljs-string">default</span>]<br><span class="hljs-attr">force-new-cluster:</span> <span class="hljs-literal">false</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>5.创建服务</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">cat</span> <span class="hljs-string">&gt;</span> <span class="hljs-string">/usr/lib/systemd/system/etcd.service</span> <span class="hljs-string">&lt;&lt;</span> <span class="hljs-string">EOF</span><br><br>[<span class="hljs-string">Unit</span>]<br><span class="hljs-string">Description=Etcd</span> <span class="hljs-string">Service</span><br><span class="hljs-string">Documentation=https://coreos.com/etcd/docs/latest/</span><br><span class="hljs-string">After=network.target</span><br><br>[<span class="hljs-string">Service</span>]<br><span class="hljs-string">Type=notify</span><br><span class="hljs-string">ExecStart=/usr/local/bin/etcd</span> <span class="hljs-string">--config-file=/etc/etcd/etcd.config.yml</span><br><span class="hljs-string">Restart=on-failure</span><br><span class="hljs-string">RestartSec=10</span><br><span class="hljs-string">LimitNOFILE=65536</span><br><br>[<span class="hljs-string">Install</span>]<br><span class="hljs-string">WantedBy=multi-user.target</span><br><span class="hljs-string">Alias=etcd3.service</span><br><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>6.配置证书</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">mkdir</span> <span class="hljs-string">/etc/kubernetes/pki/etcd</span><br><span class="hljs-string">ln</span> <span class="hljs-string">-s</span> <span class="hljs-string">/etc/etcd/ssl/*</span> <span class="hljs-string">/etc/kubernetes/pki/etcd/</span><br><span class="hljs-string">systemctl</span> <span class="hljs-string">daemon-reload</span><br><span class="hljs-string">systemctl</span> <span class="hljs-string">enable</span> <span class="hljs-string">--now</span> <span class="hljs-string">etcd</span><br></code></pre></td></tr></table></figure><h2 id="安装Containerd"><a href="#安装Containerd" class="headerlink" title="安装Containerd"></a>安装Containerd</h2><h3 id="1-下载etcdctl二进制包"><a href="#1-下载etcdctl二进制包" class="headerlink" title="1.下载etcdctl二进制包"></a>1.下载etcdctl二进制包</h3><blockquote><p>github二进制包下载地址：<a href="https://github.com/etcd-io/etcd/releases">https://github.com/etcd-io/etcd/releases</a></p></blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> https://github.com/etcd-io/etcd/releases/download/v3.<span class="hljs-number">4</span>.<span class="hljs-number">22</span>/etcd-v3.<span class="hljs-number">4</span>.<span class="hljs-number">22</span>-linux-arm64.tar.gz<br></code></pre></td></tr></table></figure><h3 id="2-containerd二进制包下载"><a href="#2-containerd二进制包下载" class="headerlink" title="2.containerd二进制包下载"></a>2.containerd二进制包下载</h3><blockquote><p>github下载地址：<a href="https://github.com/containerd/containerd/releases">https://github.com/containerd/containerd/releases</a></p></blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> https://github.com/containerd/containerd/releases/download/v1.<span class="hljs-number">7</span>.<span class="hljs-number">0</span>-beta.<span class="hljs-number">0</span>/containerd-<span class="hljs-number">1</span>.<span class="hljs-number">7</span>.<span class="hljs-number">0</span>-beta.<span class="hljs-number">0</span>-linux-arm64.tar.gz<br></code></pre></td></tr></table></figure><h3 id="3-下载带cni插件的二进制包。"><a href="#3-下载带cni插件的二进制包。" class="headerlink" title="3.下载带cni插件的二进制包。"></a>3.下载带cni插件的二进制包。</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> https://github.com/containerd/containerd/releases/download/v1.<span class="hljs-number">7</span>.<span class="hljs-number">0</span>-beta.<span class="hljs-number">0</span>/cri-containerd-<span class="hljs-number">1</span>.<span class="hljs-number">7</span>.<span class="hljs-number">0</span>-beta.<span class="hljs-number">0</span>-linux-arm64.tar.gz<br><span class="hljs-attribute">wget</span> https://github.com/containerd/containerd/releases/download/v1.<span class="hljs-number">7</span>.<span class="hljs-number">0</span>-beta.<span class="hljs-number">0</span>/cri-containerd-cni-<span class="hljs-number">1</span>.<span class="hljs-number">7</span>.<span class="hljs-number">0</span>-beta.<span class="hljs-number">0</span>-linux-arm64.tar.gz<br></code></pre></td></tr></table></figure><h3 id="4-cni插件下载"><a href="#4-cni插件下载" class="headerlink" title="4.cni插件下载"></a>4.cni插件下载</h3><blockquote><p>github下载地址：<a href="https://github.com/containernetworking/plugins/releases">https://github.com/containernetworking/plugins/releases</a></p></blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> https://github.com/containernetworking/plugins/releases/download/v1.<span class="hljs-number">1</span>.<span class="hljs-number">1</span>/cni-plugins-linux-arm64-v1.<span class="hljs-number">1</span>.<span class="hljs-number">1</span>.tgz<br></code></pre></td></tr></table></figure><h3 id="5-crictl客户端二进制下载"><a href="#5-crictl客户端二进制下载" class="headerlink" title="5.crictl客户端二进制下载"></a>5.crictl客户端二进制下载</h3><blockquote><p>github下载：<a href="https://github.com/kubernetes-sigs/cri-tools/releases">https://github.com/kubernetes-sigs/cri-tools/releases</a></p></blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.<span class="hljs-number">25</span>.<span class="hljs-number">0</span>/crictl-v1.<span class="hljs-number">25</span>.<span class="hljs-number">0</span>-linux-arm64.tar.gz<br></code></pre></td></tr></table></figure><h3 id="6-解压缩到指定文件夹"><a href="#6-解压缩到指定文件夹" class="headerlink" title="6.解压缩到指定文件夹"></a>6.解压缩到指定文件夹</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#创建cni插件所需目录</span><br><span class="hljs-attribute">mkdir</span> -p /etc/cni/net.d /opt/cni/bin <br><span class="hljs-comment">#解压cni二进制包</span><br><span class="hljs-attribute">tar</span> xf cni-plugins-linux-arm64-v1.<span class="hljs-number">1</span>.<span class="hljs-number">1</span>.tgz -C /opt/cni/bin/<br><span class="hljs-attribute">tar</span> -xzf cri-containerd-cni-<span class="hljs-number">1</span>.<span class="hljs-number">7</span>.<span class="hljs-number">0</span>-beta.<span class="hljs-number">0</span>-linux-arm64.tar.gz -C /<br></code></pre></td></tr></table></figure><h3 id="7-创建服务启动文件"><a href="#7-创建服务启动文件" class="headerlink" title="7.创建服务启动文件"></a>7.创建服务启动文件</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cat &gt; /etc/systemd/system/containerd.service &lt;&lt;EOF<br>[Unit]<br><span class="hljs-attribute">Description</span>=containerd container runtime<br><span class="hljs-attribute">Documentation</span>=https://containerd.io<br><span class="hljs-attribute">After</span>=network.target local-fs.target<br><br>[Service]<br><span class="hljs-attribute">ExecStartPre</span>=-/sbin/modprobe overlay<br><span class="hljs-attribute">ExecStart</span>=/usr/local/bin/containerd<br><span class="hljs-attribute">Type</span>=notify<br><span class="hljs-attribute">Delegate</span>=<span class="hljs-literal">yes</span><br><span class="hljs-attribute">KillMode</span>=process<br><span class="hljs-attribute">Restart</span>=always<br><span class="hljs-attribute">RestartSec</span>=5<br><span class="hljs-attribute">LimitNPROC</span>=infinity<br><span class="hljs-attribute">LimitCORE</span>=infinity<br><span class="hljs-attribute">LimitNOFILE</span>=infinity<br><span class="hljs-attribute">TasksMax</span>=infinity<br><span class="hljs-attribute">OOMScoreAdjust</span>=-999<br><br>[Install]<br><span class="hljs-attribute">WantedBy</span>=multi-user.target<br>EOF<br></code></pre></td></tr></table></figure><h3 id="8-配置Containerd所需的模块"><a href="#8-配置Containerd所需的模块" class="headerlink" title="8.配置Containerd所需的模块"></a>8.配置Containerd所需的模块</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF | sudo tee /etc/modules-load.d/containerd.conf</span><br><span class="hljs-string">overlay</span><br><span class="hljs-string">br_netfilter</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h3 id="9-加载模块"><a href="#9-加载模块" class="headerlink" title="9.加载模块"></a>9.加载模块</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima">systemctl <span class="hljs-built_in">restart</span> systemd-modules-<span class="hljs-built_in">load</span>.service<br>systemctl <span class="hljs-built_in">status</span> systemd-modules-<span class="hljs-built_in">load</span>.service<br></code></pre></td></tr></table></figure><h3 id="10-配置Containerd所需的内核"><a href="#10-配置Containerd所需的内核" class="headerlink" title="10.配置Containerd所需的内核"></a>10.配置Containerd所需的内核</h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs gauss">cat &lt;&lt;<span class="hljs-built_in">EOF</span> | sudo tee /etc/sysctl.d/<span class="hljs-number">99</span>-kubernetes-cri.conf<br>net.bridge.bridge-nf-<span class="hljs-keyword">call</span>-iptables  = <span class="hljs-number">1</span><br>net.ipv4.ip_forward                 = <span class="hljs-number">1</span><br>net.bridge.bridge-nf-<span class="hljs-keyword">call</span>-ip6tables = <span class="hljs-number">1</span><br><span class="hljs-built_in">EOF</span><br><br><span class="hljs-meta"># 加载内核</span><br><br>sysctl --<span class="hljs-keyword">system</span><br></code></pre></td></tr></table></figure><h3 id="11-创建Containerd的配置文件"><a href="#11-创建Containerd的配置文件" class="headerlink" title="11.创建Containerd的配置文件"></a>11.创建Containerd的配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建默认配置文件</span><br><span class="hljs-built_in">mkdir</span> -p /etc/containerd<br>containerd config default | <span class="hljs-built_in">tee</span> /etc/containerd/config.toml<br><br><span class="hljs-comment"># 修改Containerd的配置文件</span><br>sed -i <span class="hljs-string">&quot;s#SystemdCgroup\ \=\ false#SystemdCgroup\ \=\ true#g&quot;</span> /etc/containerd/config.toml<br><span class="hljs-built_in">cat</span> /etc/containerd/config.toml | grep SystemdCgroup<br><br>sed -i <span class="hljs-string">&quot;s#k8s.gcr.io#registry.cn-hangzhou.aliyuncs.com/chenby#g&quot;</span> /etc/containerd/config.toml<br><span class="hljs-built_in">cat</span> /etc/containerd/config.toml | grep sandbox_image<br></code></pre></td></tr></table></figure><h3 id="12-启动并设置为开机启动"><a href="#12-启动并设置为开机启动" class="headerlink" title="12.启动并设置为开机启动"></a>12.启动并设置为开机启动</h3><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl daemon-reload<br><span class="hljs-params">system</span>ctl enable --now containerd<br></code></pre></td></tr></table></figure><h3 id="13-配置crictl客户端连接的运行时位置"><a href="#13-配置crictl客户端连接的运行时位置" class="headerlink" title="13.配置crictl客户端连接的运行时位置"></a>13.配置crictl客户端连接的运行时位置</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#解压</span><br>tar xf crictl-v1.<span class="hljs-number">25.0</span>-linux-arm64.tar.gz -C <span class="hljs-regexp">/usr/</span>bin/<br><br><span class="hljs-comment">#生成配置文件</span><br>cat &gt; <span class="hljs-regexp">/etc/</span>crictl.yaml &lt;&lt;EOF<br>runtime-endpoint: unix:<span class="hljs-regexp">//</span><span class="hljs-regexp">/run/</span>containerd/containerd.sock<br>image-endpoint: unix:<span class="hljs-regexp">//</span><span class="hljs-regexp">/run/</span>containerd/containerd.sock<br>timeout: <span class="hljs-number">10</span><br>debug: false<br>EOF<br><br><span class="hljs-comment">#测试</span><br>systemctl restart  containerd<br>crictl info<br></code></pre></td></tr></table></figure><h2 id="安装kubernetes"><a href="#安装kubernetes" class="headerlink" title="安装kubernetes"></a>安装kubernetes</h2><h3 id="1-下载kubernetes"><a href="#1-下载kubernetes" class="headerlink" title="1.下载kubernetes"></a>1.下载kubernetes</h3><blockquote><p>github二进制包下载地址：<a href="https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG-1.25.md">https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG-1.25.md</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://dl.k8s.io/v1.25.3/kubernetes-server-linux-arm64.tar.gz<br></code></pre></td></tr></table></figure><h3 id="2-解压压缩包"><a href="#2-解压压缩包" class="headerlink" title="2.解压压缩包"></a>2.解压压缩包</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift">tar <span class="hljs-operator">-</span>xf kubernetes<span class="hljs-operator">-</span>server<span class="hljs-operator">-</span>linux<span class="hljs-operator">-</span>arm64.tar.gz  <span class="hljs-operator">--</span>strip<span class="hljs-operator">-</span>components<span class="hljs-operator">=</span><span class="hljs-number">3</span> <span class="hljs-operator">-</span><span class="hljs-type">C</span> <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin kubernetes/</span>server<span class="hljs-regexp">/bin/</span>kube&#123;<span class="hljs-keyword">let</span>,ctl,<span class="hljs-operator">-</span>apiserver,<span class="hljs-operator">-</span>controller<span class="hljs-operator">-</span>manager,<span class="hljs-operator">-</span>scheduler,<span class="hljs-operator">-</span>proxy&#125;<br></code></pre></td></tr></table></figure><h3 id="3-查看版本-1"><a href="#3-查看版本-1" class="headerlink" title="3.查看版本"></a>3.查看版本</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">kubelet <span class="hljs-comment">--version</span><br></code></pre></td></tr></table></figure><h3 id="4-创建必要的目录"><a href="#4-创建必要的目录" class="headerlink" title="4.创建必要的目录"></a>4.创建必要的目录</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">mkdir</span> <span class="hljs-string">-p</span> <span class="hljs-string">/etc/kubernetes/manifests/</span> <span class="hljs-string">/etc/systemd/system/kubelet.service.d</span> <span class="hljs-string">/var/lib/kubelet</span> <span class="hljs-string">/var/log/kubernetes</span><br></code></pre></td></tr></table></figure><h3 id="5-创建api-server"><a href="#5-创建api-server" class="headerlink" title="5.创建api-server"></a>5.创建api-server</h3><blockquote><p>只需要在master节点</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">cat</span> <span class="hljs-string">&gt;</span> <span class="hljs-string">/usr/lib/systemd/system/kube-apiserver.service</span> <span class="hljs-string">&lt;&lt;</span> <span class="hljs-string">EOF</span><br><br>[<span class="hljs-string">Unit</span>]<br><span class="hljs-string">Description=Kubernetes</span> <span class="hljs-string">API</span> <span class="hljs-string">Server</span><br><span class="hljs-string">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="hljs-string">After=network.target</span><br><br>[<span class="hljs-string">Service</span>]<br><span class="hljs-string">ExecStart=/usr/local/bin/kube-apiserver</span> <span class="hljs-string">\\</span><br>      <span class="hljs-string">--v=2</span>  <span class="hljs-string">\\</span><br>      <span class="hljs-string">--logtostderr=true</span>  <span class="hljs-string">\\</span><br>      <span class="hljs-string">--allow-privileged=true</span>  <span class="hljs-string">\\</span><br>      <span class="hljs-string">--bind-address=0.0.0.0</span>  <span class="hljs-string">\\</span><br>      <span class="hljs-string">--secure-port=6443</span>  <span class="hljs-string">\\</span><br>      <span class="hljs-string">--advertise-address=192.168.1.61</span> <span class="hljs-string">\\</span><br>      <span class="hljs-string">--service-cluster-ip-range=10.96.0.0/12,fd00::/108</span>  <span class="hljs-string">\\</span><br>      <span class="hljs-string">--service-node-port-range=30000-32767</span>  <span class="hljs-string">\\</span><br>      <span class="hljs-string">--etcd-servers=https://192.168.100.21:2379</span> <span class="hljs-string">\\</span><br>      <span class="hljs-string">--etcd-cafile=/etc/etcd/ssl/etcd-ca.pem</span>  <span class="hljs-string">\\</span><br>      <span class="hljs-string">--etcd-certfile=/etc/etcd/ssl/etcd.pem</span>  <span class="hljs-string">\\</span><br>      <span class="hljs-string">--etcd-keyfile=/etc/etcd/ssl/etcd-key.pem</span>  <span class="hljs-string">\\</span><br>      <span class="hljs-string">--client-ca-file=/etc/kubernetes/pki/ca.pem</span>  <span class="hljs-string">\\</span><br>      <span class="hljs-string">--tls-cert-file=/etc/kubernetes/pki/apiserver.pem</span>  <span class="hljs-string">\\</span><br>      <span class="hljs-string">--tls-private-key-file=/etc/kubernetes/pki/apiserver-key.pem</span>  <span class="hljs-string">\\</span><br>      <span class="hljs-string">--kubelet-client-certificate=/etc/kubernetes/pki/apiserver.pem</span>  <span class="hljs-string">\\</span><br>      <span class="hljs-string">--kubelet-client-key=/etc/kubernetes/pki/apiserver-key.pem</span>  <span class="hljs-string">\\</span><br>      <span class="hljs-string">--service-account-key-file=/etc/kubernetes/pki/sa.pub</span>  <span class="hljs-string">\\</span><br>      <span class="hljs-string">--service-account-signing-key-file=/etc/kubernetes/pki/sa.key</span>  <span class="hljs-string">\\</span><br>      <span class="hljs-string">--service-account-issuer=https://kubernetes.default.svc.cluster.local</span> <span class="hljs-string">\\</span><br>      <span class="hljs-string">--kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname</span>  <span class="hljs-string">\\</span><br>      <span class="hljs-string">--enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,ResourceQuota</span>  <span class="hljs-string">\</span><br>      <span class="hljs-string">--authorization-mode=Node,RBAC</span>  <span class="hljs-string">\\</span><br>      <span class="hljs-string">--enable-bootstrap-token-auth=true</span>  <span class="hljs-string">\\</span><br>      <span class="hljs-string">--requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.pem</span>  <span class="hljs-string">\\</span><br>      <span class="hljs-string">--proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.pem</span>  <span class="hljs-string">\\</span><br>      <span class="hljs-string">--proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client-key.pem</span>  <span class="hljs-string">\\</span><br>      <span class="hljs-string">--requestheader-allowed-names=aggregator</span>  <span class="hljs-string">\\</span><br>      <span class="hljs-string">--requestheader-group-headers=X-Remote-Group</span>  <span class="hljs-string">\\</span><br>      <span class="hljs-string">--requestheader-extra-headers-prefix=X-Remote-Extra-</span>  <span class="hljs-string">\\</span><br>      <span class="hljs-string">--requestheader-username-headers=X-Remote-User</span> <span class="hljs-string">\\</span><br>      <span class="hljs-string">--enable-aggregator-routing=true</span><br>      <span class="hljs-comment"># --feature-gates=IPv6DualStack=true</span><br>      <span class="hljs-comment"># --token-auth-file=/etc/kubernetes/token.csv</span><br><br><span class="hljs-string">Restart=on-failure</span><br><span class="hljs-string">RestartSec=10s</span><br><span class="hljs-string">LimitNOFILE=65535</span><br><br>[<span class="hljs-string">Install</span>]<br><span class="hljs-string">WantedBy=multi-user.target</span><br><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>启动api-server</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">systemctl</span> <span class="hljs-string">daemon-reload</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">systemctl</span> <span class="hljs-string">enable</span> <span class="hljs-string">--now</span> <span class="hljs-string">kube-apiserver</span><br><span class="hljs-comment"># 注意查看状态是否启动正常</span><br><span class="hljs-string">systemctl</span> <span class="hljs-string">status</span> <span class="hljs-string">kube-apiserver</span><br></code></pre></td></tr></table></figure><h3 id="6-创建kube-controller-manager"><a href="#6-创建kube-controller-manager" class="headerlink" title="6.创建kube-controller-manager"></a>6.创建kube-controller-manager</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 所有master节点配置，且配置相同</span><br><span class="hljs-comment"># 172.16.0.0/12为pod网段，按需求设置你自己的网段</span><br><br><span class="hljs-string">cat</span> <span class="hljs-string">&gt;</span> <span class="hljs-string">/usr/lib/systemd/system/kube-controller-manager.service</span> <span class="hljs-string">&lt;&lt;</span> <span class="hljs-string">EOF</span><br><br>[<span class="hljs-string">Unit</span>]<br><span class="hljs-string">Description=Kubernetes</span> <span class="hljs-string">Controller</span> <span class="hljs-string">Manager</span><br><span class="hljs-string">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="hljs-string">After=network.target</span><br><br>[<span class="hljs-string">Service</span>]<br><span class="hljs-string">ExecStart=/usr/local/bin/kube-controller-manager</span> <span class="hljs-string">\\</span><br>      <span class="hljs-string">--v=2</span> <span class="hljs-string">\\</span><br>      <span class="hljs-string">--logtostderr=true</span> <span class="hljs-string">\\</span><br>      <span class="hljs-string">--bind-address=127.0.0.1</span> <span class="hljs-string">\\</span><br>      <span class="hljs-string">--root-ca-file=/etc/kubernetes/pki/ca.pem</span> <span class="hljs-string">\\</span><br>      <span class="hljs-string">--cluster-signing-cert-file=/etc/kubernetes/pki/ca.pem</span> <span class="hljs-string">\\</span><br>      <span class="hljs-string">--cluster-signing-key-file=/etc/kubernetes/pki/ca-key.pem</span> <span class="hljs-string">\\</span><br>      <span class="hljs-string">--service-account-private-key-file=/etc/kubernetes/pki/sa.key</span> <span class="hljs-string">\\</span><br>      <span class="hljs-string">--kubeconfig=/etc/kubernetes/controller-manager.kubeconfig</span> <span class="hljs-string">\\</span><br>      <span class="hljs-string">--leader-elect=true</span> <span class="hljs-string">\\</span><br>      <span class="hljs-string">--use-service-account-credentials=true</span> <span class="hljs-string">\\</span><br>      <span class="hljs-string">--node-monitor-grace-period=40s</span> <span class="hljs-string">\\</span><br>      <span class="hljs-string">--node-monitor-period=5s</span> <span class="hljs-string">\\</span><br>      <span class="hljs-string">--pod-eviction-timeout=2m0s</span> <span class="hljs-string">\\</span><br>      <span class="hljs-string">--controllers=*,bootstrapsigner,tokencleaner</span> <span class="hljs-string">\\</span><br>      <span class="hljs-string">--allocate-node-cidrs=true</span> <span class="hljs-string">\\</span><br>      <span class="hljs-string">--service-cluster-ip-range=10.96.0.0/12,fd00::/108</span> <span class="hljs-string">\\</span><br>      <span class="hljs-string">--cluster-cidr=172.16.0.0/12,fc00::/48</span> <span class="hljs-string">\\</span><br>      <span class="hljs-string">--node-cidr-mask-size-ipv4=24</span> <span class="hljs-string">\\</span><br>      <span class="hljs-string">--node-cidr-mask-size-ipv6=64</span> <span class="hljs-string">\\</span><br>      <span class="hljs-string">--requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.pem</span> <br>      <span class="hljs-comment"># --feature-gates=IPv6DualStack=true</span><br><br><span class="hljs-string">Restart=always</span><br><span class="hljs-string">RestartSec=10s</span><br><br>[<span class="hljs-string">Install</span>]<br><span class="hljs-string">WantedBy=multi-user.target</span><br><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">systemctl</span> <span class="hljs-string">daemon-reload</span><br><span class="hljs-string">systemctl</span> <span class="hljs-string">enable</span> <span class="hljs-string">--now</span> <span class="hljs-string">kube-controller-manager</span><br><span class="hljs-string">systemctl</span> <span class="hljs-string">status</span> <span class="hljs-string">kube-controller-manager</span><br></code></pre></td></tr></table></figure><h3 id="7-创建kube-scheduler"><a href="#7-创建kube-scheduler" class="headerlink" title="7.创建kube-scheduler"></a>7.创建kube-scheduler</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">cat</span> <span class="hljs-string">&gt;</span> <span class="hljs-string">/usr/lib/systemd/system/kube-scheduler.service</span> <span class="hljs-string">&lt;&lt;</span> <span class="hljs-string">EOF</span><br><br>[<span class="hljs-string">Unit</span>]<br><span class="hljs-string">Description=Kubernetes</span> <span class="hljs-string">Scheduler</span><br><span class="hljs-string">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="hljs-string">After=network.target</span><br><br>[<span class="hljs-string">Service</span>]<br><span class="hljs-string">ExecStart=/usr/local/bin/kube-scheduler</span> <span class="hljs-string">\\</span><br>      <span class="hljs-string">--v=2</span> <span class="hljs-string">\\</span><br>      <span class="hljs-string">--logtostderr=true</span> <span class="hljs-string">\\</span><br>      <span class="hljs-string">--bind-address=127.0.0.1</span> <span class="hljs-string">\\</span><br>      <span class="hljs-string">--leader-elect=true</span> <span class="hljs-string">\\</span><br>      <span class="hljs-string">--kubeconfig=/etc/kubernetes/scheduler.kubeconfig</span><br><br><span class="hljs-string">Restart=always</span><br><span class="hljs-string">RestartSec=10s</span><br><br>[<span class="hljs-string">Install</span>]<br><span class="hljs-string">WantedBy=multi-user.target</span><br><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">systemctl</span> <span class="hljs-string">daemon-reload</span><br><span class="hljs-string">systemctl</span> <span class="hljs-string">enable</span> <span class="hljs-string">--now</span> <span class="hljs-string">kube-scheduler</span><br><span class="hljs-string">systemctl</span> <span class="hljs-string">status</span> <span class="hljs-string">kube-scheduler</span><br></code></pre></td></tr></table></figure><h3 id="8-配置TLS-Bootstrapping"><a href="#8-配置TLS-Bootstrapping" class="headerlink" title="8.配置TLS Bootstrapping"></a>8.配置TLS Bootstrapping</h3><blockquote><p>在master上配置</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">cd</span> <span class="hljs-string">bootstrap</span><br><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-string">set-cluster</span> <span class="hljs-string">kubernetes</span>     <span class="hljs-string">\</span><br><span class="hljs-string">--certificate-authority=/etc/kubernetes/pki/ca.pem</span>     <span class="hljs-string">\</span><br><span class="hljs-string">--embed-certs=true</span>     <span class="hljs-string">--server=https://192.168.1.69:8443</span>     <span class="hljs-string">\</span><br><span class="hljs-string">--kubeconfig=/etc/kubernetes/bootstrap-kubelet.kubeconfig</span><br><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-string">set-credentials</span> <span class="hljs-string">tls-bootstrap-token-user</span>     <span class="hljs-string">\</span><br><span class="hljs-string">--token=c8ad9c.2e4d610cf3e7426e</span> <span class="hljs-string">\</span><br><span class="hljs-string">--kubeconfig=/etc/kubernetes/bootstrap-kubelet.kubeconfig</span><br><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-string">set-context</span> <span class="hljs-string">tls-bootstrap-token-user@kubernetes</span>     <span class="hljs-string">\</span><br><span class="hljs-string">--cluster=kubernetes</span>     <span class="hljs-string">\</span><br><span class="hljs-string">--user=tls-bootstrap-token-user</span>     <span class="hljs-string">\</span><br><span class="hljs-string">--kubeconfig=/etc/kubernetes/bootstrap-kubelet.kubeconfig</span><br><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-string">use-context</span> <span class="hljs-string">tls-bootstrap-token-user@kubernetes</span>     <span class="hljs-string">\</span><br><span class="hljs-string">--kubeconfig=/etc/kubernetes/bootstrap-kubelet.kubeconfig</span><br><br><span class="hljs-comment"># token的位置在bootstrap.secret.yaml，如果修改的话到这个文件修改</span><br><span class="hljs-string">mkdir</span> <span class="hljs-string">-p</span> <span class="hljs-string">/root/.kube</span> <span class="hljs-string">;</span> <span class="hljs-string">cp</span> <span class="hljs-string">/etc/kubernetes/admin.kubeconfig</span> <span class="hljs-string">/root/.kube/config</span><br></code></pre></td></tr></table></figure><p>查看集群状态</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">kubectl</span> <span class="hljs-string">get</span> <span class="hljs-string">cs</span><br></code></pre></td></tr></table></figure><p>创建bootstrap</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">kubectl</span> <span class="hljs-string">create</span> <span class="hljs-string">-f</span> <span class="hljs-string">bootstrap.secret.yaml</span><br></code></pre></td></tr></table></figure><h3 id="9-创建kubelet"><a href="#9-创建kubelet" class="headerlink" title="9.创建kubelet"></a>9.创建kubelet</h3><p>创建服务</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">mkdir</span> <span class="hljs-string">-p</span> <span class="hljs-string">/var/lib/kubelet</span> <span class="hljs-string">/var/log/kubernetes</span> <span class="hljs-string">/etc/systemd/system/kubelet.service.d</span> <span class="hljs-string">/etc/kubernetes/manifests/</span><br><br><span class="hljs-comment"># 所有k8s节点配置kubelet service</span><br><span class="hljs-string">cat</span> <span class="hljs-string">&gt;</span> <span class="hljs-string">/usr/lib/systemd/system/kubelet.service</span> <span class="hljs-string">&lt;&lt;</span> <span class="hljs-string">EOF</span><br><br>[<span class="hljs-string">Unit</span>]<br><span class="hljs-string">Description=Kubernetes</span> <span class="hljs-string">Kubelet</span><br><span class="hljs-string">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="hljs-string">After=containerd.service</span><br><span class="hljs-string">Requires=containerd.service</span><br><br>[<span class="hljs-string">Service</span>]<br><span class="hljs-string">ExecStart=/usr/local/bin/kubelet</span> <span class="hljs-string">\\</span><br>    <span class="hljs-string">--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.kubeconfig</span>  <span class="hljs-string">\\</span><br>    <span class="hljs-string">--kubeconfig=/etc/kubernetes/kubelet.kubeconfig</span> <span class="hljs-string">\\</span><br>    <span class="hljs-string">--config=/etc/kubernetes/kubelet-conf.yml</span> <span class="hljs-string">\\</span><br>    <span class="hljs-string">--container-runtime-endpoint=unix:///run/containerd/containerd.sock</span>  <span class="hljs-string">\\</span><br>    <span class="hljs-string">--node-labels=node.kubernetes.io/node=</span><br>    <span class="hljs-comment"># --feature-gates=IPv6DualStack=true</span><br>    <span class="hljs-comment"># --container-runtime=remote</span><br>    <span class="hljs-comment"># --runtime-request-timeout=15m</span><br>    <span class="hljs-comment"># --cgroup-driver=systemd</span><br><br>[<span class="hljs-string">Install</span>]<br><span class="hljs-string">WantedBy=multi-user.target</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>创建配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">cat</span> <span class="hljs-string">&gt;</span> <span class="hljs-string">/etc/kubernetes/kubelet-conf.yml</span> <span class="hljs-string">&lt;&lt;EOF</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubelet.config.k8s.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">KubeletConfiguration</span><br><span class="hljs-attr">address:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br><span class="hljs-attr">port:</span> <span class="hljs-number">10250</span><br><span class="hljs-attr">readOnlyPort:</span> <span class="hljs-number">10255</span><br><span class="hljs-attr">authentication:</span><br>  <span class="hljs-attr">anonymous:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">webhook:</span><br>    <span class="hljs-attr">cacheTTL:</span> <span class="hljs-string">2m0s</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">x509:</span><br>    <span class="hljs-attr">clientCAFile:</span> <span class="hljs-string">/etc/kubernetes/pki/ca.pem</span><br><span class="hljs-attr">authorization:</span><br>  <span class="hljs-attr">mode:</span> <span class="hljs-string">Webhook</span><br>  <span class="hljs-attr">webhook:</span><br>    <span class="hljs-attr">cacheAuthorizedTTL:</span> <span class="hljs-string">5m0s</span><br>    <span class="hljs-attr">cacheUnauthorizedTTL:</span> <span class="hljs-string">30s</span><br><span class="hljs-attr">cgroupDriver:</span> <span class="hljs-string">systemd</span><br><span class="hljs-attr">cgroupsPerQOS:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">clusterDNS:</span><br><span class="hljs-bullet">-</span> <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.10</span><br><span class="hljs-attr">clusterDomain:</span> <span class="hljs-string">cluster.local</span><br><span class="hljs-attr">containerLogMaxFiles:</span> <span class="hljs-number">5</span><br><span class="hljs-attr">containerLogMaxSize:</span> <span class="hljs-string">10Mi</span><br><span class="hljs-attr">contentType:</span> <span class="hljs-string">application/vnd.kubernetes.protobuf</span><br><span class="hljs-attr">cpuCFSQuota:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">cpuManagerPolicy:</span> <span class="hljs-string">none</span><br><span class="hljs-attr">cpuManagerReconcilePeriod:</span> <span class="hljs-string">10s</span><br><span class="hljs-attr">enableControllerAttachDetach:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">enableDebuggingHandlers:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">enforceNodeAllocatable:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">pods</span><br><span class="hljs-attr">eventBurst:</span> <span class="hljs-number">10</span><br><span class="hljs-attr">eventRecordQPS:</span> <span class="hljs-number">5</span><br><span class="hljs-attr">evictionHard:</span><br>  <span class="hljs-attr">imagefs.available:</span> <span class="hljs-number">15</span><span class="hljs-string">%</span><br>  <span class="hljs-attr">memory.available:</span> <span class="hljs-string">100Mi</span><br>  <span class="hljs-attr">nodefs.available:</span> <span class="hljs-number">10</span><span class="hljs-string">%</span><br>  <span class="hljs-attr">nodefs.inodesFree:</span> <span class="hljs-number">5</span><span class="hljs-string">%</span><br><span class="hljs-attr">evictionPressureTransitionPeriod:</span> <span class="hljs-string">5m0s</span><br><span class="hljs-attr">failSwapOn:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">fileCheckFrequency:</span> <span class="hljs-string">20s</span><br><span class="hljs-attr">hairpinMode:</span> <span class="hljs-string">promiscuous-bridge</span><br><span class="hljs-attr">healthzBindAddress:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br><span class="hljs-attr">healthzPort:</span> <span class="hljs-number">10248</span><br><span class="hljs-attr">httpCheckFrequency:</span> <span class="hljs-string">20s</span><br><span class="hljs-attr">imageGCHighThresholdPercent:</span> <span class="hljs-number">85</span><br><span class="hljs-attr">imageGCLowThresholdPercent:</span> <span class="hljs-number">80</span><br><span class="hljs-attr">imageMinimumGCAge:</span> <span class="hljs-string">2m0s</span><br><span class="hljs-attr">iptablesDropBit:</span> <span class="hljs-number">15</span><br><span class="hljs-attr">iptablesMasqueradeBit:</span> <span class="hljs-number">14</span><br><span class="hljs-attr">kubeAPIBurst:</span> <span class="hljs-number">10</span><br><span class="hljs-attr">kubeAPIQPS:</span> <span class="hljs-number">5</span><br><span class="hljs-attr">makeIPTablesUtilChains:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">maxOpenFiles:</span> <span class="hljs-number">1000000</span><br><span class="hljs-attr">maxPods:</span> <span class="hljs-number">110</span><br><span class="hljs-attr">nodeStatusUpdateFrequency:</span> <span class="hljs-string">10s</span><br><span class="hljs-attr">oomScoreAdj:</span> <span class="hljs-number">-999</span><br><span class="hljs-attr">podPidsLimit:</span> <span class="hljs-number">-1</span><br><span class="hljs-attr">registryBurst:</span> <span class="hljs-number">10</span><br><span class="hljs-attr">registryPullQPS:</span> <span class="hljs-number">5</span><br><span class="hljs-attr">resolvConf:</span> <span class="hljs-string">/etc/resolv.conf</span><br><span class="hljs-attr">rotateCertificates:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">runtimeRequestTimeout:</span> <span class="hljs-string">2m0s</span><br><span class="hljs-attr">serializeImagePulls:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">staticPodPath:</span> <span class="hljs-string">/etc/kubernetes/manifests</span><br><span class="hljs-attr">streamingConnectionIdleTimeout:</span> <span class="hljs-string">4h0m0s</span><br><span class="hljs-attr">syncFrequency:</span> <span class="hljs-string">1m0s</span><br><span class="hljs-attr">volumeStatsAggPeriod:</span> <span class="hljs-string">1m0s</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>启动kubelet</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">systemctl</span> <span class="hljs-string">daemon-reload</span><br><span class="hljs-string">systemctl</span> <span class="hljs-string">restart</span> <span class="hljs-string">kubelet</span><br><span class="hljs-string">systemctl</span> <span class="hljs-string">enable</span> <span class="hljs-string">--now</span> <span class="hljs-string">kubelet</span><br></code></pre></td></tr></table></figure><p>查看集群状态</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">kubectl</span>  <span class="hljs-string">get</span> <span class="hljs-string">node</span><br></code></pre></td></tr></table></figure><h3 id="10-创建kube-proxy"><a href="#10-创建kube-proxy" class="headerlink" title="10.创建kube-proxy"></a>10.创建kube-proxy</h3><p>将kubeconfig发送至其他节点</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">for</span> <span class="hljs-string">NODE</span> <span class="hljs-string">in</span> <span class="hljs-string">k8s-node01</span> <span class="hljs-string">k8s-node02;</span> <span class="hljs-string">do</span> <span class="hljs-string">scp</span> <span class="hljs-string">/etc/kubernetes/kube-proxy.kubeconfig</span> <span class="hljs-string">$NODE:/etc/kubernetes/kube-proxy.kubeconfig;</span>  <span class="hljs-string">done</span><br></code></pre></td></tr></table></figure><p>创建服务文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">cat</span> <span class="hljs-string">&gt;</span>  <span class="hljs-string">/usr/lib/systemd/system/kube-proxy.service</span> <span class="hljs-string">&lt;&lt;</span> <span class="hljs-string">EOF</span><br>[<span class="hljs-string">Unit</span>]<br><span class="hljs-string">Description=Kubernetes</span> <span class="hljs-string">Kube</span> <span class="hljs-string">Proxy</span><br><span class="hljs-string">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="hljs-string">After=network.target</span><br><br>[<span class="hljs-string">Service</span>]<br><span class="hljs-string">ExecStart=/usr/local/bin/kube-proxy</span> <span class="hljs-string">\\</span><br>  <span class="hljs-string">--config=/etc/kubernetes/kube-proxy.yaml</span> <span class="hljs-string">\\</span><br>  <span class="hljs-string">--v=2</span><br><br><span class="hljs-string">Restart=always</span><br><span class="hljs-string">RestartSec=10s</span><br><br>[<span class="hljs-string">Install</span>]<br><span class="hljs-string">WantedBy=multi-user.target</span><br><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>创建配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">cat</span> <span class="hljs-string">&gt;</span> <span class="hljs-string">/etc/kubernetes/kube-proxy.yaml</span> <span class="hljs-string">&lt;&lt;</span> <span class="hljs-string">EOF</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubeproxy.config.k8s.io/v1alpha1</span><br><span class="hljs-attr">bindAddress:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br><span class="hljs-attr">clientConnection:</span><br>  <span class="hljs-attr">acceptContentTypes:</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attr">burst:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">contentType:</span> <span class="hljs-string">application/vnd.kubernetes.protobuf</span><br>  <span class="hljs-attr">kubeconfig:</span> <span class="hljs-string">/etc/kubernetes/kube-proxy.kubeconfig</span><br>  <span class="hljs-attr">qps:</span> <span class="hljs-number">5</span><br><span class="hljs-attr">clusterCIDR:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">/12,fc00::/48</span> <br><span class="hljs-attr">configSyncPeriod:</span> <span class="hljs-string">15m0s</span><br><span class="hljs-attr">conntrack:</span><br>  <span class="hljs-attr">max:</span> <span class="hljs-literal">null</span><br>  <span class="hljs-attr">maxPerCore:</span> <span class="hljs-number">32768</span><br>  <span class="hljs-attr">min:</span> <span class="hljs-number">131072</span><br>  <span class="hljs-attr">tcpCloseWaitTimeout:</span> <span class="hljs-string">1h0m0s</span><br>  <span class="hljs-attr">tcpEstablishedTimeout:</span> <span class="hljs-string">24h0m0s</span><br><span class="hljs-attr">enableProfiling:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">healthzBindAddress:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">:10256</span><br><span class="hljs-attr">hostnameOverride:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-attr">iptables:</span><br>  <span class="hljs-attr">masqueradeAll:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">masqueradeBit:</span> <span class="hljs-number">14</span><br>  <span class="hljs-attr">minSyncPeriod:</span> <span class="hljs-string">0s</span><br>  <span class="hljs-attr">syncPeriod:</span> <span class="hljs-string">30s</span><br><span class="hljs-attr">ipvs:</span><br>  <span class="hljs-attr">masqueradeAll:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">minSyncPeriod:</span> <span class="hljs-string">5s</span><br>  <span class="hljs-attr">scheduler:</span> <span class="hljs-string">&quot;rr&quot;</span><br>  <span class="hljs-attr">syncPeriod:</span> <span class="hljs-string">30s</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">KubeProxyConfiguration</span><br><span class="hljs-attr">metricsBindAddress:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:10249</span><br><span class="hljs-attr">mode:</span> <span class="hljs-string">&quot;ipvs&quot;</span><br><span class="hljs-attr">nodePortAddresses:</span> <span class="hljs-literal">null</span><br><span class="hljs-attr">oomScoreAdj:</span> <span class="hljs-number">-999</span><br><span class="hljs-attr">portRange:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-attr">udpIdleTimeout:</span> <span class="hljs-string">250ms</span><br><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">systemctl</span> <span class="hljs-string">daemon-reload</span><br><span class="hljs-string">systemctl</span> <span class="hljs-string">restart</span> <span class="hljs-string">kube-proxy</span><br><span class="hljs-string">systemctl</span> <span class="hljs-string">enable</span> <span class="hljs-string">--now</span> <span class="hljs-string">kube-proxy</span><br><span class="hljs-string">systemctl</span> <span class="hljs-string">status</span> <span class="hljs-string">kube-proxy</span><br></code></pre></td></tr></table></figure><h2 id="安装Calico"><a href="#安装Calico" class="headerlink" title="安装Calico"></a>安装Calico</h2><h3 id="11-1-获取定义文件"><a href="#11-1-获取定义文件" class="headerlink" title="11.1 获取定义文件"></a>11.1 获取定义文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">curl</span> <span class="hljs-string">https://projectcalico.docs.tigera.io/manifests/calico-typha.yaml</span> <span class="hljs-string">-o</span> <span class="hljs-string">calico.yaml</span><br></code></pre></td></tr></table></figure><h3 id="11-2-启动服务"><a href="#11-2-启动服务" class="headerlink" title="11.2 启动服务"></a>11.2 启动服务</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">kubectl</span> <span class="hljs-string">apply</span> <span class="hljs-string">-f</span> <span class="hljs-string">calico.yaml</span><br></code></pre></td></tr></table></figure><h3 id="11-3-查看状态"><a href="#11-3-查看状态" class="headerlink" title="11.3 查看状态"></a>11.3 查看状态</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">kubectl</span>  <span class="hljs-string">get</span> <span class="hljs-string">pod</span> <span class="hljs-string">-A</span><br></code></pre></td></tr></table></figure><h2 id="安装CoreDNS"><a href="#安装CoreDNS" class="headerlink" title="安装CoreDNS"></a>安装CoreDNS</h2><blockquote><p>只需要在master节点执行</p></blockquote><h3 id="获取配置文件"><a href="#获取配置文件" class="headerlink" title="获取配置文件"></a>获取配置文件</h3><blockquote><p><a href="https://github.com/coredns/deployment/blob/master/kubernetes/coredns.yaml.sed">https://github.com/coredns/deployment/</a></p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">https://github.com/coredns/deployment/blob/master/kubernetes/coredns.yaml.sed</span><br></code></pre></td></tr></table></figure><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">cd</span> <span class="hljs-string">coredns/</span><br><span class="hljs-string">cat</span> <span class="hljs-string">coredns.yaml</span> <span class="hljs-string">|</span> <span class="hljs-attr">grep clusterIP:</span><br>  <span class="hljs-attr">clusterIP:</span> <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.10</span><br></code></pre></td></tr></table></figure><h3 id="安装coredns"><a href="#安装coredns" class="headerlink" title="安装coredns"></a>安装coredns</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">kubectl</span>  <span class="hljs-string">create</span> <span class="hljs-string">-f</span> <span class="hljs-string">coredns.yaml</span> <br><span class="hljs-string">serviceaccount/coredns</span> <span class="hljs-string">created</span><br><span class="hljs-string">clusterrole.rbac.authorization.k8s.io/system:coredns</span> <span class="hljs-string">created</span><br><span class="hljs-string">clusterrolebinding.rbac.authorization.k8s.io/system:coredns</span> <span class="hljs-string">created</span><br><span class="hljs-string">configmap/coredns</span> <span class="hljs-string">created</span><br><span class="hljs-string">deployment.apps/coredns</span> <span class="hljs-string">created</span><br><span class="hljs-string">service/kube-dns</span> <span class="hljs-string">created</span><br></code></pre></td></tr></table></figure><h2 id="安装Metrics-Server"><a href="#安装Metrics-Server" class="headerlink" title="安装Metrics Server"></a>安装Metrics Server</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">kubectl</span> <span class="hljs-string">apply</span> <span class="hljs-string">-f</span> <span class="hljs-string">https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml</span><br></code></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/kubernetes-sigs/metrics-server">https://github.com/kubernetes-sigs/metrics-server</a></p></blockquote><h3 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">kubectl</span>  <span class="hljs-string">top</span> <span class="hljs-string">node</span><br></code></pre></td></tr></table></figure><h2 id="安装命令自动补全"><a href="#安装命令自动补全" class="headerlink" title="安装命令自动补全"></a>安装命令自动补全</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install bash-completion -y<br><span class="hljs-built_in">source</span> /usr/share/bash-completion/bash_completion<br><span class="hljs-built_in">source</span> &lt;(kubectl completion bash)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;source &lt;(kubectl completion bash)&quot;</span> &gt;&gt; ~/.bashrc<br></code></pre></td></tr></table></figure><h2 id="集群验证是否正常"><a href="#集群验证是否正常" class="headerlink" title="集群验证是否正常"></a>集群验证是否正常</h2><h3 id="部署pod资源"><a href="#部署pod资源" class="headerlink" title="部署pod资源"></a>部署pod资源</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">cat&lt;&lt;EOF</span> <span class="hljs-string">|</span> <span class="hljs-string">kubectl</span> <span class="hljs-string">apply</span> <span class="hljs-string">-f</span> <span class="hljs-bullet">-</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">busybox</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">busybox</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">busybox:1.28</span><br>    <span class="hljs-attr">command:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">sleep</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;3600&quot;</span><br>    <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>  <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Always</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-comment"># 查看</span><br><span class="hljs-string">kubectl</span>  <span class="hljs-string">get</span> <span class="hljs-string">pod</span><br><span class="hljs-string">NAME</span>      <span class="hljs-string">READY</span>   <span class="hljs-string">STATUS</span>    <span class="hljs-string">RESTARTS</span>   <span class="hljs-string">AGE</span><br><span class="hljs-string">busybox</span>   <span class="hljs-number">1</span><span class="hljs-string">/1</span>     <span class="hljs-string">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-string">17s</span><br></code></pre></td></tr></table></figure><h3 id="用pod解析默认命名空间中的kubernetes"><a href="#用pod解析默认命名空间中的kubernetes" class="headerlink" title="用pod解析默认命名空间中的kubernetes"></a>用pod解析默认命名空间中的kubernetes</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">kubectl</span> <span class="hljs-string">get</span> <span class="hljs-string">svc</span><br><span class="hljs-string">NAME</span>         <span class="hljs-string">TYPE</span>        <span class="hljs-string">CLUSTER-IP</span>   <span class="hljs-string">EXTERNAL-IP</span>   <span class="hljs-string">PORT(S)</span>   <span class="hljs-string">AGE</span><br><span class="hljs-string">kubernetes</span>   <span class="hljs-string">ClusterIP</span>   <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>    <span class="hljs-string">&lt;none&gt;</span>        <span class="hljs-number">443</span><span class="hljs-string">/TCP</span>   <span class="hljs-string">17h</span><br><br><span class="hljs-string">kubectl</span> <span class="hljs-string">exec</span>  <span class="hljs-string">busybox</span> <span class="hljs-string">-n</span> <span class="hljs-string">default</span> <span class="hljs-string">--</span> <span class="hljs-string">nslookup</span> <span class="hljs-string">kubernetes</span><br><span class="hljs-attr">3Server:</span>    <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.10</span><br><span class="hljs-attr">Address 1:</span> <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.10</span> <span class="hljs-string">kube-dns.kube-system.svc.cluster.local</span><br><br><span class="hljs-attr">Name:</span>      <span class="hljs-string">kubernetes</span><br><span class="hljs-attr">Address 1:</span> <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> <span class="hljs-string">kubernetes.default.svc.cluster.local</span><br></code></pre></td></tr></table></figure><h3 id="测试跨命名空间是否可以解析"><a href="#测试跨命名空间是否可以解析" class="headerlink" title="测试跨命名空间是否可以解析"></a>测试跨命名空间是否可以解析</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">kubectl exec  busybox -n <span class="hljs-keyword">default</span> <span class="hljs-comment">-- nslookup kube-dns.kube-system</span><br><span class="hljs-keyword">Server</span>:    <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.10</span><br>Address <span class="hljs-number">1</span>: <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.10</span> kube-dns.kube-<span class="hljs-keyword">system</span>.svc.<span class="hljs-keyword">cluster</span>.<span class="hljs-keyword">local</span><br><br><span class="hljs-type">Name</span>:      kube-dns.kube-<span class="hljs-keyword">system</span><br>Address <span class="hljs-number">1</span>: <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.10</span> kube-dns.kube-<span class="hljs-keyword">system</span>.svc.<span class="hljs-keyword">cluster</span>.<span class="hljs-keyword">local</span><br></code></pre></td></tr></table></figure><p>每个节点都必须要能访问Kubernetes的kubernetes svc 443和kube-dns的service 53</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">telnet</span> <span class="hljs-number">10.96.0.1</span> <span class="hljs-number">443</span><br><span class="hljs-attribute">Trying</span> <span class="hljs-number">10.96.0.1</span>...<br><span class="hljs-attribute">Connected</span> to <span class="hljs-number">10.96.0.1</span>.<br><span class="hljs-attribute">Escape</span> character is &#x27;^]&#x27;.<br><br> <span class="hljs-attribute">telnet</span> <span class="hljs-number">10.96.0.10</span> <span class="hljs-number">53</span><br><span class="hljs-attribute">Trying</span> <span class="hljs-number">10.96.0.10</span>...<br><span class="hljs-attribute">Connected</span> to <span class="hljs-number">10.96.0.10</span>.<br><span class="hljs-attribute">Escape</span> character is &#x27;^]&#x27;.<br><br><span class="hljs-attribute">curl</span> <span class="hljs-number">10.96.0.10:53</span><br><span class="hljs-attribute">curl</span>: (<span class="hljs-number">52</span>) Empty reply from server<br></code></pre></td></tr></table></figure><p>Pod和Pod之前要能通</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">kubectl get po -owide<br>NAME      READY   STATUS    RESTARTS   AGE   IP              <span class="hljs-keyword">NODE</span>         <span class="hljs-title">NOMINATED</span> <span class="hljs-keyword">NODE</span>   <span class="hljs-title">READINESS</span> GATES<br>busybox   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">17m</span>   <span class="hljs-number">172.27</span>.<span class="hljs-number">14.193</span>   k8s-node02   <span class="hljs-tag">&lt;none&gt;</span>           <span class="hljs-tag">&lt;none&gt;</span><br><br>kubectl get po -n kube-system -owide<br>NAME                                       READY   STATUS    RESTARTS        AGE   IP               <span class="hljs-keyword">NODE</span>           <span class="hljs-title">NOMINATED</span> <span class="hljs-keyword">NODE</span>   <span class="hljs-title">READINESS</span> GATES<br>calico-kube-controllers-<span class="hljs-number">59697</span>b644f-zsj62   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">2</span> (<span class="hljs-number">3h</span>37m ago)   <span class="hljs-number">20h</span>   <span class="hljs-number">172.17</span>.<span class="hljs-number">58.194</span>    k8s-node02     <span class="hljs-tag">&lt;none&gt;</span>           <span class="hljs-tag">&lt;none&gt;</span><br>calico-<span class="hljs-keyword">node</span><span class="hljs-title">-8pn4f</span>                          <span class="hljs-number">0</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">2</span> (<span class="hljs-number">23s</span> ago)     <span class="hljs-number">30h</span>   <span class="hljs-number">192.168</span>.<span class="hljs-number">100.21</span>   k8s-master01   <span class="hljs-tag">&lt;none&gt;</span>           <span class="hljs-tag">&lt;none&gt;</span><br>calico-<span class="hljs-keyword">node</span><span class="hljs-title">-l4fkz</span>                          <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">7</span> (<span class="hljs-number">3h</span>37m ago)   <span class="hljs-number">30h</span>   <span class="hljs-number">192.168</span>.<span class="hljs-number">100.23</span>   k8s-node02     <span class="hljs-tag">&lt;none&gt;</span>           <span class="hljs-tag">&lt;none&gt;</span><br>calico-<span class="hljs-keyword">node</span><span class="hljs-title">-mg92w</span>                          <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">7</span> (<span class="hljs-number">3h</span>37m ago)   <span class="hljs-number">30h</span>   <span class="hljs-number">192.168</span>.<span class="hljs-number">100.22</span>   k8s-node01     <span class="hljs-tag">&lt;none&gt;</span>           <span class="hljs-tag">&lt;none&gt;</span><br>calico-typha-<span class="hljs-number">6944</span>f58589-qkm94              <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">1</span> (<span class="hljs-number">3h</span>37m ago)   <span class="hljs-number">20h</span>   <span class="hljs-number">192.168</span>.<span class="hljs-number">100.22</span>   k8s-node01     <span class="hljs-tag">&lt;none&gt;</span>           <span class="hljs-tag">&lt;none&gt;</span><br>coredns-<span class="hljs-number">6795856</span>f79-p7jg9                   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">1</span> (<span class="hljs-number">6h</span>2m ago)    <span class="hljs-number">11h</span>   <span class="hljs-number">172.17</span>.<span class="hljs-number">32.139</span>    k8s-master01   <span class="hljs-tag">&lt;none&gt;</span>           <span class="hljs-tag">&lt;none&gt;</span><br>metrics-server-c7d4c4dd5-skch4             <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">1</span> (<span class="hljs-number">6h</span>2m ago)    <span class="hljs-number">18h</span>   <span class="hljs-number">172.17</span>.<span class="hljs-number">32.138</span>    k8s-master01   <span class="hljs-tag">&lt;none&gt;</span>           <span class="hljs-tag">&lt;none&gt;</span><br><br><span class="hljs-comment"># 进入busybox ping其他节点上的pod</span><br><br>kubectl exec -it busybox -- sh<br>/ <span class="hljs-comment"># ping 192.168.100.22</span><br>PING <span class="hljs-number">192.168</span>.<span class="hljs-number">100.22</span> (<span class="hljs-number">192.168</span>.<span class="hljs-number">100.22</span>): <span class="hljs-number">56</span> data bytes<br><span class="hljs-number">64</span> bytes from <span class="hljs-number">192.168</span>.<span class="hljs-number">100.22</span>: <span class="hljs-attr">seq=</span><span class="hljs-number">0</span> <span class="hljs-attr">ttl=</span><span class="hljs-number">63</span> <span class="hljs-attr">time=</span><span class="hljs-number">0.358</span> <span class="hljs-keyword">ms</span><br><span class="hljs-title">64</span> bytes from <span class="hljs-number">192.168</span>.<span class="hljs-number">100.22</span>: <span class="hljs-attr">seq=</span><span class="hljs-number">1</span> <span class="hljs-attr">ttl=</span><span class="hljs-number">63</span> <span class="hljs-attr">time=</span><span class="hljs-number">0.668</span> <span class="hljs-keyword">ms</span><br><br><span class="hljs-title"># 可以连通证明这个pod</span>是可以跨命名空间和跨主机通信的<br></code></pre></td></tr></table></figure><p>创建三个副本，可以看到3个副本分布在不同的节点上</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">cat</span> <span class="hljs-string">&gt;</span> <span class="hljs-string">deployments.yaml</span> <span class="hljs-string">&lt;&lt;</span> <span class="hljs-string">EOF</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-deployment</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:1.14.2</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br><br><span class="hljs-string">EOF</span><br><br><span class="hljs-string">kubectl</span>  <span class="hljs-string">apply</span> <span class="hljs-string">-f</span> <span class="hljs-string">deployments.yaml</span> <br><span class="hljs-string">deployment.apps/nginx-deployment</span> <span class="hljs-string">created</span><br><br><span class="hljs-string">kubectl</span>  <span class="hljs-string">get</span> <span class="hljs-string">pod</span> <br><span class="hljs-string">NAME</span>                               <span class="hljs-string">READY</span>   <span class="hljs-string">STATUS</span>    <span class="hljs-string">RESTARTS</span>   <span class="hljs-string">AGE</span><br><span class="hljs-string">busybox</span>                            <span class="hljs-number">1</span><span class="hljs-string">/1</span>     <span class="hljs-string">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-string">6m25s</span><br><span class="hljs-string">nginx-deployment-9456bbbf9-4bmvk</span>   <span class="hljs-number">1</span><span class="hljs-string">/1</span>     <span class="hljs-string">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-string">8s</span><br><span class="hljs-string">nginx-deployment-9456bbbf9-9rcdk</span>   <span class="hljs-number">1</span><span class="hljs-string">/1</span>     <span class="hljs-string">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-string">8s</span><br><span class="hljs-string">nginx-deployment-9456bbbf9-dqv8s</span>   <span class="hljs-number">1</span><span class="hljs-string">/1</span>     <span class="hljs-string">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-string">8s</span><br><br><span class="hljs-comment"># 删除nginx</span><br><br>[<span class="hljs-string">root@k8s-master01</span> <span class="hljs-string">~</span>]<span class="hljs-comment"># kubectl delete -f deployments.yaml</span><br></code></pre></td></tr></table></figure><h2 id="安装dashboard"><a href="#安装dashboard" class="headerlink" title="安装dashboard"></a>安装dashboard</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">kubectl apply -f https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/kubernetes/</span>dashboard<span class="hljs-regexp">/v2.7.0/</span>aio<span class="hljs-regexp">/deploy/</span>recommended.yaml<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">admin-user</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kubernetes-dashboard</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">admin-user</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">cluster-admin</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">admin-user</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kubernetes-dashboard</span><br></code></pre></td></tr></table></figure><p>创建ServiceAccount</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">kubectl <span class="hljs-built_in">apply</span> -f dashboard-user.yml<br></code></pre></td></tr></table></figure><p>更改dashboard的svc为NodePort</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">kubectl</span> edit svc kubernetes-dashboard -n kubernetes-dashboard<br>  <span class="hljs-keyword">type</span>: <span class="hljs-type">NodePort</span><br></code></pre></td></tr></table></figure><p>查看端口号</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">kubectl <span class="hljs-keyword">get</span> svc kubernetes-dashboard -n kubernetes-dashboard<br><span class="hljs-type">NAME</span>                   <span class="hljs-keyword">TYPE</span>       <span class="hljs-keyword">CLUSTER</span>-IP     <span class="hljs-keyword">EXTERNAL</span>-IP   PORT(S)         AGE<br>kubernetes-dashboard   NodePort   <span class="hljs-number">10.108</span><span class="hljs-number">.37</span><span class="hljs-number">.26</span>   &lt;<span class="hljs-keyword">none</span>&gt;        <span class="hljs-number">443</span>:<span class="hljs-number">30647</span>/TCP   <span class="hljs-number">11</span>h<br></code></pre></td></tr></table></figure><p>创建token</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm">kubectl -n kubernetes-dashboard create token admin-user<br>eyJhbGciOiJSUzI<span class="hljs-number">1</span>NiIsImtpZCI<span class="hljs-number">6</span>IlVfX<span class="hljs-number">0</span>ZyLVE<span class="hljs-number">5</span>UnlMYk<span class="hljs-number">94</span>QU<span class="hljs-number">9</span>YZy<span class="hljs-number">1</span>tdTJlbDNlVkNNa<span class="hljs-number">2</span>hPQm<span class="hljs-number">9</span>KcndlR<span class="hljs-number">1</span>pSc<span class="hljs-number">3</span>cifQ.eyJhdWQiOlsiaHR<span class="hljs-number">0</span>cHM<span class="hljs-number">6</span>Ly<span class="hljs-number">9</span>rdWJlcm<span class="hljs-number">5</span>ldGVzLmRlZmF<span class="hljs-number">1</span>bHQuc<span class="hljs-number">3</span>ZjLmNsdXN<span class="hljs-number">0</span>ZXIubG<span class="hljs-number">9</span>jYWwiXSwiZXhwIjoxNjY<span class="hljs-number">3</span>NjEyNjAzLCJpYXQiOjE<span class="hljs-number">2</span>Njc<span class="hljs-number">2</span>MDkwMDMsImlzcyI<span class="hljs-number">6</span>Imh<span class="hljs-number">0</span>dHBzOi<span class="hljs-number">8</span>va<span class="hljs-number">3</span>ViZXJuZXRlcy<span class="hljs-number">5</span>kZWZhdWx<span class="hljs-number">0</span>LnN<span class="hljs-number">2</span>Yy<span class="hljs-number">5</span>jbHVzdGVyLmxvY<span class="hljs-number">2</span>FsIiwia<span class="hljs-number">3</span>ViZXJuZXRlcy<span class="hljs-number">5</span>pbyI<span class="hljs-number">6</span>eyJuYW<span class="hljs-number">1</span>lc<span class="hljs-number">3</span>BhY<span class="hljs-number">2</span>UiOiJrdWJlcm<span class="hljs-number">5</span>ldGVzLWRhc<span class="hljs-number">2</span>hib<span class="hljs-number">2</span>FyZCIsInNlcnZpY<span class="hljs-number">2</span>VhY<span class="hljs-number">2</span>NvdW<span class="hljs-number">50</span>Ijp<span class="hljs-number">7</span>Im<span class="hljs-number">5</span>hbWUiOiJhZG<span class="hljs-number">1</span>pbi<span class="hljs-number">11</span><span class="hljs-keyword">c</span><span class="hljs-number">2</span>VyIiwidWlkIjoiMjY<span class="hljs-number">1</span>YjQ<span class="hljs-number">4</span>NDYtNzg<span class="hljs-number">2</span>Ni<span class="hljs-number">00</span>OWYxLWFkMmYtNWE<span class="hljs-number">0</span>NGU<span class="hljs-number">3</span>MDkxNDgzIn<span class="hljs-number">19</span>LCJuYmYiOjE<span class="hljs-number">2</span>Njc<span class="hljs-number">2</span>MDkwMDMsInN<span class="hljs-number">1</span>YiI<span class="hljs-number">6</span>InN<span class="hljs-number">5</span><span class="hljs-keyword">c</span><span class="hljs-number">3</span>RlbTpzZXJ<span class="hljs-number">2</span>aWNlYWNjb<span class="hljs-number">3</span>VudDprdWJlcm<span class="hljs-number">5</span>ldGVzLWRhc<span class="hljs-number">2</span>hib<span class="hljs-number">2</span>FyZDphZG<span class="hljs-number">1</span>pbi<span class="hljs-number">11</span><span class="hljs-keyword">c</span><span class="hljs-number">2</span>VyIn<span class="hljs-number">0</span>.Y-DG<span class="hljs-number">1</span>hpb<span class="hljs-number">9</span>mk<span class="hljs-number">06</span>nhm<span class="hljs-number">6</span>ZnIhFaPBj<span class="hljs-number">6</span>AAnlzbg<span class="hljs-number">4</span>ngPSiWfEpBOj<span class="hljs-number">4</span>c_TVpBS<span class="hljs-number">7</span>a<span class="hljs-number">9</span>eJqDVisWczHerT<span class="hljs-number">5</span>K_<span class="hljs-number">2</span>cgzmIeLxUdDffIyU<span class="hljs-number">8</span>UcijlSM<span class="hljs-number">8</span>Df<span class="hljs-number">3</span>PQMMTvbMCCpFZC<span class="hljs-number">8</span><span class="hljs-keyword">x</span><span class="hljs-number">9</span>l<span class="hljs-number">6</span>T<span class="hljs-number">7</span>rRIhI<span class="hljs-number">8</span>-xGL<span class="hljs-number">5</span>eFBqt<span class="hljs-number">6</span>YRf<span class="hljs-number">2</span>xRTBKgpRsdqetX<span class="hljs-number">5</span>_zZ<span class="hljs-number">7552</span>wv<span class="hljs-number">5</span>GhDnRXYo<span class="hljs-number">1</span>BJ<span class="hljs-number">6</span>IQuxWUi<span class="hljs-number">39</span>du<span class="hljs-number">3</span>mZdPJJSyvKZXTqx<span class="hljs-number">8</span>GfEBX<span class="hljs-number">01</span>zprNTIJ<span class="hljs-number">4</span>DXUQPM<span class="hljs-number">7</span>z<span class="hljs-number">4</span>cqiKIFkt<span class="hljs-number">32</span>KhyTK<span class="hljs-number">55</span>GhuIyh<span class="hljs-number">9</span>y<span class="hljs-number">3</span>cRBtHVhcybRPQ<span class="hljs-number">27</span>KnFTg<span class="hljs-number">1</span>n<span class="hljs-number">4</span>joGdrJP<span class="hljs-number">7</span>Q<span class="hljs-number">7</span>fxJsiKFmJFbR<span class="hljs-number">2</span>K_ljqGQpss-v<span class="hljs-number">3</span>QhJrI<span class="hljs-number">5</span>SeowAaqebhCumfrg<br></code></pre></td></tr></table></figure><p>访问<code>主机:上面的端口</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">https://192.168.100.21:30647<br></code></pre></td></tr></table></figure><h2 id="安装ingress"><a href="#安装ingress" class="headerlink" title="安装ingress"></a>安装ingress</h2><blockquote><p><a href="https://github.com/kubernetes/ingress-nginx">https://github.com/kubernetes/ingress-nginx</a></p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">kubectl apply -f https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/kubernetes/i</span>ngress-nginx<span class="hljs-regexp">/controller-v1.4.0/</span>deploy<span class="hljs-regexp">/static/</span>provider<span class="hljs-regexp">/cloud/</span>deploy.yaml<br></code></pre></td></tr></table></figure><p>本地验证</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">kubectl <span class="hljs-built_in">get</span> service ingress-nginx-controller <span class="hljs-comment">--namespace=ingress-nginx</span><br><br>kubectl <span class="hljs-built_in">wait</span> <span class="hljs-comment">--namespace ingress-nginx \</span><br>  <span class="hljs-comment">--for=condition=ready pod \</span><br>  <span class="hljs-comment">--selector=app.kubernetes.io/component=controller \</span><br>  <span class="hljs-comment">--timeout=120s</span><br><br>kubectl <span class="hljs-built_in">create</span> deployment demo <span class="hljs-comment">--image=httpd --port=80</span><br>kubectl expose deployment demo<br><br>kubectl <span class="hljs-built_in">create</span> ingress demo-localhost <span class="hljs-comment">--class=nginx \</span><br>  <span class="hljs-comment">--rule=&quot;demo.localdev.me/*=demo:80&quot;</span><br><br>kubectl port-forward <span class="hljs-comment">--namespace=ingress-nginx service/ingress-nginx-controller 8080:80</span><br><br>curl <span class="hljs-keyword">http</span>://demo.localdev.me:<span class="hljs-number">8080</span><br></code></pre></td></tr></table></figure><p>外部验证</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">配置好DNS 指向集群IP<br>[root@k8s-master01 ~]# kubectl <span class="hljs-keyword">get</span> service ingress-nginx-controller <span class="hljs-comment">--namespace=ingress-nginx</span><br><span class="hljs-type">NAME</span>                       <span class="hljs-keyword">TYPE</span>           <span class="hljs-keyword">CLUSTER</span>-IP     <span class="hljs-keyword">EXTERNAL</span>-IP   PORT(S)                      AGE<br>ingress-nginx-controller   LoadBalancer   <span class="hljs-number">10.98</span><span class="hljs-number">.13</span><span class="hljs-number">.147</span>   &lt;pending&gt;     <span class="hljs-number">80</span>:<span class="hljs-number">32522</span>/TCP,<span class="hljs-number">443</span>:<span class="hljs-number">31226</span>/TCP   <span class="hljs-number">71</span>m<br></code></pre></td></tr></table></figure><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1</span>   localhost localhost.localdomain localhost4 localhost4.localdomain4<br>::<span class="hljs-number">1</span>         localhost localhost.localdomain localhost6 localhost6.localdomain6<br><br><span class="hljs-number">10.98.13.147</span> www.demo.io<br><span class="hljs-number">192.168.100.21</span> k8s-master01<br><span class="hljs-number">192.168.100.22</span> k8s-node01<br><span class="hljs-number">192.168.100.23</span> k8s-node02<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl create ingress demo <span class="hljs-attribute">--class</span>=nginx \<br>  <span class="hljs-attribute">--rule</span>=<span class="hljs-string">&quot;www.demo.io/*=demo:80&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">curl http:<span class="hljs-comment">//www.demo.io/</span><br></code></pre></td></tr></table></figure><h2 id="安装Helm包管理器"><a href="#安装Helm包管理器" class="headerlink" title="安装Helm包管理器"></a>安装Helm包管理器</h2><blockquote><p>Thepackage managerfor Kubernetes</p></blockquote><p>查看自己平台的版本选择下载 : <a href="https://github.com/helm/helm/releases">https://github.com/helm/helm/releases</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://get.helm.sh/helm-v3.10.1-linux-arm64.tar.gz<br>tar -zxvf helm-v3.10.1-linux-arm64.tar.gz<br><span class="hljs-built_in">mv</span> linux-arm64/helm  /usr/local/bin/helm<br><span class="hljs-comment"># 查看版本信息</span><br>helm version<br>version.BuildInfo&#123;Version:<span class="hljs-string">&quot;v3.10.1&quot;</span>, GitCommit:<span class="hljs-string">&quot;9f88ccb6aee40b9a0535fcc7efea6055e1ef72c9&quot;</span>, GitTreeState:<span class="hljs-string">&quot;clean&quot;</span>, GoVersion:<span class="hljs-string">&quot;go1.18.7&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>使用教程：<a href="https://helm.sh/docs/intro/using_helm/">https://helm.sh/docs/intro/using_helm/</a></p><h2 id="安装Harbor"><a href="#安装Harbor" class="headerlink" title="安装Harbor"></a>安装Harbor</h2><blockquote><p>企业级 Registry 服务器，存放镜像</p></blockquote><h2 id="安装NFS"><a href="#安装NFS" class="headerlink" title="安装NFS"></a>安装NFS</h2><blockquote><p>用于k8s的pv卷</p></blockquote><p>1.服务端和客户端都安装nfs</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">yum install nfs-utils -y<br></code></pre></td></tr></table></figure><p>2.服务端配置<br>2.1 配置配置文件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">/nfs_data *(rw,sync,no_root_squash)<br></code></pre></td></tr></table></figure><p>2.1 启动NFS Server</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">systemctl enable nfs-server<br>systemctl start nfs-server<br>systemctl status nfs-server<br>#查看挂载<br>showmount -e<br></code></pre></td></tr></table></figure><p>3.客户端配置<br>3.1 启动客户端</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">systemctl enable nfs<br>systemctl start nfs<br>systemctl status nfs<br></code></pre></td></tr></table></figure><p>查看服务器挂载</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">showmount -e <span class="hljs-number">192.168</span><span class="hljs-number">.100</span><span class="hljs-number">.21</span><br></code></pre></td></tr></table></figure><p>挂载</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">mount -t nfs <span class="hljs-number">192.168</span><span class="hljs-number">.100</span><span class="hljs-number">.21</span>:/nfs_data /nfs_data<br></code></pre></td></tr></table></figure><h1 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h1><p>1.无法拉取镜像，或者找不到所需平台的镜像问题</p><blockquote><p>这个我们可以直接使用源代码来编译通过Docker打包成镜像或者是dockerhub上面搜别人是否已经分享</p></blockquote><p>2.exec /xxx: exec format error</p><blockquote><p>这种情况应该是你镜像拉错了，需要拉你对应平台的，比如我是linux/arm64</p></blockquote><p>3.docker导出镜像到containerd</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs processing">docker <span class="hljs-built_in">save</span> httpd &gt; httpd.<span class="hljs-property">tar</span><br>ctr -n=k8s.<span class="hljs-property">io</span> <span class="hljs-built_in">image</span> <span class="hljs-keyword">import</span> httpd.<span class="hljs-property">tar</span><br></code></pre></td></tr></table></figure><p>4.crictl查找不到导入的镜像</p><blockquote><p>containerd有命名空间的概念，需要导入k8s.io才能被k8s使用</p></blockquote><p>5.ingress证书过期</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">error: </span>failed to create ingress: Internal error occurred: failed calling webhook &quot;validate.nginx.ingress.kubernetes.io&quot;: failed to call webhook: Post &quot;https://ingress-nginx-controller-admission.ingress-nginx.svc:443/networking/v1/ingresses?timeout=10s&quot;: x509: certificate has expired or is not yet valid: current time 2022<span class="hljs-string">-11</span><span class="hljs-string">-04</span>T23:34:29<span class="hljs-string">-04</span>:00 is before 2022<span class="hljs-string">-11</span><span class="hljs-string">-05</span>T10:40:35Z<br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">kubectl <span class="hljs-keyword">delete</span> -A ValidatingWebhookConfiguration ingress-nginx-admission<br></code></pre></td></tr></table></figure><h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><p>helm：<a href="https://helm.sh/docs/intro/install/">https://helm.sh/docs</a><br>harbor：<a href="https://goharbor.io/docs/2.6.0/administration/">https://goharbor.io/docs</a></p>]]></content>
    
    
    <categories>
      
      <category>云原生篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>性能测试-Java VS golang VS rust</title>
    <link href="/2022/10/18/yuque/xg5e73/"/>
    <url>/2022/10/18/yuque/xg5e73/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1666023777304-2d7b7944-531b-42d2-b58a-5b86f350acc1.png#clientId=u75ce29a6-991a-4&errorMessage=unknown%20error&from=paste&height=718&id=u5387959f&originHeight=1436&originWidth=2806&originalType=binary&ratio=1&rotation=0&showTitle=false&size=807746&status=error&style=none&taskId=u91672ddf-ef94-4eb2-aba9-10b6e23f566&title=&width=1403" alt="image.png"></p><h1 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h1><p>本篇测试并非基准测试，相关测试结果仅供参考，如有错误之处还望指出。</p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>JDK版本</p><blockquote><p>openjdk version “19” 2022-09-20</p></blockquote><p>Golang版本</p><blockquote><p>go version go1.19.1</p></blockquote><p>Rust版本</p><blockquote><p>rustc 1.64.0 (a55dd71d5 2022-09-19)</p></blockquote><p>机器</p><blockquote><p>centos7.9.2/16G内存/4核CPU</p></blockquote><p>测试工具</p><blockquote><p>wrk</p></blockquote><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><blockquote><p>为了更接近语言的原生性能我们没有使用相关框架进行操作，采用最原始的写法，主要从内存占用、编译速度、并发量、计算速度等几个方面来分析</p></blockquote><p>注意点：</p><ul><li>针对与rust我们需要通过开启其优化才能有性能提升<code>--release</code>，普通开发模式下可能比较慢</li></ul><h2 id="业务场景-计算密集"><a href="#业务场景-计算密集" class="headerlink" title="业务场景:计算密集"></a>业务场景:计算密集</h2><p>执行一百次递归调用计算斐波拉契数时间空间对比<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1666232029818-8ba216be-dd6e-44ef-9d28-28d0a42e1e47.png#clientId=u4aa78f39-5910-4&errorMessage=unknown%20error&from=paste&height=433&id=u5ea7c607&originHeight=866&originWidth=1240&originalType=binary&ratio=1&rotation=0&showTitle=true&size=67337&status=error&style=none&taskId=u98cee718-a178-46f2-98aa-8894a0ba41d&title=%E6%89%A7%E8%A1%8C100%E6%AC%A1%E9%80%92%E5%BD%92%E8%AE%A1%E7%AE%97%E6%96%90%E6%B3%A2%E6%8B%89%E5%A5%91%E6%95%B0&width=620" alt="执行100次递归计算斐波拉契数" title="执行100次递归计算斐波拉契数"></p><h2 id="业务场景-多线程"><a href="#业务场景-多线程" class="headerlink" title="业务场景:多线程"></a>业务场景:多线程</h2><p>通过最新的虚拟线程和协程（Rust中没有虚拟线程，直接使用线程）计算斐波拉契数时间空间对比<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1666230519868-e3c5f46a-9fd1-4a66-9065-e456162f0459.png#clientId=u4aa78f39-5910-4&errorMessage=unknown%20error&from=paste&height=434&id=ua506f571&originHeight=868&originWidth=1252&originalType=binary&ratio=1&rotation=0&showTitle=true&size=71449&status=error&style=none&taskId=u26c4a74e-8294-4262-a9b8-1909abebbec&title=%E9%80%9A%E8%BF%87%E5%8D%8F%E7%A8%8B%E6%89%A7%E8%A1%8C100%E4%B8%AA%E4%BB%BB%E5%8A%A1%E9%80%92%E5%BD%92%E8%AE%A1%E7%AE%97%E6%96%90%E6%B3%A2%E6%8B%89%E5%A5%91%E6%95%B0&width=626" alt="通过协程执行100个任务递归计算斐波拉契数" title="通过协程执行100个任务递归计算斐波拉契数"></p><h2 id="业务场景-高并发"><a href="#业务场景-高并发" class="headerlink" title="业务场景:高并发"></a>业务场景:高并发</h2><p>使用各种编写的http服务进行压测，通过使用wrk开启8线程500连接进行请求，其数据结构如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">wrk -c500 -t8 -d30s --latency http://147.106.210.183:8000/serial/abcdefghijklmnopqrist<br>wrk -c500 -t8 -d30s --latency http://147.106.210.183:8001/serial/abcdefghijklmnopqrist<br>wrk -c500 -t8 -d30s --latency http://147.106.210.183:8001/serial/abcdefghijklmnopqrist<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">Running 30s test @ http://147.106.210.183:8000/serial/abcdefghijklmnopqrist<br>  8 threads and 500 connections<br>  Thread Stats   Avg      Stdev     Max   +/- Stdev<br>    Latency    11.34ms   21.70ms 436.09ms   98.97%<br>    Req/Sec     4.08k   794.69     6.63k    84.37%<br>  Latency Distribution<br>     50%    9.46ms<br>     75%   12.30ms<br>     90%   14.94ms<br>     99%   38.12ms<br>  961548 requests in 30.02s, 104.54MB read<br>  Socket errors: connect 0, read 23020, write 48, timeout 0<br>Requests/sec:  32030.69<br>Transfer/sec:      3.48MB<br><br>cpu 570%<br>men 394M<br>jar siez 17M<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">Running 30s test @ http://147.106.210.183:8001/serial/abcdefghijklmnopqrist<br>  8 threads and 500 connections<br>  Thread Stats   Avg      Stdev     Max   +/- Stdev<br>    Latency    13.33ms    9.67ms 106.38ms   62.59%<br>    Req/Sec     3.62k     3.28k   49.52k    91.97%<br>  Latency Distribution<br>     50%   13.46ms<br>     75%   19.77ms<br>     90%   25.06ms<br>     99%   39.45ms<br>  856099 requests in 30.09s, 124.10MB read<br>  Socket errors: connect 0, read 670, write 0, timeout 0<br>Requests/sec:  28448.40<br>Transfer/sec:      4.12MB<br><br>cpu 422.7%<br>men 42M<br>file size 1k<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">wrk -c500 -t8 -d30s --latency http://localhost:8002<br>Running 30s test @ http://localhost:8002<br>  8 threads and 500 connections<br>  Thread Stats   Avg      Stdev     Max   +/- Stdev<br>    Latency     8.29ms    7.45ms 133.77ms   85.81%<br>    Req/Sec     5.59k     3.31k   34.53k    79.66%<br>  Latency Distribution<br>     50%    6.35ms<br>     75%   10.89ms<br>     90%   17.23ms<br>     99%   33.15ms<br>  1330208 requests in 30.09s, 164.92MB read<br>  Socket errors: connect 0, read 685, write 0, timeout 0<br>Requests/sec:  44202.84<br>Transfer/sec:      5.48MB<br><br><br>cpu 330%<br>men 19M<br>file size 3M<br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><p>java：网站后端、微服务应用、工程级别的应用，生态活跃且完整，其弊端是占用资源多，和另外两种相比显得十分臃肿。Java屏蔽了底层的复杂、容易出错的地方（如指针，内存管理等），毋庸置疑生态是三者中最好的，有很多成熟的方案，如果需要快速搭建功能抢占市场用户资源是个不错的选择</p></li><li><p>golang：源于谷歌开源，在kubernetes的加持下受到了广大开发者的喜爱，其编程风格简洁，性能强悍同时也是带有GC的编程语言，是目前高并发、云原生开发的不二之选。</p></li><li><p>rust：适合系统级应用、追求极致性能。rust是最新出的编程语言，其站在其他语言的肩膀上规避了许多问题，它本身是一门系统的编程语言其有自己独特的一套对象生命周期和作用范围管理机制，在编译时就对代码进行检查，强制我们规避可能出现的问题，注重内存安全、避免类似于C/C++发生内存泄露、野指针的问题，但有能达到C/C++的性能。</p></li></ul><p>在现在的环境下微服务开发在容器化的支持下已经可以实现多语言混合开发，需要结合自身实际业务来对其进行选型，不同的场景选用不同的技术带来的收益也会有所差别。</p><h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">fibonacci</span><span class="hljs-params">(<span class="hljs-type">long</span> n)</span> &#123;<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span> || n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> fibonacci(n - <span class="hljs-number">1</span>) + fibonacci(n - <span class="hljs-number">2</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">cnt</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> <span class="hljs-number">40</span>;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in).next();<br>        List&lt;Callable&lt;Long&gt;&gt; tasks = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; cnt; i++) tasks.add(() -&gt; fibonacci(max));<br>        <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        Executors.newVirtualThreadPerTaskExecutor().invokeAll(tasks);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> System.currentTimeMillis() - start;<br>        System.out.println(String.format(<span class="hljs-string">&quot;总耗时：%d 毫秒&quot;</span>, time));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs go"><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fibonacci</span><span class="hljs-params">(n <span class="hljs-type">uint64</span>)</span></span> <span class="hljs-type">uint64</span>  &#123;<br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span> || n == <span class="hljs-number">1</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> fibonacci(n<span class="hljs-number">-1</span>) + fibonacci(n<span class="hljs-number">-2</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    fmt.Scanln()<br>    fmt.Println(<span class="hljs-string">&quot;start...&quot;</span>)<br>    cnt := <span class="hljs-number">100</span><br>    max := <span class="hljs-number">40</span><br>    t := <span class="hljs-built_in">make</span>([]time.Duration,cnt)<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; cnt; i++ &#123;<br>        start := time.Now() <span class="hljs-comment">// 获取当前时间</span><br>        fibonacci(<span class="hljs-type">uint64</span>(max))<br>        t[i] = time.Since(start)<br>    &#125;<br>    time := time.Duration(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> t &#123;<br>        time+=v<br>    &#125;<br>    total:=time.Milliseconds()<br>    fmt.Printf(<span class="hljs-string">&quot;总耗时：%v 毫秒,平均耗时：%v 毫秒&quot;</span>, total, total / <span class="hljs-type">int64</span>(cnt))<br>    <span class="hljs-comment">//总耗时：43859 毫秒,平均耗时：438 毫秒</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main1</span><span class="hljs-params">()</span></span> &#123;<br>    fmt.Scanln()<br>    fmt.Println(<span class="hljs-string">&quot;start...&quot;</span>)<br>    cnt := <span class="hljs-number">100</span><br>    max := <span class="hljs-type">uint64</span>(<span class="hljs-number">40</span>)<br>    start := time.Now() <span class="hljs-comment">// 获取当前时间</span><br>    group:=sync.WaitGroup&#123;&#125;<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; cnt; i++ &#123;<br>        group.Add(<span class="hljs-number">1</span>)<span class="hljs-comment">//添加一个任务</span><br>        <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>            <span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>                group.Done()<span class="hljs-comment">//完成一个任务</span><br>            &#125;()<br>            fibonacci(max)<br>        &#125;()<br>    &#125;<br>    group.Wait()<span class="hljs-comment">//等待所有任务完成</span><br>    t := time.Since(start)<br>    total:=t.Milliseconds()<br>    fmt.Printf(<span class="hljs-string">&quot;总耗时：%v 毫秒&quot;</span>, total)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">fibonacci</span>(n:<span class="hljs-type">i64</span>)<span class="hljs-punctuation">-&gt;</span><span class="hljs-type">i64</span>&#123;<br>    <span class="hljs-keyword">if</span> n==<span class="hljs-number">1</span>||n==<span class="hljs-number">0</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">fibonacci</span>(n-<span class="hljs-number">1</span>) + <span class="hljs-title function_ invoke__">fibonacci</span>(n-<span class="hljs-number">2</span>);<br>&#125;<br><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">buf</span> = [<span class="hljs-number">0</span>];<br>    io::<span class="hljs-title function_ invoke__">stdin</span>().<span class="hljs-title function_ invoke__">read</span>(&amp;<span class="hljs-keyword">mut</span> buf).<span class="hljs-title function_ invoke__">unwrap</span>();<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;start...&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">cnt</span> :<span class="hljs-type">u128</span> = <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">time</span>:<span class="hljs-type">Vec</span>&lt;<span class="hljs-type">u128</span>&gt; = <span class="hljs-type">Vec</span>::<span class="hljs-title function_ invoke__">with_capacity</span>(cnt <span class="hljs-keyword">as</span> <span class="hljs-type">usize</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">max</span> = <span class="hljs-number">40</span>;<br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">_</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..cnt &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">now</span> = Instant::<span class="hljs-title function_ invoke__">now</span>();<br>        <span class="hljs-title function_ invoke__">fibonacci</span>(max);<br>        time.<span class="hljs-title function_ invoke__">push</span>(now.<span class="hljs-title function_ invoke__">elapsed</span>().<span class="hljs-title function_ invoke__">as_millis</span>());<br>    &#125;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">total</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">t</span> <span class="hljs-keyword">in</span> time &#123;<br>        total+=t;<br>    &#125;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;总耗时：&#123;&#125; 毫秒,平均耗时：&#123;&#125; 毫秒&quot;</span>,total,total/cnt);<br>    <span class="hljs-comment">//总耗时：109275 毫秒,平均耗时：1092 毫秒</span><br>&#125;<br><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">buf</span> = [<span class="hljs-number">0</span>];<br>    io::<span class="hljs-title function_ invoke__">stdin</span>().<span class="hljs-title function_ invoke__">read</span>(&amp;<span class="hljs-keyword">mut</span> buf).<span class="hljs-title function_ invoke__">unwrap</span>();<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;start...&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">cnt</span> :<span class="hljs-type">u128</span> = <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">max</span> :<span class="hljs-type">i64</span> = <span class="hljs-number">40</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">now</span> = Instant::<span class="hljs-title function_ invoke__">now</span>();<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">handles</span> = <span class="hljs-type">Vec</span>::<span class="hljs-title function_ invoke__">with_capacity</span>(cnt <span class="hljs-keyword">as</span> <span class="hljs-type">usize</span>);<br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">_</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..cnt &#123;<br>        handles.<span class="hljs-title function_ invoke__">push</span>(thread::<span class="hljs-title function_ invoke__">spawn</span>(<span class="hljs-keyword">move</span>|| &#123;<br>            <span class="hljs-title function_ invoke__">fibonacci</span>(max);<br>        &#125;));<br>    &#125;<br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">handle</span> <span class="hljs-keyword">in</span> handles &#123;<br>        handle.<span class="hljs-title function_ invoke__">join</span>().<span class="hljs-title function_ invoke__">unwrap</span>();<br>    &#125;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">spend</span> = now.<span class="hljs-title function_ invoke__">elapsed</span>().<span class="hljs-title function_ invoke__">as_millis</span>();<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;总耗时：&#123;&#125; 毫秒&quot;</span>,spend);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>性能测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rust-学习笔记</title>
    <link href="/2022/10/01/yuque/bbzd4a/"/>
    <url>/2022/10/01/yuque/bbzd4a/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1664590973846-0f94dbf3-ef3c-4073-a4f9-158ad7cf81d0.png#clientId=u10261135-3f0d-4&errorMessage=unknown%20error&from=paste&height=139&id=ue725851c&originHeight=277&originWidth=577&originalType=binary&ratio=1&rotation=0&showTitle=false&size=63350&status=error&style=none&taskId=u1243bd19-3f11-4c44-8d18-52fb0abd15d&title=&width=288.5" alt="image.png"></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Rust是一门系统编程语言，专注于安全 ，尤其是并发安全，支持函数式和命令式以及泛型等编程范式的多范式语言。Rust在语法上和C++类似，但是设计者想要在保证性能的同时提供更好的内存安全。 Rust最初是由Mozilla研究院的Graydon Hoare设计创造，然后在Dave Herman, Brendan Eich以及很多其他人的贡献下逐步完善的。 Rust的设计者们通过在研发Servo网站浏览器布局引擎过程中积累的经验优化了Rust语言和Rust编译器。</p><p>Rust编译器是在MIT License 和 Apache License 2.0双重协议声明下的免费开源软件。 Rust已经连续七年（2016，2017，2018，2019，2020, 2021, 2022）在Stack Overflow开发者调查的“最受喜爱编程语言”评选项目中折取桂冠。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>1.进入官网下载 <a href="https://www.rust-lang.org/">https://www.rust-lang.org/</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">curl --proto <span class="hljs-string">&#x27;=https&#x27;</span> --tlsv1<span class="hljs-number">.2</span> -sSf https:<span class="hljs-comment">//sh.rustup.rs | sh</span><br></code></pre></td></tr></table></figure><p>2.查看版本</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">rustc -V<br></code></pre></td></tr></table></figure><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">fn main() &#123;<br>    <span class="hljs-built_in">println</span>!(<span class="hljs-string">&quot;Hello, world!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><p>下面的关键字目前可以完成对应描述中的功能。 </p><p>• as：执行基础类型转换，消除包含条目的指定trait的歧义，在 use与extern crate语句中对条目进行重命名。<br>• break：立即退出一个循环。<br>• const：定义常量元素或不可变裸指针。<br>• continue：继续下一次循环迭代。<br>• crate：连接一个外部包或一个代表了当前包的宏变量。<br>• dyn：表示trait对象可以进行动态分发。<br>• else：if和if let控制流结构的回退分支。<br>• enum：定义一个枚举。<br>• extern：连接外部包、函数或变量。<br>• false：字面量布尔假。<br>• fn：定义一个函数或函数指针类型。<br>• for：在迭代器元素上进行迭代，实现一个trait，指定一个高 阶生命周期。<br>• if：基于条件表达式结果的分支。<br>• impl：实现类型自有的功能或trait定义的功能。• in：for循环语法的一部分。<br>• let：绑定一个变量。<br>• loop：无条件循环。<br>• match：用模式匹配一个值。<br>• mod：定义一个模块。<br>• move：让一个闭包获得全部捕获变量的所有权。<br>• mut：声明引用、裸指针或模式绑定的可变性。<br>• pub：声明结构体字段、impl块或模块的公共性。<br>• ref：通过引用绑定。<br>• return：从函数中返回。<br>• Self：指代正在其上实现trait的类型别名。<br>• self：指代方法本身或当前模块。<br>• static：全局变量或持续整个程序执行过程的生命周期。<br>• struct：定义一个结构体。<br>• super：当前模块的父模块。<br>• trait：定义一个trait。<br>• true：字面量布尔真。<br>• type：定义一个类型别名或关联类型。<br>• unsafe：声明不安全的代码、函数、trait或实现。<br>• use：把符号引入作用域中。<br>• where：声明一个用于约束类型的从句。<br>• while：基于一个表达式结果的条件循环。</p><p>下面的关键字目前还没有任何功能，但它们被Rust保留下来以备 将来使用。 </p><p>• abstract<br>• async<br>• become<br>• box<br>• do<br>• final<br>• macro<br>• override<br>• priv<br>• try<br>• typeof<br>• unsized<br>• virtual<br>• yield</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量可变性由<code>mut</code>关键字修饰的变量可变，否则是常量无法修改。但是rust支持重复定义同名变量，会进行覆盖，如果是类型相同的我们可以使用重新定义变量覆盖</p><p>案例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">let foo = <span class="hljs-number">5</span>; <span class="hljs-comment">// foo是不可变的</span><br>let mut bar = <span class="hljs-number">5</span>; <span class="hljs-comment">// bar是可变的</span><br></code></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>标量类型 （scalar）和复合类型 （compound）</p><h3 id="标量类型-（scalar）"><a href="#标量类型-（scalar）" class="headerlink" title="标量类型 （scalar）"></a>标量类型 （scalar）</h3><p>标量 类型是单个值类型的统称。Rust中内建了4种基础的标量类型：整数、浮点数、布尔值及字符。</p><h4 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1664810778310-a79b5b69-acc4-410c-bec2-8c410e43bab5.png#clientId=u21e22cd6-b39a-4&errorMessage=unknown%20error&from=paste&height=236&id=u864977dc&originHeight=472&originWidth=1364&originalType=binary&ratio=1&rotation=0&showTitle=false&size=68648&status=error&style=none&taskId=uff860306-d84e-48a4-83af-6b7d0cf7df0&title=&width=682" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1664811567581-4aad20c7-049e-4514-905c-cd022767f312.png#clientId=u21e22cd6-b39a-4&errorMessage=unknown%20error&from=paste&height=217&id=u60dcf749&originHeight=434&originWidth=1310&originalType=binary&ratio=1&rotation=0&showTitle=false&size=68129&status=error&style=none&taskId=u52afe704-853f-4ebf-b9c8-8ddd490332a&title=&width=655" alt="image.png"></p><h4 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-number">2.0</span>; <span class="hljs-comment">// f64</span><br><span class="hljs-keyword">let</span> <span class="hljs-variable">y</span>: <span class="hljs-type">f32</span> = <span class="hljs-number">3.0</span>; <span class="hljs-comment">// f32</span><br></code></pre></td></tr></table></figure><h4 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">t</span> = <span class="hljs-literal">true</span>; <br><span class="hljs-keyword">let</span> <span class="hljs-variable">f</span>: <span class="hljs-type">bool</span> = <span class="hljs-literal">false</span>; <span class="hljs-comment">//附带了显式类型标注的语句</span><br></code></pre></td></tr></table></figure><h4 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">e</span> = <span class="hljs-string">&#x27;a&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="复合类型-（compound）"><a href="#复合类型-（compound）" class="headerlink" title="复合类型 （compound）"></a>复合类型 （compound）</h3><p>复合类型 （compound type）可以将多个不同类型的值组合为一个类型。Rust提供了两种内置的基础复合类型：元组 （tuple）和数组 （array）。</p><p><strong>元组类型</strong></p><p>元组是一种相当常见的复合类型，它可以将其他不同类型的多个值组合进一个复合类型中。元组还拥有一个固定的长度：你无法在声明结束后增加或减少其中的元素数量。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">tup</span>: (<span class="hljs-type">i32</span>, <span class="hljs-type">f64</span>, <span class="hljs-type">u8</span>) = (<span class="hljs-number">500</span>, <span class="hljs-number">6.4</span>, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">let</span> <span class="hljs-variable">tup</span> = (<span class="hljs-number">500</span>, <span class="hljs-number">6.4</span>, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">let</span> (x, y, z) = tup;<br><span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;The value of y is: &#123;&#125;&quot;</span>, y);<br></code></pre></td></tr></table></figure><p>可以通过索引并使用点号（.）来访问元组中的值：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">tup</span>: (<span class="hljs-type">i32</span>, <span class="hljs-type">f64</span>, <span class="hljs-type">u8</span>) = (<span class="hljs-number">500</span>, <span class="hljs-number">6.4</span>, <span class="hljs-number">1</span>);<br><span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;tup.0 : &#123;&#125;&quot;</span>,tup.<span class="hljs-number">0</span>);<br><span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;tup.1 : &#123;&#125;&quot;</span>,tup.<span class="hljs-number">1</span>);<br><span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;tup.2 : &#123;&#125;&quot;</span>,tup.<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><p>**数组类型 **</p><p>我们同样可以在数组 中存储多个值的集合。与元组不同，数组中的每一个元素都必须是相同的类型。Rust中的数组拥有固定的长度，一旦声明就再也不能随意更改大小，这与其他某些语言有所不同。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">a</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>];<br><span class="hljs-keyword">let</span> <span class="hljs-variable">months</span> = [<span class="hljs-string">&quot;January&quot;</span>, <span class="hljs-string">&quot;February&quot;</span>, <span class="hljs-string">&quot;March&quot;</span>, <span class="hljs-string">&quot;April&quot;</span>, <span class="hljs-string">&quot;May&quot;</span>, <span class="hljs-string">&quot;June&quot;</span>, <span class="hljs-string">&quot;July&quot;</span>,<br> <span class="hljs-string">&quot;August&quot;</span>, <span class="hljs-string">&quot;September&quot;</span>, <span class="hljs-string">&quot;October&quot;</span>, <span class="hljs-string">&quot;November&quot;</span>, <span class="hljs-string">&quot;December&quot;</span>];<br><span class="hljs-comment">//指定类型和长度</span><br><span class="hljs-keyword">let</span> <span class="hljs-variable">arr</span>: [<span class="hljs-type">i32</span>;<span class="hljs-number">5</span>] = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];<br><span class="hljs-comment">//通过下标访问元素</span><br><span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;,&#123;&#125;&quot;</span>, arr[<span class="hljs-number">0</span>],arr[<span class="hljs-number">4</span>]);<br></code></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>Rust代码使用蛇形命名法 （snake case）来作为规范函数和变量名称的风格。蛇形命名法只使用小写的字母进行命名，并以下画线分隔单词。</p><h4 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">fn 函数名(参数:参数类型) -&gt; 返回类型 &#123;<br><span class="hljs-comment">//函数体</span><br>&#125;<br></code></pre></td></tr></table></figure><p>案例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go">fn method(num:i32)-&gt;i32&#123;<br>    <span class="hljs-keyword">if</span> num == <span class="hljs-number">1</span> &#123; <span class="hljs-keyword">return</span> num&#125;<br>    <span class="hljs-keyword">return</span> method(num<span class="hljs-number">-1</span>) * num<br>&#125;<br><span class="hljs-comment">//</span><br>fn m()-&gt;i32&#123;<br>    <span class="hljs-number">5</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="if表达式"><a href="#if表达式" class="headerlink" title="if表达式"></a>if表达式</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">let number = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">if</span> number&lt;<span class="hljs-number">5</span> &#123;<br>    <span class="hljs-built_in">println</span>!(<span class="hljs-string">&quot;true&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123; <br>    <span class="hljs-built_in">println</span>!(<span class="hljs-string">&quot;false&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go">let number = <span class="hljs-number">6</span>;<br><span class="hljs-keyword">if</span> number % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &#123;<br>    <span class="hljs-built_in">println</span>!(<span class="hljs-string">&quot;number is divisible by 4&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> number % <span class="hljs-number">3</span> == <span class="hljs-number">0</span> &#123;<br>    <span class="hljs-built_in">println</span>!(<span class="hljs-string">&quot;number is divisible by 3&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> number % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> &#123;<br>    <span class="hljs-built_in">println</span>!(<span class="hljs-string">&quot;number is divisible by 2&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">println</span>!(<span class="hljs-string">&quot;number is not divisible by 4, 3, or 2&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">let number = <span class="hljs-keyword">if</span> <span class="hljs-number">1</span>&lt;<span class="hljs-number">2</span> &#123; <span class="hljs-number">5</span> &#125;<span class="hljs-keyword">else</span> &#123; <span class="hljs-number">6</span> &#125;;<br></code></pre></td></tr></table></figure><h3 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h3><p>Rust提供了3种循环：loop、while和for。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go">fn loop_m()&#123;<br>    loop &#123;<br>        <span class="hljs-built_in">println</span>!(<span class="hljs-string">&quot;loop&quot;</span>)<br>    &#125;<br>    let mut idx = <span class="hljs-number">0</span>;<br>    while idx&lt;<span class="hljs-number">100</span> &#123;<br>        <span class="hljs-built_in">println</span>!(<span class="hljs-string">&quot;while&quot;</span>);<br>        idx+=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> i in <span class="hljs-number">0.</span><span class="hljs-number">.100</span> &#123;<br>        <span class="hljs-built_in">print</span>!(<span class="hljs-string">&quot;for&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">[pub] <span class="hljs-keyword">struct</span> StructName &#123;<br>    fieldName: Type,<br>    fieldName: Type,<br>    ......<br>&#125;<br></code></pre></td></tr></table></figure><p>案例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">struct</span> Person &#123;<br>    name: String,<br>    age: u8,<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go">fn build_user(email: String, username: String) -&gt; User &#123;<br>    User &#123;<br>        email,<br>        username,<br>        active: <span class="hljs-literal">true</span>,<br>        sign_in_count: <span class="hljs-number">1</span>,<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">struct</span> User &#123;<br>    username: String,<br>    email: String,<br>    sign_in_count: u64,<br>&#125;<br></code></pre></td></tr></table></figure><p>使用元组定义结构体并实例化</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">struct</span> Color(i32, i32, i32);<br><span class="hljs-keyword">struct</span> Point(i32, i32, i32);<br><br>fn main() &#123;<br>    let black = Color(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    let origin = Point(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>需要注意的是，一旦实例可变，那么实例中的所有字段都将是可变的。Rust不允许我们单独声明某一部分字段的可变性。如同其他表达式一样，我们可以在函数体的最后一个表达式中构造结构体实例， 来隐式地将这个实例作为结果返回。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">struct</span> Rectangle&#123;<br>    width: u32,<br>    height: u32,<br>&#125;<br>fn area(rectangle: &amp;Rectangle) -&gt; u32 &#123;<br>    rectangle.width * rectangle.height<br>&#125;<br>fn main() &#123;<br>    let rectangle = Rectangle&#123;<br>        width:<span class="hljs-number">100</span>,<br>        height:<span class="hljs-number">20</span>,<br>    &#125;;<br>    <span class="hljs-built_in">println</span>!(<span class="hljs-string">&quot;rectangle area = &#123;&#125;&quot;</span>,area(&amp;rectangle))<br>&#125;<br></code></pre></td></tr></table></figure><p>格式化输出（通过derive注解来派生的trait）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go">#[derive(Debug)]<br><span class="hljs-keyword">struct</span> Rectangle&#123;<br>    width: u32,<br>    height: u32,<br>&#125;<br>fn area(rectangle: &amp;Rectangle) -&gt; u32 &#123;<br>    rectangle.width * rectangle.height<br>&#125;<br>fn main() &#123;<br>    let rectangle = Rectangle&#123;<br>        width:<span class="hljs-number">100</span>,<br>        height:<span class="hljs-number">20</span>,<br>    &#125;;<br>    <span class="hljs-built_in">println</span>!(<span class="hljs-string">&quot;rectangle = &#123;:?&#125;&quot;</span>,rectangle);<br>    <span class="hljs-built_in">println</span>!(<span class="hljs-string">&quot;rectangle = &#123;:#?&#125;&quot;</span>,rectangle);<br>    <span class="hljs-built_in">println</span>!(<span class="hljs-string">&quot;rectangle area = &#123;&#125;&quot;</span>,area(&amp;rectangle))<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>方法与函数十分相似：它们都使用fn关键字及一个名称来进行声明；它们都可以拥有参数和返回值；另外，它们都包含了一段在调用时执行的代码。但是，方法与函数依然是两个不同的概念，因为方法总是被定义在某个结构体的上下文中，并且它们的第一个参数永远都是self，用于指代调用该方法的结构体实例。</p><h3 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go">#[derive(Debug)]<br><span class="hljs-keyword">struct</span> Rectangle&#123;<br>    width: u32,<br>    height: u32,<br>&#125;<br><br>impl Rectangle &#123;<br>    pub fn area(&amp;self) -&gt; u32 &#123;<br>        self.width * self.height<br>    &#125;<br>&#125;<br><br>fn main() &#123;<br>    let rectangle = Rectangle&#123;<br>        width:<span class="hljs-number">100</span>,<br>        height:<span class="hljs-number">20</span>,<br>    &#125;;<br>    <span class="hljs-built_in">println</span>!(<span class="hljs-string">&quot;rectangle = &#123;:?&#125;&quot;</span>,rectangle);<br>    <span class="hljs-built_in">println</span>!(<span class="hljs-string">&quot;rectangle = &#123;:#?&#125;&quot;</span>,rectangle);<br>    <span class="hljs-built_in">println</span>!(<span class="hljs-string">&quot;rectangle area = &#123;&#125;&quot;</span>,rectangle.area());<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以在类型名称后添加<code>::</code>来调用关联函数，就像<code>let sq = Rectangle:: square(3);</code>一样。这个函数位于结构体的命名空间中，<br>这里的<code>::</code>语法不仅被用于关联函数，还被用于模块创建的命名空间。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go">#[derive(Debug)]<br><span class="hljs-keyword">struct</span> Rectangle&#123;<br>    width: u32,<br>    height: u32,<br>&#125;<br><br>impl Rectangle &#123;<br>    pub fn area(&amp;self) -&gt; u32 &#123;<br>        self.width * self.height<br>    &#125;<br>    fn square(size: u32) -&gt; Rectangle &#123;<br>        Rectangle &#123; width: size, height: size &#125;<br>    &#125;<br>&#125;<br><br>fn main() &#123;<br>    let rectangle = Rectangle&#123;<br>        width:<span class="hljs-number">100</span>,<br>        height:<span class="hljs-number">20</span>,<br>    &#125;;<br>    <span class="hljs-built_in">println</span>!(<span class="hljs-string">&quot;rectangle = &#123;:?&#125;&quot;</span>,rectangle);<br>    <span class="hljs-built_in">println</span>!(<span class="hljs-string">&quot;rectangle = &#123;:#?&#125;&quot;</span>,rectangle);<br>    <span class="hljs-built_in">println</span>!(<span class="hljs-string">&quot;rectangle area = &#123;&#125;&quot;</span>,rectangle.area());<br>    let s = Rectangle::square(<span class="hljs-number">10</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><h3 id="定义枚举"><a href="#定义枚举" class="headerlink" title="定义枚举"></a>定义枚举</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go">enum IpAddrKind &#123;<br>    V4,<br>    V6,<br>&#125;<br><span class="hljs-comment">//使用</span><br>fn main() &#123;<br>    let four = IpAddrKind::V4;<br>    let six = IpAddrKind::V6;<br>&#125;<br></code></pre></td></tr></table></figure><p>案例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go">enum IpAddrKind &#123;<br>    V4,<br>    V6,<br>&#125;<br><span class="hljs-keyword">struct</span> IpAddr &#123;<br>    kind: IpAddrKind,<br>    address: String,<br>&#125;<br>fn main() &#123;<br>    let four = IpAddrKind::V4;<br>    let six = IpAddrKind::V6;<br>    let home = IpAddr &#123;<br>        kind: IpAddrKind::V4,<br>        address: String::from(<span class="hljs-string">&quot;127.0.0.1&quot;</span>),<br>    &#125;;<br>    let loopback = IpAddr &#123;<br>        kind: IpAddrKind::V6,<br>        address: String::from(<span class="hljs-string">&quot;::1&quot;</span>),<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Message</span> &#123;<br>    Quit,<br>    Move &#123; x: <span class="hljs-type">i32</span>, y: <span class="hljs-type">i32</span> &#125;,<br>    <span class="hljs-title function_ invoke__">Write</span>(<span class="hljs-type">String</span>),<br>    <span class="hljs-title function_ invoke__">ChangeColor</span>(<span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>),<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Option"><a href="#Option" class="headerlink" title="Option"></a>Option</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span>: <span class="hljs-type">Option</span>&lt;<span class="hljs-type">u32</span>&gt; = <span class="hljs-title function_ invoke__">Some</span>(<span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(x.<span class="hljs-title function_ invoke__">is_some</span>(), <span class="hljs-literal">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Match"><a href="#Match" class="headerlink" title="Match"></a>Match</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Coin</span> &#123;<br>    Penny,<br>    Nickel,<br>    Dime,<br>    Quarter,<br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">value_in_cents</span>(coin: Coin) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">u32</span> &#123;<br>    <span class="hljs-keyword">match</span> coin &#123;<br>        Coin::Penny =&gt; <span class="hljs-number">1</span>,<br>        Coin::Nickel =&gt; <span class="hljs-number">5</span>,<br>        Coin::Dime =&gt; <span class="hljs-number">10</span>,<br>        Coin::Quarter =&gt; <span class="hljs-number">25</span>,<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">plus_one</span>(x: <span class="hljs-type">Option</span>&lt;<span class="hljs-type">i32</span>&gt;) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Option</span>&lt;<span class="hljs-type">i32</span>&gt; &#123;<br>    <span class="hljs-keyword">match</span> x &#123;<br>        <span class="hljs-literal">None</span> =&gt; <span class="hljs-literal">None</span>,<br>        <span class="hljs-title function_ invoke__">Some</span>(i) =&gt; <span class="hljs-title function_ invoke__">Some</span>(i + <span class="hljs-number">1</span>),<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">five</span> = <span class="hljs-title function_ invoke__">Some</span>(<span class="hljs-number">5</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">six</span> = <span class="hljs-title function_ invoke__">plus_one</span>(five);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;six=&#123;:?&#125;&quot;</span>,six);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">none</span> = <span class="hljs-title function_ invoke__">plus_one</span>(<span class="hljs-literal">None</span>);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;six=&#123;:?&#125;&quot;</span>,none);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="通配符-下划线"><a href="#通配符-下划线" class="headerlink" title="通配符(下划线)"></a>通配符(下划线)</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">some_u8_value</span> = <span class="hljs-number">0u8</span>;<br>    <span class="hljs-keyword">match</span> some_u8_value &#123;<br>        <span class="hljs-number">1</span> =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;one&quot;</span>),<br>        <span class="hljs-number">3</span> =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;three&quot;</span>),<br>        <span class="hljs-number">5</span> =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;five&quot;</span>),<br>        <span class="hljs-number">7</span> =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;seven&quot;</span>),<br>        _ =&gt; (),<br>    &#125;<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Some</span>(<span class="hljs-number">3</span>) = some_u8_value &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;three&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="引用模块"><a href="#引用模块" class="headerlink" title="引用模块"></a>引用模块</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">use xxx::xxx;<br></code></pre></td></tr></table></figure><p>案例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">use std::io;<br></code></pre></td></tr></table></figure><h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><h2 id="所有权"><a href="#所有权" class="headerlink" title="所有权"></a>所有权</h2><ul><li>Rust中的每一个值都有一个对应的变量作为它的所有者 。 </li><li>在同一时间内，值有且仅有一个所有者。 </li><li>当所有者离开自己的作用域时，它持有的值就会被释放掉。</li></ul><h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1664942929182-411260a7-858c-4354-81f1-a8fd0094a9f3.png#clientId=u74bc5f33-9b6b-4&errorMessage=unknown%20error&from=ui&height=122&id=u7c857717&originHeight=216&originWidth=1118&originalType=binary&ratio=1&rotation=0&showTitle=false&size=66122&status=error&style=none&taskId=uea98781c-35bb-4b2c-904a-0956c426d05&title=&width=634" alt="截屏2022-10-05 12.07.53.png"></p><h3 id="内存与分配"><a href="#内存与分配" class="headerlink" title="内存与分配"></a>内存与分配</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">let s = String::from(<span class="hljs-string">&quot;hello&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li><p>:: 表示使用String命名空间下的相关api</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">let mut s = String::from(<span class="hljs-string">&quot;hello&quot;</span>);<br>s.push_str(<span class="hljs-string">&quot;, world!&quot;</span>); <span class="hljs-comment">// push_str() 函数向String空间的尾部添加了一段字面量</span><br><span class="hljs-built_in">println</span>!(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, s); <span class="hljs-comment">// 这里会输出完整的</span><br></code></pre></td></tr></table></figure></li><li><p>我们使用的内存是由操作系统在运行时动态分配出来的。</p></li><li><p>当使用完String时，我们需要通过某种方式来将这些内存归还 给操作系统。</p></li></ul><p>Rust提供了另一套解决方案：内存会自动地在拥有它的变量离开作用域后进行释放。下面的代码类似于示例中的代码，不过我们将字符串字面量换成了String类型：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">&#123;<br>    let s = String::from(<span class="hljs-string">&quot;hello&quot;</span>);<span class="hljs-comment">//从这里开始，变量s变得有效</span><br>    <span class="hljs-comment">//...对s进行操作</span><br>&#125;   <span class="hljs-comment">//作用域到指令结束,变量s失效</span><br></code></pre></td></tr></table></figure><p>有一个很适合用来回收内存给操作系统的地方：变量s离开作用域的地方。Rust在变量离开作用域时，会调用一个叫作drop的特殊函数。String类型的作者可以在这个函数中编写释放内存的代码。记住，Rust会在作用域结束的地方（即}处）自动调用drop函数。</p><h3 id="所有权与函数"><a href="#所有权与函数" class="headerlink" title="所有权与函数"></a>所有权与函数</h3><p>下面是一些拥有Copy这种trait的类型： </p><ul><li>所有的整数类型，诸如u32。 </li><li>仅拥有两种值（true和false）的布尔类型：bool。 </li><li>字符类型：char。 </li><li>所有的浮点类型，诸如f64。 </li><li>如果元组包含的所有字段的类型都是Copy的，那么这个元组也是Copy的。例如，(i32, i32)是Copy的，但(i32, String)则不是。</li></ul><p>将值传递给函数在语义上类似于对变量进行赋值。将变量传递给函数将会触发移动或复制，就像是赋值语句一样。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1664944441666-89b8b4d6-a427-423a-a119-44e7a8029cde.png#clientId=u74bc5f33-9b6b-4&errorMessage=unknown%20error&from=ui&height=318&id=u859591c9&originHeight=932&originWidth=1026&originalType=binary&ratio=1&rotation=0&showTitle=false&size=322194&status=error&style=none&taskId=u37e260af-7a0a-49ee-8f3f-9831fecbc8b&title=&width=350" alt="截屏2022-10-05 12.33.46.png"><br>尝试在调用takes_ownership后使用变量s会导致编译时错误。这类静态检查可以使我们免于犯错。你可以尝试在main函数中使用s和x变量，来看一看在所有权规则的约束下能够在哪些地方合法地使用它们。</p><p>如果我们想进行函数调用后还继续使用该变量，那我们可以将它调用完进行返回</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go">fn m2()&#123;<br>    let mut s = String::from(<span class="hljs-string">&quot;hello&quot;</span>);<br>    s = takes_ownership(s);<br>    <span class="hljs-built_in">println</span>!(<span class="hljs-string">&quot;s=&#123;&#125;&quot;</span>,s);<br>    let x = <span class="hljs-number">5</span>;<br>    makes_copy(x);<br>    <span class="hljs-built_in">println</span>!(<span class="hljs-string">&quot;x=&#123;&#125;&quot;</span>,x);<br>&#125;<br><br>fn takes_ownership(s:String)-&gt;String&#123;<br>    <span class="hljs-built_in">println</span>!(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>,s);<br>    s<br>&#125;<br></code></pre></td></tr></table></figure><p>但是如果我又想当前传入函数的变量不被回收又能返回计算结果，那么我们可以同时对其进行返回（多返回值）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go">fn main() &#123;<br>    let s1 = String::from(<span class="hljs-string">&quot;hello&quot;</span>);<br>    let (s2, <span class="hljs-built_in">len</span>) = calculate_length(s1);<br>    <span class="hljs-built_in">println</span>!(<span class="hljs-string">&quot;The length of &#x27;&#123;&#125;&#x27; is &#123;&#125;.&quot;</span>, s2, <span class="hljs-built_in">len</span>);<br>&#125;<br>fn calculate_length(s: String) -&gt; (String, usize) &#123;<br>    let length = s.<span class="hljs-built_in">len</span>(); <span class="hljs-comment">// len()会返回当前字符串的长度</span><br>    (s, length)<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的方法都显得十分的繁杂，下面的这种方法更加简单，我们在传入函数的变量时，我们传入变量的地址</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go">fn m4()&#123;<br>    let mut s = String::from(<span class="hljs-string">&quot;hello&quot;</span>);<br>    let l = takes_own(&amp;s);<br>    <span class="hljs-built_in">println</span>!(<span class="hljs-string">&quot;s=&#123;&#125;,l=&#123;&#125;&quot;</span>,s,l);<br>    let x = <span class="hljs-number">5</span>;<br>    makes_copy(x);<br>    <span class="hljs-built_in">println</span>!(<span class="hljs-string">&quot;x=&#123;&#125;&quot;</span>,x);<br>&#125;<br>fn takes_own(s:&amp;String)-&gt;usize&#123;<br>    <span class="hljs-built_in">println</span>!(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>,s);<br>    s.<span class="hljs-built_in">len</span>()<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>与使用&amp;进行引用相反的操作被称为解引用（dereferencing）， 它使用 * 作为运算符。</p></blockquote><p>这里的&amp;s1语法允许我们在不转移所有权的前提下，创建一个指向 s1值的引用。由于引用不持有值的所有权，所以当引用离开当前作用<br>域时，它指向的值也不会被丢弃。 同理，函数签名中的&amp;用来表明参数s的类型是一个引用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">fn calculate_length(s: &amp;String) -&gt; usize &#123; <span class="hljs-comment">// s 是一个指向 String 的引用</span><br> s.<span class="hljs-built_in">len</span>()<br>&#125; <span class="hljs-comment">// 到这里，s离开作用域。但是由于它并不持有自己所指向值的所有权，</span><br><span class="hljs-comment">//所以没有什么特殊的事情会发生</span><br></code></pre></td></tr></table></figure><p>此处，变量s的有效作用域与其他任何函数参数一样，唯一不同的是，它不会在离开自己的作用域时销毁其指向的数据，因为它并不拥有该数据的所有权。当一个函数使用引用而不是值本身作为参数时， 我们便不需要为了归还所有权而特意去返回值，毕竟在这种情况下， 我们根本没有取得所有权。</p><p>这 种 通 过 引 用 传 递 参 数 给 函 数 的 方 法 也 被 称 为 借 用 （borrowing）。在现实生活中，假如一个人拥有某件东西，你可以从他那里把东西借过来。但是当你使用完毕时，就必须将东西还回去。</p><p>那我们是否可以在方法体里面修改该变量的值呢</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">fn main() &#123;<br>    let s = String::from(<span class="hljs-string">&quot;hello&quot;</span>);<br>    change(&amp;s);<br>&#125;<br>fn change(some_string: &amp;String) &#123;<br>    some_string.push_str(<span class="hljs-string">&quot;, world&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>此时修改是无法修改的，我们得用可变的引用才允许修改</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">fn main() &#123;<br>    let mut s = String::from(<span class="hljs-string">&quot;hello&quot;</span>);<br>    change(&amp;mut s);<br>&#125;<br>fn change(some_string: &amp;mut String) &#123;<br>    some_string.push_str(<span class="hljs-string">&quot;, world&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="悬垂引用"><a href="#悬垂引用" class="headerlink" title="悬垂引用"></a>悬垂引用</h3><p>使用拥有指针概念的语言会非常容易错误地创建出悬垂指针 。这类指针指向曾经存在的某处内存地址，但该内存已经被释放掉甚至是被重新分配另作他用了。而在Rust语言中，编译器会确保引用永远不会进入这种悬垂状态。假如我们当前持有某个数据的引用，那么编译器可以保证这个数据不会在引用被销毁前离开自己的作用域。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">fn main()&#123; <br> let reference_to_nothing = dangle(); <br>&#125; <br>fn dangle() -&gt; &amp;String &#123; <br> let s = String::from(<span class="hljs-string">&quot;hello&quot;</span>); <br> &amp;s <br>&#125;<br></code></pre></td></tr></table></figure><p>此时无法通过编译 <code>this function&#39;s return type contains a borrowed value, but there is no value for it to be borrowed from</code> 由于变量s创建在函数dangle内，所以它会在dangle执行完毕时随之释放。但是，我们的代码依旧尝试返回一个指向s的引用，这个引用指向的是一个无效的String，这可不对！Rust成功地拦截了我们的危险代码。</p><p>解决这个问题的方法也很简单，直接返回String就好： </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">fn no_dangle() -&gt; String &#123; <br> let s = String::from(<span class="hljs-string">&quot;hello&quot;</span>); <br> s <br>&#125; <br></code></pre></td></tr></table></figure><h3 id="引用的规则"><a href="#引用的规则" class="headerlink" title="引用的规则"></a>引用的规则</h3><ul><li>在任何一段给定的时间里，你要么只能拥有一个可变引用，要么只能拥有任意数量的不可变引用。 </li><li>引用总是有效的。</li></ul><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><p>除了引用，Rust还有另外一种不持有所有权的数据类型：切片（slice）。切片允许我们引用集合中某一段连续的元素序列，而不是整个集合。</p><p>编写一个搜索函数，它接收字符串作为参数，并将字符串中的首个单词作为结果返回。如果字符串中不存在空格，那么就意味着整个字符串是一个单词，直接返回整个字符串作为结果即可。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go">fn first_word(s: &amp;String) -&gt; usize &#123;<br>    let bytes = s.as_bytes();<br>    <span class="hljs-keyword">for</span> (i, &amp;item) in bytes.iter().enumerate() &#123;<br>        <span class="hljs-keyword">if</span> item == b<span class="hljs-string">&#x27; &#x27;</span> &#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>    &#125;<br>    s.<span class="hljs-built_in">len</span>()<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码首先使用as_bytes方法将String转换为字节数组，因为我们的算法需要依次检查String中的字节是否为空格。接着，我们通过iter方法创建了一个可以遍历字节数组的迭代器。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go">fn main() &#123;<br>    let mut s = String::from(<span class="hljs-string">&quot;hello world&quot;</span>);<br>    let word = first_word(&amp;s); <span class="hljs-comment">// 索引5会被绑定到变量word上</span><br>    s.clear(); <span class="hljs-comment">// 这里的clear方法会清空当前字符串，使之变为&quot;&quot; </span><br>    <span class="hljs-comment">// 虽然word依然拥有5这个值，但因为我们用于搜索的字符串发生了改变，</span><br>    <span class="hljs-comment">//所以这个索引也就没有任何意义了，word到这里便失去了有效性</span><br>    <span class="hljs-built_in">println</span>!(<span class="hljs-string">&quot;idx=&#123;&#125;&quot;</span>,word);<br>    <span class="hljs-built_in">println</span>!(<span class="hljs-string">&quot;s=&#123;&#125;&quot;</span>,s);<br>&#125;<br></code></pre></td></tr></table></figure><p>这种API的设计方式使我们需要随时关注word的有效性，确保它与s中的数据是一致的，类似的工作往往相当烦琐且易于出错。这种情况对于另一个函数second_word而言更加明显。</p><p>字符串切片：字符串切片是指向String对象中某个连续部分的引用，它的使用方式如下所示： </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go">fn slice()&#123;<br>    let s = String::from(<span class="hljs-string">&quot;hello world&quot;</span>);<br>    let hello = &amp;s[<span class="hljs-number">0.</span><span class="hljs-number">.5</span>];<br>    let world = &amp;s[<span class="hljs-number">6.</span><span class="hljs-number">.11</span>];<br>    let full = &amp;s[..];<br>    <span class="hljs-comment">// let full = &amp;s[0..];</span><br>    let hi = &amp;s[.<span class="hljs-number">.5</span>];<br>    <span class="hljs-built_in">println</span>!(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>,hello);<br>    <span class="hljs-built_in">println</span>!(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>,hi);<br>    <span class="hljs-built_in">println</span>!(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>,world);<br>    <span class="hljs-built_in">println</span>!(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>,full);<br>&#125;<br></code></pre></td></tr></table></figure><p>重构first_word函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go">fn first_word(s: &amp;String) -&gt; &amp;str &#123;<br>    let bytes = s.as_bytes();<br>    <span class="hljs-keyword">for</span> (i, &amp;item) in bytes.iter().enumerate() &#123;<br>        <span class="hljs-keyword">if</span> item == b<span class="hljs-string">&#x27; &#x27;</span> &#123;<br>            <span class="hljs-keyword">return</span> &amp;s[<span class="hljs-number">0.</span>.i];<br>        &#125;<br>    &#125;<br>    &amp;s[..]<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go">fn main() &#123;<br>    let my_string = String::from(<span class="hljs-string">&quot;hello world&quot;</span>);<br>    <span class="hljs-comment">// first_word 可以接收String对象的切片作为参数</span><br>    let word = first_word(&amp;my_string[..]);<br>    let my_string_literal = <span class="hljs-string">&quot;hello world&quot;</span>;<br>    <span class="hljs-comment">// first_word 可以接收字符串字面量的切片作为参数</span><br>    let word = first_word(&amp;my_string_literal[..]);<br>    <span class="hljs-comment">// 由于字符串字面量本身就是切片，所以我们可以在这里直接将它传入函数，</span><br>    <span class="hljs-comment">// 而不需要使用额外的切片语法！</span><br>    let word = first_word(&amp;my_string_literal[..]);<br>&#125;<br><br>fn first_word(s: &amp;str) -&gt; &amp;str &#123;<br>    let bytes = s.as_bytes();<br>    <span class="hljs-keyword">for</span> (i, &amp;item) in bytes.iter().enumerate() &#123;<br>        <span class="hljs-keyword">if</span> item == b<span class="hljs-string">&#x27; &#x27;</span> &#123;<br>            <span class="hljs-keyword">return</span> &amp;s[<span class="hljs-number">0.</span>.i];<br>        &#125;<br>    &#125;<br>    &amp;s[..]<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="其他类型的切片"><a href="#其他类型的切片" class="headerlink" title="其他类型的切片"></a>其他类型的切片</h3><p>从名字上就可以看出来，字符串切片是专门用于字符串的。但实际上，Rust还有其他更加通用的切片类型，以下面的数组为例： </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">let a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]; <br></code></pre></td></tr></table></figure><p>就像我们想要引用字符串的某个部分一样，你也可能会希望引用数组的某个部分。这时，我们可以这样做： </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">let a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]; <br>let slice = &amp;a[<span class="hljs-number">1.</span><span class="hljs-number">.3</span>]; <br></code></pre></td></tr></table></figure><p>这里的切片类型是&amp;[i32]，它在内部存储了一个指向起始元素的引用及长度，这与字符串切片的工作机制完全一样。你将在各种各样的集合中接触到此类切片</p><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><blockquote><p>闭包（closure），一个类似于函数且可以存储在变量中的结构。</p></blockquote><p>Rust中的闭包是<strong>一种可以存入变量或作为参数传递给其他函数的 匿名函数</strong>。你可以在一个地方创建闭包，然后在不同的上下文环境中 调用该闭包来完成运算。和一般的函数不同，闭包可以从定义它的作 用域中捕获值。</p><p>我们希望在程序中将代码定义在一处，但只在真正需要结果时才执行 相关代码。而这正是闭包的用武之地！</p><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><blockquote><p>迭代器（iterator），一种处理一系列元素的方法。</p></blockquote><h1 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h1><ul><li>包（package） ：一个用于构建、测试并分享单元包的Cargo功能。 </li><li>单元包（crate） ：一个用于生成库或可执行文件的树形模块结构。 </li><li>模块（module） 及use关键字： 它们被用于控制文件结构、 作用域及路径的私有性。 </li><li>路径（path） ：一种用于命名条目的方法，这些条目包括结构体、函数和模块等。</li></ul><h2 id="包与单元包"><a href="#包与单元包" class="headerlink" title="包与单元包"></a>包与单元包</h2><p>1.rust中声明包的关键字是mod，如果是公共的，则需要声明为pub mod。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">mod</span> game &#123;<br>    <span class="hljs-keyword">use</span> std::cmp::Ordering;<br>    <span class="hljs-keyword">use</span> std::io;<br>    <span class="hljs-keyword">use</span> rand::Rng;<br>    <span class="hljs-keyword">use</span> crate::example;<span class="hljs-comment">//使用另一个包下的mod方法</span><br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">guess</span>() &#123;<br>        example::example::<span class="hljs-title function_ invoke__">say_hello</span>();<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;guess number 1..10&quot;</span>);<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;please enter you number:&quot;</span>);<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">cnt</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">loop</span> &#123;<br>            <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">guess</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">new</span>();<br>            io::<span class="hljs-title function_ invoke__">stdin</span>().<span class="hljs-title function_ invoke__">read_line</span>(&amp;<span class="hljs-keyword">mut</span> guess).<span class="hljs-title function_ invoke__">expect</span>(<span class="hljs-string">&quot;Failed to read line&quot;</span>);<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">guess</span>: <span class="hljs-type">u32</span> = <span class="hljs-keyword">match</span> guess.<span class="hljs-title function_ invoke__">trim</span>().<span class="hljs-title function_ invoke__">parse</span>() &#123;<br>                <span class="hljs-title function_ invoke__">Ok</span>(num) =&gt; num,<br>                <span class="hljs-title function_ invoke__">Err</span>(_) =&gt; <span class="hljs-keyword">continue</span>,<br>            &#125;;<br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;You guessed: &#123;&#125;&quot;</span>, guess);<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">secret_number</span> = rand::<span class="hljs-title function_ invoke__">thread_rng</span>().<span class="hljs-title function_ invoke__">gen_range</span>(<span class="hljs-number">1</span>..=<span class="hljs-number">10</span>);<br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;The secret number is: &#123;&#125;&quot;</span>, secret_number);<br>            <span class="hljs-keyword">match</span> guess.<span class="hljs-title function_ invoke__">cmp</span>(&amp;secret_number) &#123;<br>                Ordering::Less =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Too small!&quot;</span>),<br>                Ordering::Greater =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Too big!&quot;</span>),<br>                Ordering::Equal =&gt; &#123;<br>                    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;You win!&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            cnt+=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> cnt==<span class="hljs-number">10</span> &#123;<br>                <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;game over&quot;</span>);<br>                <span class="hljs-keyword">break</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>rust中，每个文件都是一个包，文件名就是包名。如果是和main.rs同级的文件，可以直接使用文件名作为包名。如果有多级目录，那么每个目录下，都要有一个mod.rs作为包的入口，rust的mod.rs文件中需要显式地说明当前目录下的包名，以及是否是pub类型的。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">mod</span> guess;<span class="hljs-comment">//声明一个guess模块（文件名）</span><br></code></pre></td></tr></table></figure><p>2.use关键字用于引用，当需要使用其他模块的方法或者结构体时需要先进行导入</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> xxx::xxx<br><span class="hljs-comment">//案例</span><br><span class="hljs-keyword">use</span> std::io;<br><span class="hljs-keyword">use</span> rand::Rng;<br><span class="hljs-keyword">use</span> std::cmp::Ordering;<br></code></pre></td></tr></table></figure><p>3.导入后进行调用</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">mod</span> chapter4;<br><span class="hljs-keyword">mod</span> chapter3;<br><span class="hljs-keyword">mod</span> example;<br><span class="hljs-keyword">mod</span> guess;<br><br><span class="hljs-keyword">use</span> guess::guess::game <span class="hljs-keyword">as</span> g;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    guess::guess::game::<span class="hljs-title function_ invoke__">guess</span>();<br>    <span class="hljs-comment">//等同于</span><br>    g::<span class="hljs-title function_ invoke__">guess</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>4.关于导入的路径问题</p><ul><li>use::crate:: 来引用上级的模块</li><li>如果是main文件直接使用mod声明模块就行，main文件比较特殊</li></ul><p>5.相同模块了怎么办？</p><blockquote><p>不担心rust提供了as关键字来别名模块</p></blockquote><h2 id="Cargo"><a href="#Cargo" class="headerlink" title="Cargo"></a>Cargo</h2><p>rust使用cargo来管理项目依赖</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs go">Rust<span class="hljs-string">&#x27;s package manager</span><br><span class="hljs-string"></span><br><span class="hljs-string">USAGE:</span><br><span class="hljs-string">    cargo [+toolchain] [OPTIONS] [SUBCOMMAND]</span><br><span class="hljs-string"></span><br><span class="hljs-string">OPTIONS:</span><br><span class="hljs-string">    -V, --version               Print version info and exit</span><br><span class="hljs-string">        --list                  List installed commands</span><br><span class="hljs-string">        --explain &lt;CODE&gt;        Run `rustc --explain CODE`</span><br><span class="hljs-string">    -v, --verbose               Use verbose output (-vv very verbose/build.rs output)</span><br><span class="hljs-string">    -q, --quiet                 Do not print cargo log messages</span><br><span class="hljs-string">        --color &lt;WHEN&gt;          Coloring: auto, always, never</span><br><span class="hljs-string">        --frozen                Require Cargo.lock and cache are up to date</span><br><span class="hljs-string">        --locked                Require Cargo.lock is up to date</span><br><span class="hljs-string">        --offline               Run without accessing the network</span><br><span class="hljs-string">        --config &lt;KEY=VALUE&gt;    Override a configuration value</span><br><span class="hljs-string">    -Z &lt;FLAG&gt;                   Unstable (nightly-only) flags to Cargo, see &#x27;</span>cargo -Z help<span class="hljs-string">&#x27; for</span><br><span class="hljs-string">                                details</span><br><span class="hljs-string">    -h, --help                  Print help information</span><br><span class="hljs-string"></span><br><span class="hljs-string">Some common cargo commands are (see all commands with --list):</span><br><span class="hljs-string">    build, b    Compile the current package</span><br><span class="hljs-string">    check, c    Analyze the current package and report errors, but don&#x27;</span>t build object files<br>    clean       Remove the target directory<br>    doc, d      Build this <span class="hljs-keyword">package</span><span class="hljs-string">&#x27;s and its dependencies&#x27;</span> documentation<br>    <span class="hljs-built_in">new</span>         Create a <span class="hljs-built_in">new</span> cargo <span class="hljs-keyword">package</span><br>    init        Create a <span class="hljs-built_in">new</span> cargo <span class="hljs-keyword">package</span> in an existing directory<br>    add         Add dependencies to a manifest file<br>    run, r      Run a binary or example of the local <span class="hljs-keyword">package</span><br>    test, t     Run the tests<br>    bench       Run the benchmarks<br>    update      Update dependencies listed in Cargo.lock<br>    search      Search registry <span class="hljs-keyword">for</span> crates<br>    publish     Package and upload this <span class="hljs-keyword">package</span> to the registry<br>    install     Install a Rust binary. Default location is $HOME/.cargo/bin<br>    uninstall   Uninstall a Rust binary<br><br>See <span class="hljs-string">&#x27;cargo help &lt;command&gt;&#x27;</span> <span class="hljs-keyword">for</span> more information on a specific command.<br></code></pre></td></tr></table></figure><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><h3 id="编译项目"><a href="#编译项目" class="headerlink" title="编译项目"></a>编译项目</h3><h3 id="查看包文档"><a href="#查看包文档" class="headerlink" title="查看包文档"></a>查看包文档</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">cargo doc --open<br></code></pre></td></tr></table></figure><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><ul><li>动态数组（vector）可以让你连续地存储任意多个值。 </li><li>字符串（string）是字符的集合。 </li><li>哈希映射（hash map）可以让你将值关联到一个特定的键上，它是另外一种数据结构—映射 （map）的特殊实现。</li></ul><h2 id="动态数组"><a href="#动态数组" class="headerlink" title="动态数组"></a>动态数组</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">m1</span>()&#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">v</span>:<span class="hljs-type">Vec</span>&lt;<span class="hljs-type">i32</span>&gt; = <span class="hljs-type">Vec</span>::<span class="hljs-title function_ invoke__">new</span>();<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;v=&#123;:?&#125;&quot;</span>,v);<br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">i</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..<span class="hljs-number">10</span> &#123;<br>        v.<span class="hljs-title function_ invoke__">push</span>(i);<br>    &#125;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;v=&#123;:?&#125;&quot;</span>,v);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">third</span>: &amp;<span class="hljs-type">i32</span> = &amp;v[<span class="hljs-number">2</span>];<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;The third element is &#123;&#125;&quot;</span>, third);<br>    <span class="hljs-keyword">match</span> v.<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-title function_ invoke__">Some</span>(third) =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;The third element is &#123;&#125;&quot;</span>, third),<br>        <span class="hljs-literal">None</span> =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;There is no third element.&quot;</span>),<br>    &#125;<br>    <span class="hljs-comment">//动态数组一旦离开作用域就会被立即销毁</span><br><br>    <span class="hljs-comment">//遍历数组</span><br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">i</span> <span class="hljs-keyword">in</span> &amp;v &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>String实际上是一个基于Vec<u8>的封装类型。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">String</span> &#123;<br>    vec: <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">u8</span>&gt;,<br>&#125;<br></code></pre></td></tr></table></figure><p>相关操作</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">m1</span>()&#123;<br>    <span class="hljs-comment">//定义一个字符串</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">new</span>();<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">data</span> = <span class="hljs-string">&quot;initial contents&quot;</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = data.<span class="hljs-title function_ invoke__">to_string</span>();<br>    <span class="hljs-comment">// 这个方法同样也可以直接作用于字面量</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-string">&quot;initial contents&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>();<br>    <span class="hljs-comment">//支持多种编码</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">hello</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Dobrý den&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">hello</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Hello&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">hello</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;こんにちは&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">hello</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;안녕하세요&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">hello</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;你好&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">hello</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Olá&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">hello</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Здравствуйте&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">hello</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Hola&quot;</span>);<br>    <span class="hljs-comment">//更新字符串</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;foo&quot;</span>);<br>    s.<span class="hljs-title function_ invoke__">push_str</span>(<span class="hljs-string">&quot;bar&quot;</span>);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;s=&#123;&#125;&quot;</span>,s);<span class="hljs-comment">//foobar</span><br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s1</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Hello, &quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s2</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;world!&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s3</span> = s1 + &amp;s2; <span class="hljs-comment">// 注意这里的s1已经被移动且再也不能被使用了</span><br><br>    <span class="hljs-comment">// println!(&quot;s1=&#123;&#125;&quot;,s1);//error value borrowed here after move</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;s2=&#123;&#125;&quot;</span>,s2);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;s2=&#123;&#125;&quot;</span>,s3);<br><br>    <span class="hljs-comment">//format</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s1</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s2</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;world&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s3</span> = <span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;&#123;&#125;-&#123;&#125;&quot;</span>,s1,s2);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>,s3);<br><br>    <span class="hljs-comment">//len</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">len</span> = s1.<span class="hljs-title function_ invoke__">len</span>();<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;hello len = &#123;&#125;&quot;</span>,len);<br>&#125;<br></code></pre></td></tr></table></figure><p>字符串切片</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">hello</span> = <span class="hljs-string">&quot;hello rust&quot;</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-variable">slide</span> = &amp;hello[<span class="hljs-number">1</span>..<span class="hljs-number">5</span>];<br><span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;slide = &#123;&#125;&quot;</span>,slide);<span class="hljs-comment">//ello</span><br><span class="hljs-comment">//遍历</span><br><span class="hljs-keyword">for</span> <span class="hljs-variable">c</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;hello world&quot;</span>.<span class="hljs-title function_ invoke__">chars</span>() &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, c);<br>&#125;<br><span class="hljs-keyword">for</span> <span class="hljs-variable">c</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;hello world&quot;</span>.<span class="hljs-title function_ invoke__">as_bytes</span>() &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, c);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="哈希映射"><a href="#哈希映射" class="headerlink" title="哈希映射"></a>哈希映射</h2><p>创建哈希映射（首次插入会确定其kv值）</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::collections::HashMap;<br><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">scores</span> = HashMap::<span class="hljs-title function_ invoke__">new</span>();<span class="hljs-comment">//首次插入会确定其kv值</span><br>scores.<span class="hljs-title function_ invoke__">insert</span>(<span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Blue&quot;</span>), <span class="hljs-number">10</span>);<br>scores.<span class="hljs-title function_ invoke__">insert</span>(<span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Yellow&quot;</span>), <span class="hljs-number">50</span>);<br><br><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">map</span> = HashMap::<span class="hljs-title function_ invoke__">new</span>();<br>map.<span class="hljs-title function_ invoke__">insert</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<span class="hljs-comment">//k=i32,v=i32</span><br></code></pre></td></tr></table></figure><p>生命周期</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">//生命周期</span><br><span class="hljs-keyword">let</span> <span class="hljs-variable">field_name</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Favorite color&quot;</span>);<br><span class="hljs-keyword">let</span> <span class="hljs-variable">field_value</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Blue&quot;</span>);<br><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">map</span> = HashMap::<span class="hljs-title function_ invoke__">new</span>();<br>map.<span class="hljs-title function_ invoke__">insert</span>(field_name, field_value);<br><span class="hljs-comment">// filed_name和field_value从这一刻开始失效，若尝试使用它们则会导致编译错误！</span><br></code></pre></td></tr></table></figure><p>案例</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">m1</span>()&#123;<br>    <span class="hljs-keyword">use</span> std::collections::HashMap;<br>    <span class="hljs-comment">//创建方式1</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">scores</span> = HashMap::<span class="hljs-title function_ invoke__">new</span>();<br>    scores.<span class="hljs-title function_ invoke__">insert</span>(<span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Blue&quot;</span>), <span class="hljs-number">10</span>);<br>    scores.<span class="hljs-title function_ invoke__">insert</span>(<span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Yellow&quot;</span>), <span class="hljs-number">50</span>);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>,scores);<br>    <span class="hljs-comment">//创建方式2</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">teams</span> = <span class="hljs-built_in">vec!</span>[<span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Blue&quot;</span>), <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Yellow&quot;</span>)];<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">initial_scores</span> = <span class="hljs-built_in">vec!</span>[<span class="hljs-number">10</span>, <span class="hljs-number">50</span>];<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">scores2</span>: HashMap&lt;_, _&gt; = teams.<span class="hljs-title function_ invoke__">iter</span>().<span class="hljs-title function_ invoke__">zip</span>(initial_scores.<span class="hljs-title function_ invoke__">iter</span>()).<span class="hljs-title function_ invoke__">collect</span>();<br>    <span class="hljs-comment">//</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">len</span> = scores.<span class="hljs-title function_ invoke__">len</span>();<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;hashmap length = &#123;&#125;&quot;</span>,len);<br>    <span class="hljs-comment">//api</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">blue</span> = scores.<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&quot;Blue&quot;</span>);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;blue = &#123;:?&#125;&quot;</span>,blue);<br>    <span class="hljs-comment">//生命周期</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">field_name</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Favorite color&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">field_value</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Blue&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">map</span> = HashMap::<span class="hljs-title function_ invoke__">new</span>();<br>    map.<span class="hljs-title function_ invoke__">insert</span>(field_name, field_value);<br>    <span class="hljs-comment">// filed_name和field_value从这一刻开始失效，若尝试使用它们则会导致编译错误！</span><br><br>    <span class="hljs-comment">//获取</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">scores</span> = HashMap::<span class="hljs-title function_ invoke__">new</span>();<br>    scores.<span class="hljs-title function_ invoke__">insert</span>(<span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Blue&quot;</span>), <span class="hljs-number">10</span>);<br>    scores.<span class="hljs-title function_ invoke__">insert</span>(<span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Yellow&quot;</span>), <span class="hljs-number">50</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">team_name</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Blue&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">score</span> = scores.<span class="hljs-title function_ invoke__">get</span>(&amp;team_name);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;score = &#123;:?&#125;&quot;</span>,score);<br>    <span class="hljs-comment">//遍历</span><br>    <span class="hljs-keyword">for</span> (key, value) <span class="hljs-keyword">in</span> &amp;scores &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;: &#123;&#125;&quot;</span>, key, value);<br>    &#125;<br>    <span class="hljs-comment">//检查是否存在,不存在则插入</span><br>    scores.<span class="hljs-title function_ invoke__">entry</span>(<span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Yellow&quot;</span>)).<span class="hljs-title function_ invoke__">or_insert</span>(<span class="hljs-number">50</span>);<br>    scores.<span class="hljs-title function_ invoke__">entry</span>(<span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Blue&quot;</span>)).<span class="hljs-title function_ invoke__">or_insert</span>(<span class="hljs-number">50</span>);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, scores);<br>    <br>    <span class="hljs-comment">//案例统计单词出现的次数</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">text</span> = <span class="hljs-string">&quot;hello world wonderful world&quot;</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">map</span> = HashMap::<span class="hljs-title function_ invoke__">new</span>();<br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">word</span> <span class="hljs-keyword">in</span> text.<span class="hljs-title function_ invoke__">split_whitespace</span>() &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">count</span> = map.<span class="hljs-title function_ invoke__">entry</span>(word).<span class="hljs-title function_ invoke__">or_insert</span>(<span class="hljs-number">0</span>);<br>        *count += <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, map);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h1><blockquote><p>错误处理</p></blockquote><p>在Rust中，我们将错误分为两大类：可恢复 错误与不可恢复 错误。对于可恢复错误，比如文件未找到等，一般需要将它们报告给用户并再次尝试进行操作。而不可恢复错误往往就是bug的另一种说法， 比如尝试访问超出数组结尾的位置等。虽然Rust没有类似的异常机制，但它提供了用于可恢复错误的类型<code>Result&lt;T, E&gt;</code>，以及在程序出现不可恢复错误时中止运行的panic! 宏。</p><h2 id="不可恢复错误与panic"><a href="#不可恢复错误与panic" class="headerlink" title="不可恢复错误与panic!"></a>不可恢复错误与panic!</h2><p>程序会在<code>panic!</code>宏执行时打印出一段错误提示信息，展开并清理当前的调用栈，然后退出程序。这种情况大部分都发生在某个错误被检测到，但程序员却不知该如何处理的时候。</p><p>当panic发生时，程序会默认开始栈展开。这意味着Rust会沿着调用栈的反向顺序遍历所有调用函数，并依次清理这些函数中的数据。但是为了支持这种遍历和清理操作，我们需要在二进制中存储许多额外信息。除了展开，我们还可以选择立即终止程序，它会直接结束程序且不进行任何清理工作，程序所使用过的内存只能由操作系统来进行回收。假如项目需要使最终二进制包尽可能小，那么你可以通过在<code>Cargo.toml </code>文件中的<code>[profile]</code>区域添加<code>panic = &#39;abort&#39;</code>来将panic的默认行为从展开切换为终止。例如，如果你想要在发布模式中使用终止模式，那么可以在配置文件中加入： </p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs rust">[profile.release] <br>panic = <span class="hljs-symbol">&#x27;abort</span>&#x27;<br></code></pre></td></tr></table></figure><p>案例</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">m1</span>()&#123;<br>    <span class="hljs-comment">// panic!(&quot;test panic&quot;);//手动触发panic!</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = <span class="hljs-built_in">vec!</span>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>    v[<span class="hljs-number">99</span>];<span class="hljs-comment">//尝试越界访问动态数组中的元素，这会导致panic!</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="可恢复错误与Result"><a href="#可恢复错误与Result" class="headerlink" title="可恢复错误与Result"></a>可恢复错误与Result</h2><p>大部分的错误其实都没有严重到需要整个程序停止运行的地步。 函数常常会由于一些可以简单解释并做出响应的原因而运行失败。例如，尝试打开文件的操作会因为文件不存在而失败。你也许会在这种情形下考虑创建该文件而不是终止进程。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">m</span>()&#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">f</span> = File::<span class="hljs-title function_ invoke__">open</span>(<span class="hljs-string">&quot;hello.txt&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">f</span> = <span class="hljs-keyword">match</span> f &#123;<br>        <span class="hljs-title function_ invoke__">Ok</span>(file) =&gt; file,<br>        <span class="hljs-title function_ invoke__">Err</span>(error) =&gt; &#123;<br>            <span class="hljs-built_in">panic!</span>(<span class="hljs-string">&quot;There was a problem opening the file: &#123;:?&#125;&quot;</span>, error)<br>        &#125;,<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>匹配不同的错误</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">m</span>()&#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">f</span> = File::<span class="hljs-title function_ invoke__">open</span>(<span class="hljs-string">&quot;hello.txt&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">f</span> = <span class="hljs-keyword">match</span> f &#123;<br>        <span class="hljs-title function_ invoke__">Ok</span>(file) =&gt; file,<br>        <span class="hljs-title function_ invoke__">Err</span>(error) =&gt; <span class="hljs-keyword">match</span> error.<span class="hljs-title function_ invoke__">kind</span>() &#123;<br>            ErrorKind::NotFound =&gt; <span class="hljs-keyword">match</span> File::<span class="hljs-title function_ invoke__">create</span>(<span class="hljs-string">&quot;hello.txt&quot;</span>) &#123;<span class="hljs-comment">//如果没有则创建</span><br>                <span class="hljs-title function_ invoke__">Ok</span>(fc) =&gt; fc,<br>                <span class="hljs-title function_ invoke__">Err</span>(e) =&gt; <span class="hljs-built_in">panic!</span>(<span class="hljs-string">&quot;Tried to create file but there was a problem:&#123;:?&#125;&quot;</span>, e),<br>            &#125;,<br>            other_error =&gt; <span class="hljs-built_in">panic!</span>(<span class="hljs-string">&quot;There was a problem opening the file: &#123;:?&#125;&quot;</span>, other_error),<br>        &#125;,<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>用不同的方式处理不同的错误类型</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">m</span>()&#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">f</span> = File::<span class="hljs-title function_ invoke__">open</span>(<span class="hljs-string">&quot;hello.txt&quot;</span>).<span class="hljs-title function_ invoke__">map_err</span>(|error| &#123;<br>        <span class="hljs-keyword">if</span> error.<span class="hljs-title function_ invoke__">kind</span>() == ErrorKind::NotFound &#123;<br>            File::<span class="hljs-title function_ invoke__">create</span>(<span class="hljs-string">&quot;hello.txt&quot;</span>).<span class="hljs-title function_ invoke__">unwrap_or_else</span>(|error| &#123;<br>                <span class="hljs-built_in">panic!</span>(<span class="hljs-string">&quot;Tried to create file but there was a problem: &#123;:?&#125;&quot;</span>, error);<br>            &#125;)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">panic!</span>(<span class="hljs-string">&quot;There was a problem opening the file: &#123;:?&#125;&quot;</span>, error);<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>虽然使用match运行得很不错，但使用它所编写出来的代码可能会显得有些冗长，且无法较好地表明其意图。类型Result&lt;T, E&gt;本身也定义了许多辅助方法来应对各式各样的任务。其中一个被称为unwrap的方法实现了我们在示例9-4中编写的match表达式的效果。当Result的返回值是Ok变体时，unwrap就会返回Ok内部的值。而当Result的返回值是Err变体时，unwrap则会替我们调用panic! 宏。下面是一个在实际代码中使用unwrap的例子：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">f</span> = File::<span class="hljs-title function_ invoke__">open</span>(<span class="hljs-string">&quot;hello.txt&quot;</span>).<span class="hljs-title function_ invoke__">unwrap</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p> 还有另外一个被称作expect的方法，它允许我们在unwrap的基础上指定panic! 所附带的错误提示信息。使用expect并附带上一段清晰的错误提示信息可以阐明你的意图，并使你更容易追踪到panic的起源。下面演示了expect的使用语法：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::fs::File;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br> <span class="hljs-keyword">let</span> <span class="hljs-variable">f</span> = File::<span class="hljs-title function_ invoke__">open</span>(<span class="hljs-string">&quot;hello.txt&quot;</span>).<span class="hljs-title function_ invoke__">expect</span>(<span class="hljs-string">&quot;Failed to open hello.txt&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>什么时候应该使用panic!，而什么时候又应该返回Result呢？代码一旦发生panic，就再也没有恢复的可能了。只要你认为自己可以代替调用者决定某种情形是不可恢复的，那么就可以使用panic!，而不用考虑错误是否存在可以恢复的机会。</strong></p><h2 id="传播错误"><a href="#传播错误" class="headerlink" title="传播错误"></a>传播错误</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">read_username_from_file</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;<span class="hljs-type">String</span>, io::Error&gt; &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">f</span> = File::<span class="hljs-title function_ invoke__">open</span>(<span class="hljs-string">&quot;hello.txt&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">f</span> = <span class="hljs-keyword">match</span> f &#123;<br>        <span class="hljs-title function_ invoke__">Ok</span>(file) =&gt; file,<br>        <span class="hljs-title function_ invoke__">Err</span>(e) =&gt; <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">Err</span>(e),<br>    &#125;;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">new</span>();<br>    <span class="hljs-keyword">match</span> f.<span class="hljs-title function_ invoke__">read_to_string</span>(&amp;<span class="hljs-keyword">mut</span> s) &#123;<br>        <span class="hljs-title function_ invoke__">Ok</span>(_) =&gt; <span class="hljs-title function_ invoke__">Ok</span>(s),<br>        <span class="hljs-title function_ invoke__">Err</span>(e) =&gt; <span class="hljs-title function_ invoke__">Err</span>(e),<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><p>泛型解决的其实就是代码的复用性问题，针对一些可以共有的代码（入参类型不同但是逻辑一样）可以采用泛型来进行</p><h2 id="泛型定义"><a href="#泛型定义" class="headerlink" title="泛型定义"></a>泛型定义</h2><h3 id="在函数中定义"><a href="#在函数中定义" class="headerlink" title="在函数中定义"></a>在函数中定义</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">largest</span>&lt;T&gt;(list: &amp;[T]) <span class="hljs-punctuation">-&gt;</span> T &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">largest</span> = list[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span> &amp;item <span class="hljs-keyword">in</span> list.<span class="hljs-title function_ invoke__">iter</span>() &#123;<br>        <span class="hljs-keyword">if</span> item &gt; largest &#123;<br>            largest = item;<br>        &#125;<br>    &#125;<br>    largest<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="在结构体中定义"><a href="#在结构体中定义" class="headerlink" title="在结构体中定义"></a>在结构体中定义</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span>&lt;T&gt; &#123;<br>    x: T,<br>    y: T,<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">integer</span> = Point &#123; x: <span class="hljs-number">5</span>, y: <span class="hljs-number">10</span> &#125;;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">float</span> = Point &#123; x: <span class="hljs-number">1.0</span>, y: <span class="hljs-number">4.0</span> &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="在枚举中定义"><a href="#在枚举中定义" class="headerlink" title="在枚举中定义"></a>在枚举中定义</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Option</span>&lt;T&gt; &#123;<br> <span class="hljs-title function_ invoke__">Some</span>(T),<br> <span class="hljs-literal">None</span>,<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="在方法中定义"><a href="#在方法中定义" class="headerlink" title="在方法中定义"></a>在方法中定义</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span>&lt;T&gt; &#123;<br>    x: T,<br>    y: T,<br>&#125;<br><span class="hljs-keyword">impl</span>&lt;T&gt; Point&lt;T&gt; &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">x</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> &amp;T &#123;<br>        &amp;<span class="hljs-keyword">self</span>.x<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="泛型原理"><a href="#泛型原理" class="headerlink" title="泛型原理"></a>泛型原理</h2><p>当你使用泛型参数时，你也许会好奇这种机制是否存在一定的运行时消耗。好消息是，Rust实现泛型的方式决定了使用泛型的代码与使用具体类型的代码相比不会有任何速度上的差异。 为了实现这一点，Rust会在编译时执行泛型代码的单态化（monomorphization）。单态化 是一个在编译期将泛型代码转换为特定代码的过程，它会将所有使用过的具体类型填入泛型参数从而得到有具体类型的代码。 </p><p>在这个过程中，编译器所做的工作与我们在创建泛型函数时相反：它会寻找所有泛型代码被调用过的地方，并基于该泛型代码所使用的具体类型生成代码。  </p><h2 id="trait：定义共享行为"><a href="#trait：定义共享行为" class="headerlink" title="trait：定义共享行为"></a>trait：定义共享行为</h2><p>trait（特征）被用来向Rust编译器描述某些特定类型拥有的且能够被其他类型共享的功能，它使我们可以以一种抽象的方式来定义共享行为。我们还可以使用trait约束来将泛型参数指定为实现了某些特定行为的类型。 </p><blockquote><p>注意 ：trait与其他语言中常被称为接口（interface）的功能类似，但也不尽相同。</p></blockquote><h3 id="定义-trait"><a href="#定义-trait" class="headerlink" title="定义 trait"></a>定义 trait</h3><p>类型的行为由该类型本身可供调用的方法组成。当我们可以在不同的类型上调用相同的方法时，我们就称这些类型共享了相同的行为。trait提供了一种将特定方法签名组合起来的途径，它定义了为达成某种目的所必需的行为集合。 </p><p>打个比方，假如我们拥有多个结构体，它们分别持有不同类型、 不同数量的文本字段：其中的NewsArticle结构体存放了某地发生的新 闻故事，而Tweet结构体则包含了最多280个字符的推文，以及用于描述该推文是一条新推文、一条转发推文还是一条回复的元数据。 </p><p>此时，我们想要创建一个多媒体聚合库，用来显示存储在NewsArticle或Tweet结构体实例中的数据摘要。为了达到这一目标， 我们需要为每个类型都实现摘要行为，从而可以在实例上调用统一的summarize方法来请求摘要内容。展示了用于表达这一行为的Summary trait定义。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">trait</span> <span class="hljs-title class_">Summary</span> &#123;<br> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">summarize</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>一个trait可以包含多个方法：每个方法签名占据单独一行并以分号结尾。</p></blockquote><h3 id="为类型实现trait"><a href="#为类型实现trait" class="headerlink" title="为类型实现trait"></a>为类型实现trait</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">trait</span> <span class="hljs-title class_">Summary</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">summarize</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span>;<br>&#125;<br><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">NewsArticle</span> &#123;<br>    <span class="hljs-keyword">pub</span> headline: <span class="hljs-type">String</span>,<br>    <span class="hljs-keyword">pub</span> location: <span class="hljs-type">String</span>,<br>    <span class="hljs-keyword">pub</span> author: <span class="hljs-type">String</span>,<br>    <span class="hljs-keyword">pub</span> content: <span class="hljs-type">String</span>,<br>&#125;<br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Summary</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">NewsArticle</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">summarize</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;&#123;&#125;, by &#123;&#125; (&#123;&#125;)&quot;</span>, <span class="hljs-keyword">self</span>.headline, <span class="hljs-keyword">self</span>.author, <span class="hljs-keyword">self</span>.location)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Tweet</span> &#123;<br>    <span class="hljs-keyword">pub</span> username: <span class="hljs-type">String</span>,<br>    <span class="hljs-keyword">pub</span> content: <span class="hljs-type">String</span>,<br>    <span class="hljs-keyword">pub</span> reply: <span class="hljs-type">bool</span>,<br>    <span class="hljs-keyword">pub</span> retweet: <span class="hljs-type">bool</span>,<br>&#125;<br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Summary</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Tweet</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">summarize</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;&#123;&#125;: &#123;&#125;&quot;</span>, <span class="hljs-keyword">self</span>.username, <span class="hljs-keyword">self</span>.content)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">m</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">n</span> = NewsArticle&#123;<br>        headline: <span class="hljs-string">&quot;123&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>(),<br>        location: <span class="hljs-string">&quot;456&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>(),<br>        author: <span class="hljs-string">&quot;789&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>(),<br>        content: <span class="hljs-string">&quot;0&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>()<br>    &#125;;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">t</span> = Tweet&#123;<br>        username: <span class="hljs-string">&quot;1&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>(),<br>        content: <span class="hljs-string">&quot;2&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>(),<br>        reply: <span class="hljs-literal">false</span>,<br>        retweet: <span class="hljs-literal">false</span><br>    &#125;;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;summarize = &#123;&#125;&quot;</span>,n.<span class="hljs-title function_ invoke__">summarize</span>());<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;summarize = &#123;&#125;&quot;</span>,t.<span class="hljs-title function_ invoke__">summarize</span>());<br>&#125;<br></code></pre></td></tr></table></figure><p>提供默认实现的trait</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">trait</span> <span class="hljs-title class_">Summary</span> &#123;<br>    <span class="hljs-comment">// fn summarize(&amp;self) -&gt; String;</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">summarize</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;(Read more...)&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用trait作为参数"><a href="#使用trait作为参数" class="headerlink" title="使用trait作为参数"></a>使用trait作为参数</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">notify</span>(item: <span class="hljs-keyword">impl</span> <span class="hljs-title class_">Summary</span>) &#123;<br> <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Breaking news! &#123;&#125;&quot;</span>, item.<span class="hljs-title function_ invoke__">summarize</span>());<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用trait作为泛型约束"><a href="#使用trait作为泛型约束" class="headerlink" title="使用trait作为泛型约束"></a>使用trait作为泛型约束</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">notify</span>&lt;T: Summary&gt;(item: T) &#123;<br> <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Breaking news! &#123;&#125;&quot;</span>, item.<span class="hljs-title function_ invoke__">summarize</span>());<br>&#125;<br></code></pre></td></tr></table></figure><p>通过<code>+</code>语法来指定多个trait约束</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">notify</span>&lt;T: Summary + Display&gt;(item: T) &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>使用where从句来简化trait约束</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">some_function0</span>&lt;T: Display + <span class="hljs-built_in">Clone</span>, U: <span class="hljs-built_in">Clone</span> + <span class="hljs-built_in">Debug</span>&gt;(t: T, u: U) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">i32</span> &#123;<br>    <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-comment">// 我们可以使用where从句改写为：</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">some_function1</span>&lt;T, U&gt;(t: T, u: U) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">i32</span><br>    <span class="hljs-keyword">where</span> T: Display + <span class="hljs-built_in">Clone</span>,<br>          U: <span class="hljs-built_in">Clone</span> + <span class="hljs-built_in">Debug</span><br>&#123;<br>    <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure><p>使用trait来修饰重写<code>largest</code>函数</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">largest</span>&lt;T: <span class="hljs-built_in">PartialOrd</span> + <span class="hljs-built_in">Copy</span>&gt;(list: &amp;[T]) <span class="hljs-punctuation">-&gt;</span> T &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">largest</span> = list[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span> &amp;item <span class="hljs-keyword">in</span> list.<span class="hljs-title function_ invoke__">iter</span>() &#123;<br>        <span class="hljs-keyword">if</span> item &gt; largest &#123;<br>            largest = item;<br>        &#125;<br>    &#125;<br>    largest<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用trait约束来有条件地实现方法"><a href="#使用trait约束来有条件地实现方法" class="headerlink" title="使用trait约束来有条件地实现方法"></a>使用trait约束来有条件地实现方法</h3><p>通过在带有泛型参数的impl代码块中使用trait约束，我们可以单独为实现了指定trait的类型编写方法</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Pair</span>&lt;T&gt; &#123;<br>    x: T,<br>    y: T,<br>&#125;<br><span class="hljs-keyword">impl</span>&lt;T&gt; Pair&lt;T&gt; &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(x: T, y: T) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span> &#123;<br>        <span class="hljs-keyword">Self</span> &#123;<br>            x,<br>            y,<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">impl</span>&lt;T: Display + <span class="hljs-built_in">PartialOrd</span>&gt; Pair&lt;T&gt; &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">cmp_display</span>(&amp;<span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">self</span>.x &gt;= <span class="hljs-keyword">self</span>.y &#123;<br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;The largest member is x = &#123;&#125;&quot;</span>, <span class="hljs-keyword">self</span>.x);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;The largest member is y = &#123;&#125;&quot;</span>, <span class="hljs-keyword">self</span>.y);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>只有在内部类型T实现了PartialOrd（用于比较）与 Display（用于打印）这两个trait的前提下，才会实现cmd_display方法</p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h3 id="使用生命周期保证引用的有效性"><a href="#使用生命周期保证引用的有效性" class="headerlink" title="使用生命周期保证引用的有效性"></a>使用生命周期保证引用的有效性</h3><p>Rust的每个引用都有自己的生命周期（lifetime），它对应着引用保持有效性的作用域。在大多数时候，生命周期都是隐式且可以被推导出来的，就如同大部分时候类型也是可以被推导的一样。当出现了多个可能的类型时，我们就必须手动声明类型。类似地，当引用的生命周期可能以不同的方式相互关联时，我们就必须手动标注生命周期。 </p><p>Rust需要我们注明泛型生命周期参数之间的关系，来确保运行时实际使用的引用一定是有效的。 </p><p>生命周期的概念不同于其他编程语言中的工具，从某种意义上说，它也是Rust最与众不同的特性。</p><h3 id="使用生命周期来避免悬垂（空）引用"><a href="#使用生命周期来避免悬垂（空）引用" class="headerlink" title="使用生命周期来避免悬垂（空）引用"></a>使用生命周期来避免悬垂（空）引用</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">m</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">r</span>;<br>    &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-number">5</span>;<br>        r = &amp;x;<br>    &#125;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;r = &#123;&#125;&quot;</span>,r);<br>    <span class="hljs-comment">// 变量x的存活周期不够长。这是因为x 在到达第7行，也就是内部作用域结束时离开了自己的作用域。而r对 于整个外部作用域始终是有效的，它的作用域要更大一些，也就是我</span><br>    <span class="hljs-comment">// 们所说的“存活得更久一些”。假如Rust允许这段代码运行，r就会引用到在x离开作用域时已经释放的内存，这时任何基于r所进行的操作 都无法正确地进行。</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="借用检查器"><a href="#借用检查器" class="headerlink" title="借用检查器"></a>借用检查器</h3><p>Rust编译器拥有一个借用检查器 （borrow checker），它被用于比较不同的作用域并确定所有借用的合法性。</p><h3 id="函数签名中的生命周期标注"><a href="#函数签名中的生命周期标注" class="headerlink" title="函数签名中的生命周期标注"></a>函数签名中的生命周期标注</h3><p>生命周期的标注使用了一种明显不同的语法：它们的参数名称必须以撇号<code>（&#39;）</code>开头，且通常使用全小写字符。与泛型一样，它们的名称通常也会非常简短。<code>&#39;a</code>被大部分开发者选择作为默认使用的名称。我们会将生命周期参数的标注填写在&amp;引用运算符之后，并通过一个空格符来将标注与引用类型区分开来。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust">&amp;<span class="hljs-type">i32</span> <span class="hljs-comment">//引用 </span><br>&amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">i32</span><span class="hljs-comment">//拥有显式生命周期的引用</span><br>&amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-keyword">mut</span> <span class="hljs-type">i32</span><span class="hljs-comment">//拥有显式生命周期的可变引用</span><br></code></pre></td></tr></table></figure><p>单个生命周期的标注本身并没有太多意义，标注之所以存在是为了向Rust描述多个泛型生命周期参数之间的关系。例如，假设我们编写了一个函数，这个函数的参数first是一个指向<code>i32</code>的引用，并且拥有生命周期<code>&#39;a</code>。它的另一个参数second同样也是指向i32且拥有生命周期<code>&#39;a</code>的引用。这样的标注就意味着：first和second的引用必须与这里的泛型生命周期存活一样长的时间。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">longest</span>&lt;<span class="hljs-symbol">&#x27;a</span>&gt;(x: &amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">str</span>, y: &amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">str</span> &#123;<br>    <span class="hljs-keyword">if</span> x.<span class="hljs-title function_ invoke__">len</span>() &gt; y.<span class="hljs-title function_ invoke__">len</span>() &#123;<br>        x<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        y<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">m</span>()&#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s1</span> = <span class="hljs-string">&quot;abc&quot;</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s2</span> = <span class="hljs-string">&quot;opqsdf&quot;</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">l</span> = <span class="hljs-title function_ invoke__">longest</span>(&amp;s1,&amp;s2);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;the longest is : &#123;&#125;&quot;</span>,l)<br>    <span class="hljs-comment">// error : 我们需要给返回类型标注一个</span><br>    <span class="hljs-comment">// 泛型生命周期参数，因为Rust并不能确定返回的引用会指向x还是指向</span><br>    <span class="hljs-comment">// y。实际上，即便是编写代码的我们也无法做出这个判断。因为函数体</span><br>    <span class="hljs-comment">// 中的if代码块返回了x的引用，而else代码块则返回了y的引用</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="结构体定义中的生命周期标注"><a href="#结构体定义中的生命周期标注" class="headerlink" title="结构体定义中的生命周期标注"></a>结构体定义中的生命周期标注</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ImportantExcerpt</span>&lt;<span class="hljs-symbol">&#x27;a</span>&gt; &#123;<br>    part: &amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">str</span>,<br>&#125;<br><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">m</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">novel</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Call me Ishmael. Some years ago...&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">first_sentence</span> = novel.<span class="hljs-title function_ invoke__">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>)<br>        .<span class="hljs-title function_ invoke__">next</span>()<br>        .<span class="hljs-title function_ invoke__">expect</span>(<span class="hljs-string">&quot;Could not find a &#x27;.&#x27;&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">i</span> = ImportantExcerpt &#123; part: first_sentence &#125;;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, i.part);<br>&#125;<br><span class="hljs-comment">// 结构体中持有了引用，所以它的定义中需要添加生命周期标注这个结构体仅有一个字段part，用于存储一个字符串切片，</span><br><span class="hljs-comment">// 也就 是一个引用。如同泛型数据类型一样，为了在结构体定义中使用生 命周期参数，我们需要在结构体名称后的尖括号内声明泛型生命周期参数的名字。</span><br><span class="hljs-comment">// 这个标注意味着ImportantExcerpt实例的存活时间不能超过存储在part字段中的引用的存活时间。</span><br></code></pre></td></tr></table></figure><h3 id="静态生命周期"><a href="#静态生命周期" class="headerlink" title="静态生命周期"></a>静态生命周期</h3><p>Rust中还存在一种特殊的生命周期’static，它表示整个程序的执行期。所有的字符串字面量都拥有’static生命周期，我们可以像下面一样显式地把它们标注出来： </p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">s</span>: &amp;<span class="hljs-symbol">&#x27;static</span> <span class="hljs-type">str</span> = <span class="hljs-string">&quot;I have a static lifetime.&quot;</span>; <br></code></pre></td></tr></table></figure><p>字符串的文本被直接存储在二进制程序中，并总是可用的。因此，所有字符串字面量的生命周期都是’static。</p><h3 id="同时使用泛型参数、trait约束与生命周期"><a href="#同时使用泛型参数、trait约束与生命周期" class="headerlink" title="同时使用泛型参数、trait约束与生命周期"></a>同时使用泛型参数、trait约束与生命周期</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">longest_with_an_announcement</span>&lt;<span class="hljs-symbol">&#x27;a</span>, T&gt;(x: &amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">str</span>, y: &amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">str</span>, ann: T) <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">str</span> <span class="hljs-keyword">where</span> T: Display &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Announcement! &#123;&#125;&quot;</span>, ann);<br>    <span class="hljs-keyword">if</span> x.<span class="hljs-title function_ invoke__">len</span>() &gt; y.<span class="hljs-title function_ invoke__">len</span>() &#123;<br>        x<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        y<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[cfg(test)]</span><br><span class="hljs-keyword">mod</span> tests &#123;<br>    <span class="hljs-keyword">use</span> crate::gp::gp::longest;<br>    <span class="hljs-keyword">use</span> super::*;<br><br>    <span class="hljs-meta">#[test]</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">it_works</span>() &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">s1</span> = <span class="hljs-string">&quot;hello world&quot;</span>;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">s2</span> = <span class="hljs-string">&quot;hello rust&quot;</span>;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">result</span> = <span class="hljs-title function_ invoke__">longest</span>(&amp;s1,&amp;s2);<br>        <span class="hljs-built_in">assert_eq!</span>(result, s1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行<code>cargo test</code> 会执行当前项目下所有的测试用例</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust">running <span class="hljs-number">2</span> tests<br>test gp::traited::tests::test_same ... ok<br>test gp::traited::tests::it_works ... ok<br><br>test result: ok. <span class="hljs-number">2</span> passed; <span class="hljs-number">0</span> failed; <span class="hljs-number">0</span> ignored; <span class="hljs-number">0</span> measured; <span class="hljs-number">0</span> filtered out; finished <span class="hljs-keyword">in</span> <span class="hljs-number">0.00</span>s<br></code></pre></td></tr></table></figure><h2 id="should-panic"><a href="#should-panic" class="headerlink" title="should_panic"></a>should_panic</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs rust"><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Guess</span> &#123;<br>    value: <span class="hljs-type">u32</span>,<br>&#125;<br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Guess</span> &#123;<br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(value: <span class="hljs-type">u32</span>) <span class="hljs-punctuation">-&gt;</span> Guess &#123;<br>        <span class="hljs-keyword">if</span> value &lt; <span class="hljs-number">1</span> || value &gt; <span class="hljs-number">100</span> &#123;<br>            <span class="hljs-built_in">panic!</span>(<span class="hljs-string">&quot;Guess value must be between 1 and 100, got &#123;&#125;.&quot;</span>, value);<br>        &#125;<br>        Guess &#123;<br>            value<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-meta">#[cfg(test)]</span><br><span class="hljs-keyword">mod</span> tests &#123;<br>    <span class="hljs-keyword">use</span> super::*;<br>    <span class="hljs-meta">#[test]</span><br>    <span class="hljs-meta">#[should_panic]</span><span class="hljs-comment">//标记了这个属性的测试函数会在代码发生panic时顺利通过，而在代码不发生panic时执行失败。</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">greater_than_100</span>() &#123;<br>        Guess::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-number">200</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用Result-lt-T-E-gt-编写测试"><a href="#使用Result-lt-T-E-gt-编写测试" class="headerlink" title="使用Result&lt;T, E&gt;编写测试"></a>使用Result&lt;T, E&gt;编写测试</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[cfg(test)]</span><br><span class="hljs-keyword">mod</span> tests &#123;<br>    <span class="hljs-meta">#[test]</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">it_works</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;(), <span class="hljs-type">String</span>&gt; &#123;<br>        <span class="hljs-keyword">if</span> <span class="hljs-number">2</span> + <span class="hljs-number">2</span> == <span class="hljs-number">4</span> &#123;<br>            <span class="hljs-title function_ invoke__">Ok</span>(())<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-title function_ invoke__">Err</span>(<span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;two plus two does not equal four&quot;</span>))<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="控制测试的运行方式"><a href="#控制测试的运行方式" class="headerlink" title="控制测试的运行方式"></a>控制测试的运行方式</h2><p>并行或串行地进行测试</p><blockquote><p>当你尝试运行多个测试时，Rust会默认使用多线程来并行执行它 们。这样可以让测试更快地运行完毕，从而尽早得到代码是否能正常 工作的反馈。但由于测试是同时进行的，所以开发者必须保证测试之 间不会互相依赖，或者依赖到同一个共享的状态或环境上，例如当前工作目录、环境变量等。</p></blockquote><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust">cargo test -- --test-threads=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>显示函数输出</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust">cargo test -- --nocapture<br></code></pre></td></tr></table></figure><p>只运行部分特定名称的测试</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust">cargo test 函数名称<br></code></pre></td></tr></table></figure><p>通过过滤名称来运行多个测试</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust">cargo test 方法关键字<br></code></pre></td></tr></table></figure><p>通过显式指定来忽略某些测试</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[test]</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">it_works</span>() &#123;<br> <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-number">2</span> + <span class="hljs-number">2</span>, <span class="hljs-number">4</span>);<br>&#125;<br><span class="hljs-meta">#[test]</span><br><span class="hljs-meta">#[ignore]</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">expensive_test</span>() &#123;<br> <span class="hljs-comment">// 需要运行一个小时的代码</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="集成测试"><a href="#集成测试" class="headerlink" title="集成测试"></a>集成测试</h2><p>1.创 建 一 个 tests 文 件 夹 ， 并 创 建 文 件 <code>tests/integration_test.rs</code> (对应的测试文件)，将示例11-13中的代码输入其中。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> adder;<br><span class="hljs-meta">#[test]</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">it_adds_two</span>() &#123;<br> <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-number">4</span>, adder::<span class="hljs-title function_ invoke__">add_two</span>(<span class="hljs-number">2</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>与单元测试不同，集成测试需要在代码顶部添加语句use adder。 这是因为tests 目录下的每一个文件都是一个独立的包，所以我们需要将目标库导入每一个测试包中。 我们不需要为<code>tests/integration_test.rs</code> 中的任何代码标注<code># [cfg(test)]</code>。Cargo对tests 目录进行了特殊处理，它只会在执行 <code>cargo test</code> 命令时编译这个目录下的文件。</p><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><h2 id="猜数字"><a href="#猜数字" class="headerlink" title="猜数字"></a>猜数字</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::io;<br><span class="hljs-keyword">use</span> rand::Rng;<br><span class="hljs-keyword">use</span> std::cmp::Ordering;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-title function_ invoke__">guess</span>()<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">guess</span>() &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;guess number 1..10&quot;</span>);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;please enter you number:&quot;</span>);<br>    <span class="hljs-keyword">loop</span> &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">guess</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">new</span>();<br>        io::<span class="hljs-title function_ invoke__">stdin</span>().<span class="hljs-title function_ invoke__">read_line</span>(&amp;<span class="hljs-keyword">mut</span> guess).<span class="hljs-title function_ invoke__">expect</span>(<span class="hljs-string">&quot;Failed to read line&quot;</span>);<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">guess</span>: <span class="hljs-type">u32</span> = <span class="hljs-keyword">match</span> guess.<span class="hljs-title function_ invoke__">trim</span>().<span class="hljs-title function_ invoke__">parse</span>()&#123;<br>            <span class="hljs-title function_ invoke__">Ok</span>(num) =&gt; num,<br>            <span class="hljs-title function_ invoke__">Err</span>(_) =&gt; <span class="hljs-keyword">continue</span>,<br>        &#125;;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;You guessed: &#123;&#125;&quot;</span>, guess);<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">secret_number</span> = rand::<span class="hljs-title function_ invoke__">thread_rng</span>().<span class="hljs-title function_ invoke__">gen_range</span>(<span class="hljs-number">1</span>..=<span class="hljs-number">10</span>);<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;The secret number is: &#123;&#125;&quot;</span>, secret_number);<br>        <span class="hljs-keyword">match</span> guess.<span class="hljs-title function_ invoke__">cmp</span>(&amp;secret_number) &#123;<br>            Ordering::Less =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Too small!&quot;</span>),<br>            Ordering::Greater =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Too big!&quot;</span>),<br>            Ordering::Equal =&gt; &#123;<br>                <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;You win!&quot;</span>);<br>                <span class="hljs-keyword">break</span><br>            &#125;,<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="minigrep"><a href="#minigrep" class="headerlink" title="minigrep"></a>minigrep</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::error::Error;<br><span class="hljs-keyword">use</span> std::&#123;env, fs&#125;;<br><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">run</span>(config:Config) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;(), <span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">dyn</span> Error&gt;&gt;&#123;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">contents</span> = fs::<span class="hljs-title function_ invoke__">read_to_string</span>(config.filename)?;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">results</span> = <span class="hljs-keyword">if</span> config.case_sensitive &#123;<br>        <span class="hljs-title function_ invoke__">search</span>(&amp;config.query, &amp;contents)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_ invoke__">search_case_insensitive</span>(&amp;config.query, &amp;contents)<br>    &#125;;<br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">line</span> <span class="hljs-keyword">in</span> results &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, line);<br>    &#125;<br>    <span class="hljs-title function_ invoke__">Ok</span>(())<br>&#125;<br><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">search</span>&lt;<span class="hljs-symbol">&#x27;a</span>&gt;(query: &amp;<span class="hljs-type">str</span>, contents: &amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Vec</span>&lt;&amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">str</span>&gt; &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">ret</span> = <span class="hljs-type">Vec</span>::<span class="hljs-title function_ invoke__">new</span>();<br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">line</span> <span class="hljs-keyword">in</span> contents.<span class="hljs-title function_ invoke__">lines</span>() &#123;<br>        <span class="hljs-comment">// do something with line</span><br>        <span class="hljs-keyword">if</span> line.<span class="hljs-title function_ invoke__">contains</span>(query) &#123;<br>            ret.<span class="hljs-title function_ invoke__">push</span>(line);<br>        &#125;<br>    &#125;<br>    ret<br>&#125;<br><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">search_case_insensitive</span>&lt;<span class="hljs-symbol">&#x27;a</span>&gt;(query: &amp;<span class="hljs-type">str</span>, contents: &amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Vec</span>&lt;&amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">str</span>&gt; &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">query</span> = query.<span class="hljs-title function_ invoke__">to_lowercase</span>();<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">results</span> = <span class="hljs-type">Vec</span>::<span class="hljs-title function_ invoke__">new</span>();<br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">line</span> <span class="hljs-keyword">in</span> contents.<span class="hljs-title function_ invoke__">lines</span>() &#123;<br>        <span class="hljs-keyword">if</span> line.<span class="hljs-title function_ invoke__">to_lowercase</span>().<span class="hljs-title function_ invoke__">contains</span>(&amp;query) &#123;<br>            results.<span class="hljs-title function_ invoke__">push</span>(line);<br>        &#125;<br>    &#125;<br>    results<br>&#125;<br><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Config</span> &#123;<br>    <span class="hljs-keyword">pub</span> query: <span class="hljs-type">String</span>,<br>    <span class="hljs-keyword">pub</span> filename: <span class="hljs-type">String</span>,<br>    <span class="hljs-keyword">pub</span> case_sensitive: <span class="hljs-type">bool</span>,<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Config</span> &#123;<br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(args: &amp;[<span class="hljs-type">String</span>]) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;Config, &amp;<span class="hljs-symbol">&#x27;static</span> <span class="hljs-type">str</span>&gt; &#123;<br>        <span class="hljs-keyword">if</span> args.<span class="hljs-title function_ invoke__">len</span>() &lt; <span class="hljs-number">3</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">Err</span>(<span class="hljs-string">&quot;not enough arguments&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">query</span> = args[<span class="hljs-number">1</span>].<span class="hljs-title function_ invoke__">clone</span>();<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">filename</span> = args[<span class="hljs-number">2</span>].<span class="hljs-title function_ invoke__">clone</span>();<br><br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">case_sensitive</span> = env::<span class="hljs-title function_ invoke__">var</span>(<span class="hljs-string">&quot;CASE_INSENSITIVE&quot;</span>).<span class="hljs-title function_ invoke__">is_err</span>();<br>        <span class="hljs-title function_ invoke__">Ok</span>(Config &#123; query, filename,case_sensitive &#125;)<br>    &#125;<br>&#125;<br><br><br><span class="hljs-meta">#[cfg(test)]</span><br><span class="hljs-keyword">mod</span> tests &#123;<br>    <span class="hljs-keyword">use</span> super::*;<br>    <span class="hljs-meta">#[test]</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">one_result</span>() &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">query</span> = <span class="hljs-string">&quot;duct&quot;</span>;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">contents</span> = <span class="hljs-string">&quot;\</span><br><span class="hljs-string">Rust:</span><br><span class="hljs-string">safe, fast, productive.</span><br><span class="hljs-string">Pick three.&quot;</span>;<br>        <span class="hljs-built_in">assert_eq!</span>(<br>            <span class="hljs-built_in">vec!</span>[<span class="hljs-string">&quot;safe, fast, productive.&quot;</span>],<br>            <span class="hljs-title function_ invoke__">search</span>(query, contents)<br>        );<br>    &#125;<br>    <span class="hljs-meta">#[test]</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">case_insensitive</span>() &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">query</span> = <span class="hljs-string">&quot;rUsT&quot;</span>;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">contents</span> = <span class="hljs-string">&quot;\</span><br><span class="hljs-string">Rust:</span><br><span class="hljs-string">safe, fast, productive.</span><br><span class="hljs-string">Pick three.</span><br><span class="hljs-string">Trust me.&quot;</span>;<br>        <span class="hljs-built_in">assert_eq!</span>(<br>            <span class="hljs-built_in">vec!</span>[<span class="hljs-string">&quot;Rust:&quot;</span>, <span class="hljs-string">&quot;Trust me.&quot;</span>],<br>            <span class="hljs-title function_ invoke__">search_case_insensitive</span>(query, contents)<br>        );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::&#123;env, process&#125;;<br><span class="hljs-keyword">use</span> minigrep::Config;<br><span class="hljs-keyword">use</span> minigrep::run;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">args</span>: <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">String</span>&gt; = env::<span class="hljs-title function_ invoke__">args</span>().<span class="hljs-title function_ invoke__">collect</span>();<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">config</span> = Config::<span class="hljs-title function_ invoke__">new</span>(&amp;args).<span class="hljs-title function_ invoke__">unwrap_or_else</span>(|err| &#123;<br>        <span class="hljs-built_in">eprintln!</span>(<span class="hljs-string">&quot;Problem parsing arguments: &#123;&#125;&quot;</span>, err);<br>        process::<span class="hljs-title function_ invoke__">exit</span>(<span class="hljs-number">1</span>)<br>    &#125;);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Searching for = &#123;&#125;&quot;</span>, config.query);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;In file = &#123;&#125;&quot;</span>, config.filename);<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Err</span>(e) = <span class="hljs-title function_ invoke__">run</span>(config) &#123;<br>        <span class="hljs-built_in">eprintln!</span>(<span class="hljs-string">&quot;Application error: &#123;&#125;&quot;</span>, e);<br>        process::<span class="hljs-title function_ invoke__">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><p>官网：<a href="https://www.rust-lang.org/">https://www.rust-lang.org/</a><br>视频：<a href="https://www.bilibili.com/video/BV1hp4y1k7SV/?spm_id_from=333.337.search-card.all.click&vd_source=3d919f0382af6e66d6bb6973a51fe5df">https://www.bilibili.com/video/BV1hp4y1k7SV/</a><br>案例：<a href="https://doc.rust-lang.org/stable/rust-by-example/">https://doc.rust-lang.org/stable/rust-by-example/</a><br>书籍：<a href="https://www.yuque.com/attachments/yuque/0/2022/pdf/2630542/1664721931101-b8a47fde-0ddb-4592-b247-6cb45c521ea7.pdf?_lake_card=%7B%22src%22:%22https://www.yuque.com/attachments/yuque/0/2022/pdf/2630542/1664721931101-b8a47fde-0ddb-4592-b247-6cb45c521ea7.pdf%22,%22name%22:%22rust%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97.pdf%22,%22size%22:11080866,%22type%22:%22application/pdf%22,%22ext%22:%22pdf%22,%22source%22:%22%22,%22status%22:%22done%22,%22mode%22:%22title%22,%22download%22:true,%22taskId%22:%22uc2478403-ba6e-422b-b2b5-578008335f8%22,%22taskType%22:%22upload%22,%22__spacing%22:%22both%22,%22id%22:%22u6fdea619%22,%22margin%22:%7B%22top%22:true,%22bottom%22:true%7D,%22card%22:%22file%22%7D">rust权威指南.pdf</a><br>教程：<a href="https://course.rs/about-book.html">https://course.rs/about-book.html</a></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Rust</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络编程-Linux高性能服务器编程</title>
    <link href="/2022/09/15/yuque/cp0k82/"/>
    <url>/2022/09/15/yuque/cp0k82/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1659328094565-f22049e3-df22-474a-9aa2-f3ecb8d2c13e.png#averageHue=%23f1f5f4&clientId=u1936cc43-d136-4&errorMessage=unknown%20error&from=paste&height=406&id=u7c457c94&originHeight=406&originWidth=982&originalType=binary&ratio=1&rotation=0&showTitle=false&size=399165&status=error&style=none&taskId=u19a14553-68a0-4aa4-82d7-3970dc92ec6&title=&width=982" alt="image.png"></p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/2630542/1664337000918-bc6e6f73-2fbb-4b3c-87a2-6339a2e9e266.jpeg"></p><h1 id="第六章-I-O复用"><a href="#第六章-I-O复用" class="headerlink" title="第六章 I/O复用"></a>第六章 I/O复用</h1><p>I/O复用使得程序同时监听多个文件描述符</p><p>通常网络程序在以下情况需要使用到I/O复用</p><ul><li>客户端程序（用户进程）要同时处理多个socket</li><li>客户端程序要同时处理用户输入和网络连接</li><li>TCP服务要同时处理监听socket和连接socket（这是I/O复用最多的场景）</li><li>服务器需要同时处理TCP请求和UDP请求</li><li>服务器要同时监听多个端口，或者处理多种服务</li></ul><blockquote><p>Linux下实现I/O复用的系统调用主要有select、poll和epoll</p></blockquote><h2 id="select系统调用"><a href="#select系统调用" class="headerlink" title="select系统调用"></a>select系统调用</h2><p>select系统调用的用途是：在一段时间内，监听用户感兴趣的文件描述符上的可读、可写和异常事件。</p><h3 id="代码流程"><a href="#代码流程" class="headerlink" title="代码流程"></a>代码流程</h3><h4 id="1-系统调用开始"><a href="#1-系统调用开始" class="headerlink" title="1.系统调用开始"></a>1.系统调用开始</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 代码基于linux5-19-RC8 linux/fs/select.c</span><br><span class="hljs-comment">// 系统调用别名</span><br>SYSCALL_DEFINE5(select, <span class="hljs-type">int</span>, n, fd_set __user *, inp, fd_set __user *, outp,fd_set __user *, <span class="hljs-built_in">exp</span>, <span class="hljs-keyword">struct</span> __kernel_old_timeval __user *, tvp)&#123;<br><span class="hljs-keyword">return</span> kern_select(n, inp, outp, <span class="hljs-built_in">exp</span>, tvp);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">undef</span> __FD_SETSIZE</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __FD_SETSIZE1024 <span class="hljs-comment">//fd_set最大支持1024个描述符</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> fds_bits[__FD_SETSIZE / (<span class="hljs-number">8</span> * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">long</span>))];<br>&#125; __kernel_fd_set;<br><br><span class="hljs-comment">//linux/types.h</span><br><span class="hljs-keyword">typedef</span> __kernel_fd_setfd_set;<br><br></code></pre></td></tr></table></figure><h4 id="2-调用kern-select函数执行"><a href="#2-调用kern-select函数执行" class="headerlink" title="2.调用kern_select函数执行"></a>2.调用kern_select函数执行</h4><blockquote><p>判断是否是带有超时时间如果带有则需要复制到内核空间</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * select调用入口</span><br><span class="hljs-comment"> * @param n 指定被监听文件描述符的总数</span><br><span class="hljs-comment"> * @param __user 用户空间宏定义 表示后面的指针是用户空间的数据</span><br><span class="hljs-comment"> * @param inp 读描述符集指针</span><br><span class="hljs-comment"> * @param outp 写描述符集指针</span><br><span class="hljs-comment"> * @param exp 异常描述符集指针</span><br><span class="hljs-comment"> * @param tvp 超时时间指针</span><br><span class="hljs-comment"> * @return 返回可以操作的文件描述符数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">kern_select</span><span class="hljs-params">(<span class="hljs-type">int</span> n, fd_set __user *inp, fd_set __user *outp, fd_set __user *<span class="hljs-built_in">exp</span>, <span class="hljs-keyword">struct</span> __kernel_old_timeval __user *tvp)</span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timespec64</span> <span class="hljs-title">end_time</span>, *<span class="hljs-title">to</span> =</span> <span class="hljs-literal">NULL</span>;<span class="hljs-comment">//超时结构体</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> __<span class="hljs-title">kernel_old_timeval</span> <span class="hljs-title">tv</span>;</span><span class="hljs-comment">//旧版本超时结构体</span><br><span class="hljs-type">int</span> ret;<br><span class="hljs-comment">//如果是带有超时调用</span><br><span class="hljs-keyword">if</span> (tvp) &#123;<br><span class="hljs-comment">//将超时参数从用户空间的数据拷贝到内核空间</span><br><span class="hljs-keyword">if</span> (copy_from_user(&amp;tv, tvp, <span class="hljs-keyword">sizeof</span>(tv)))<span class="hljs-keyword">return</span> -EFAULT;<br><span class="hljs-comment">//将超时时间设置给end_time变量</span><br>to = &amp;end_time;<br><span class="hljs-keyword">if</span> (poll_select_set_timeout(to,tv.tv_sec + (tv.tv_usec / USEC_PER_SEC),(tv.tv_usec % USEC_PER_SEC) * NSEC_PER_USEC))<span class="hljs-keyword">return</span> -EINVAL;<br>&#125;<br><span class="hljs-comment">//（主线）执行select调用</span><br>ret = core_sys_select(n, inp, outp, <span class="hljs-built_in">exp</span>, to);<br><span class="hljs-comment">//将剩余时间写回</span><br><span class="hljs-keyword">return</span> poll_select_finish(&amp;end_time, tvp, PT_TIMEVAL, ret);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-调用core-sys-select执行"><a href="#3-调用core-sys-select执行" class="headerlink" title="3.调用core_sys_select执行"></a>3.调用core_sys_select执行</h4><blockquote><p>分配位图内存</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 核心系统调用select</span><br><span class="hljs-comment">* @param n 指定被监听文件描述符的总数</span><br><span class="hljs-comment">* @param __user 用户空间宏定义 表示后面的指针是用户空间的数据</span><br><span class="hljs-comment">* @param inp 读描述符集指针</span><br><span class="hljs-comment">* @param outp 写描述符集指针</span><br><span class="hljs-comment">* @param exp 异常描述符集指针</span><br><span class="hljs-comment">* @param 超时时间指针（已复制到内核空间）</span><br><span class="hljs-comment">* @return 返回可以操作的文件描述符数</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">core_sys_select</span><span class="hljs-params">(<span class="hljs-type">int</span> n, fd_set __user *inp, fd_set __user *outp,fd_set __user *<span class="hljs-built_in">exp</span>, <span class="hljs-keyword">struct</span> timespec64 *end_time)</span>&#123;<br>fd_set_bits fds;<span class="hljs-comment">//文件描述符集位图（结构体看3.1）</span><br><span class="hljs-type">void</span> *bits;<br><span class="hljs-type">int</span> ret, max_fds;<span class="hljs-comment">//最大文件描述符</span><br><span class="hljs-type">size_t</span> size, alloc_size;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fdtable</span> *<span class="hljs-title">fdt</span>;</span><span class="hljs-comment">//文件描述符表</span><br><span class="hljs-comment">/* Allocate small arguments on the stack to save memory and be faster */</span><br><span class="hljs-comment">//在栈上分配一段内存</span><br><span class="hljs-type">long</span> stack_fds[SELECT_STACK_ALLOC/<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">long</span>)];<br>ret = -EINVAL;<br><span class="hljs-comment">//参数验证小于0直接返回</span><br><span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">0</span>)<span class="hljs-keyword">goto</span> out_nofds;<br><span class="hljs-comment">/* max_fds can increase, so grab it once to avoid race */</span><br><span class="hljs-comment">//获得当前进程打开的文件 fd 表，获取最大的 fd</span><br>rcu_read_lock();<br>    <span class="hljs-comment">//读取文件描述符表</span><br>fdt = files_fdtable(current-&gt;files);<br>    <span class="hljs-comment">//从files结构中获取最大值（当前进程能够处理的最大文件数目）</span><br>max_fds = fdt-&gt;max_fds;<br>    <span class="hljs-comment">//释放rcu锁</span><br>rcu_read_unlock();<br><span class="hljs-comment">//防止n超过最大的fds</span><br><span class="hljs-keyword">if</span> (n &gt; max_fds)n = max_fds;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * We need 6 bitmaps (in/out/ex for both incoming and outgoing),</span><br><span class="hljs-comment"> * since we used fdset we need to allocate memory in units of</span><br><span class="hljs-comment"> * long-words. </span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//根据传入的需要监控的fd数量获取其需要分配的字节大小</span><br>size = FDS_BYTES(n);<br>bits = stack_fds;<br><span class="hljs-comment">/* 如果栈上的内存太小，那么就在堆上重新分配内存</span><br><span class="hljs-comment">     * 为什么是除以6呢？</span><br><span class="hljs-comment">     * 因为每个文件描述符要占6个bit（输入：可读，可写，异常；输出结果：可读，可写，异常）*/</span><br><span class="hljs-keyword">if</span> (size &gt; <span class="hljs-keyword">sizeof</span>(stack_fds) / <span class="hljs-number">6</span>) &#123;<br><span class="hljs-comment">/* Not enough space in on-stack array; must use kmalloc */</span><br>ret = -ENOMEM;<br><span class="hljs-keyword">if</span> (size &gt; (SIZE_MAX / <span class="hljs-number">6</span>))<span class="hljs-keyword">goto</span> out_nofds;<br>alloc_size = <span class="hljs-number">6</span> * size;<br>bits = kvmalloc(alloc_size, GFP_KERNEL);<span class="hljs-comment">//分配虚拟内存</span><br><span class="hljs-keyword">if</span> (!bits)<span class="hljs-keyword">goto</span> out_nofds;<span class="hljs-comment">//分配失败直接结束</span><br>&#125;<br><span class="hljs-comment">//设置好bitmap对应的内存地址</span><br>fds.in      = bits;<span class="hljs-comment">//可读</span><br>fds.out     = bits +   size;<span class="hljs-comment">//可写</span><br>fds.ex      = bits + <span class="hljs-number">2</span>*size;<span class="hljs-comment">//异常</span><br>fds.res_in  = bits + <span class="hljs-number">3</span>*size;<span class="hljs-comment">//返回结果，可读</span><br>fds.res_out = bits + <span class="hljs-number">4</span>*size;<span class="hljs-comment">//返回结果，可写</span><br>fds.res_ex  = bits + <span class="hljs-number">5</span>*size;<span class="hljs-comment">//返回结果，异常</span><br><span class="hljs-comment">//将fd从用户空间（用户进程）拷贝到内核空间</span><br><span class="hljs-keyword">if</span> ((ret = get_fd_set(n, inp, fds.in)) ||(ret = get_fd_set(n, outp, fds.out)) ||(ret = get_fd_set(n, <span class="hljs-built_in">exp</span>, fds.ex)))<span class="hljs-keyword">goto</span> out;<br><span class="hljs-comment">//清空返回结果的文件描述符集</span><br>zero_fd_set(n, fds.res_in);<br>zero_fd_set(n, fds.res_out);<br>zero_fd_set(n, fds.res_ex);<br><span class="hljs-comment">//执行select（主线）</span><br>ret = do_select(n, &amp;fds, end_time);<br>    <span class="hljs-comment">//错误结束</span><br><span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>)<span class="hljs-keyword">goto</span> out;<br>    <span class="hljs-comment">//超时结束</span><br><span class="hljs-keyword">if</span> (!ret) &#123;<br>ret = -ERESTARTNOHAND;<br>        <span class="hljs-comment">// 检测到有信号则系统调用退出，返回用户空间执行信号处理函数</span><br><span class="hljs-keyword">if</span> (signal_pending(current))<span class="hljs-keyword">goto</span> out;<br>ret = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//将fd拷贝到用户空间（用户进程）</span><br><span class="hljs-keyword">if</span> (set_fd_set(n, inp, fds.res_in) ||set_fd_set(n, outp, fds.res_out) ||set_fd_set(n, <span class="hljs-built_in">exp</span>, fds.res_ex))ret = -EFAULT;<br><br>out:<br>    <span class="hljs-comment">//如果是堆内存需要主动释放</span><br><span class="hljs-keyword">if</span> (bits != stack_fds)kvfree(bits);<span class="hljs-comment">//释放堆内存</span><br>out_nofds:<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="3-1结构体-fd-set-bits"><a href="#3-1结构体-fd-set-bits" class="headerlink" title="3.1结构体 fd_set_bits"></a>3.1结构体 fd_set_bits</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-comment">//指针都是用来指向描述符集合</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *in, *out, *ex;<span class="hljs-comment">//输入的文件描述符集事件</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *res_in, *res_out, *res_ex;<span class="hljs-comment">//响应的文件描述符集事件</span><br>&#125; fd_set_bits;<br></code></pre></td></tr></table></figure><h4 id="3-2结构体-fdtable文件描述符表"><a href="#3-2结构体-fdtable文件描述符表" class="headerlink" title="3.2结构体 fdtable文件描述符表"></a>3.2结构体 fdtable文件描述符表</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fdtable</span> &#123;</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> max_fds;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> __<span class="hljs-title">rcu</span> **<span class="hljs-title">fd</span>;</span>      <span class="hljs-comment">/* current fd array */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *close_on_exec;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *open_fds;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *full_fds_bits;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rcu_head</span> <span class="hljs-title">rcu</span>;</span><br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="4-调用-do-select-方法"><a href="#4-调用-do-select-方法" class="headerlink" title="4.调用 do_select 方法"></a>4.调用 do_select 方法</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * select 的具体实现</span><br><span class="hljs-comment"> * @param n 指定被监听文件描述符的总数</span><br><span class="hljs-comment"> * @param fds 文件描述符位图</span><br><span class="hljs-comment"> * @param end_time 超时时间</span><br><span class="hljs-comment"> * @return</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">do_select</span><span class="hljs-params">(<span class="hljs-type">int</span> n, fd_set_bits *fds, <span class="hljs-keyword">struct</span> timespec64 *end_time)</span>&#123;<br><span class="hljs-type">ktime_t</span> expire, *to = <span class="hljs-literal">NULL</span>;<span class="hljs-comment">//</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poll_wqueues</span> <span class="hljs-title">table</span>;</span><span class="hljs-comment">//定义一个poll_wqueues变量</span><br>poll_table *wait;<br><span class="hljs-type">int</span> retval, i, timed_out = <span class="hljs-number">0</span>;<span class="hljs-comment">//超时标识</span><br>u64 slack = <span class="hljs-number">0</span>;<br><span class="hljs-type">__poll_t</span> busy_flag = net_busy_loop_on() ? POLL_BUSY_LOOP : <span class="hljs-number">0</span>;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> busy_start = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">//Read Copy Update 锁机制</span><br>rcu_read_lock();<br><span class="hljs-comment">//根据设置的fd位图fds，检查确认所有位置对应的fd确实被打开了，并返回最大的fd</span><br>retval = max_select_fd(n, fds);<br><span class="hljs-comment">//释放锁</span><br>rcu_read_unlock();<br><span class="hljs-comment">//如果为负值直接返回</span><br><span class="hljs-keyword">if</span> (retval &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> retval;<br>n = retval;<br><span class="hljs-comment">//初始化 poll_wqueues （重点）</span><br><span class="hljs-comment">//poll_wqueues.poll_table.qproc函数指针初始化，该函数是驱动程序中poll函数（fop-&gt;poll）实现中必须要调用的poll_wait()中使用的函数。</span><br>poll_initwait(&amp;table);<br>wait = &amp;table.pt;<span class="hljs-comment">//poll_table封装在poll_wqueues中</span><br><span class="hljs-comment">//判断是否超时</span><br><span class="hljs-keyword">if</span> (end_time &amp;&amp; !end_time-&gt;tv_sec &amp;&amp; !end_time-&gt;tv_nsec) &#123;<br>wait-&gt;_qproc = <span class="hljs-literal">NULL</span>;<br>timed_out = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">//重新估算时间</span><br><span class="hljs-keyword">if</span> (end_time &amp;&amp; !timed_out)slack = select_estimate_accuracy(end_time);<br><br>retval = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (;;) &#123;<span class="hljs-comment">//死循环</span><br><span class="hljs-comment">//六种类型指针</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *rinp, *routp, *rexp, *inp, *outp, *<span class="hljs-built_in">exp</span>;<br><span class="hljs-type">bool</span> can_busy_loop = <span class="hljs-literal">false</span>;<br><span class="hljs-comment">//给上面指针赋值，指向fds对应的类型</span><br>inp = fds-&gt;in; outp = fds-&gt;out; <span class="hljs-built_in">exp</span> = fds-&gt;ex;<br>rinp = fds-&gt;res_in; routp = fds-&gt;res_out; rexp = fds-&gt;res_ex;<br><span class="hljs-comment">//遍历所有的fd（n个文件描述符）</span><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; ++rinp, ++routp, ++rexp) &#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> in, out, ex, all_bits, bit = <span class="hljs-number">1</span>, j;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> res_in = <span class="hljs-number">0</span>, res_out = <span class="hljs-number">0</span>, res_ex = <span class="hljs-number">0</span>;<br><span class="hljs-type">__poll_t</span> mask;<br><span class="hljs-comment">// 先取出当前循环周期中的32（设long占32位）个文件描述符对应的bitmaps</span><br>in = *inp++; out = *outp++; ex = *<span class="hljs-built_in">exp</span>++;<br>all_bits = in | out | ex;<span class="hljs-comment">//按位或，组合所有类型</span><br><span class="hljs-keyword">if</span> (all_bits == <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//当前位图块没有需要处理的文件描述符(关心的fd)，则结束本块fd，调到下一个fd位图块</span><br>i += BITS_PER_LONG;<span class="hljs-comment">//BITS_PER_LONG 位图宏定义</span><br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-comment">//遍历当前所有位</span><br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; BITS_PER_LONG; ++j, ++i, bit &lt;&lt;= <span class="hljs-number">1</span>) &#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fd</span> <span class="hljs-title">f</span>;</span><br><span class="hljs-comment">//struct fd &#123;</span><br><span class="hljs-comment">//struct file *file;//文件指针</span><br><span class="hljs-comment">//unsigned int flags;</span><br><span class="hljs-comment">//&#125;;</span><br><span class="hljs-comment">//i超出n范围直接跳出</span><br><span class="hljs-keyword">if</span> (i &gt;= n)<span class="hljs-keyword">break</span>;<br><span class="hljs-comment">//跳过不关心的bit</span><br><span class="hljs-keyword">if</span> (!(bit &amp; all_bits))<span class="hljs-keyword">continue</span>;<br>mask = EPOLLNVAL;<br><span class="hljs-comment">//获取当前文件描述符的file结构指针</span><br>f = fdget(i);<br><span class="hljs-comment">//因为没有rdlock加锁，因此当前进程中描述符i对应的文件可能已经 被异步关闭。这就是为什么需要判断file是否为空的原因</span><br><span class="hljs-comment">//（重点主线）如果文件存在</span><br><span class="hljs-keyword">if</span> (f.file) &#123;<br><span class="hljs-comment">// 设置poll_table智能柜想要监听的事件</span><br>wait_key_set(wait, in, out, bit,busy_flag);<br><span class="hljs-comment">//（重点）调用文件的poll操作，返回准备好的事件</span><br>mask = vfs_poll(f.file, wait);<br><span class="hljs-comment">// 关闭文件监听</span><br>fdput(f);<br>&#125;<br><span class="hljs-comment">/* events验证，其中retval表示就绪的资源数 */</span><br><span class="hljs-comment">//可读</span><br><span class="hljs-keyword">if</span> ((mask &amp; POLLIN_SET) &amp;&amp; (in &amp; bit)) &#123;<br>res_in |= bit;<span class="hljs-comment">//设置响应</span><br>retval++;<br>wait-&gt;_qproc = <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-comment">//可写</span><br><span class="hljs-keyword">if</span> ((mask &amp; POLLOUT_SET) &amp;&amp; (out &amp; bit)) &#123;<br>res_out |= bit;<br>retval++;<br>wait-&gt;_qproc = <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-comment">//异常</span><br><span class="hljs-keyword">if</span> ((mask &amp; POLLEX_SET) &amp;&amp; (ex &amp; bit)) &#123;<br>res_ex |= bit;<br>retval++;<br>wait-&gt;_qproc = <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-comment">/* got something, stop busy polling */</span><br><span class="hljs-keyword">if</span> (retval) &#123;<br>can_busy_loop = <span class="hljs-literal">false</span>;<br>busy_flag = <span class="hljs-number">0</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * only remember a returned</span><br><span class="hljs-comment"> * POLL_BUSY_LOOP if we asked for it</span><br><span class="hljs-comment"> */</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (busy_flag &amp; mask)can_busy_loop = <span class="hljs-literal">true</span>;<br><br>&#125;<br><span class="hljs-comment">/* 写出结果，注意写出的目的地是传进来的fd_set_bits */</span><br><span class="hljs-keyword">if</span> (res_in)*rinp = res_in;<br><span class="hljs-keyword">if</span> (res_out)*routp = res_out;<br><span class="hljs-keyword">if</span> (res_ex)*rexp = res_ex;<br><span class="hljs-comment">//主动让出cpu等待下次循环</span><br>cond_resched();<br>&#125;<span class="hljs-comment">//遍历完n个fd</span><br>wait-&gt;_qproc = <span class="hljs-literal">NULL</span>;<br><span class="hljs-comment">//如果当前这轮循环有准备好的事件|超时|（中断）检测到有信号则系统调用退出，返回用户空间执行信号处理函数 跳出死循环</span><br><span class="hljs-keyword">if</span> (retval || timed_out || signal_pending(current))<span class="hljs-keyword">break</span>;<br><span class="hljs-comment">//存在错误</span><br><span class="hljs-keyword">if</span> (table.error) &#123;<br>retval = table.error;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br><span class="hljs-comment">/* only if found POLL_BUSY_LOOP sockets &amp;&amp; not out of time */</span><br><span class="hljs-keyword">if</span> (can_busy_loop &amp;&amp; !need_resched()) &#123;<br><span class="hljs-keyword">if</span> (!busy_start) &#123;<br>busy_start = busy_loop_current_time();<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (!busy_loop_timeout(busy_start))<span class="hljs-keyword">continue</span>;<br>&#125;<br>busy_flag = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * If this is the first loop and we have a timeout</span><br><span class="hljs-comment"> * given, then we convert to ktime_t and set the to</span><br><span class="hljs-comment"> * pointer to the expiry value.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (end_time &amp;&amp; !to) &#123;<br>expire = timespec64_to_ktime(*end_time);<br>to = &amp;expire;<br>&#125;<br><span class="hljs-comment">/* 能够到达这一步就说明没有发生就绪、中断以及超时 */</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 判断poll_wqueues是否已触发，如果还没有触发，那就设置当前运行状态为可中断阻塞并进行睡眠，等待被唤醒...</span><br><span class="hljs-comment"> * 被唤醒之后重新进行迭代，获取资源就绪情况...</span><br><span class="hljs-comment"> * 在向资源注册监听与判断poll_wqueues是否已触发这段时间内，可能资源异步就绪了，如果没有触发标志，那么可能就</span><br><span class="hljs-comment"> * 会丢失资源就绪这个事件，可能导致select()永久沉睡...</span><br><span class="hljs-comment"> * 这就是为什么需要poll_wqueues.triggered字段的原因...</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (!poll_schedule_timeout(&amp;table, TASK_INTERRUPTIBLE,to, slack))timed_out = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">      * 1. 卸载安装到资源监听队列上的poll_table_entry</span><br><span class="hljs-comment">      * 2. 释放poll_wqueues占用的资源</span><br><span class="hljs-comment">      */</span><br>poll_freewait(&amp;table);<br><span class="hljs-comment">//返回就绪的资源数</span><br><span class="hljs-keyword">return</span> retval;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-1-结构体"><a href="#4-1-结构体" class="headerlink" title="4.1 结构体"></a>4.1 结构体</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poll_wqueues</span> &#123;</span><br>poll_table pt;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poll_table_page</span> *<span class="hljs-title">table</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span> *<span class="hljs-title">polling_task</span>;</span><span class="hljs-comment">//保存当前调用select的用户进程struct task_struct结构体</span><br><span class="hljs-type">int</span> triggered;<span class="hljs-comment">//当前用户进程被唤醒后置成1，以免该进程接着进睡眠</span><br><span class="hljs-type">int</span> error;<span class="hljs-comment">//错误码</span><br><span class="hljs-type">int</span> inline_index;<span class="hljs-comment">//数组inline_entries的引用下标</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poll_table_entry</span> <span class="hljs-title">inline_entries</span>[<span class="hljs-title">N_INLINE_POLL_ENTRIES</span>];</span><br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poll_table_page</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poll_table_page</span> * <span class="hljs-title">next</span>;</span><span class="hljs-comment">//指向下一个申请的物理页</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poll_table_entry</span> * <span class="hljs-title">entry</span>;</span><span class="hljs-comment">//指向entries[]中首个待分配(空的) poll_table_entry地址</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poll_table_entry</span> <span class="hljs-title">entries</span>[];</span><span class="hljs-comment">//该page页后面剩余的空间都是待分配的poll_table_entry结构体</span><br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poll_table_struct</span> &#123;</span><br>poll_queue_proc _qproc;<br><span class="hljs-type">__poll_t</span> _key;<br>&#125; poll_table;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poll_table_entry</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> *<span class="hljs-title">filp</span>;</span><span class="hljs-comment">//指向特定fd对应的file结构体;</span><br><span class="hljs-type">__poll_t</span> key;<span class="hljs-comment">//等待特定fd对应硬件设备的事件掩码，如POLLIN、 POLLOUT、POLLERR</span><br><span class="hljs-type">wait_queue_entry_t</span> wait;<span class="hljs-comment">//代表调用select()的应用进程，等待在fd对应设备的特定事件 (读或者写)的等待队列头上，的等待队列项</span><br><span class="hljs-type">wait_queue_head_t</span> *wait_address;<span class="hljs-comment">//设备驱动程序中特定事件的等待队列头(该fd执行fop-&gt;poll，需要等待时在哪等，所以叫等待地址)</span><br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="4-2-调用-poll-initwait-进行初始化"><a href="#4-2-调用-poll-initwait-进行初始化" class="headerlink" title="4.2 调用 poll_initwait 进行初始化"></a>4.2 调用 poll_initwait 进行初始化</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">poll_initwait</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> poll_wqueues *pwq)</span>&#123;<br>init_poll_funcptr(&amp;pwq-&gt;pt, __pollwait);<br>pwq-&gt;polling_task = current;<br>pwq-&gt;triggered = <span class="hljs-number">0</span>;<br>pwq-&gt;error = <span class="hljs-number">0</span>;<br>pwq-&gt;table = <span class="hljs-literal">NULL</span>;<br>pwq-&gt;inline_index = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-4-调用-init-poll-funcptr-初始化开启监听事件"><a href="#4-4-调用-init-poll-funcptr-初始化开启监听事件" class="headerlink" title="4.4 调用 init_poll_funcptr 初始化开启监听事件"></a>4.4 调用 init_poll_funcptr 初始化开启监听事件</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">init_poll_funcptr</span><span class="hljs-params">(poll_table *pt, poll_queue_proc qproc)</span>&#123;<br>pt-&gt;_qproc = qproc;<br>pt-&gt;_key   = ~(<span class="hljs-type">__poll_t</span>)<span class="hljs-number">0</span>;<span class="hljs-comment">//缺省开启全部事件监听</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-5-调用wait-key-set设置要监听的事件"><a href="#4-5-调用wait-key-set设置要监听的事件" class="headerlink" title="4.5 调用wait_key_set设置要监听的事件"></a>4.5 调用wait_key_set设置要监听的事件</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> POLLIN_SET (EPOLLRDNORM | EPOLLRDBAND | EPOLLIN | EPOLLHUP | EPOLLERR | EPOLLNVAL)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> POLLOUT_SET (EPOLLWRBAND | EPOLLWRNORM | EPOLLOUT | EPOLLERR | EPOLLNVAL)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> POLLEX_SET (EPOLLPRI | EPOLLNVAL)</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 设置 poll_table 要监听的事件</span><br><span class="hljs-comment"> * @param wait</span><br><span class="hljs-comment"> * @param in</span><br><span class="hljs-comment"> * @param out</span><br><span class="hljs-comment"> * @param bit</span><br><span class="hljs-comment"> * @param ll_flag</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">wait_key_set</span><span class="hljs-params">(poll_table *wait, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> in,<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> out, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> bit,<span class="hljs-type">__poll_t</span> ll_flag)</span> &#123;<br>wait-&gt;_key = POLLEX_SET | ll_flag;<br><span class="hljs-keyword">if</span> (in &amp; bit)wait-&gt;_key |= POLLIN_SET;<span class="hljs-comment">//in事件</span><br><span class="hljs-keyword">if</span> (out &amp; bit)wait-&gt;_key |= POLLOUT_SET;<span class="hljs-comment">//out事件</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="4-6-调用-vfs-poll-返回准备好的事件"><a href="#4-6-调用-vfs-poll-返回准备好的事件" class="headerlink" title="4.6 调用 vfs_poll 返回准备好的事件"></a>4.6 调用 vfs_poll 返回准备好的事件</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 调用文件操作的poll方法</span><br><span class="hljs-comment"> * @param file 文件</span><br><span class="hljs-comment"> * @param pt poll_table_struct 结构体指针</span><br><span class="hljs-comment"> * @return 返回准备好的事件</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">__poll_t</span> <span class="hljs-title function_">vfs_poll</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *file, <span class="hljs-keyword">struct</span> poll_table_struct *pt)</span>&#123;<br><span class="hljs-comment">//如果 fd 所在的文件系统的 file_operations 实现了 poll ，那么就会直接调用，如果没有，那么就会报告响应的错误码</span><br><span class="hljs-keyword">if</span> (unlikely(!file-&gt;f_op-&gt;poll))<span class="hljs-keyword">return</span> DEFAULT_POLLMASK;<br><span class="hljs-keyword">return</span> file-&gt;f_op-&gt;poll(file, pt);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-7-结构体file"><a href="#4-7-结构体file" class="headerlink" title="4.7 结构体file"></a>4.7 结构体file</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//linux-5.19-rc8/include/linux/fs.h</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">llist_node</span><span class="hljs-title">fu_llist</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rcu_head</span> <span class="hljs-title">fu_rcuhead</span>;</span><br>&#125; f_u;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">path</span><span class="hljs-title">f_path</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inode</span>*<span class="hljs-title">f_inode</span>;</span><span class="hljs-comment">/* cached value */</span><br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file_operations</span>*<span class="hljs-title">f_op</span>;</span><span class="hljs-comment">//（主线）文件支持的操作</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Protects f_ep, f_flags.</span><br><span class="hljs-comment"> * Must not be taken from IRQ context.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">spinlock_t</span>f_lock;<br><span class="hljs-type">atomic_long_t</span>f_count;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> f_flags;<br><span class="hljs-type">fmode_t</span>f_mode;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mutex</span><span class="hljs-title">f_pos_lock</span>;</span><br><span class="hljs-type">loff_t</span>f_pos;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fown_struct</span><span class="hljs-title">f_owner</span>;</span><br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cred</span>*<span class="hljs-title">f_cred</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file_ra_state</span><span class="hljs-title">f_ra</span>;</span><br><br>u64f_version;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_SECURITY</span><br><span class="hljs-type">void</span>*f_security;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-comment">/* needed for tty driver, and maybe others */</span><br><span class="hljs-type">void</span>*private_data;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_EPOLL</span><br><span class="hljs-comment">/* Used by fs/eventpoll.c to link all the hooks to this file */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hlist_head</span>*<span class="hljs-title">f_ep</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* #ifdef CONFIG_EPOLL */</span></span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">address_space</span>*<span class="hljs-title">f_mapping</span>;</span><br><span class="hljs-type">errseq_t</span>f_wb_err;<br><span class="hljs-type">errseq_t</span>f_sb_err; <span class="hljs-comment">/* for syncfs */</span><br>&#125; __randomize_layout<br>  __attribute__((aligned(<span class="hljs-number">4</span>)));<span class="hljs-comment">/* lest something weird decides that 2 is OK */</span><br></code></pre></td></tr></table></figure><h4 id="4-8-结构体-file-operations-（4-6中调用的poll）"><a href="#4-8-结构体-file-operations-（4-6中调用的poll）" class="headerlink" title="4.8 结构体 file_operations （4.6中调用的poll）"></a>4.8 结构体 file_operations （4.6中调用的poll）</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file_operations</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">module</span> *<span class="hljs-title">owner</span>;</span><br><span class="hljs-type">loff_t</span> (*llseek) (<span class="hljs-keyword">struct</span> file *, <span class="hljs-type">loff_t</span>, <span class="hljs-type">int</span>);<br><span class="hljs-type">ssize_t</span> (*read) (<span class="hljs-keyword">struct</span> file *, <span class="hljs-type">char</span> __user *, <span class="hljs-type">size_t</span>, <span class="hljs-type">loff_t</span> *);<br><span class="hljs-type">ssize_t</span> (*write) (<span class="hljs-keyword">struct</span> file *, <span class="hljs-type">const</span> <span class="hljs-type">char</span> __user *, <span class="hljs-type">size_t</span>, <span class="hljs-type">loff_t</span> *);<br><span class="hljs-type">ssize_t</span> (*read_iter) (<span class="hljs-keyword">struct</span> kiocb *, <span class="hljs-keyword">struct</span> iov_iter *);<br><span class="hljs-type">ssize_t</span> (*write_iter) (<span class="hljs-keyword">struct</span> kiocb *, <span class="hljs-keyword">struct</span> iov_iter *);<br><span class="hljs-type">int</span> (*iopoll)(<span class="hljs-keyword">struct</span> kiocb *kiocb, <span class="hljs-keyword">struct</span> io_comp_batch *,<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flags);<br><span class="hljs-type">int</span> (*iterate) (<span class="hljs-keyword">struct</span> file *, <span class="hljs-keyword">struct</span> dir_context *);<br><span class="hljs-type">int</span> (*iterate_shared) (<span class="hljs-keyword">struct</span> file *, <span class="hljs-keyword">struct</span> dir_context *);<br><span class="hljs-type">__poll_t</span> (*poll) (<span class="hljs-keyword">struct</span> file *, <span class="hljs-keyword">struct</span> poll_table_struct *);<span class="hljs-comment">//（主线）调用文件的poll方法操作</span><br><span class="hljs-type">long</span> (*unlocked_ioctl) (<span class="hljs-keyword">struct</span> file *, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>);<br><span class="hljs-type">long</span> (*compat_ioctl) (<span class="hljs-keyword">struct</span> file *, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>);<br><span class="hljs-type">int</span> (*mmap) (<span class="hljs-keyword">struct</span> file *, <span class="hljs-keyword">struct</span> vm_area_struct *);<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> mmap_supported_flags;<br><span class="hljs-type">int</span> (*open) (<span class="hljs-keyword">struct</span> inode *, <span class="hljs-keyword">struct</span> file *);<br><span class="hljs-type">int</span> (*flush) (<span class="hljs-keyword">struct</span> file *, <span class="hljs-type">fl_owner_t</span> id);<br><span class="hljs-type">int</span> (*release) (<span class="hljs-keyword">struct</span> inode *, <span class="hljs-keyword">struct</span> file *);<br><span class="hljs-type">int</span> (*fsync) (<span class="hljs-keyword">struct</span> file *, <span class="hljs-type">loff_t</span>, <span class="hljs-type">loff_t</span>, <span class="hljs-type">int</span> datasync);<br><span class="hljs-type">int</span> (*fasync) (<span class="hljs-type">int</span>, <span class="hljs-keyword">struct</span> file *, <span class="hljs-type">int</span>);<br><span class="hljs-type">int</span> (*lock) (<span class="hljs-keyword">struct</span> file *, <span class="hljs-type">int</span>, <span class="hljs-keyword">struct</span> file_lock *);<br><span class="hljs-type">ssize_t</span> (*sendpage) (<span class="hljs-keyword">struct</span> file *, <span class="hljs-keyword">struct</span> page *, <span class="hljs-type">int</span>, <span class="hljs-type">size_t</span>, <span class="hljs-type">loff_t</span> *, <span class="hljs-type">int</span>);<br><span class="hljs-type">unsigned</span> <span class="hljs-title function_">long</span> <span class="hljs-params">(*get_unmapped_area)</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)</span>;<br><span class="hljs-type">int</span> (*check_flags)(<span class="hljs-type">int</span>);<br><span class="hljs-type">int</span> (*flock) (<span class="hljs-keyword">struct</span> file *, <span class="hljs-type">int</span>, <span class="hljs-keyword">struct</span> file_lock *);<br><span class="hljs-type">ssize_t</span> (*splice_write)(<span class="hljs-keyword">struct</span> pipe_inode_info *, <span class="hljs-keyword">struct</span> file *, <span class="hljs-type">loff_t</span> *, <span class="hljs-type">size_t</span>, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>);<br><span class="hljs-type">ssize_t</span> (*splice_read)(<span class="hljs-keyword">struct</span> file *, <span class="hljs-type">loff_t</span> *, <span class="hljs-keyword">struct</span> pipe_inode_info *, <span class="hljs-type">size_t</span>, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>);<br><span class="hljs-type">int</span> (*setlease)(<span class="hljs-keyword">struct</span> file *, <span class="hljs-type">long</span>, <span class="hljs-keyword">struct</span> file_lock **, <span class="hljs-type">void</span> **);<br><span class="hljs-type">long</span> (*fallocate)(<span class="hljs-keyword">struct</span> file *file, <span class="hljs-type">int</span> mode, <span class="hljs-type">loff_t</span> offset,<span class="hljs-type">loff_t</span> len);<br><span class="hljs-type">void</span> (*show_fdinfo)(<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-keyword">struct</span> file *f);<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> CONFIG_MMU</span><br><span class="hljs-type">unsigned</span> (*mmap_capabilities)(<span class="hljs-keyword">struct</span> file *);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-type">ssize_t</span> (*copy_file_range)(<span class="hljs-keyword">struct</span> file *, <span class="hljs-type">loff_t</span>, <span class="hljs-keyword">struct</span> file *,<span class="hljs-type">loff_t</span>, <span class="hljs-type">size_t</span>, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>);<br><span class="hljs-type">loff_t</span> (*remap_file_range)(<span class="hljs-keyword">struct</span> file *file_in, <span class="hljs-type">loff_t</span> pos_in,<span class="hljs-keyword">struct</span> file *file_out, <span class="hljs-type">loff_t</span> pos_out,<span class="hljs-type">loff_t</span> len, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> remap_flags);<br><span class="hljs-type">int</span> (*fadvise)(<span class="hljs-keyword">struct</span> file *, <span class="hljs-type">loff_t</span>, <span class="hljs-type">loff_t</span>, <span class="hljs-type">int</span>);<br><span class="hljs-type">int</span> (*uring_cmd)(<span class="hljs-keyword">struct</span> io_uring_cmd *ioucmd, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> issue_flags);<br>&#125; __randomize_layout;<br></code></pre></td></tr></table></figure><h4 id="4-9-释放-poll-wqueues-的资源占用"><a href="#4-9-释放-poll-wqueues-的资源占用" class="headerlink" title="4.9 释放 poll_wqueues 的资源占用"></a>4.9 释放 poll_wqueues 的资源占用</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 释放 poll_wqueues 的资源占用</span><br><span class="hljs-comment"> * @param pwq </span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">poll_freewait</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> poll_wqueues *pwq)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poll_table_page</span> * <span class="hljs-title">p</span> =</span> pwq-&gt;table;<br><span class="hljs-type">int</span> i;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; pwq-&gt;inline_index; i++)free_poll_entry(pwq-&gt;inline_entries + i);<br><span class="hljs-keyword">while</span> (p) &#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poll_table_entry</span> * <span class="hljs-title">entry</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poll_table_page</span> *<span class="hljs-title">old</span>;</span><br><br>entry = p-&gt;entry;<br><span class="hljs-keyword">do</span> &#123;<br>entry--;<br>free_poll_entry(entry);<br>&#125; <span class="hljs-keyword">while</span> (entry &gt; p-&gt;entries);<br>old = p;<br>p = p-&gt;next;<br>free_page((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) old);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="流程图示"><a href="#流程图示" class="headerlink" title="流程图示"></a>流程图示</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/2630542/1661245514701-83285cdc-90e4-4dff-a79c-56e5e3af52cb.jpeg"></p><h3 id="相关总结"><a href="#相关总结" class="headerlink" title="相关总结"></a>相关总结</h3><p>优点：</p><ul><li>用户可以在一个线程内同时处理多个socket的IO请求。同时没有多线程多进程那样耗费系统资源  </li><li>目前几乎在所有的平台上支持，其良好跨平台支持也是它的一个优点</li></ul><p>缺点：</p><ul><li>可处理的fd集有限，默认1024个</li><li>采用轮询遍历每个fd位图其效率较为低下，调用处于阻塞状态</li><li>客户进程获取返回的数据后还需遍历fd集才知道哪些fd准备好</li><li>每次调用需要复制大量的句柄数据结构到内核空间，产生巨大的开销</li></ul><h2 id="poll系统调用"><a href="#poll系统调用" class="headerlink" title="poll系统调用"></a>poll系统调用</h2><blockquote><p>poll的代码和select在同一个文件中</p></blockquote><h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><h4 id="1-系统调用函数"><a href="#1-系统调用函数" class="headerlink" title="1.系统调用函数"></a>1.系统调用函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 代码基于linux5-19-RC8 linux/fs/select.c</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* poll系统调用</span><br><span class="hljs-comment">* @param ufds 用户空间poll文件描述符</span><br><span class="hljs-comment">* @param nfds ufds的长度</span><br><span class="hljs-comment">* @param timeout_msecs 超时参数</span><br><span class="hljs-comment">*/</span><br>SYSCALL_DEFINE3(poll, <span class="hljs-keyword">struct</span> pollfd __user *, ufds, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>, nfds,<span class="hljs-type">int</span>, timeout_msecs)&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timespec64</span> <span class="hljs-title">end_time</span>, *<span class="hljs-title">to</span> =</span> <span class="hljs-literal">NULL</span>;<span class="hljs-comment">//超时时间</span><br>    <span class="hljs-type">int</span> ret;<span class="hljs-comment">//响应结果</span><br>    <span class="hljs-keyword">if</span> (timeout_msecs &gt;= <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//计算超时时间</span><br>        to = &amp;end_time;<br>        poll_select_set_timeout(to, timeout_msecs / MSEC_PER_SEC,<br>                                NSEC_PER_MSEC * (timeout_msecs % MSEC_PER_SEC));<br>    &#125;<br>    <span class="hljs-comment">//(主线)核心调用</span><br>    ret = do_sys_poll(ufds, nfds, to);<br>    <span class="hljs-comment">//错误码（系统错误）-ERESTARTNOHAND表明,被中断的系统调用</span><br>    <span class="hljs-keyword">if</span> (ret == -ERESTARTNOHAND) &#123;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">restart_block</span> *<span class="hljs-title">restart_block</span>;</span><br><br>        restart_block = &amp;current-&gt;restart_block;<br>        restart_block-&gt;poll.ufds = ufds;<br>        restart_block-&gt;poll.nfds = nfds;<br>        <span class="hljs-comment">//是否超时</span><br>        <span class="hljs-keyword">if</span> (timeout_msecs &gt;= <span class="hljs-number">0</span>) &#123;<br>            restart_block-&gt;poll.tv_sec = end_time.tv_sec;<br>            restart_block-&gt;poll.tv_nsec = end_time.tv_nsec;<br>            restart_block-&gt;poll.has_timeout = <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span><br>            restart_block-&gt;poll.has_timeout = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//重启服务</span><br>        ret = set_restart_fn(restart_block, do_restart_poll);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-1-pollfd结构体"><a href="#1-1-pollfd结构体" class="headerlink" title="1.1 pollfd结构体"></a>1.1 pollfd结构体</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * poll文件描述符结构体</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pollfd</span> &#123;</span><br><span class="hljs-type">int</span> fd;<span class="hljs-comment">//文件描述符</span><br><span class="hljs-type">short</span> <span class="hljs-type">int</span> events;<span class="hljs-comment">//关心的events</span><br><span class="hljs-type">short</span> <span class="hljs-type">int</span> revents;<span class="hljs-comment">//返回就绪的events</span><br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="2-调用do-sys-poll方法"><a href="#2-调用do-sys-poll方法" class="headerlink" title="2.调用do_sys_poll方法"></a>2.调用do_sys_poll方法</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * poll系统调用核心：</span><br><span class="hljs-comment"> * - 分配链表空间</span><br><span class="hljs-comment"> * - 初始化 poll_wqueues 控制块</span><br><span class="hljs-comment"> * - 调用 do_poll 方法</span><br><span class="hljs-comment"> * @param __user</span><br><span class="hljs-comment"> * @return 返回</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">do_sys_poll</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> pollfd __user *ufds, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> nfds, <span class="hljs-keyword">struct</span> timespec64 *end_time)</span> &#123;<br><span class="hljs-comment">//定义一个poll调用控制块（表）</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poll_wqueues</span> <span class="hljs-title">table</span>;</span><br><span class="hljs-type">int</span> err = -EFAULT, fdcount, len;<br><span class="hljs-comment">/* Allocate small arguments on the stack to save memory and be</span><br><span class="hljs-comment">   faster - use long to make sure the buffer is aligned properly</span><br><span class="hljs-comment">   on 64 bit archs to avoid unaligned access */</span><br><span class="hljs-comment">//优先在栈上分配空间</span><br><span class="hljs-type">long</span> stack_pps[POLL_STACK_ALLOC/<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">long</span>)];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poll_list</span> *<span class="hljs-title">const</span> <span class="hljs-title">head</span> =</span> (<span class="hljs-keyword">struct</span> poll_list *)stack_pps;<br> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poll_list</span> *<span class="hljs-title">walk</span> =</span> head;<br> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> todo = nfds;<br><span class="hljs-comment">//检查是否超出长度限制</span><br><span class="hljs-keyword">if</span> (nfds &gt; rlimit(RLIMIT_NOFILE))<span class="hljs-keyword">return</span> -EINVAL;<br><span class="hljs-comment">//获取分配的空间长度</span><br>len = <span class="hljs-type">min_t</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>, nfds, N_STACK_PPS);<br><span class="hljs-comment">//为每一个节点（pollfd）进行分配空间</span><br><span class="hljs-keyword">for</span> (;;) &#123;<br>walk-&gt;next = <span class="hljs-literal">NULL</span>;<br>walk-&gt;len = len;<br><span class="hljs-comment">//所需长度为0则可跳出循环</span><br><span class="hljs-keyword">if</span> (!len)<span class="hljs-keyword">break</span>;<br><span class="hljs-comment">//复制文件描述符到内核空间</span><br><span class="hljs-keyword">if</span> (copy_from_user(walk-&gt;entries, ufds + nfds-todo,<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> pollfd) * walk-&gt;len))<span class="hljs-keyword">goto</span> out_fds;<br><br>todo -= walk-&gt;len;<br><span class="hljs-keyword">if</span> (!todo)<span class="hljs-keyword">break</span>;<br><br>len = min(todo, POLLFD_PER_PAGE);<br><span class="hljs-comment">//在堆区分配空间</span><br>walk = walk-&gt;next = kmalloc(struct_size(walk, entries, len),GFP_KERNEL);<br><span class="hljs-keyword">if</span> (!walk) &#123;<br>err = -ENOMEM;<br><span class="hljs-keyword">goto</span> out_fds;<br>&#125;<br>&#125;<br><span class="hljs-comment">//初始化poll控制块</span><br>poll_initwait(&amp;table);<br><span class="hljs-comment">//(主线）执行poll调用</span><br>fdcount = do_poll(head, &amp;table, end_time);<br><span class="hljs-comment">//释放poll控制块</span><br>poll_freewait(&amp;table);<br><span class="hljs-comment">//如果用户没有写入权限</span><br><span class="hljs-keyword">if</span> (!user_write_access_begin(ufds, nfds * <span class="hljs-keyword">sizeof</span>(*ufds)))<span class="hljs-keyword">goto</span> out_fds;<br><br><span class="hljs-keyword">for</span> (walk = head; walk; walk = walk-&gt;next) &#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pollfd</span> *<span class="hljs-title">fds</span> =</span> walk-&gt;entries;<br><span class="hljs-type">int</span> j;<br><br><span class="hljs-keyword">for</span> (j = walk-&gt;len; j; fds++, ufds++, j--)<br>unsafe_put_user(fds-&gt;revents, &amp;ufds-&gt;revents, Efault);<br>  &#125;<br>user_write_access_end();<br><br>err = fdcount;<br>out_fds:<br>walk = head-&gt;next;<br><span class="hljs-keyword">while</span> (walk) &#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poll_list</span> *<span class="hljs-title">pos</span> =</span> walk;<br>walk = walk-&gt;next;<br>kfree(pos);<br>&#125;<br><br><span class="hljs-keyword">return</span> err;<br><br>Efault:<br>user_write_access_end();<br>err = -EFAULT;<br><span class="hljs-keyword">goto</span> out_fds;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-1调用poll-initwait-amp-table-初始化poll控制块"><a href="#2-1调用poll-initwait-amp-table-初始化poll控制块" class="headerlink" title="2.1调用poll_initwait(&amp;table)初始化poll控制块"></a>2.1调用poll_initwait(&amp;table)初始化poll控制块</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 初始化poll队列</span><br><span class="hljs-comment"> * @param pwq</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">poll_initwait</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> poll_wqueues *pwq)</span> &#123;<br><span class="hljs-comment">//调用__pollwait初始化监听队列</span><br>init_poll_funcptr(&amp;pwq-&gt;pt, __pollwait);<br>pwq-&gt;polling_task = current;<span class="hljs-comment">//当前调用的进程</span><br>pwq-&gt;triggered = <span class="hljs-number">0</span>;<span class="hljs-comment">//是否已经触发</span><br>pwq-&gt;error = <span class="hljs-number">0</span>;<span class="hljs-comment">//是否错误</span><br>pwq-&gt;table = <span class="hljs-literal">NULL</span>;<br>pwq-&gt;inline_index = <span class="hljs-number">0</span>;<br>&#125;<br>EXPORT_SYMBOL(poll_initwait);<br></code></pre></td></tr></table></figure><h4 id="2-1-1调用-pollwait添加监听文件"><a href="#2-1-1调用-pollwait添加监听文件" class="headerlink" title="2.1.1调用__pollwait添加监听文件"></a>2.1.1调用__pollwait添加监听文件</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Add a new entry */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将poll_table_entry挂载到资源文件的监听队列</span><br><span class="hljs-comment"> * @param filp 被监听的资源文件</span><br><span class="hljs-comment"> * @param wait_address 被监听的资源文件的等待队列头</span><br><span class="hljs-comment"> * @param p 在poll_initwait()中设置的poll_tbale</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> __pollwait(<span class="hljs-keyword">struct</span> file *filp, <span class="hljs-type">wait_queue_head_t</span> *wait_address,poll_table *p)&#123;<br><span class="hljs-comment">//获取 poll_wqueues</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poll_wqueues</span> *<span class="hljs-title">pwq</span> =</span> container_of(p, <span class="hljs-keyword">struct</span> poll_wqueues, pt);<br><span class="hljs-comment">//获取 poll_table_entry</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poll_table_entry</span> *<span class="hljs-title">entry</span> =</span> poll_get_entry(pwq);<br><span class="hljs-comment">//如果获取不到直接返回</span><br><span class="hljs-keyword">if</span> (!entry)<span class="hljs-keyword">return</span>;<br><span class="hljs-comment">//增加资源文件引用计数并关联到entry的filp属性</span><br>entry-&gt;filp = get_file(filp);<br><span class="hljs-comment">//保存资源文件到队列头</span><br>entry-&gt;wait_address = wait_address;<br><span class="hljs-comment">//赋值监听事件给entry的key</span><br>entry-&gt;key = p-&gt;_key;<br><span class="hljs-comment">//初始化一个等待队列节点，其中唤醒函数设置为pollwake(重点)</span><br>init_waitqueue_func_entry(&amp;entry-&gt;wait, pollwake);<br><span class="hljs-comment">//</span><br>entry-&gt;wait.private = pwq;<br><span class="hljs-comment">//添加到监听队列</span><br>add_wait_queue(wait_address, &amp;entry-&gt;wait);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-调用-do-poll-方法"><a href="#3-调用-do-poll-方法" class="headerlink" title="3.调用 do_poll 方法"></a>3.调用 do_poll 方法</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 核心调用poll</span><br><span class="hljs-comment"> * @param list fd列表的链表</span><br><span class="hljs-comment"> * @param wait 调度控制块</span><br><span class="hljs-comment"> * @param end_time 超时时间</span><br><span class="hljs-comment"> * @return 返回准备好的fd个数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">do_poll</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> poll_list *<span class="hljs-built_in">list</span>, <span class="hljs-keyword">struct</span> poll_wqueues *wait,<span class="hljs-keyword">struct</span> timespec64 *end_time)</span>&#123;<br><span class="hljs-comment">//获取poll_table</span><br>poll_table* pt = &amp;wait-&gt;pt;<br><span class="hljs-comment">//时间</span><br><span class="hljs-type">ktime_t</span> expire, *to = <span class="hljs-literal">NULL</span>;<br><span class="hljs-type">int</span> timed_out = <span class="hljs-number">0</span>, count = <span class="hljs-number">0</span>;<br>u64 slack = <span class="hljs-number">0</span>;<br><span class="hljs-type">__poll_t</span> busy_flag = net_busy_loop_on() ? POLL_BUSY_LOOP : <span class="hljs-number">0</span>;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> busy_start = <span class="hljs-number">0</span>;<br><span class="hljs-comment">/* Optimise the no-wait case */</span><br><span class="hljs-comment">//判断是否超时</span><br><span class="hljs-keyword">if</span> (end_time &amp;&amp; !end_time-&gt;tv_sec &amp;&amp; !end_time-&gt;tv_nsec) &#123;<br>pt-&gt;_qproc = <span class="hljs-literal">NULL</span>;<br>timed_out = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">//预估时间</span><br><span class="hljs-keyword">if</span> (end_time &amp;&amp; !timed_out)slack = select_estimate_accuracy(end_time);<br><span class="hljs-comment">//死循环遍历</span><br><span class="hljs-keyword">for</span> (;;) &#123;<br><span class="hljs-comment">//当前遍历的链表节点（节点中包含pollfd数组）</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poll_list</span> *<span class="hljs-title">walk</span>;</span><br><span class="hljs-type">bool</span> can_busy_loop = <span class="hljs-literal">false</span>;<br><span class="hljs-comment">//遍历链表</span><br><span class="hljs-keyword">for</span> (walk = <span class="hljs-built_in">list</span>; walk != <span class="hljs-literal">NULL</span>; walk = walk-&gt;next) &#123;<span class="hljs-comment">//walk = walk-&gt;next链表移动</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pollfd</span> * <span class="hljs-title">pfd</span>, * <span class="hljs-title">pfd_end</span>;</span><br>pfd = walk-&gt;entries;<br>pfd_end = pfd + walk-&gt;len;<br><span class="hljs-comment">//遍历当前节点的所有fd</span><br><span class="hljs-keyword">for</span> (; pfd != pfd_end; pfd++) &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Fish for events. If we found one, record it</span><br><span class="hljs-comment"> * and kill poll_table-&gt;_qproc, so we don&#x27;t</span><br><span class="hljs-comment"> * needlessly register any other waiters after</span><br><span class="hljs-comment"> * this. They&#x27;ll get immediately deregistered</span><br><span class="hljs-comment"> * when we break out and return.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//(主线) 调用do_pollfd 返回触发的事件</span><br><span class="hljs-keyword">if</span> (do_pollfd(pfd, pt, &amp;can_busy_loop,busy_flag)) &#123;<br>count++;<br>pt-&gt;_qproc = <span class="hljs-literal">NULL</span>;<br><span class="hljs-comment">/* found something, stop busy polling */</span><br>busy_flag = <span class="hljs-number">0</span>;<br>can_busy_loop = <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * All waiters have already been registered, so don&#x27;t provide</span><br><span class="hljs-comment"> * a poll_table-&gt;_qproc to them on the next loop iteration.</span><br><span class="hljs-comment"> */</span><br>pt-&gt;_qproc = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">if</span> (!count) &#123;<br>count = wait-&gt;error;<br><span class="hljs-keyword">if</span> (signal_pending(current))count = -ERESTARTNOHAND;<br>&#125;<br><span class="hljs-comment">//有准备好的fd或者超时则跳出死循环</span><br><span class="hljs-keyword">if</span> (count || timed_out)<span class="hljs-keyword">break</span>;<br><br><span class="hljs-comment">/* only if found POLL_BUSY_LOOP sockets &amp;&amp; not out of time */</span><br><span class="hljs-keyword">if</span> (can_busy_loop &amp;&amp; !need_resched()) &#123;<br><span class="hljs-keyword">if</span> (!busy_start) &#123;<br>busy_start = busy_loop_current_time();<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (!busy_loop_timeout(busy_start))<br><span class="hljs-keyword">continue</span>;<br>&#125;<br>busy_flag = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * If this is the first loop and we have a timeout</span><br><span class="hljs-comment"> * given, then we convert to ktime_t and set the to</span><br><span class="hljs-comment"> * pointer to the expiry value.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (end_time &amp;&amp; !to) &#123;<br>expire = timespec64_to_ktime(*end_time);<br>to = &amp;expire;<br>&#125;<br><span class="hljs-comment">//判断是否超时</span><br><span class="hljs-keyword">if</span> (!poll_schedule_timeout(wait, TASK_INTERRUPTIBLE, to, slack))timed_out = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> count;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-1-调用-do-pollfd"><a href="#3-1-调用-do-pollfd" class="headerlink" title="3.1 调用 do_pollfd"></a>3.1 调用 do_pollfd</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 调用fd驱动函数</span><br><span class="hljs-comment"> * @param pollfd pollfd结构体</span><br><span class="hljs-comment"> * @param pwait</span><br><span class="hljs-comment"> * @param can_busy_poll</span><br><span class="hljs-comment"> * @param busy_flag</span><br><span class="hljs-comment"> * @return 返回准备好的事件</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">__poll_t</span> <span class="hljs-title function_">do_pollfd</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> pollfd *pollfd, poll_table *pwait,<span class="hljs-type">bool</span> *can_busy_poll,<span class="hljs-type">__poll_t</span> busy_flag)</span> &#123;<br><span class="hljs-comment">//文件描述符</span><br><span class="hljs-type">int</span> fd = pollfd-&gt;fd;<br><span class="hljs-type">__poll_t</span> mask = <span class="hljs-number">0</span>, filter;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fd</span> <span class="hljs-title">f</span>;</span><br><span class="hljs-comment">//fd无效直接返回</span><br><span class="hljs-keyword">if</span> (fd &lt; <span class="hljs-number">0</span>)<span class="hljs-keyword">goto</span> out;<br>mask = EPOLLNVAL;<br><span class="hljs-comment">//获取真正的文件</span><br>f = fdget(fd);<br><span class="hljs-comment">//验证文件有效性</span><br><span class="hljs-keyword">if</span> (!f.file)<span class="hljs-keyword">goto</span> out;<br><span class="hljs-comment">/* userland u16 -&gt;events contains POLL... bitmap */</span><br>filter = demangle_poll(pollfd-&gt;events) | EPOLLERR | EPOLLHUP;<br>pwait-&gt;_key = filter | busy_flag;<br><span class="hljs-comment">//(核心)调用file的驱动 vfs_poll 返回该文件已经准备好的事件</span><br>mask = vfs_poll(f.file, pwait);<br><span class="hljs-keyword">if</span> (mask &amp; busy_flag)*can_busy_poll = <span class="hljs-literal">true</span>;<br>mask &amp;= filter;<span class="hljs-comment">/* Mask out unneeded events. */</span><br>fdput(f);<br><br>out:<br><span class="hljs-comment">/* ... and so does -&gt;revents */</span><br>pollfd-&gt;revents = mangle_poll(mask);<br><span class="hljs-keyword">return</span> mask;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-poll-freewait-amp-table"><a href="#2-2-poll-freewait-amp-table" class="headerlink" title="2.2 poll_freewait(&amp;table);"></a>2.2 poll_freewait(&amp;table);</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 释放 poll_wqueues 的资源占用</span><br><span class="hljs-comment"> * @param pwq</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">poll_freewait</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> poll_wqueues *pwq)</span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poll_table_page</span> * <span class="hljs-title">p</span> =</span> pwq-&gt;table;<br><span class="hljs-type">int</span> i;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; pwq-&gt;inline_index; i++)free_poll_entry(pwq-&gt;inline_entries + i);<br><span class="hljs-keyword">while</span> (p) &#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poll_table_entry</span> * <span class="hljs-title">entry</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poll_table_page</span> *<span class="hljs-title">old</span>;</span><br><br>entry = p-&gt;entry;<br><span class="hljs-keyword">do</span> &#123;<br>entry--;<br>free_poll_entry(entry);<br>&#125; <span class="hljs-keyword">while</span> (entry &gt; p-&gt;entries);<br>old = p;<br>p = p-&gt;next;<br>free_page((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) old);<br>&#125;<br>&#125;<br>EXPORT_SYMBOL(poll_freewait);<br></code></pre></td></tr></table></figure><h3 id="流程图示-1"><a href="#流程图示-1" class="headerlink" title="流程图示"></a>流程图示</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/2630542/1661305098017-a0311ed3-7ad9-4425-a04b-cdb48b0048c5.jpeg"></p><h3 id="相关总结-1"><a href="#相关总结-1" class="headerlink" title="相关总结"></a>相关总结</h3><p>优点：</p><ul><li>和select相比能监听的fd个数更多（采用链表的方式存储）</li><li>poll 事件相比 select 的in/out/err ，明显支持的情况更多</li></ul><p>缺点：</p><ul><li>和select一样每次监听都需要不断的遍历每个fd，效率不是很高</li><li>每次调用都需要将用户态的fd复制到内核态中</li><li>每次用户进程都需要遍历fd才能知道那个准备好</li></ul><h2 id="epoll系统调用"><a href="#epoll系统调用" class="headerlink" title="epoll系统调用"></a>epoll系统调用</h2><p>epoll没有最大并发连接的限制，上限是最大可以打开文件的数目，这个数字一般远大于2048, 一般来说这个数目和系统内存关系很大，具体数目可以cat /proc/sys/fs/file-max察看。Epoll最大的优点就在于它只管你“活跃”的连接，而跟连接总数无关，因此在实际的网络环境中，Epoll的效率就会远远高于select和poll。</p><p>epoll函数</p><ul><li>do_epoll_create : 创建epoll控制块</li><li>do_epoll_ctl : 增删改操作</li><li>do_epoll_wait : 陷入内核等待</li></ul><h3 id="创建流程"><a href="#创建流程" class="headerlink" title="创建流程"></a>创建流程</h3><h4 id="1-创建epoll系统调用"><a href="#1-创建epoll系统调用" class="headerlink" title="1. 创建epoll系统调用"></a>1. 创建epoll系统调用</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * epoll系统调用</span><br><span class="hljs-comment"> */</span><br>SYSCALL_DEFINE1(epoll_create1, <span class="hljs-type">int</span>, flags)<br>&#123;<br><span class="hljs-keyword">return</span> do_epoll_create(flags);<br>&#125;<br><br>SYSCALL_DEFINE1(epoll_create, <span class="hljs-type">int</span>, size)<br>&#123;<br><span class="hljs-keyword">if</span> (size &lt;= <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> -EINVAL;<br><br><span class="hljs-keyword">return</span> do_epoll_create(<span class="hljs-number">0</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2-调用do-epoll-create创建epoll"><a href="#2-调用do-epoll-create创建epoll" class="headerlink" title="2.调用do_epoll_create创建epoll"></a>2.调用do_epoll_create创建epoll</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建epoll的fd</span><br><span class="hljs-comment"> * @param flags</span><br><span class="hljs-comment"> * @return</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">do_epoll_create</span><span class="hljs-params">(<span class="hljs-type">int</span> flags)</span> &#123;<br><span class="hljs-type">int</span> error, fd;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">eventpoll</span> *<span class="hljs-title">ep</span> =</span> <span class="hljs-literal">NULL</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> *<span class="hljs-title">file</span>;</span><br><br><span class="hljs-comment">/* Check the EPOLL_* constant for consistency.  */</span><br>BUILD_BUG_ON(EPOLL_CLOEXEC != O_CLOEXEC);<br><br><span class="hljs-keyword">if</span> (flags &amp; ~EPOLL_CLOEXEC)<span class="hljs-keyword">return</span> -EINVAL;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Create the internal data structure (&quot;struct eventpoll&quot;).</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//传入应用创建eventpoll的结构体</span><br>error = ep_alloc(&amp;ep);<br><span class="hljs-comment">//出现错误返回错误</span><br><span class="hljs-keyword">if</span> (error &lt; <span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> error;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Creates all the items needed to setup an eventpoll file. That is,</span><br><span class="hljs-comment"> * a file structure and a free file descriptor.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//创建设置eventpoll文件所需的所有项。即文件结构和自由文件描述符。</span><br>fd = get_unused_fd_flags(O_RDWR | (flags &amp; O_CLOEXEC));<br><span class="hljs-keyword">if</span> (fd &lt; <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//创建失败</span><br>error = fd;<br><span class="hljs-keyword">goto</span> out_free_ep;<br>&#125;<br><span class="hljs-comment">//创建一个名字为“[eventpoll]”的eventpollfs文件描述符</span><br>file = anon_inode_getfile(<span class="hljs-string">&quot;[eventpoll]&quot;</span>, &amp;eventpoll_fops, ep,O_RDWR | (flags &amp; O_CLOEXEC));<br><span class="hljs-keyword">if</span> (IS_ERR(file)) &#123;<br>error = PTR_ERR(file);<br><span class="hljs-keyword">goto</span> out_free_fd;<br>&#125;<br><span class="hljs-comment">//赋值个ep</span><br>ep-&gt;file = file;<br><span class="hljs-comment">//将文件加入fd数组表（绑定file和fd）</span><br>fd_install(fd, file);<br><span class="hljs-comment">//返回fd</span><br><span class="hljs-keyword">return</span> fd;<br><br>out_free_fd:<br>put_unused_fd(fd);<br>out_free_ep:<br>ep_free(ep);<br><span class="hljs-keyword">return</span> error;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-1-创建分配一个eventpoll结构体"><a href="#2-1-创建分配一个eventpoll结构体" class="headerlink" title="2.1.创建分配一个eventpoll结构体"></a>2.1.创建分配一个eventpoll结构体</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建分配一个eventpoll</span><br><span class="hljs-comment"> * @param pep</span><br><span class="hljs-comment"> * @return</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">ep_alloc</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> eventpoll **pep)</span>&#123;<br><span class="hljs-type">int</span> error;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">user_struct</span> *<span class="hljs-title">user</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">eventpoll</span> *<span class="hljs-title">ep</span>;</span><br><br>user = get_current_user();<span class="hljs-comment">//当前用户</span><br>error = -ENOMEM;<br>ep = kzalloc(<span class="hljs-keyword">sizeof</span>(*ep), GFP_KERNEL);<span class="hljs-comment">//申请内存</span><br><span class="hljs-keyword">if</span> (unlikely(!ep))<span class="hljs-keyword">goto</span> free_uid;<span class="hljs-comment">//分配失败</span><br><span class="hljs-comment">//初始化互斥锁</span><br>mutex_init(&amp;ep-&gt;mtx);<br>rwlock_init(&amp;ep-&gt;lock);<span class="hljs-comment">//初始化读写锁</span><br>init_waitqueue_head(&amp;ep-&gt;wq);<span class="hljs-comment">//初始化等待队列头</span><br>init_waitqueue_head(&amp;ep-&gt;poll_wait);<br>INIT_LIST_HEAD(&amp;ep-&gt;rdllist);<span class="hljs-comment">//初始化就绪队列</span><br>ep-&gt;rbr = RB_ROOT_CACHED;<span class="hljs-comment">//初始化红黑树</span><br>ep-&gt;ovflist = EP_UNACTIVE_PTR;<br>ep-&gt;user = user;<span class="hljs-comment">//当前用户</span><br><br>*pep = ep;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//正常返回0</span><br><span class="hljs-comment">//出现错误</span><br>free_uid:<br>free_uid(user);<br><span class="hljs-keyword">return</span> error;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="修改流程"><a href="#修改流程" class="headerlink" title="修改流程"></a>修改流程</h3><h4 id="1-修改epoll系统调用"><a href="#1-修改epoll系统调用" class="headerlink" title="1.修改epoll系统调用"></a>1.修改epoll系统调用</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 代码基于linux5-19-RC8 linux/fs/eventpoll.c</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * epoll系统调用函数 实现插入/删除/修改fd的功能</span><br><span class="hljs-comment"> */</span><br>SYSCALL_DEFINE4(epoll_ctl, <span class="hljs-type">int</span>, epfd, <span class="hljs-type">int</span>, op, <span class="hljs-type">int</span>, fd,<span class="hljs-keyword">struct</span> epoll_event __user *, event)<br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epoll_event</span> <span class="hljs-title">epds</span>;</span><br><span class="hljs-comment">//判断是否需要来自用户空间的事件副本 &amp;&amp; 拷贝事件到内核空间</span><br><span class="hljs-keyword">if</span> (ep_op_has_event(op) &amp;&amp; copy_from_user(&amp;epds, event, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> epoll_event)))<span class="hljs-keyword">return</span> -EFAULT;<br><span class="hljs-comment">//执行操作</span><br><span class="hljs-keyword">return</span> do_epoll_ctl(epfd, op, fd, &amp;epds, <span class="hljs-literal">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-1-epoll事件结构体"><a href="#1-1-epoll事件结构体" class="headerlink" title="1.1 epoll事件结构体"></a>1.1 epoll事件结构体</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * epoll事件结构体</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epoll_event</span> &#123;</span><br><span class="hljs-type">__poll_t</span> events;<span class="hljs-comment">//事件</span><br>__u64 data;<span class="hljs-comment">//数据</span><br>&#125; EPOLL_PACKED;<br></code></pre></td></tr></table></figure><h4 id="2-调用-do-epoll-ctl"><a href="#2-调用-do-epoll-ctl" class="headerlink" title="2. 调用 do_epoll_ctl"></a>2. 调用 do_epoll_ctl</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * epoll操作方法</span><br><span class="hljs-comment"> * @param epfd</span><br><span class="hljs-comment"> * @param op 操作类型 [EPOLL_CTL_ADD,EPOLL_CTL_DEL,EPOLL_CTL_MOD]</span><br><span class="hljs-comment"> * @param fd 文件描述符</span><br><span class="hljs-comment"> * @param epds epoll_event结构体</span><br><span class="hljs-comment"> * @param nonblock 是否是非阻塞</span><br><span class="hljs-comment"> * @return</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">do_epoll_ctl</span><span class="hljs-params">(<span class="hljs-type">int</span> epfd, <span class="hljs-type">int</span> op, <span class="hljs-type">int</span> fd, <span class="hljs-keyword">struct</span> epoll_event *epds,<span class="hljs-type">bool</span> nonblock)</span> &#123;<br><span class="hljs-type">int</span> error;<br><span class="hljs-type">int</span> full_check = <span class="hljs-number">0</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fd</span> <span class="hljs-title">f</span>, <span class="hljs-title">tf</span>;</span><br><span class="hljs-comment">//eventpoll结构体</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">eventpoll</span> *<span class="hljs-title">ep</span>;</span><br><span class="hljs-comment">//epitem结构体</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epitem</span> *<span class="hljs-title">epi</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">eventpoll</span> *<span class="hljs-title">tep</span> =</span> <span class="hljs-literal">NULL</span>;<br><br>error = -EBADF;<br>f = fdget(epfd);<span class="hljs-comment">//获取文件描述符</span><br><span class="hljs-keyword">if</span> (!f.file) <span class="hljs-keyword">goto</span> error_return;<br><br><span class="hljs-comment">/* Get the &quot;struct file *&quot; for the target file */</span><br><span class="hljs-comment">//目标文件</span><br>tf = fdget(fd);<br><span class="hljs-keyword">if</span> (!tf.file)<span class="hljs-keyword">goto</span> error_fput;<br><br><span class="hljs-comment">/* The target file descriptor must support poll */</span><br>error = -EPERM;<br><span class="hljs-comment">//如果文件不支持则直接退出</span><br><span class="hljs-keyword">if</span> (!file_can_poll(tf.file))<span class="hljs-keyword">goto</span> error_tgt_fput;<br><br><span class="hljs-comment">/* Check if EPOLLWAKEUP is allowed */</span><br><span class="hljs-comment">// 检查是否支持epoll唤醒</span><br><span class="hljs-keyword">if</span> (ep_op_has_event(op))ep_take_care_of_epollwakeup(epds);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * We have to check that the file structure underneath the file descriptor</span><br><span class="hljs-comment"> * the user passed to us _is_ an eventpoll file. And also we do not permit</span><br><span class="hljs-comment"> * adding an epoll file descriptor inside itself.</span><br><span class="hljs-comment"> */</span><br>error = -EINVAL;<br><span class="hljs-comment">//检查文件</span><br><span class="hljs-keyword">if</span> (f.file == tf.file || !is_file_epoll(f.file))<br><span class="hljs-keyword">goto</span> error_tgt_fput;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * epoll adds to the wakeup queue at EPOLL_CTL_ADD time only,</span><br><span class="hljs-comment"> * so EPOLLEXCLUSIVE is not allowed for a EPOLL_CTL_MOD operation.</span><br><span class="hljs-comment"> * Also, we do not currently supported nested exclusive wakeups.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (ep_op_has_event(op) &amp;&amp; (epds-&gt;events &amp; EPOLLEXCLUSIVE)) &#123;<br><span class="hljs-keyword">if</span> (op == EPOLL_CTL_MOD)<br><span class="hljs-keyword">goto</span> error_tgt_fput;<br><span class="hljs-keyword">if</span> (op == EPOLL_CTL_ADD &amp;&amp; (is_file_epoll(tf.file) ||<br>(epds-&gt;events &amp; ~EPOLLEXCLUSIVE_OK_BITS)))<br><span class="hljs-keyword">goto</span> error_tgt_fput;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * At this point it is safe to assume that the &quot;private_data&quot; contains</span><br><span class="hljs-comment"> * our own data structure.</span><br><span class="hljs-comment"> */</span><br>ep = f.file-&gt;private_data;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * When we insert an epoll file descriptor inside another epoll file</span><br><span class="hljs-comment"> * descriptor, there is the chance of creating closed loops, which are</span><br><span class="hljs-comment"> * better be handled here, than in more critical paths. While we are</span><br><span class="hljs-comment"> * checking for loops we also determine the list of files reachable</span><br><span class="hljs-comment"> * and hang them on the tfile_check_list, so we can check that we</span><br><span class="hljs-comment"> * haven&#x27;t created too many possible wakeup paths.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * We do not need to take the global &#x27;epumutex&#x27; on EPOLL_CTL_ADD when</span><br><span class="hljs-comment"> * the epoll file descriptor is attaching directly to a wakeup source,</span><br><span class="hljs-comment"> * unless the epoll file descriptor is nested. The purpose of taking the</span><br><span class="hljs-comment"> * &#x27;epmutex&#x27; on add is to prevent complex toplogies such as loops and</span><br><span class="hljs-comment"> * deep wakeup paths from forming in parallel through multiple</span><br><span class="hljs-comment"> * EPOLL_CTL_ADD operations.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//需要获取mutex对红黑树进行操作</span><br>error = epoll_mutex_lock(&amp;ep-&gt;mtx, <span class="hljs-number">0</span>, nonblock);<br><span class="hljs-keyword">if</span> (error)<br><span class="hljs-keyword">goto</span> error_tgt_fput;<br><span class="hljs-keyword">if</span> (op == EPOLL_CTL_ADD) &#123;<br><span class="hljs-keyword">if</span> (READ_ONCE(f.file-&gt;f_ep) || ep-&gt;gen == loop_check_gen ||<br>    is_file_epoll(tf.file)) &#123;<br>mutex_unlock(&amp;ep-&gt;mtx);<br>error = epoll_mutex_lock(&amp;epmutex, <span class="hljs-number">0</span>, nonblock);<br><span class="hljs-keyword">if</span> (error)<br><span class="hljs-keyword">goto</span> error_tgt_fput;<br>loop_check_gen++;<br>full_check = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (is_file_epoll(tf.file)) &#123;<br>tep = tf.file-&gt;private_data;<br>error = -ELOOP;<br><span class="hljs-keyword">if</span> (ep_loop_check(ep, tep) != <span class="hljs-number">0</span>)<br><span class="hljs-keyword">goto</span> error_tgt_fput;<br>&#125;<br>error = epoll_mutex_lock(&amp;ep-&gt;mtx, <span class="hljs-number">0</span>, nonblock);<br><span class="hljs-keyword">if</span> (error)<br><span class="hljs-keyword">goto</span> error_tgt_fput;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Try to lookup the file inside our RB tree. Since we grabbed &quot;mtx&quot;</span><br><span class="hljs-comment"> * above, we can be sure to be able to use the item looked up by</span><br><span class="hljs-comment"> * ep_find() till we release the mutex.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//从红黑树中寻找添加的fd是否存在，存在则返回到ep中，否则返回NULL</span><br>epi = ep_find(ep, tf.file, fd);<br><br>error = -EINVAL;<br><span class="hljs-keyword">switch</span> (op) &#123;<span class="hljs-comment">//区分op类型增删改</span><br><span class="hljs-keyword">case</span> EPOLL_CTL_ADD:<span class="hljs-comment">//新增</span><br><span class="hljs-comment">//查找不到则添加</span><br><span class="hljs-keyword">if</span> (!epi) &#123;<br>epds-&gt;events |= EPOLLERR | EPOLLHUP;<br>error = ep_insert(ep, epds, tf.file, fd, full_check);<span class="hljs-comment">//插入</span><br>&#125; <span class="hljs-keyword">else</span><span class="hljs-comment">//否则不重复添加</span><br>error = -EEXIST;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> EPOLL_CTL_DEL:<span class="hljs-comment">//删除</span><br><span class="hljs-keyword">if</span> (epi)<br>error = ep_remove(ep, epi);<span class="hljs-comment">//删除</span><br><span class="hljs-keyword">else</span><br>error = -ENOENT;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> EPOLL_CTL_MOD:<span class="hljs-comment">//修改</span><br><span class="hljs-keyword">if</span> (epi) &#123;<br><span class="hljs-keyword">if</span> (!(epi-&gt;event.events &amp; EPOLLEXCLUSIVE)) &#123;<br>epds-&gt;events |= EPOLLERR | EPOLLHUP;<br>error = ep_modify(ep, epi, epds);<br>&#125;<br>&#125; <span class="hljs-keyword">else</span><br>error = -ENOENT;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>mutex_unlock(&amp;ep-&gt;mtx);<br><br>error_tgt_fput:<br><span class="hljs-keyword">if</span> (full_check) &#123;<br>clear_tfile_check_list();<br>loop_check_gen++;<br>mutex_unlock(&amp;epmutex);<br>&#125;<br><br>fdput(tf);<br>error_fput:<br>fdput(f);<br>error_return:<br><br><span class="hljs-keyword">return</span> error;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-1-结构体eventpoll控制块"><a href="#2-1-结构体eventpoll控制块" class="headerlink" title="2.1 结构体eventpoll控制块"></a>2.1 结构体eventpoll控制块</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">eventpoll</span> &#123;</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * This mutex is used to ensure that files are not removed</span><br><span class="hljs-comment"> * while epoll is using them. This is held during the event</span><br><span class="hljs-comment"> * collection loop, the file cleanup path, the epoll file exit</span><br><span class="hljs-comment"> * code and the ctl operations.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mutex</span> <span class="hljs-title">mtx</span>;</span><br><br><span class="hljs-comment">/* Wait queue used by sys_epoll_wait() */</span><br><span class="hljs-type">wait_queue_head_t</span> wq;<span class="hljs-comment">//调用进程等待队列</span><br><br><span class="hljs-comment">/* Wait queue used by file-&gt;poll() */</span><br><span class="hljs-type">wait_queue_head_t</span> poll_wait;<span class="hljs-comment">//等待队列队头（如果被监听的文件是一个epoll类型）</span><br><br><span class="hljs-comment">/* List of ready file descriptors */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">rdllist</span>;</span><span class="hljs-comment">//已经准备好的文件描述符队列队头（双向链表）</span><br><br><span class="hljs-comment">/* Lock which protects rdllist and ovflist */</span><br><span class="hljs-type">rwlock_t</span> lock;<span class="hljs-comment">//读写锁</span><br><br><span class="hljs-comment">/* RB tree root used to store monitored fd structs */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_root_cached</span> <span class="hljs-title">rbr</span>;</span><span class="hljs-comment">//红黑树root节点（存储epitem）</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * This is a single linked list that chains all the &quot;struct epitem&quot; that</span><br><span class="hljs-comment"> * happened while transferring ready events to userspace w/out</span><br><span class="hljs-comment"> * holding -&gt;lock.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epitem</span> *<span class="hljs-title">ovflist</span>;</span><span class="hljs-comment">//</span><br><br><span class="hljs-comment">/* wakeup_source used when ep_scan_ready_list is running */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">wakeup_source</span> *<span class="hljs-title">ws</span>;</span><br><br><span class="hljs-comment">/* The user that created the eventpoll descriptor */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">user_struct</span> *<span class="hljs-title">user</span>;</span><span class="hljs-comment">//当前进程用户</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> *<span class="hljs-title">file</span>;</span><span class="hljs-comment">//真正的文件</span><br><br><span class="hljs-comment">/* used to optimize loop detection check */</span><br>u64 gen;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hlist_head</span> <span class="hljs-title">refs</span>;</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_NET_RX_BUSY_POLL</span><br><span class="hljs-comment">/* used to track busy poll napi_id */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> napi_id;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_DEBUG_LOCK_ALLOC</span><br><span class="hljs-comment">/* tracks wakeup nests for lockdep validation */</span><br>u8 nests;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;;<br><br></code></pre></td></tr></table></figure><h4 id="2-2-结构体epitem红黑树节点"><a href="#2-2-结构体epitem红黑树节点" class="headerlink" title="2.2 结构体epitem红黑树节点"></a>2.2 结构体epitem红黑树节点</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epitem</span> &#123;</span><br>    <br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br><span class="hljs-comment">/* RB tree node links this structure to the eventpoll RB tree */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_node</span> <span class="hljs-title">rbn</span>;</span><span class="hljs-comment">//指向红黑树的节点</span><br><span class="hljs-comment">/* Used to free the struct epitem */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rcu_head</span> <span class="hljs-title">rcu</span>;</span><br>&#125;;<br><br><span class="hljs-comment">/* List header used to link this structure to the eventpoll ready list */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">rdllink</span>;</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Works together &quot;struct eventpoll&quot;-&gt;ovflist in keeping the</span><br><span class="hljs-comment"> * single linked chain of items.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epitem</span> *<span class="hljs-title">next</span>;</span><span class="hljs-comment">//</span><br><br><span class="hljs-comment">/* The file descriptor information this item refers to */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epoll_filefd</span> <span class="hljs-title">ffd</span>;</span><span class="hljs-comment">//文件fd</span><br><br><span class="hljs-comment">/* List containing poll wait queues */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">eppoll_entry</span> *<span class="hljs-title">pwqlist</span>;</span><span class="hljs-comment">//等待队列</span><br><br><span class="hljs-comment">/* The &quot;container&quot; of this item */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">eventpoll</span> *<span class="hljs-title">ep</span>;</span><span class="hljs-comment">//指向eventpoll控制块</span><br><br><span class="hljs-comment">/* List header used to link this item to the &quot;struct file&quot; items list */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hlist_node</span> <span class="hljs-title">fllink</span>;</span><br><br><span class="hljs-comment">/* wakeup_source used when EPOLLWAKEUP is set */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">wakeup_source</span> __<span class="hljs-title">rcu</span> *<span class="hljs-title">ws</span>;</span><br><br><span class="hljs-comment">/* The structure that describe the interested events and the source fd */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epoll_event</span> <span class="hljs-title">event</span>;</span><span class="hljs-comment">//事件</span><br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="2-3-红黑树查找对应的fd的epitem"><a href="#2-3-红黑树查找对应的fd的epitem" class="headerlink" title="2.3 红黑树查找对应的fd的epitem"></a>2.3 红黑树查找对应的fd的epitem</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 红黑树查找对应的fd的epitem</span><br><span class="hljs-comment"> * @param ep</span><br><span class="hljs-comment"> * @param file</span><br><span class="hljs-comment"> * @param fd</span><br><span class="hljs-comment"> * @return</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-keyword">struct</span> epitem *<span class="hljs-title function_">ep_find</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> eventpoll *ep, <span class="hljs-keyword">struct</span> file *file, <span class="hljs-type">int</span> fd)</span>&#123;<br><span class="hljs-type">int</span> kcmp;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_node</span> *<span class="hljs-title">rbp</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epitem</span> *<span class="hljs-title">epi</span>, *<span class="hljs-title">epir</span> =</span> <span class="hljs-literal">NULL</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epoll_filefd</span> <span class="hljs-title">ffd</span>;</span><br><br>ep_set_ffd(&amp;ffd, file, fd);<span class="hljs-comment">//初始化指针</span><br><span class="hljs-comment">//二分搜索</span><br><span class="hljs-keyword">for</span> (rbp = ep-&gt;rbr.rb_root.rb_node; rbp; ) &#123;<br>epi = rb_entry(rbp, <span class="hljs-keyword">struct</span> epitem, rbn);<br>kcmp = ep_cmp_ffd(&amp;ffd, &amp;epi-&gt;ffd);<br><span class="hljs-keyword">if</span> (kcmp &gt; <span class="hljs-number">0</span>)<br>rbp = rbp-&gt;rb_right;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (kcmp &lt; <span class="hljs-number">0</span>)<br>rbp = rbp-&gt;rb_left;<br><span class="hljs-keyword">else</span> &#123;<br>epir = epi;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> epir;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h3><h4 id="1-调用ep-insert插入"><a href="#1-调用ep-insert插入" class="headerlink" title="1.调用ep_insert插入"></a>1.调用ep_insert插入</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 插入操作（必须在持有“mtx”的情况下调用）</span><br><span class="hljs-comment"> * @param ep 控制块</span><br><span class="hljs-comment"> * @param event</span><br><span class="hljs-comment"> * @param tfile</span><br><span class="hljs-comment"> * @param fd</span><br><span class="hljs-comment"> * @param full_check</span><br><span class="hljs-comment"> * @return</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">ep_insert</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> eventpoll *ep, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> epoll_event *event,<span class="hljs-keyword">struct</span> file *tfile, <span class="hljs-type">int</span> fd, <span class="hljs-type">int</span> full_check)</span><br>&#123;<br><span class="hljs-type">int</span> error, pwake = <span class="hljs-number">0</span>;<br><span class="hljs-type">__poll_t</span> revents;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epitem</span> *<span class="hljs-title">epi</span>;</span><span class="hljs-comment">//红黑树节点结构体</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ep_pqueue</span> <span class="hljs-title">epq</span>;</span><span class="hljs-comment">//epoll队列</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">eventpoll</span> *<span class="hljs-title">tep</span> =</span> <span class="hljs-literal">NULL</span>;<br><span class="hljs-comment">//判断是否是epoll文件</span><br><span class="hljs-keyword">if</span> (is_file_epoll(tfile))tep = tfile-&gt;private_data;<br><br>lockdep_assert_irqs_enabled();<br><span class="hljs-comment">//epoll可监控的最大值</span><br><span class="hljs-comment">//unsigned int sysctl_nr_open __read_mostly = 1024*1024;</span><br><span class="hljs-keyword">if</span> (unlikely(percpu_counter_compare(&amp;ep-&gt;user-&gt;epoll_watches,max_user_watches) &gt;= <span class="hljs-number">0</span>))<span class="hljs-keyword">return</span> -ENOSPC;<br><span class="hljs-comment">//增加cpu计数</span><br>percpu_counter_inc(&amp;ep-&gt;user-&gt;epoll_watches);<br><span class="hljs-comment">//从缓存中申请内存,申请失败减掉计数</span><br><span class="hljs-comment">//epi_cache内存池在epoll模块初始化时已经分配,这里根据slab直接取一个epitem</span><br><span class="hljs-keyword">if</span> (!(epi = kmem_cache_zalloc(epi_cache, GFP_KERNEL))) &#123;<br>percpu_counter_dec(&amp;ep-&gt;user-&gt;epoll_watches);<br><span class="hljs-keyword">return</span> -ENOMEM;<br>&#125;<br><span class="hljs-comment">//初始化工作 epitem</span><br><span class="hljs-comment">/* Item initialization follow here ... */</span><br>INIT_LIST_HEAD(&amp;epi-&gt;rdllink);<br>epi-&gt;ep = ep;<span class="hljs-comment">//设置指向ep的指针</span><br>ep_set_ffd(&amp;epi-&gt;ffd, tfile, fd);<span class="hljs-comment">//设置ffd</span><br>epi-&gt;event = *event;<span class="hljs-comment">//设置监听的事件</span><br>epi-&gt;next = EP_UNACTIVE_PTR;<br><span class="hljs-comment">//加锁</span><br><span class="hljs-keyword">if</span> (tep)mutex_lock_nested(&amp;tep-&gt;mtx, <span class="hljs-number">1</span>);<br><span class="hljs-comment">/* Add the current item to the list of active epoll hook for this file */</span><br><span class="hljs-comment">//将当前项添加到此文件的活动epoll钩子列表</span><br><span class="hljs-keyword">if</span> (unlikely(attach_epitem(tfile, epi) &lt; <span class="hljs-number">0</span>)) &#123;<br><span class="hljs-keyword">if</span> (tep)mutex_unlock(&amp;tep-&gt;mtx);<br>kmem_cache_free(epi_cache, epi);<br>percpu_counter_dec(&amp;ep-&gt;user-&gt;epoll_watches);<br><span class="hljs-keyword">return</span> -ENOMEM;<br>&#125;<br><br><span class="hljs-keyword">if</span> (full_check &amp;&amp; !tep)list_file(tfile);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Add the current item to the RB tree. All RB tree operations are</span><br><span class="hljs-comment"> * protected by &quot;mtx&quot;, and ep_insert() is called with &quot;mtx&quot; held.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//插入到红黑树中</span><br>ep_rbtree_insert(ep, epi);<br><span class="hljs-keyword">if</span> (tep)mutex_unlock(&amp;tep-&gt;mtx);<br><br><span class="hljs-comment">/* now check if we&#x27;ve created too many backpaths */</span><br><span class="hljs-keyword">if</span> (unlikely(full_check &amp;&amp; reverse_path_check())) &#123;<br>ep_remove(ep, epi);<br><span class="hljs-keyword">return</span> -EINVAL;<br>&#125;<br><span class="hljs-comment">//如果events里设置了EPOLLWAKEUP, 还需要为autosleep创建一个唤醒源 ep_create_wakeup_source</span><br><span class="hljs-keyword">if</span> (epi-&gt;event.events &amp; EPOLLWAKEUP) &#123;<br>error = ep_create_wakeup_source(epi);<br><span class="hljs-keyword">if</span> (error) &#123;<br>ep_remove(ep, epi);<br><span class="hljs-keyword">return</span> error;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/* Initialize the poll table using the queue callback */</span><br><span class="hljs-comment">//初始化</span><br>epq.epi = epi;<br><br><span class="hljs-comment">/* 设置epq的回调函数为ep_ptable_queue_proc,当调用poll_wait时会调用该回调函数，</span><br><span class="hljs-comment">      * 而函数体ep_ptable_queue_proc内部所做的主要工作,</span><br><span class="hljs-comment">      * 就是把epitem对应fd的事件到来时的回调函数设置为ep_poll_callback。</span><br><span class="hljs-comment">      * ep_poll_callback所做的主要工作就是把就绪的fd放到就绪链表rdllist上,</span><br><span class="hljs-comment">      * 然后唤醒epoll_wait的调用者, 被唤醒的进程再把rdllist上就绪的fd的events拷贝给用户进程,</span><br><span class="hljs-comment">      * 完成一个闭环。</span><br><span class="hljs-comment">     */</span><br>init_poll_funcptr(&amp;epq.pt, ep_ptable_queue_proc);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Attach the item to the poll hooks and get current event bits.</span><br><span class="hljs-comment"> * We can safely use the file* here because its usage count has</span><br><span class="hljs-comment"> * been increased by the caller of this function. Note that after</span><br><span class="hljs-comment"> * this operation completes, the poll callback can start hitting</span><br><span class="hljs-comment"> * the new item.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//如果当前监听的事件刚好发生，则直接返回</span><br>revents = ep_item_poll(epi, &amp;epq.pt, <span class="hljs-number">1</span>);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * We have to check if something went wrong during the poll wait queue</span><br><span class="hljs-comment"> * install process. Namely an allocation for a wait queue failed due</span><br><span class="hljs-comment"> * high memory pressure.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (unlikely(!epq.epi)) &#123;<br>ep_remove(ep, epi);<br><span class="hljs-keyword">return</span> -ENOMEM;<br>&#125;<br><br><span class="hljs-comment">/* We have to drop the new item inside our item list to keep track of it */</span><br>write_lock_irq(&amp;ep-&gt;lock);<br><br><span class="hljs-comment">/* record NAPI ID of new item if present */</span><br>ep_set_busy_poll_napi_id(epi);<br><br><span class="hljs-comment">/* If the file is already &quot;ready&quot; we drop it inside the ready list */</span><br><span class="hljs-comment">//如果当前的epi已经就绪了，上面的revents返回就绪的事件，则把其加入就绪列表rdllink</span><br><span class="hljs-keyword">if</span> (revents &amp;&amp; !ep_is_linked(epi)) &#123;<br><span class="hljs-comment">//加入就序列表尾部</span><br>list_add_tail(&amp;epi-&gt;rdllink, &amp;ep-&gt;rdllist);<br>ep_pm_stay_awake(epi);<br><span class="hljs-comment">/* Notify waiting tasks that events are available */</span><br><span class="hljs-comment">//主动唤醒通知等待任务事件可用</span><br><span class="hljs-keyword">if</span> (waitqueue_active(&amp;ep-&gt;wq))wake_up(&amp;ep-&gt;wq);<br><span class="hljs-keyword">if</span> (waitqueue_active(&amp;ep-&gt;poll_wait))pwake++;<br>&#125;<br><span class="hljs-comment">//释放ep的锁</span><br>write_unlock_irq(&amp;ep-&gt;lock);<br><br><span class="hljs-comment">/* We have to call this outside the lock */</span><br><span class="hljs-keyword">if</span> (pwake)ep_poll_safewake(ep, <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2-插入节点到红黑树"><a href="#2-插入节点到红黑树" class="headerlink" title="2.插入节点到红黑树"></a>2.插入节点到红黑树</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 插入epi到红黑树中</span><br><span class="hljs-comment"> * @param ep eventpoll控制块</span><br><span class="hljs-comment"> * @param epi 插入的节点</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ep_rbtree_insert</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> eventpoll *ep, <span class="hljs-keyword">struct</span> epitem *epi)</span><br>&#123;<br><span class="hljs-type">int</span> kcmp;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_node</span> **<span class="hljs-title">p</span> =</span> &amp;ep-&gt;rbr.rb_root.rb_node, *parent = <span class="hljs-literal">NULL</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epitem</span> *<span class="hljs-title">epic</span>;</span><br><span class="hljs-type">bool</span> leftmost = <span class="hljs-literal">true</span>;<br><br><span class="hljs-keyword">while</span> (*p) &#123;<br>parent = *p;<br>epic = rb_entry(parent, <span class="hljs-keyword">struct</span> epitem, rbn);<br>kcmp = ep_cmp_ffd(&amp;epi-&gt;ffd, &amp;epic-&gt;ffd);<br><span class="hljs-keyword">if</span> (kcmp &gt; <span class="hljs-number">0</span>) &#123;<br>p = &amp;parent-&gt;rb_right;<br>leftmost = <span class="hljs-literal">false</span>;<br>&#125; <span class="hljs-keyword">else</span><br>p = &amp;parent-&gt;rb_left;<br>&#125;<br><span class="hljs-comment">//通过rbn关联（注意实际上插入红黑树的是rbn,通过其进行关联epitem）</span><br>rb_link_node(&amp;epi-&gt;rbn, parent, p);<br>rb_insert_color_cached(&amp;epi-&gt;rbn, &amp;ep-&gt;rbr, leftmost);<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 红黑树的插入操作</span><br><span class="hljs-comment"> * @param node </span><br><span class="hljs-comment"> * @param parent </span><br><span class="hljs-comment"> * @param rb_link </span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">rb_link_node</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> rb_node *node, <span class="hljs-keyword">struct</span> rb_node *parent,<span class="hljs-keyword">struct</span> rb_node **rb_link)</span><br>&#123;<br>node-&gt;__rb_parent_color = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)parent;<span class="hljs-comment">//父节点颜色</span><br>node-&gt;rb_left = node-&gt;rb_right = <span class="hljs-literal">NULL</span>;<span class="hljs-comment">//设置其左右节点为NULL</span><br>*rb_link = node;<span class="hljs-comment">//将rb_link指针指向node</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-1查找到对应插入的位置"><a href="#2-1查找到对应插入的位置" class="headerlink" title="2.1查找到对应插入的位置"></a>2.1查找到对应插入的位置</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 插入epi到红黑树中</span><br><span class="hljs-comment"> * @param ep eventpoll控制块</span><br><span class="hljs-comment"> * @param epi 插入的节点</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ep_rbtree_insert</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> eventpoll *ep, <span class="hljs-keyword">struct</span> epitem *epi)</span><br>&#123;<br><span class="hljs-type">int</span> kcmp;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_node</span> **<span class="hljs-title">p</span> =</span> &amp;ep-&gt;rbr.rb_root.rb_node, *parent = <span class="hljs-literal">NULL</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epitem</span> *<span class="hljs-title">epic</span>;</span><br><span class="hljs-type">bool</span> leftmost = <span class="hljs-literal">true</span>;<br><br><span class="hljs-keyword">while</span> (*p) &#123;<br>parent = *p;<br>epic = rb_entry(parent, <span class="hljs-keyword">struct</span> epitem, rbn);<br>kcmp = ep_cmp_ffd(&amp;epi-&gt;ffd, &amp;epic-&gt;ffd);<br><span class="hljs-keyword">if</span> (kcmp &gt; <span class="hljs-number">0</span>) &#123;<br>p = &amp;parent-&gt;rb_right;<br>leftmost = <span class="hljs-literal">false</span>;<br>&#125; <span class="hljs-keyword">else</span><br>p = &amp;parent-&gt;rb_left;<br>&#125;<br><span class="hljs-comment">//通过rbn关联</span><br>rb_link_node(&amp;epi-&gt;rbn, parent, p);<br>rb_insert_color_cached(&amp;epi-&gt;rbn, &amp;ep-&gt;rbr, leftmost);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-插入节点"><a href="#2-2-插入节点" class="headerlink" title="2.2 插入节点"></a>2.2 插入节点</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">rb_link_node</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> rb_node *node, <span class="hljs-keyword">struct</span> rb_node *parent,<span class="hljs-keyword">struct</span> rb_node **rb_link)</span><br>&#123;<br>node-&gt;__rb_parent_color = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)parent;<br>node-&gt;rb_left = node-&gt;rb_right = <span class="hljs-literal">NULL</span>;<br>*rb_link = node;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-初始化poll回调函数指针"><a href="#3-初始化poll回调函数指针" class="headerlink" title="3.初始化poll回调函数指针"></a>3.初始化poll回调函数指针</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 初始化</span><br><span class="hljs-comment"> * @param pt</span><br><span class="hljs-comment"> * @param qproc</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">init_poll_funcptr</span><span class="hljs-params">(poll_table *pt, poll_queue_proc qproc)</span><br>&#123;<br><span class="hljs-comment">//pt是poll_table_struct结构体类型，设置其回调函数</span><br>pt-&gt;_qproc = qproc;<br><span class="hljs-comment">//默认监听所有事件</span><br>pt-&gt;_key   = ~(<span class="hljs-type">__poll_t</span>)<span class="hljs-number">0</span>; <span class="hljs-comment">/* all events enabled */</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-1-结构体poll-table-struct"><a href="#3-1-结构体poll-table-struct" class="headerlink" title="3.1 结构体poll_table_struct"></a>3.1 结构体poll_table_struct</h4><blockquote><p>存储回调函数和监听的事件类型</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poll_table_struct</span> &#123;</span><br>poll_queue_proc _qproc;<br><span class="hljs-type">__poll_t</span> _key;<br>&#125; poll_table;<br></code></pre></td></tr></table></figure><h4 id="3-2-唤醒时回调的函数"><a href="#3-2-唤醒时回调的函数" class="headerlink" title="3.2 唤醒时回调的函数"></a>3.2 唤醒时回调的函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ep_ptable_queue_proc</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *file, <span class="hljs-type">wait_queue_head_t</span> *whead,poll_table *pt)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ep_pqueue</span> *<span class="hljs-title">epq</span> =</span> container_of(pt, <span class="hljs-keyword">struct</span> ep_pqueue, pt);<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epitem</span> *<span class="hljs-title">epi</span> =</span> epq-&gt;epi;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">eppoll_entry</span> *<span class="hljs-title">pwq</span>;</span><span class="hljs-comment">//结构体见3.3</span><br><br><span class="hljs-keyword">if</span> (unlikely(!epi))<span class="hljs-comment">// an earlier allocation has failed</span><br><span class="hljs-keyword">return</span>;<br><br>pwq = kmem_cache_alloc(pwq_cache, GFP_KERNEL);<br><span class="hljs-keyword">if</span> (unlikely(!pwq)) &#123;<br>epq-&gt;epi = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">//初始化等待队列，当唤醒时调用ep_poll_callback</span><br>init_waitqueue_func_entry(&amp;pwq-&gt;wait, ep_poll_callback);<br>pwq-&gt;whead = whead;<br>pwq-&gt;base = epi;<br><span class="hljs-keyword">if</span> (epi-&gt;event.events &amp; EPOLLEXCLUSIVE)add_wait_queue_exclusive(whead, &amp;pwq-&gt;wait);<br><span class="hljs-keyword">else</span> add_wait_queue(whead, &amp;pwq-&gt;wait);<br>pwq-&gt;next = epi-&gt;pwqlist;<br>epi-&gt;pwqlist = pwq;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-结构体-eppoll-entry"><a href="#3-3-结构体-eppoll-entry" class="headerlink" title="3.3 结构体 eppoll_entry"></a>3.3 结构体 eppoll_entry</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Wait structure used by the poll hooks */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">eppoll_entry</span> &#123;</span><br><span class="hljs-comment">/* List header used to link this structure to the &quot;struct epitem&quot; */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">eppoll_entry</span> *<span class="hljs-title">next</span>;</span><br><span class="hljs-comment">/* The &quot;base&quot; pointer is set to the container &quot;struct epitem&quot; */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epitem</span> *<span class="hljs-title">base</span>;</span><br><span class="hljs-comment">/* Wait queue item that will be linked to the target file wait queue head.*/</span><br><span class="hljs-type">wait_queue_entry_t</span> wait;<br><span class="hljs-comment">/* The wait queue head that linked the &quot;wait&quot; wait queue item */</span><br><span class="hljs-type">wait_queue_head_t</span> *whead;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="3-4-回调函数ep-poll-callback"><a href="#3-4-回调函数ep-poll-callback" class="headerlink" title="3.4 回调函数ep_poll_callback"></a>3.4 回调函数ep_poll_callback</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * epoll回调函数主要的功能是将被监视文件的等待事件就绪时，</span><br><span class="hljs-comment"> * 将文件对应的epitem实例添加到就绪队列中，当用户调用epoll_wait()时，</span><br><span class="hljs-comment"> * 内核会将就绪队列中的事件报告给用户</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * @param wait</span><br><span class="hljs-comment"> * @param mode</span><br><span class="hljs-comment"> * @param sync</span><br><span class="hljs-comment"> * @param key</span><br><span class="hljs-comment"> * @return</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">ep_poll_callback</span><span class="hljs-params">(<span class="hljs-type">wait_queue_entry_t</span> *wait, <span class="hljs-type">unsigned</span> mode, <span class="hljs-type">int</span> sync, <span class="hljs-type">void</span> *key)</span><br>&#123;<br><span class="hljs-type">int</span> pwake = <span class="hljs-number">0</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epitem</span> *<span class="hljs-title">epi</span> =</span> ep_item_from_wait(wait);<span class="hljs-comment">//从等待队列指针获取“struct epitem”</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">eventpoll</span> *<span class="hljs-title">ep</span> =</span> epi-&gt;ep;<span class="hljs-comment">//ep控制块</span><br><span class="hljs-type">__poll_t</span> pollflags = key_to_poll(key);<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> flags;<br><span class="hljs-type">int</span> ewake = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//获取读锁</span><br>read_lock_irqsave(&amp;ep-&gt;lock, flags);<br><br>ep_set_busy_poll_napi_id(epi);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * If the event mask does not contain any poll(2) event, we consider the</span><br><span class="hljs-comment"> * descriptor to be disabled. This condition is likely the effect of the</span><br><span class="hljs-comment"> * EPOLLONESHOT bit that disables the descriptor when an event is received,</span><br><span class="hljs-comment"> * until the next EPOLL_CTL_MOD will be issued.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//如果当前epitem不感兴趣任何事件则直接跳出</span><br><span class="hljs-keyword">if</span> (!(epi-&gt;event.events &amp; ~EP_PRIVATE_BITS))<br><span class="hljs-keyword">goto</span> out_unlock;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Check the events coming with the callback. At this stage, not</span><br><span class="hljs-comment"> * every device reports the events in the &quot;key&quot; parameter of the</span><br><span class="hljs-comment"> * callback. We need to be able to handle both cases here, hence the</span><br><span class="hljs-comment"> * test for &quot;key&quot; != NULL before the event match test.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (pollflags &amp;&amp; !(pollflags &amp; epi-&gt;event.events))<br><span class="hljs-keyword">goto</span> out_unlock;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * If we are transferring events to userspace, we can hold no locks</span><br><span class="hljs-comment"> * (because we&#x27;re accessing user memory, and because of linux f_op-&gt;poll()</span><br><span class="hljs-comment"> * semantics). All the events that happen during that period of time are</span><br><span class="hljs-comment"> * chained in ep-&gt;ovflist and requeued later on.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">// ovflist默认值是EP_UNACTIVE_PTR，epoll_wait()遍历rdllist之前会把ovflist设置为NULL，</span><br><span class="hljs-comment">// 遍历完再恢复为EP_UNACTIVE_PTR，因此通过判断ovflist的值是不是EP_UNACTIVE_PTR可知此时rdllist是不是正在被访问。</span><br><span class="hljs-keyword">if</span> (READ_ONCE(ep-&gt;ovflist) != EP_UNACTIVE_PTR) &#123;<br><span class="hljs-keyword">if</span> (chain_epi_lockless(epi))ep_pm_stay_awake_rcu(epi);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!ep_is_linked(epi)) &#123;<br><span class="hljs-comment">/* In the usual case, add event to ready list. */</span><br><span class="hljs-comment">//将事件添加到就绪列表</span><br><span class="hljs-keyword">if</span> (list_add_tail_lockless(&amp;epi-&gt;rdllink, &amp;ep-&gt;rdllist))ep_pm_stay_awake_rcu(epi);<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Wake up ( if active ) both the eventpoll wait list and the -&gt;poll()</span><br><span class="hljs-comment"> * wait list.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//如果等待队列不为空，则将他们进行唤醒</span><br><span class="hljs-keyword">if</span> (waitqueue_active(&amp;ep-&gt;wq)) &#123;<br><span class="hljs-keyword">if</span> ((epi-&gt;event.events &amp; EPOLLEXCLUSIVE) &amp;&amp;<br>!(pollflags &amp; POLLFREE)) &#123;<br><span class="hljs-keyword">switch</span> (pollflags &amp; EPOLLINOUT_BITS) &#123;<br><span class="hljs-keyword">case</span> EPOLLIN:<br><span class="hljs-keyword">if</span> (epi-&gt;event.events &amp; EPOLLIN)<br>ewake = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> EPOLLOUT:<br><span class="hljs-keyword">if</span> (epi-&gt;event.events &amp; EPOLLOUT)<br>ewake = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>ewake = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">//唤醒等待的进程</span><br>wake_up(&amp;ep-&gt;wq);<br>&#125;<br><span class="hljs-keyword">if</span> (waitqueue_active(&amp;ep-&gt;poll_wait))<br>pwake++;<br><br>out_unlock:<br>read_unlock_irqrestore(&amp;ep-&gt;lock, flags);<br><br><span class="hljs-comment">/* We have to call this outside the lock */</span><br><span class="hljs-keyword">if</span> (pwake)<br>ep_poll_safewake(ep, epi);<br><br><span class="hljs-keyword">if</span> (!(epi-&gt;event.events &amp; EPOLLEXCLUSIVE))<br>ewake = <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">if</span> (pollflags &amp; POLLFREE) &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * If we race with ep_remove_wait_queue() it can miss</span><br><span class="hljs-comment"> * -&gt;whead = NULL and do another remove_wait_queue() after</span><br><span class="hljs-comment"> * us, so we can&#x27;t use __remove_wait_queue().</span><br><span class="hljs-comment"> */</span><br>list_del_init(&amp;wait-&gt;entry);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * -&gt;whead != NULL protects us from the race with ep_free()</span><br><span class="hljs-comment"> * or ep_remove(), ep_remove_wait_queue() takes whead-&gt;lock</span><br><span class="hljs-comment"> * held by the caller. Once we nullify it, nothing protects</span><br><span class="hljs-comment"> * ep/epi or even wait.</span><br><span class="hljs-comment"> */</span><br>smp_store_release(&amp;ep_pwq_from_wait(wait)-&gt;whead, <span class="hljs-literal">NULL</span>);<br>&#125;<br><br><span class="hljs-keyword">return</span> ewake;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-调用ep-item-poll函数"><a href="#4-调用ep-item-poll函数" class="headerlink" title="4.调用ep_item_poll函数"></a>4.调用ep_item_poll函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 核心调用</span><br><span class="hljs-comment"> * @param epi epitem 节点</span><br><span class="hljs-comment"> * @param pt poll_table </span><br><span class="hljs-comment"> * @param depth</span><br><span class="hljs-comment"> * @return</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">__poll_t</span> <span class="hljs-title function_">ep_item_poll</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> epitem *epi, poll_table *pt, <span class="hljs-type">int</span> depth)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> *<span class="hljs-title">file</span> =</span> epi-&gt;ffd.file;<br><span class="hljs-type">__poll_t</span> res;<br><br>pt-&gt;_key = epi-&gt;event.events;<br><span class="hljs-keyword">if</span> (!is_file_epoll(file))<span class="hljs-comment">//不支持epoll则调用poll</span><br>res = vfs_poll(file, pt);<br><span class="hljs-keyword">else</span><span class="hljs-comment">//（主线）否则调用epoll</span><br>res = __ep_eventpoll_poll(file, pt, depth);<br><span class="hljs-keyword">return</span> res &amp; epi-&gt;event.events;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-1-调用-ep-eventpoll-poll"><a href="#4-1-调用-ep-eventpoll-poll" class="headerlink" title="4.1 调用 __ep_eventpoll_poll"></a>4.1 调用 __ep_eventpoll_poll</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 主线</span><br><span class="hljs-comment"> * @param file 文件</span><br><span class="hljs-comment"> * @param wait poll_table</span><br><span class="hljs-comment"> * @param depth</span><br><span class="hljs-comment"> * @return</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">__poll_t</span> __ep_eventpoll_poll(<span class="hljs-keyword">struct</span> file *file, poll_table *wait, <span class="hljs-type">int</span> depth)<br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">eventpoll</span> *<span class="hljs-title">ep</span> =</span> file-&gt;private_data;<span class="hljs-comment">//获取ep控制块</span><br>LIST_HEAD(txlist);<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epitem</span> *<span class="hljs-title">epi</span>, *<span class="hljs-title">tmp</span>;</span><br>poll_table pt;<br><span class="hljs-type">__poll_t</span> res = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//重置回调函数为NULL</span><br>init_poll_funcptr(&amp;pt, <span class="hljs-literal">NULL</span>);<br><span class="hljs-comment">/* Insert inside our poll wait queue */</span><br><span class="hljs-comment">//主线</span><br>poll_wait(file, &amp;ep-&gt;poll_wait, wait);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Proceed to find out if wanted events are really available inside</span><br><span class="hljs-comment"> * the ready list.</span><br><span class="hljs-comment"> */</span><br>mutex_lock_nested(&amp;ep-&gt;mtx, depth);<br><span class="hljs-comment">//</span><br>ep_start_scan(ep, &amp;txlist);<br>list_for_each_entry_safe(epi, tmp, &amp;txlist, rdllink) &#123;<br><span class="hljs-keyword">if</span> (ep_item_poll(epi, &amp;pt, depth + <span class="hljs-number">1</span>)) &#123;<br>res = EPOLLIN | EPOLLRDNORM;<br><span class="hljs-keyword">break</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Item has been dropped into the ready list by the poll</span><br><span class="hljs-comment"> * callback, but it&#x27;s not actually ready, as far as</span><br><span class="hljs-comment"> * caller requested events goes. We can remove it here.</span><br><span class="hljs-comment"> */</span><br>__pm_relax(ep_wakeup_source(epi));<br>list_del_init(&amp;epi-&gt;rdllink);<br>&#125;<br>&#125;<br>ep_done_scan(ep, &amp;txlist);<br>mutex_unlock(&amp;ep-&gt;mtx);<br><span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2-调用poll-wait函数触发回调"><a href="#4-2-调用poll-wait函数触发回调" class="headerlink" title="4.2 调用poll_wait函数触发回调"></a>4.2 调用poll_wait函数触发回调</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 调用回调函数</span><br><span class="hljs-comment"> * @param filp</span><br><span class="hljs-comment"> * @param wait_address</span><br><span class="hljs-comment"> * @param p</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">poll_wait</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file * filp, <span class="hljs-type">wait_queue_head_t</span> * wait_address, poll_table *p)</span><br>&#123;<br><span class="hljs-keyword">if</span> (p &amp;&amp; p-&gt;_qproc &amp;&amp; wait_address)<br>        <span class="hljs-comment">//调用init_poll_funcptr设置的回调函数</span><br>p-&gt;_qproc(filp, wait_address, p);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><h4 id="1-调用ep-remove删除"><a href="#1-调用ep-remove删除" class="headerlink" title="1. 调用ep_remove删除"></a>1. 调用ep_remove删除</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 移除 epitem 操作</span><br><span class="hljs-comment"> * @param ep ep控制块</span><br><span class="hljs-comment"> * @param epi 需要移除的epitem</span><br><span class="hljs-comment"> * @return</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">ep_remove</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> eventpoll *ep, <span class="hljs-keyword">struct</span> epitem *epi)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> *<span class="hljs-title">file</span> =</span> epi-&gt;ffd.file;<span class="hljs-comment">//获取文件</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epitems_head</span> *<span class="hljs-title">to_free</span>;</span><span class="hljs-comment">//epitem头指针</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hlist_head</span> *<span class="hljs-title">head</span>;</span><br><br>lockdep_assert_irqs_enabled();<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Removes poll wait queue hooks.</span><br><span class="hljs-comment"> */</span><br>ep_unregister_pollwait(ep, epi);<br><br><span class="hljs-comment">/* Remove the current item from the list of epoll hooks */</span><br>spin_lock(&amp;file-&gt;f_lock);<span class="hljs-comment">//获取锁</span><br>to_free = <span class="hljs-literal">NULL</span>;<br>head = file-&gt;f_ep;<br><span class="hljs-comment">//遍历fllink获取要移除的节点</span><br><span class="hljs-keyword">if</span> (head-&gt;first == &amp;epi-&gt;fllink &amp;&amp; !epi-&gt;fllink.next) &#123;<br>file-&gt;f_ep = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">if</span> (!is_file_epoll(file)) &#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epitems_head</span> *<span class="hljs-title">v</span>;</span><br>v = container_of(head, <span class="hljs-keyword">struct</span> epitems_head, epitems);<br><span class="hljs-keyword">if</span> (!smp_load_acquire(&amp;v-&gt;next))<br>to_free = v;<br>&#125;<br>&#125;<br>hlist_del_rcu(&amp;epi-&gt;fllink);<br>spin_unlock(&amp;file-&gt;f_lock);<br>free_ephead(to_free);<span class="hljs-comment">//释放</span><br><br>rb_erase_cached(&amp;epi-&gt;rbn, &amp;ep-&gt;rbr);<br><br>write_lock_irq(&amp;ep-&gt;lock);<br><span class="hljs-keyword">if</span> (ep_is_linked(epi))<br>list_del_init(&amp;epi-&gt;rdllink);<br>write_unlock_irq(&amp;ep-&gt;lock);<br><br>wakeup_source_unregister(ep_wakeup_source(epi));<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * At this point it is safe to free the eventpoll item. Use the union</span><br><span class="hljs-comment"> * field epi-&gt;rcu, since we are trying to minimize the size of</span><br><span class="hljs-comment"> * &#x27;struct epitem&#x27;. The &#x27;rbn&#x27; field is no longer in use. Protected by</span><br><span class="hljs-comment"> * ep-&gt;mtx. The rcu read side, reverse_path_check_proc(), does not make</span><br><span class="hljs-comment"> * use of the rbn field.</span><br><span class="hljs-comment"> */</span><br>call_rcu(&amp;epi-&gt;rcu, epi_rcu_free);<span class="hljs-comment">//释放</span><br><br>percpu_counter_dec(&amp;ep-&gt;user-&gt;epoll_watches);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-移除进程等待队列wq"><a href="#2-移除进程等待队列wq" class="headerlink" title="2.移除进程等待队列wq"></a>2.移除进程等待队列wq</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 取消注册的进程</span><br><span class="hljs-comment"> * @param ep </span><br><span class="hljs-comment"> * @param epi </span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ep_unregister_pollwait</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> eventpoll *ep, <span class="hljs-keyword">struct</span> epitem *epi)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">eppoll_entry</span> **<span class="hljs-title">p</span> =</span> &amp;epi-&gt;pwqlist;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">eppoll_entry</span> *<span class="hljs-title">pwq</span>;</span><br><br><span class="hljs-keyword">while</span> ((pwq = *p) != <span class="hljs-literal">NULL</span>) &#123;<br>*p = pwq-&gt;next;<br>ep_remove_wait_queue(pwq);<span class="hljs-comment">//移除</span><br>kmem_cache_free(pwq_cache, pwq);<span class="hljs-comment">//释放内存</span><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="修改操作"><a href="#修改操作" class="headerlink" title="修改操作"></a>修改操作</h3><h4 id="1-调用ep-modify修改"><a href="#1-调用ep-modify修改" class="headerlink" title="1.调用ep_modify修改"></a>1.调用ep_modify修改</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 修改操作：将epi设置为感兴趣的event</span><br><span class="hljs-comment"> * @param ep控制块</span><br><span class="hljs-comment"> * @param epi epitem</span><br><span class="hljs-comment"> * @param event 更改后的事件</span><br><span class="hljs-comment"> * @return</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">ep_modify</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> eventpoll *ep, <span class="hljs-keyword">struct</span> epitem *epi,<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> epoll_event *event)</span><br>&#123;<br><span class="hljs-type">int</span> pwake = <span class="hljs-number">0</span>;<br>poll_table pt;<br><br>lockdep_assert_irqs_enabled();<br><span class="hljs-comment">//将pt的回调函数置空</span><br>init_poll_funcptr(&amp;pt, <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Set the new event interest mask before calling f_op-&gt;poll();</span><br><span class="hljs-comment"> * otherwise we might miss an event that happens between the</span><br><span class="hljs-comment"> * f_op-&gt;poll() call and the new event set registering.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//设置新的感兴趣的事件</span><br>epi-&gt;event.events = event-&gt;events; <span class="hljs-comment">/* need barrier below */</span><br>epi-&gt;event.data = event-&gt;data; <span class="hljs-comment">/* protected by mtx */</span><br><span class="hljs-comment">//加入唤醒源</span><br><span class="hljs-keyword">if</span> (epi-&gt;event.events &amp; EPOLLWAKEUP) &#123;<br><span class="hljs-keyword">if</span> (!ep_has_wakeup_source(epi))<br>ep_create_wakeup_source(epi);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ep_has_wakeup_source(epi)) &#123;<br>ep_destroy_wakeup_source(epi);<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * The following barrier has two effects:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 1) Flush epi changes above to other CPUs.  This ensures</span><br><span class="hljs-comment"> *    we do not miss events from ep_poll_callback if an</span><br><span class="hljs-comment"> *    event occurs immediately after we call f_op-&gt;poll().</span><br><span class="hljs-comment"> *    We need this because we did not take ep-&gt;lock while</span><br><span class="hljs-comment"> *    changing epi above (but ep_poll_callback does take</span><br><span class="hljs-comment"> *    ep-&gt;lock).</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 2) We also need to ensure we do not miss _past_ events</span><br><span class="hljs-comment"> *    when calling f_op-&gt;poll().  This barrier also</span><br><span class="hljs-comment"> *    pairs with the barrier in wq_has_sleeper (see</span><br><span class="hljs-comment"> *    comments for wq_has_sleeper).</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * This barrier will now guarantee ep_poll_callback or f_op-&gt;poll</span><br><span class="hljs-comment"> * (or both) will notice the readiness of an item.</span><br><span class="hljs-comment"> */</span><br>smp_mb();<span class="hljs-comment">//内存屏障</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Get current event bits. We can safely use the file* here because</span><br><span class="hljs-comment"> * its usage count has been increased by the caller of this function.</span><br><span class="hljs-comment"> * If the item is &quot;hot&quot; and it is not registered inside the ready</span><br><span class="hljs-comment"> * list, push it inside.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//如果在当前有准备好的事件了则将其加入到就绪队列中去</span><br><span class="hljs-keyword">if</span> (ep_item_poll(epi, &amp;pt, <span class="hljs-number">1</span>)) &#123;<br>write_lock_irq(&amp;ep-&gt;lock);<br><span class="hljs-keyword">if</span> (!ep_is_linked(epi)) &#123;<br>list_add_tail(&amp;epi-&gt;rdllink, &amp;ep-&gt;rdllist);<br>ep_pm_stay_awake(epi);<br><br><span class="hljs-comment">/* Notify waiting tasks that events are available */</span><br><span class="hljs-keyword">if</span> (waitqueue_active(&amp;ep-&gt;wq))<br>wake_up(&amp;ep-&gt;wq);<br><span class="hljs-keyword">if</span> (waitqueue_active(&amp;ep-&gt;poll_wait))<br>pwake++;<br>&#125;<br>write_unlock_irq(&amp;ep-&gt;lock);<br>&#125;<br><br><span class="hljs-comment">/* We have to call this outside the lock */</span><br><span class="hljs-keyword">if</span> (pwake)<br>ep_poll_safewake(ep, <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="陷入内核"><a href="#陷入内核" class="headerlink" title="陷入内核"></a>陷入内核</h3><h4 id="1-系统调用"><a href="#1-系统调用" class="headerlink" title="1.系统调用"></a>1.系统调用</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">SYSCALL_DEFINE4(epoll_wait, <span class="hljs-type">int</span>, epfd, <span class="hljs-keyword">struct</span> epoll_event __user *, events,<span class="hljs-type">int</span>, maxevents, <span class="hljs-type">int</span>, timeout)<br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timespec64</span> <span class="hljs-title">to</span>;</span><br><span class="hljs-keyword">return</span> do_epoll_wait(epfd, events, maxevents,ep_timeout_to_timespec(&amp;to, timeout));<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-调用do-epoll-wait"><a href="#2-调用do-epoll-wait" class="headerlink" title="2.调用do_epoll_wait"></a>2.调用do_epoll_wait</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 等待事件</span><br><span class="hljs-comment"> * @param epfd</span><br><span class="hljs-comment"> * @param events 用户空间事件</span><br><span class="hljs-comment"> * @param maxevents 最大事件数</span><br><span class="hljs-comment"> * @param to 超时时间</span><br><span class="hljs-comment"> * @return 返回准备好的事件个数/调用错误响应码</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">do_epoll_wait</span><span class="hljs-params">(<span class="hljs-type">int</span> epfd, <span class="hljs-keyword">struct</span> epoll_event __user *events,<span class="hljs-type">int</span> maxevents, <span class="hljs-keyword">struct</span> timespec64 *to)</span><br>&#123;<br><span class="hljs-type">int</span> error;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fd</span> <span class="hljs-title">f</span>;</span><span class="hljs-comment">//文件描述符</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">eventpoll</span> *<span class="hljs-title">ep</span>;</span><span class="hljs-comment">//ep控制块</span><br><br><span class="hljs-comment">/* The maximum number of event must be greater than zero */</span><br><span class="hljs-keyword">if</span> (maxevents &lt;= <span class="hljs-number">0</span> || maxevents &gt; EP_MAX_EVENTS)<span class="hljs-keyword">return</span> -EINVAL;<br><br><span class="hljs-comment">/* Verify that the area passed by the user is writeable */</span><br><span class="hljs-comment">//检查是否能正常访问</span><br><span class="hljs-keyword">if</span> (!access_ok(events, maxevents * <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> epoll_event)))<span class="hljs-keyword">return</span> -EFAULT;<br><br><span class="hljs-comment">/* Get the &quot;struct file *&quot; for the eventpoll file */</span><br><span class="hljs-comment">//根据epfd获取对应的fd</span><br>f = fdget(epfd);<br><span class="hljs-keyword">if</span> (!f.file)<span class="hljs-keyword">return</span> -EBADF;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * We have to check that the file structure underneath the fd</span><br><span class="hljs-comment"> * the user passed to us _is_ an eventpoll file.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//判断当前文件是否支持epoll</span><br>error = -EINVAL;<br><span class="hljs-keyword">if</span> (!is_file_epoll(f.file))<span class="hljs-keyword">goto</span> error_fput;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * At this point it is safe to assume that the &quot;private_data&quot; contains</span><br><span class="hljs-comment"> * our own data structure.</span><br><span class="hljs-comment"> */</span><br>ep = f.file-&gt;private_data;<br><br><span class="hljs-comment">/* Time to fish for events ... */</span><br><span class="hljs-comment">//(主线)调用ep_poll函数</span><br>error = ep_poll(ep, events, maxevents, to);<br><br>error_fput:<br>fdput(f);<br><span class="hljs-keyword">return</span> error;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-调用ep-poll"><a href="#3-调用ep-poll" class="headerlink" title="3.调用ep_poll"></a>3.调用ep_poll</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ep_poll - Retrieves ready events, and delivers them to the caller-supplied event buffer.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @ep: Pointer to the eventpoll context.</span><br><span class="hljs-comment"> * @events: Pointer to the userspace buffer where the ready events should be stored.</span><br><span class="hljs-comment"> * @maxevents: Size (in terms of number of events) of the caller event buffer.</span><br><span class="hljs-comment"> * @timeout: Maximum timeout for the ready events fetch operation, in</span><br><span class="hljs-comment"> *           timespec. If the timeout is zero, the function will not block,</span><br><span class="hljs-comment"> *           while if the @timeout ptr is NULL, the function will block</span><br><span class="hljs-comment"> *           until at least one event has been retrieved (or an error occurred).</span><br><span class="hljs-comment"> * Return: the number of ready events which have been fetched, or an error code, in case of error.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">ep_poll</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> eventpoll *ep, <span class="hljs-keyword">struct</span> epoll_event __user *events,<span class="hljs-type">int</span> maxevents, <span class="hljs-keyword">struct</span> timespec64 *timeout)</span><br>&#123;<br><span class="hljs-type">int</span> res, eavail, timed_out = <span class="hljs-number">0</span>;<br>u64 slack = <span class="hljs-number">0</span>;<br><span class="hljs-type">wait_queue_entry_t</span> wait;<br><span class="hljs-type">ktime_t</span> expires, *to = <span class="hljs-literal">NULL</span>;<br><br>lockdep_assert_irqs_enabled();<br><span class="hljs-comment">//是否带有超时时间</span><br><span class="hljs-keyword">if</span> (timeout &amp;&amp; (timeout-&gt;tv_sec | timeout-&gt;tv_nsec)) &#123;<br>slack = select_estimate_accuracy(timeout);<br>to = &amp;expires;<br>*to = timespec64_to_ktime(*timeout);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (timeout) &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Avoid the unnecessary trip to the wait queue loop, if the</span><br><span class="hljs-comment"> * caller specified a non blocking operation.</span><br><span class="hljs-comment"> */</span><br>timed_out = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * This call is racy: We may or may not see events that are being added</span><br><span class="hljs-comment"> * to the ready list under the lock (e.g., in IRQ callbacks). For cases</span><br><span class="hljs-comment"> * with a non-zero timeout, this thread will check the ready list under</span><br><span class="hljs-comment"> * lock and will add to the wait queue.  For cases with a zero</span><br><span class="hljs-comment"> * timeout, the user by definition should not care and will have to</span><br><span class="hljs-comment"> * recheck again.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//检查是否有可用的事件（查看rdlist）</span><br>eavail = ep_events_available(ep);<br><span class="hljs-comment">//死循环</span><br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">if</span> (eavail) &#123;<span class="hljs-comment">//如果已经有了可用的事件</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Try to transfer events to user space. In case we get</span><br><span class="hljs-comment"> * 0 events and there&#x27;s still timeout left over, we go</span><br><span class="hljs-comment"> * trying again in search of more luck.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//(主线)尝试将事件传输到用户空间</span><br>res = ep_send_events(ep, events, maxevents);<br><span class="hljs-keyword">if</span> (res)<span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-comment">//超时返回</span><br><span class="hljs-keyword">if</span> (timed_out)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>eavail = ep_busy_loop(ep, timed_out);<br><span class="hljs-keyword">if</span> (eavail)<span class="hljs-keyword">continue</span>;<br><span class="hljs-comment">//中断</span><br><span class="hljs-keyword">if</span> (signal_pending(current))<span class="hljs-keyword">return</span> -EINTR;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Internally init_wait() uses autoremove_wake_function(),</span><br><span class="hljs-comment"> * thus wait entry is removed from the wait queue on each</span><br><span class="hljs-comment"> * wakeup. Why it is important? In case of several waiters</span><br><span class="hljs-comment"> * each new wakeup will hit the next waiter, giving it the</span><br><span class="hljs-comment"> * chance to harvest new event. Otherwise wakeup can be</span><br><span class="hljs-comment"> * lost. This is also good performance-wise, because on</span><br><span class="hljs-comment"> * normal wakeup path no need to call __remove_wait_queue()</span><br><span class="hljs-comment"> * explicitly, thus ep-&gt;lock is not taken, which halts the</span><br><span class="hljs-comment"> * event delivery.</span><br><span class="hljs-comment"> */</span><br>init_wait(&amp;wait);<br><br>write_lock_irq(&amp;ep-&gt;lock);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Barrierless variant, waitqueue_active() is called under</span><br><span class="hljs-comment"> * the same lock on wakeup ep_poll_callback() side, so it</span><br><span class="hljs-comment"> * is safe to avoid an explicit barrier.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//设置当前状态位任务中断</span><br>__set_current_state(TASK_INTERRUPTIBLE);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Do the final check under the lock. ep_scan_ready_list()</span><br><span class="hljs-comment"> * plays with two lists (-&gt;rdllist and -&gt;ovflist) and there</span><br><span class="hljs-comment"> * is always a race when both lists are empty for short</span><br><span class="hljs-comment"> * period of time although events are pending, so lock is</span><br><span class="hljs-comment"> * important.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//再次判断就绪队列</span><br>eavail = ep_events_available(ep);<br><span class="hljs-keyword">if</span> (!eavail)__add_wait_queue_exclusive(&amp;ep-&gt;wq, &amp;wait);<br><br>write_unlock_irq(&amp;ep-&gt;lock);<br><br><span class="hljs-keyword">if</span> (!eavail)timed_out = !schedule_hrtimeout_range(to, slack,HRTIMER_MODE_ABS);<br>__set_current_state(TASK_RUNNING);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * We were woken up, thus go and try to harvest some events.</span><br><span class="hljs-comment"> * If timed out and still on the wait queue, recheck eavail</span><br><span class="hljs-comment"> * carefully under lock, below.</span><br><span class="hljs-comment"> */</span><br>eavail = <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">if</span> (!list_empty_careful(&amp;wait.entry)) &#123;<br>write_lock_irq(&amp;ep-&gt;lock);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * If the thread timed out and is not on the wait queue,</span><br><span class="hljs-comment"> * it means that the thread was woken up after its</span><br><span class="hljs-comment"> * timeout expired before it could reacquire the lock.</span><br><span class="hljs-comment"> * Thus, when wait.entry is empty, it needs to harvest</span><br><span class="hljs-comment"> * events.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (timed_out)eavail = list_empty(&amp;wait.entry);<br>__remove_wait_queue(&amp;ep-&gt;wq, &amp;wait);<br>write_unlock_irq(&amp;ep-&gt;lock);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-拷贝事件到用户空间"><a href="#4-拷贝事件到用户空间" class="headerlink" title="4.拷贝事件到用户空间"></a>4.拷贝事件到用户空间</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 发送事件到用户空间</span><br><span class="hljs-comment"> * @param ep eventpoll控制块</span><br><span class="hljs-comment"> * @param events</span><br><span class="hljs-comment"> * @param maxevents</span><br><span class="hljs-comment"> * @return event cnt</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">ep_send_events</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> eventpoll *ep,<span class="hljs-keyword">struct</span> epoll_event __user *events, <span class="hljs-type">int</span> maxevents)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epitem</span> *<span class="hljs-title">epi</span>, *<span class="hljs-title">tmp</span>;</span><br>LIST_HEAD(txlist);<br>poll_table pt;<br><span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Always short-circuit for fatal signals to allow threads to make a</span><br><span class="hljs-comment"> * timely exit without the chance of finding more events available and</span><br><span class="hljs-comment"> * fetching repeatedly.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (fatal_signal_pending(current))<span class="hljs-keyword">return</span> -EINTR;<br><span class="hljs-comment">//重置poll_table回调函数</span><br>init_poll_funcptr(&amp;pt, <span class="hljs-literal">NULL</span>);<br><br>mutex_lock(&amp;ep-&gt;mtx);<br><span class="hljs-comment">//开始扫描就绪的fd</span><br>ep_start_scan(ep, &amp;txlist);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * We can loop without lock because we are passed a task private list.</span><br><span class="hljs-comment"> * Items cannot vanish during the loop we are holding ep-&gt;mtx.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//传入链表进行遍历</span><br>list_for_each_entry_safe(epi, tmp, &amp;txlist, rdllink) &#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">wakeup_source</span> *<span class="hljs-title">ws</span>;</span><br><span class="hljs-type">__poll_t</span> revents;<br><br><span class="hljs-keyword">if</span> (res &gt;= maxevents)<span class="hljs-keyword">break</span>;<span class="hljs-comment">//超出最大长度结束循环</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Activate ep-&gt;ws before deactivating epi-&gt;ws to prevent</span><br><span class="hljs-comment"> * triggering auto-suspend here (in case we reactive epi-&gt;ws</span><br><span class="hljs-comment"> * below).</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * This could be rearranged to delay the deactivation of epi-&gt;ws</span><br><span class="hljs-comment"> * instead, but then epi-&gt;ws would temporarily be out of sync</span><br><span class="hljs-comment"> * with ep_is_linked().</span><br><span class="hljs-comment"> */</span><br>ws = ep_wakeup_source(epi);<br><span class="hljs-keyword">if</span> (ws) &#123;<br><span class="hljs-keyword">if</span> (ws-&gt;active)<br>__pm_stay_awake(ep-&gt;ws);<br>__pm_relax(ws);<br>&#125;<br><br>list_del_init(&amp;epi-&gt;rdllink);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * If the event mask intersect the caller-requested one,</span><br><span class="hljs-comment"> * deliver the event to userspace. Again, we are holding ep-&gt;mtx,</span><br><span class="hljs-comment"> * so no operations coming from userspace can change the item.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//(主线）调用 ep_item_poll</span><br>revents = ep_item_poll(epi, &amp;pt, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span> (!revents)<span class="hljs-keyword">continue</span>;<span class="hljs-comment">//如果没有准备好的事件直接结束当前循环</span><br><span class="hljs-comment">//(主线) 拷贝事件到用户空间</span><br>events = epoll_put_uevent(revents, epi-&gt;event.data, events);<br><span class="hljs-keyword">if</span> (!events) &#123;<br>list_add(&amp;epi-&gt;rdllink, &amp;txlist);<span class="hljs-comment">//添加进链表</span><br>ep_pm_stay_awake(epi);<br><span class="hljs-keyword">if</span> (!res)res = -EFAULT;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>res++;<br><span class="hljs-keyword">if</span> (epi-&gt;event.events &amp; EPOLLONESHOT)epi-&gt;event.events &amp;= EP_PRIVATE_BITS;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!(epi-&gt;event.events &amp; EPOLLET)) &#123;<span class="hljs-comment">//边缘触发方式</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * If this file has been added with Level</span><br><span class="hljs-comment"> * Trigger mode, we need to insert back inside</span><br><span class="hljs-comment"> * the ready list, so that the next call to</span><br><span class="hljs-comment"> * epoll_wait() will check again the events</span><br><span class="hljs-comment"> * availability. At this point, no one can insert</span><br><span class="hljs-comment"> * into ep-&gt;rdllist besides us. The epoll_ctl()</span><br><span class="hljs-comment"> * callers are locked out by</span><br><span class="hljs-comment"> * ep_scan_ready_list() holding &quot;mtx&quot; and the</span><br><span class="hljs-comment"> * poll callback will queue them in ep-&gt;ovflist.</span><br><span class="hljs-comment"> */</span><br>list_add_tail(&amp;epi-&gt;rdllink, &amp;ep-&gt;rdllist);<span class="hljs-comment">//添加进链表</span><br>ep_pm_stay_awake(epi);<br>&#125;<br>&#125;<br>ep_done_scan(ep, &amp;txlist);<span class="hljs-comment">//完成扫描</span><br>mutex_unlock(&amp;ep-&gt;mtx);<br><br><span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-1调用ep-start-scan"><a href="#4-1调用ep-start-scan" class="headerlink" title="4.1调用ep_start_scan"></a>4.1调用ep_start_scan</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * ep-&gt;mutex needs to be held because we could be hit by</span><br><span class="hljs-comment"> * eventpoll_release_file() and epoll_ctl().</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ep_start_scan</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> eventpoll *ep, <span class="hljs-keyword">struct</span> list_head *txlist)</span><br>&#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Steal the ready list, and re-init the original one to the</span><br><span class="hljs-comment"> * empty list. Also, set ep-&gt;ovflist to NULL so that events</span><br><span class="hljs-comment"> * happening while looping w/out locks, are not lost. We cannot</span><br><span class="hljs-comment"> * have the poll callback to queue directly on ep-&gt;rdllist,</span><br><span class="hljs-comment"> * because we want the &quot;sproc&quot; callback to be able to do it</span><br><span class="hljs-comment"> * in a lockless way.</span><br><span class="hljs-comment"> */</span><br>lockdep_assert_irqs_enabled();<br>write_lock_irq(&amp;ep-&gt;lock);<br>list_splice_init(&amp;ep-&gt;rdllist, txlist);<span class="hljs-comment">//拼接两个链表</span><br>WRITE_ONCE(ep-&gt;ovflist, <span class="hljs-literal">NULL</span>);<span class="hljs-comment">//写入ovflist链表</span><br>write_unlock_irq(&amp;ep-&gt;lock);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2调用ep-done-scan"><a href="#4-2调用ep-done-scan" class="headerlink" title="4.2调用ep_done_scan"></a>4.2调用ep_done_scan</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ep_done_scan</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> eventpoll *ep,<span class="hljs-keyword">struct</span> list_head *txlist)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epitem</span> *<span class="hljs-title">epi</span>, *<span class="hljs-title">nepi</span>;</span><br><br>write_lock_irq(&amp;ep-&gt;lock);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * During the time we spent inside the &quot;sproc&quot; callback, some</span><br><span class="hljs-comment"> * other events might have been queued by the poll callback.</span><br><span class="hljs-comment"> * We re-insert them inside the main ready-list here.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">for</span> (nepi = READ_ONCE(ep-&gt;ovflist); (epi = nepi) != <span class="hljs-literal">NULL</span>;<br>     nepi = epi-&gt;next, epi-&gt;next = EP_UNACTIVE_PTR) &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * We need to check if the item is already in the list.</span><br><span class="hljs-comment"> * During the &quot;sproc&quot; callback execution time, items are</span><br><span class="hljs-comment"> * queued into -&gt;ovflist but the &quot;txlist&quot; might already</span><br><span class="hljs-comment"> * contain them, and the list_splice() below takes care of them.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (!ep_is_linked(epi)) &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * -&gt;ovflist is LIFO, so we have to reverse it in order</span><br><span class="hljs-comment"> * to keep in FIFO.</span><br><span class="hljs-comment"> */</span><br>list_add(&amp;epi-&gt;rdllink, &amp;ep-&gt;rdllist);<span class="hljs-comment">//添加到链表</span><br>ep_pm_stay_awake(epi);<br>&#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * We need to set back ep-&gt;ovflist to EP_UNACTIVE_PTR, so that after</span><br><span class="hljs-comment"> * releasing the lock, events will be queued in the normal way inside</span><br><span class="hljs-comment"> * ep-&gt;rdllist.</span><br><span class="hljs-comment"> */</span><br>WRITE_ONCE(ep-&gt;ovflist, EP_UNACTIVE_PTR);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Quickly re-inject items left on &quot;txlist&quot;.</span><br><span class="hljs-comment"> */</span><br>list_splice(txlist, &amp;ep-&gt;rdllist);<span class="hljs-comment">//拼接</span><br>__pm_relax(ep-&gt;ws);<br><br><span class="hljs-keyword">if</span> (!list_empty(&amp;ep-&gt;rdllist)) &#123;<br><span class="hljs-keyword">if</span> (waitqueue_active(&amp;ep-&gt;wq))<br>wake_up(&amp;ep-&gt;wq);<br>&#125;<br><span class="hljs-comment">//释放锁</span><br>write_unlock_irq(&amp;ep-&gt;lock);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="流程图示-2"><a href="#流程图示-2" class="headerlink" title="流程图示"></a>流程图示</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/2630542/1661789691774-9cc87ec9-bf2a-46b7-af53-e4d2d8ae3326.jpeg"></p><h3 id="相关总结-2"><a href="#相关总结-2" class="headerlink" title="相关总结"></a>相关总结</h3><p>和select/poll相比，epoll进行了功能分离，将添加进阻塞队列和等待数据进行分离，先用 epoll_ctl 维护等待队列，再调用 epoll_wait 阻塞进程。具体流程是先用epoll_create 创建一个 epoll 对象 epfd，再通过 epoll_ctl 将需要监视的 socket 添加到 epfd 中，最后调用 epoll_wait 等待数据。</p><p>优点：</p><ul><li>相比 select/poll，epoll 拆分了功能，将操作和监听分离，操作粒度更小，效率更高</li><li>epoll采用回调方式将其准备好的fd加入就绪链表，用户进程无需遍历整个fd集</li></ul><p>缺点：</p><ul><li>epoll适合的是大量连接但操作不平凡的socket，如果是少了连接且触发频繁select和poll效率可能会更高</li></ul><h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><p><a href="https://github.com/torvalds/linux/find/master">https://github.com/torvalds/linux/find/master</a><br><a href="https://www.yuque.com/attachments/yuque/0/2022/pdf/2630542/1659327995071-4a68745c-73bd-43f6-9349-cf75533a9b2f.pdf?_lake_card=%7B%22src%22:%22https://www.yuque.com/attachments/yuque/0/2022/pdf/2630542/1659327995071-4a68745c-73bd-43f6-9349-cf75533a9b2f.pdf%22,%22name%22:%22Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B.pdf%22,%22size%22:34037912,%22type%22:%22application/pdf%22,%22ext%22:%22pdf%22,%22source%22:%22%22,%22status%22:%22done%22,%22mode%22:%22title%22,%22download%22:true,%22taskId%22:%22u61d08399-4835-4f65-a603-d24327a232d%22,%22taskType%22:%22upload%22,%22__spacing%22:%22both%22,%22id%22:%22u390d6afb%22,%22margin%22:%7B%22top%22:true,%22bottom%22:true%7D,%22card%22:%22file%22%7D">Linux高性能服务器编程.pdf</a><br><a href="https://github.com/torvalds/linux/find/master"></a></p>]]></content>
    
    
    <categories>
      
      <category>网络编程</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>性能调优-内存泄露的排查方法</title>
    <link href="/2022/09/01/yuque/qmcirn/"/>
    <url>/2022/09/01/yuque/qmcirn/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1662038925572-3fcfc89f-0814-400e-b130-cffc7fdd6075.png#clientId=uda981078-7271-4&from=paste&height=251&id=u2c895892&originHeight=502&originWidth=807&originalType=binary&ratio=1&rotation=0&showTitle=false&size=163163&status=done&style=none&taskId=uacaef619-48bc-4cb3-beb7-f95cfe3eeab&title=&width=403.5" alt="image.png"></p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>内存泄露的定义</p><blockquote><p>内存泄漏（Memory Leak）是指程序中已动态分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。</p></blockquote><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ul><li><p>top命令查看服务器负载</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">top<br></code></pre></td></tr></table></figure></li><li><p>jps查看java进程pid</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">jps -l<br></code></pre></td></tr></table></figure></li><li><p>jstack查看运行栈信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">jstack -l &lt;pid&gt;<br></code></pre></td></tr></table></figure><p>利用jstack -l <pid> 查看那些cpu使用率过高的线程，看是否大多数是gc线程，如果是说明gc过于频繁，而且耗时过长，导致应用线程被挂起，无法响应客户端发来的请求，这种情况就应该是内存泄露的问题了。</p></li><li><p>jmap 导出快照</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">jmap -dump:live,format=b,file=heap.bin <span class="hljs-number">21737</span><br></code></pre></td></tr></table></figure></li><li><p>jhat分析快照</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">jhat -J-Xmx512M heap.bin<br></code></pre></td></tr></table></figure><p>jhat使用方法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Usage:  jhat [-stack &lt;<span class="hljs-type">bool</span>&gt;] [-refs &lt;<span class="hljs-type">bool</span>&gt;] [-port &lt;port&gt;] [-baseline &lt;file&gt;] [-debug &lt;<span class="hljs-type">int</span>&gt;] [-version] [-h|-help] &lt;file&gt;<br><br>        -J&lt;flag&gt;          Pass &lt;flag&gt; directly to the runtime system. For<br>                          example, -J-mx512m to use a maximum heap size of <span class="hljs-number">512</span>MB<br>        -stack <span class="hljs-literal">false</span>:     Turn off tracking object allocation call stack.<br>        -refs <span class="hljs-literal">false</span>:      Turn off tracking of references to objects<br>        -port &lt;port&gt;:     Set the port <span class="hljs-keyword">for</span> the HTTP server.  Defaults to <span class="hljs-number">7000</span><br>        -exclude &lt;file&gt;:  Specify a file that lists data members that should<br>                          be excluded from the reachableFrom query.<br>        -baseline &lt;file&gt;: Specify a baseline object dump.  Objects in<br>                          both heap dumps with the same ID <span class="hljs-keyword">and</span> same <span class="hljs-keyword">class</span> <span class="hljs-title class_">will</span><br>                          be marked as <span class="hljs-keyword">not</span> being <span class="hljs-string">&quot;new&quot;</span>.<br>        -debug &lt;<span class="hljs-type">int</span>&gt;:     Set debug level.<br>                            <span class="hljs-number">0</span>:  No debug output<br>                            <span class="hljs-number">1</span>:  Debug hprof file parsing<br>                            <span class="hljs-number">2</span>:  Debug hprof file parsing, no server<br>        -version          Report version number<br>        -h|-help          Print <span class="hljs-keyword">this</span> help <span class="hljs-keyword">and</span> exit<br>        &lt;file&gt;            The file to read<br><br>For a dump file that contains multiple heap dumps,<br>you may specify which dump in the file<br>by appending <span class="hljs-string">&quot;#&lt;number&gt;&quot;</span> to the file name, i.e. <span class="hljs-string">&quot;foo.hprof#3&quot;</span>.<br></code></pre></td></tr></table></figure></li><li><p>查看Html文件分析内存内容</p></li></ul><h2 id="JFR采集数据"><a href="#JFR采集数据" class="headerlink" title="JFR采集数据"></a>JFR采集数据</h2><p>1.开启JFR对VM运行时信息转存</p><blockquote><p>#开启JFR<br>-XX:+FlightRecorder<br>#设置延时和输出文件<br>-XX:StartFlightRecording=duration=3s,filename=flight.jfr</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">#编译<br>javac HashCodeMemoryLeak.java<br>#运行<br>java -Xms5m -Xmx5m -XX:+FlightRecorder -XX:StartFlightRecording=duration=2s,filename=flight.jfr HashCodeMemoryLeak<br></code></pre></td></tr></table></figure><p>2.通过JMC打开记录文件<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1663142327288-733d7464-b1ca-4ae1-88b1-81fc8c4f0173.png#clientId=uf596b66e-e198-4&from=paste&height=850&id=udf34a532&originHeight=1700&originWidth=2800&originalType=binary&ratio=1&rotation=0&showTitle=false&size=651616&status=done&style=none&taskId=u622ba11c-936c-4efc-8b90-15676bb8b5f&title=&width=1400" alt="image.png"><br>3.分析泄露原因，一般都是那种大对象</p><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><p>内存泄露简单案例</p><p>1.因hashcode不一致引起的内存泄露问题</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs sql">import java.util.HashSet;<br>import java.util.Set;<br><br>class Key &#123;<br>    private String key;<br>    <span class="hljs-operator">/</span><span class="hljs-operator">/</span>未重写hashcode其返回对应的是对象的堆地址每个对象都不一样<br>    public Key(String key) &#123;<br>        this.key <span class="hljs-operator">=</span> key;<br>    &#125;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> 去掉下面注释即可解决内存泄露的问题<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>    <span class="hljs-variable">@Override</span><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>    public <span class="hljs-type">boolean</span> <span class="hljs-keyword">equals</span>(Object o) &#123;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>        if (this <span class="hljs-operator">=</span><span class="hljs-operator">=</span> o) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>        if (o <span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-keyword">null</span> <span class="hljs-operator">||</span> getClass() <span class="hljs-operator">!=</span> o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>        Key key1 <span class="hljs-operator">=</span> (Key) o;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>        <span class="hljs-keyword">return</span> Objects.equals(key, key1.key);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>    &#125;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>    <span class="hljs-variable">@Override</span><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>    public <span class="hljs-type">int</span> hashCode() &#123;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>        <span class="hljs-keyword">return</span> Objects.hash(key);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 因哈希引起的内存泄露导致内存溢出</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 初始化堆大小：-Xms5m -Xmx5m</span><br><span class="hljs-comment"> */</span><br>public class HashCodeMemoryLeak &#123;<br><br>    public <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> max <span class="hljs-operator">=</span> <span class="hljs-number">10000</span>;<br><br>    private <span class="hljs-keyword">static</span> <span class="hljs-keyword">Set</span><span class="hljs-operator">&lt;</span>Key<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">set</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> HashSet<span class="hljs-operator">&lt;&gt;</span>(<span class="hljs-number">2</span><span class="hljs-operator">&lt;&lt;</span><span class="hljs-number">4</span>);<br><br>    public <span class="hljs-keyword">static</span> void main(String[] args) &#123;<br>        <span class="hljs-type">int</span> idx <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        while (<span class="hljs-literal">true</span>)&#123;<br>            set.add(<span class="hljs-keyword">new</span> Key(String.valueOf(idx)));<br>            idx<span class="hljs-operator">+</span><span class="hljs-operator">+</span>;<br>            if (idx<span class="hljs-operator">=</span><span class="hljs-operator">=</span>max)&#123;<span class="hljs-operator">/</span><span class="hljs-operator">/</span>达到最大值释放内存（其实无法释放因为hashcode不一样）<br>                while (idx<span class="hljs-operator">&gt;</span><span class="hljs-number">0</span>) &#123;<br>                    set.remove(<span class="hljs-keyword">new</span> Key(String.valueOf(idx)));<br>                    idx<span class="hljs-comment">--;</span><br>                &#125;<br>                System.out.println(String.format(&quot;set size : %s free memory :%s M&quot; ,set.size(), getFreeMemory()));<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取堆区内存</span><br><span class="hljs-comment">     * @return</span><br><span class="hljs-comment">     */</span><br>    public <span class="hljs-keyword">static</span> long getFreeMemory() &#123;<br>        <span class="hljs-keyword">return</span> Runtime.getRuntime().freeMemory() <span class="hljs-operator">/</span> (<span class="hljs-number">1024</span> <span class="hljs-operator">*</span> <span class="hljs-number">1024</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>2.在JDK的ArrayList中remove方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> E <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br><br>    rangeCheck(index);<br>modCount++;<br><span class="hljs-type">E</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> elementData(index);<br><span class="hljs-type">int</span> <span class="hljs-variable">numMoved</span> <span class="hljs-operator">=</span> size - index - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (numMoved &gt; <span class="hljs-number">0</span>)System.arraycopy(elementData, index+<span class="hljs-number">1</span>, elementData, index,numMoved);<br>elementData[--size] = <span class="hljs-literal">null</span>; <span class="hljs-comment">// clear to let GC do its work（消除对象的引用，gc时可以将其收集）</span><br><span class="hljs-keyword">return</span> oldValue;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.threadlocal类弱引用类型引起的内存泄露问题</p><h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><p>相关工具：<a href="https://mikeygithub.github.io/2021/07/22/yuque/rdphy6/">https://mikeygithub.github.io/2021/07/22/yuque/rdphy6/</a></p>]]></content>
    
    
    <categories>
      
      <category>性能调优</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内存泄漏</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>笔记篇-GRPC学习笔记</title>
    <link href="/2022/05/10/yuque/kna5pe/"/>
    <url>/2022/05/10/yuque/kna5pe/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1657548148034-0d65111c-0e25-4eb8-9369-2e599050ea65.png#averageHue=%233a6970&clientId=ud2bc9480-de43-4&from=markdown&id=R8lvb&originHeight=451&originWidth=1212&originalType=url&ratio=1&rotation=0&showTitle=false&size=178834&status=done&style=none&taskId=uc5036b7c-7514-44ca-af72-a83b7999577&title=" alt="image.png"></p><h1 id="Grpc介绍"><a href="#Grpc介绍" class="headerlink" title="Grpc介绍"></a>Grpc介绍</h1><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/grpc-1.png#id=QmAzO&originHeight=716&originWidth=1138&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>在gRPC中，客户端应用程序可以直接在其他计算机上的服务器应用程序上调用方法，就好像它是本地对象一样，从而使您更轻松地创建分布式应用程序和服务。在许多RPC系统中，gRPC都基于定义服务的思想，即指定可以使用其参数和返回类型远程调用的方法。在服务器端，服务器实现此接口并运行gRPC服务器以处理客户端调用。在客户端，客户端具有一个存根（在某些语言中简称为客户端），提供与服务器相同的方法。</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/landing-2.svg#id=LGQ6R&originHeight=327&originWidth=552&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>从Google内部的服务器到您自己的台式机，gRPC客户端和服务器可以在各种环境中运行并相互通信，并且可以使用gRPC支持的任何语言编写。因此，例如，您可以使用Go，Python或Ruby的客户端轻松地用Java创建gRPC服务器。此外，最新的Google API的接口将具有gRPC版本，可让您轻松地在应用程序中内置Google功能。</p><h1 id="protobuf"><a href="#protobuf" class="headerlink" title="protobuf"></a>protobuf</h1><p>Protobuf是Protocol Buffers的简称，它是Google公司开发的一种数据描述语言，用于描述一种轻便高效的结构化数据存储格式，并于2008年对外开源。Protobuf可以用于结构化数据串行化，或者说序列化。它的设计非常适用于在网络通讯中的数据载体，很适合做数据存储或 RPC 数据交换格式，它序列化出来的数据量少再加上以 K-V 的方式来存储数据，对消息的版本兼容性非常强，可用于通讯协议、数据存储等领域的语言无关、平台无关、可扩展的序列化结构数据格式。开发者可以通过Protobuf附带的工具生成代码并实现将结构化数据序列化的功能。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li><p>下载对应版本编译器</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">https:<span class="hljs-comment">//github.com/protocolbuffers/protobuf/releases/tag/v21.12</span><br></code></pre></td></tr></table></figure></li><li><p>移动可执行的二进制文件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">sudo mv protoc /usr/local/bin<br></code></pre></td></tr></table></figure></li><li><p>安装go插件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">go</span> install google.golang.org/protobuf/cmd/protoc-gen-<span class="hljs-keyword">go</span>@latest<br></code></pre></td></tr></table></figure></li><li><p>查看版本信息</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">protoc --version<br></code></pre></td></tr></table></figure></li><li><p>测试生成</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">protoc -I=. --<span class="hljs-keyword">go</span>-grpc_out=.  --go_out=. demo.proto<br></code></pre></td></tr></table></figure></li></ol><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="指定语法"><a href="#指定语法" class="headerlink" title="指定语法"></a>指定语法</h3><p>syntax：指定proto的语法版本</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">syntax = <span class="hljs-string">&quot;proto3&quot;</span>;<br></code></pre></td></tr></table></figure><h3 id="message"><a href="#message" class="headerlink" title="message"></a>message</h3><blockquote><p>message表示rpc进行交互过程中的数据信息，可以理解为是结构体，里面的字段每个要对应一个自己的id号</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">message name &#123;<br>    [repeated] fieldType fieldName = uniqueId<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="modification"><a href="#modification" class="headerlink" title="modification"></a>modification</h4><ul><li>repeated:数组</li><li>onef:如果您有一条包含许多字段的消息，并且最多同时设置一个字段，您可以使用其中oneof功能来强制执行此行为并节省内存</li><li></li></ul><h4 id="支持的数据类型"><a href="#支持的数据类型" class="headerlink" title="支持的数据类型"></a>支持的数据类型</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go">message name &#123;<br>    <span class="hljs-keyword">map</span>&lt;<span class="hljs-type">string</span>, Bar&gt; foo = <span class="hljs-number">1</span>;<span class="hljs-comment">//map</span><br>    enum Corpus &#123;<span class="hljs-comment">//枚举类型</span><br>    UNIVERSAL = <span class="hljs-number">0</span>;<br>    WEB = <span class="hljs-number">1</span>;<br>    IMAGES = <span class="hljs-number">2</span>;<br>    LOCAL = <span class="hljs-number">3</span>;<br>    NEWS = <span class="hljs-number">4</span>;<br>    PRODUCTS = <span class="hljs-number">5</span>;<br>    VIDEO = <span class="hljs-number">6</span>;<br>  &#125;<br>  Corpus corpus = <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="service"><a href="#service" class="headerlink" title="service"></a>service</h3><p>service：服务方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go">service HiService &#123;<br>  rpc SayHi (HiRequest) returns (HiReply) &#123;&#125;<br>&#125;<br>message HiRequest &#123;<br>  <span class="hljs-type">string</span> name = <span class="hljs-number">1</span>;<br>&#125;<br><br>message HiReply &#123;<br>  <span class="hljs-type">string</span> message = <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>import: 导入其他proto</li></ul><p>参考：<a href="https://developers.google.com/protocol-buffers/docs/reference/go-generated">https://developers.google.com/protocol-buffers/docs/reference/go-generated</a></p><h1 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h1><h2 id="简单案例"><a href="#简单案例" class="headerlink" title="简单案例"></a>简单案例</h2><ol><li><p>编写proto文件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go">syntax = <span class="hljs-string">&quot;proto3&quot;</span>;<br><br>option go_package = <span class="hljs-string">&quot;examples/demo/proto&quot;</span>;<br><br>service HiService &#123;<br>  rpc SayHi (HiRequest) returns (HiReply) &#123;&#125;<br>&#125;<br><br>message HiRequest &#123;<br>  <span class="hljs-type">string</span> name = <span class="hljs-number">1</span>;<br>&#125;<br><br>message HiReply &#123;<br>  <span class="hljs-type">string</span> message = <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>生成代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">protoc -I=. --<span class="hljs-keyword">go</span>-grpc_out=.  --go_out=. demo.proto<br></code></pre></td></tr></table></figure></li><li><p>编写client</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/credentials/insecure&quot;</span><br>pb <span class="hljs-string">&quot;google.golang.org/grpc/examples/demo/proto&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> addr = <span class="hljs-string">&quot;localhost:65535&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>conn, err := grpc.Dial(addr, grpc.WithTransportCredentials(insecure.NewCredentials()))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;did not connect: %v&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">defer</span> conn.Close()<br>c := pb.NewHiServiceClient(conn)<br>ctx, cancel := context.WithTimeout(context.Background(), time.Second)<br><span class="hljs-keyword">defer</span> cancel()<br>r, err := c.SayHi(ctx, &amp;pb.HiRequest&#123;Name: <span class="hljs-string">&quot;hi grpc&quot;</span>&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;could not greet: %v&quot;</span>, err)<br>&#125;<br>log.Printf(<span class="hljs-string">&quot;message: %s&quot;</span>, r.GetMessage())<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>编写server</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br>pb <span class="hljs-string">&quot;google.golang.org/grpc/examples/demo/proto&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> addr = <span class="hljs-string">&quot;localhost:65535&quot;</span><br><br><span class="hljs-keyword">type</span> server <span class="hljs-keyword">struct</span> &#123;<br>pb.UnimplementedHiServiceServer<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *server)</span></span> SayHi(ctx context.Context, in *pb.HiRequest) (*pb.HiReply, <span class="hljs-type">error</span>) &#123;<br>log.Printf(<span class="hljs-string">&quot;Received: %v&quot;</span>, in.GetName())<br><span class="hljs-keyword">return</span> &amp;pb.HiReply&#123;Message: <span class="hljs-string">&quot;Hi &quot;</span> + in.GetName()&#125;, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>lis, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, addr)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to listen: %v&quot;</span>, err)<br>&#125;<br>s := grpc.NewServer()<br>pb.RegisterHiServiceServer(s, &amp;server&#123;&#125;)<br>log.Printf(<span class="hljs-string">&quot;server listening at %v&quot;</span>, lis.Addr())<br><span class="hljs-keyword">if</span> err := s.Serve(lis); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to serve: %v&quot;</span>, err)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="官方案例"><a href="#官方案例" class="headerlink" title="官方案例"></a>官方案例</h2><p>The example code is part of the <a href="https://github.com/grpc/grpc-go">grpc-go</a> repo.</p><ol><li><p> <a href="https://github.com/grpc/grpc-go/archive/v1.34.0.zip">Download the repo as a zip file</a> and unzip it, or clone the repo: </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">clone</span> -b v1.34.0 https://github.com/grpc/grpc-go</span><br></code></pre></td></tr></table></figure></li><li><p> Change to the quick start example directory: </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> grpc-go/examples/helloworld</span><br></code></pre></td></tr></table></figure></li><li><p>Compile and execute the server code: </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go run greeter_server/main.go</span><br></code></pre></td></tr></table></figure></li><li><p>From a different terminal, compile and execute the client code to see the client output: </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go run greeter_client/main.go</span><br>Greeting: Hello world<br></code></pre></td></tr></table></figure></li></ol><h1 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h1><p>grpc本身不提供服务发现的功能，是直接采用c/s直连进行rpc通信，当我们在集群环境或者想动态上下线服务的时候使用注册中心就能实现我们的效果，目前比较常用的注册中心有基于redis,mysql,zookeeper,etcd,eureka,consul等中间件来实现。</p><h2 id="基于etcd注册中心"><a href="#基于etcd注册中心" class="headerlink" title="基于etcd注册中心"></a>基于etcd注册中心</h2><h3 id="分析需求"><a href="#分析需求" class="headerlink" title="分析需求"></a>分析需求</h3><ol><li>注册服务</li><li>注销服务（主动和被动）</li><li>获取服务（获取后进行服务调用）</li></ol><h3 id="详细设计"><a href="#详细设计" class="headerlink" title="详细设计"></a>详细设计</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/2630542/1673627384995-25d7707a-d8e3-45d3-a727-7a2ddf6591e5.jpeg"></p><ol><li>注册服务</li></ol><blockquote><p>服务注册主要是在服务端启动时将当前服务的ip+端口保存到etcd中以group+version的方式作为键存储，且进行心跳检测，超时将其移除</p></blockquote><ol start="2"><li>注销服务（主动和被动）</li></ol><blockquote><p>主动注销将其存储在etcd的值进行删除，被动注销通过设置其超时自动</p></blockquote><ol start="3"><li>获取服务（获取后进行服务调用）</li></ol><blockquote><p>通过获取etcd前缀的值列表，通过一定的负载均衡算法获取一个实例的信息进行实例化并调用，下次调用会继续使用，除非发生更新或者服务下线</p></blockquote><h3 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h3><ol><li><p>构建器主要用于创建注册器和etcd实例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> builder<br><br><span class="hljs-keyword">import</span> (<br>clientv3 <span class="hljs-string">&quot;go.etcd.io/etcd/client/v3&quot;</span><br><span class="hljs-string">&quot;gsrde/register&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Config <span class="hljs-keyword">struct</span> &#123;<br>Endpoints []<span class="hljs-type">string</span><br>Timeout   time.Duration<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewRegister</span><span class="hljs-params">(cfg Config)</span></span> register.DefaultRegister &#123;<br>register := register.DefaultRegister&#123;&#125;<br><span class="hljs-keyword">var</span> err <span class="hljs-type">error</span><br>register.Cli, err = NewEtcdClient(cfg)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;error : %v&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">return</span> register<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewEtcdClient</span><span class="hljs-params">(cfg Config)</span></span> (*clientv3.Client, <span class="hljs-type">error</span>) &#123;<br>cli, err := clientv3.New(clientv3.Config&#123;<br>Endpoints:   cfg.Endpoints,<br>DialTimeout: cfg.Timeout,<br>&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;error : %v&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">return</span> cli, err<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>注册器用于注册服务</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> register<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br>clientv3 <span class="hljs-string">&quot;go.etcd.io/etcd/client/v3&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Register <span class="hljs-keyword">interface</span> &#123;<br>Register(service, addr <span class="hljs-type">string</span>) <span class="hljs-type">error</span><br>UnRegister(service <span class="hljs-type">string</span>) <span class="hljs-type">error</span><br>&#125;<br><br><span class="hljs-keyword">type</span> DefaultRegister <span class="hljs-keyword">struct</span> &#123;<br>Cli *clientv3.Client<br>&#125;<br><br><span class="hljs-comment">// Register 注册一个rpc服务</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *DefaultRegister)</span></span> Register(serviceName, addr <span class="hljs-type">string</span>) (err <span class="hljs-type">error</span>) &#123;<br>key := fmt.Sprintf(<span class="hljs-string">&quot;%s/%s&quot;</span>, serviceName, addr)<br><span class="hljs-comment">//创建租约</span><br>leaseResp, err := r.Cli.Grant(context.Background(), <span class="hljs-number">10</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;Create Lease error ：%s\n&quot;</span>, err)<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-comment">//注册到etcd</span><br>log.Printf(<span class="hljs-string">&quot;Register to etcd : key : %s\n&quot;</span>, key)<br>_, err = r.Cli.Put(context.Background(), key, key, clientv3.WithLease(leaseResp.ID))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;Register to etcd error : %s\n&quot;</span>, err)<br>&#125;<br><span class="hljs-comment">//开启心跳检查</span><br>ch, err := r.Cli.KeepAlive(context.Background(), leaseResp.ID)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;KeepAlive to etcd error : %s\n&quot;</span>, err)<br>&#125;<br><span class="hljs-comment">//清空ch的数据</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> &#123;<br>&lt;-ch<br>&#125;<br>&#125;()<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// UnRegister 取消注册一个rpc服务</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *DefaultRegister)</span></span> UnRegister(service <span class="hljs-type">string</span>) <span class="hljs-type">error</span> &#123;<br>resp, err := r.Cli.Delete(context.Background(), service)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;UnRegister error : %s, service : %v, resp : %v\n&quot;</span>, err, service, resp)<br>&#125;<br><span class="hljs-keyword">return</span> err<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>服务发现</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> discover<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;go.etcd.io/etcd/api/v3/mvccpb&quot;</span><br>clientv3 <span class="hljs-string">&quot;go.etcd.io/etcd/client/v3&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/resolver&quot;</span><br><span class="hljs-string">&quot;gsrde/builder&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-comment">// EtcdResolver etcd解析器</span><br><span class="hljs-keyword">type</span> EtcdResolver <span class="hljs-keyword">struct</span> &#123;<br>cli  *clientv3.Client<br>conn resolver.ClientConn<br>&#125;<br><br><span class="hljs-comment">// NewResolver 初始化一个etcd解析器</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewResolver</span><span class="hljs-params">(cfg builder.Config)</span></span> resolver.Builder &#123;<br>cli, err := builder.NewEtcdClient(cfg)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;error : %v&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">return</span> &amp;EtcdResolver&#123;<br>cli: cli,<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *EtcdResolver)</span></span> Scheme() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;etcd&quot;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *EtcdResolver)</span></span> ResolveNow(rn resolver.ResolveNowOptions) &#123;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *EtcdResolver)</span></span> Close() &#123;<br>&#125;<br><br><span class="hljs-comment">// Build 构建解析器</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *EtcdResolver)</span></span> Build(target resolver.Target, ClientConn resolver.ClientConn, opts resolver.BuildOptions) (resolver.Resolver, <span class="hljs-type">error</span>) &#123;<br>r.conn = ClientConn<br><span class="hljs-comment">// 监听key的变化</span><br><span class="hljs-keyword">go</span> r.watch(target.Endpoint + <span class="hljs-string">&quot;/&quot;</span>)<br><br><span class="hljs-keyword">return</span> r, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">// 监听etcd中某个key前缀的服务地址列表的变化</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *EtcdResolver)</span></span> watch(keyPrefix <span class="hljs-type">string</span>) &#123;<br><span class="hljs-comment">//初始化服务地址列表</span><br><span class="hljs-keyword">var</span> addresses []resolver.Address<br>resp, err := r.cli.Get(context.Background(), keyPrefix, clientv3.WithPrefix())<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;Get service error ：&quot;</span>, err)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> resp.Kvs &#123;<br>addresses = <span class="hljs-built_in">append</span>(addresses,<br>resolver.Address&#123;<br>Addr: strings.TrimPrefix(<span class="hljs-type">string</span>(resp.Kvs[i].Key), keyPrefix),<br>&#125;,<br>)<br>&#125;<br>&#125;<br>status := resolver.State&#123;<br>Addresses: addresses,<br>&#125;<br>r.conn.UpdateState(status)<br><span class="hljs-comment">//监听服务地址列表的变化</span><br>rch := r.cli.Watch(context.Background(), keyPrefix, clientv3.WithPrefix())<br><span class="hljs-keyword">for</span> n := <span class="hljs-keyword">range</span> rch &#123;<br><span class="hljs-keyword">for</span> _, event := <span class="hljs-keyword">range</span> n.Events &#123;<br>addr := strings.TrimPrefix(<span class="hljs-type">string</span>(event.Kv.Key), keyPrefix)<br><span class="hljs-keyword">switch</span> event.Type &#123;<br><span class="hljs-keyword">case</span> mvccpb.PUT:<br><span class="hljs-keyword">if</span> !exists(addresses, addr) &#123;<br>addresses = <span class="hljs-built_in">append</span>(addresses, resolver.Address&#123;Addr: addr&#125;)<br>status.Addresses = addresses<br>r.conn.UpdateState(status)<br>&#125;<br>log.Printf(<span class="hljs-string">&quot;service register ：%s&quot;</span>, addr)<br><span class="hljs-keyword">case</span> mvccpb.DELETE:<br><span class="hljs-keyword">if</span> s, ok := remove(addresses, addr); ok &#123;<br>status.Addresses = s<br>r.conn.UpdateState(status)<br>&#125;<br>log.Printf(<span class="hljs-string">&quot;service destroy ：%s&quot;</span>, addr)<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">exists</span><span class="hljs-params">(addresses []resolver.Address, addr <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> addresses &#123;<br><span class="hljs-keyword">if</span> addresses[i].Addr == addr &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">remove</span><span class="hljs-params">(addresses []resolver.Address, addr <span class="hljs-type">string</span>)</span></span> ([]resolver.Address, <span class="hljs-type">bool</span>) &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> addresses &#123;<br><span class="hljs-keyword">if</span> addresses[i].Addr == addr &#123;<br>addresses[i] = addresses[<span class="hljs-built_in">len</span>(addresses)<span class="hljs-number">-1</span>]<br><span class="hljs-keyword">return</span> addresses[:<span class="hljs-built_in">len</span>(addresses)<span class="hljs-number">-1</span>], <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><ol><li><p>启动服务器</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> test<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br><span class="hljs-string">&quot;gsrde/builder&quot;</span><br>pb <span class="hljs-string">&quot;gsrde/test/hello&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;testing&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestRegisterServiceA</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-keyword">var</span> addr = <span class="hljs-string">&quot;localhost:65535&quot;</span><br>lis, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, addr)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to listen: %v&quot;</span>, err)<br>&#125;<br>s := grpc.NewServer()<br>pb.RegisterHiServiceServer(s, &amp;pb.Server&#123;&#125;)<br>log.Printf(<span class="hljs-string">&quot;server listening at %v&quot;</span>, lis.Addr())<br><span class="hljs-comment">//注册到etcd</span><br>cfg := builder.Config&#123;<br>Endpoints: []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;192.168.100.24:2379&quot;</span>&#125;,<br>&#125;<br>reg := builder.NewRegister(cfg)<br>reg.Register(pb.HiService_ServiceDesc.ServiceName, addr)<br><span class="hljs-keyword">defer</span> reg.UnRegister(pb.HiService_ServiceDesc.ServiceName)<br><span class="hljs-keyword">if</span> err := s.Serve(lis); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to serve: %v&quot;</span>, err)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestRegisterServiceB</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-keyword">var</span> addr = <span class="hljs-string">&quot;localhost:65533&quot;</span><br>lis, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, addr)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to listen: %v&quot;</span>, err)<br>&#125;<br>s := grpc.NewServer()<br>pb.RegisterHiServiceServer(s, &amp;pb.Server&#123;&#125;)<br>log.Printf(<span class="hljs-string">&quot;server listening at %v&quot;</span>, lis.Addr())<br><span class="hljs-comment">//注册到etcd</span><br>cfg := builder.Config&#123;<br>Endpoints: []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;192.168.100.24:2379&quot;</span>&#125;,<br>&#125;<br>reg := builder.NewRegister(cfg)<br>reg.Register(pb.HiService_ServiceDesc.ServiceName, addr)<br><span class="hljs-keyword">defer</span> reg.UnRegister(pb.HiService_ServiceDesc.ServiceName)<br><span class="hljs-keyword">if</span> err := s.Serve(lis); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to serve: %v&quot;</span>, err)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>启动客户端</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> test<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/resolver&quot;</span><br><span class="hljs-string">&quot;gsrde/builder&quot;</span><br><span class="hljs-string">&quot;gsrde/discover&quot;</span><br>pb <span class="hljs-string">&quot;gsrde/test/hello&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;strconv&quot;</span><br><span class="hljs-string">&quot;testing&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestConsumer</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>cfg := builder.Config&#123;<br>Endpoints: []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;192.168.100.24:2379&quot;</span>&#125;,<br>&#125;<br>r := discover.NewResolver(cfg)<br>resolver.Register(r)<br><br>conn, err := grpc.Dial(r.Scheme()+<span class="hljs-string">&quot;://author/&quot;</span>+pb.HiService_ServiceDesc.ServiceName,<br>grpc.WithDefaultServiceConfig(<span class="hljs-string">`&#123;&quot;loadBalancingPolicy&quot;: &quot;round_robin&quot;&#125;`</span>),<br>grpc.WithInsecure())<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;did not connect: %v&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">defer</span> conn.Close()<br>c := pb.NewHiServiceClient(conn)<br>ticker := time.NewTicker(<span class="hljs-number">5</span> * time.Second)<br>i := <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> <span class="hljs-keyword">range</span> ticker.C &#123;<br>ctx, _ := context.WithTimeout(context.Background(), time.Second*<span class="hljs-number">5</span>)<br>resp, err := c.SayHi(ctx, &amp;pb.HiRequest&#123;Name: <span class="hljs-string">&quot;hi ,I am &quot;</span> + strconv.Itoa(i) + <span class="hljs-string">&quot; message&quot;</span>&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;could not greet: %v&quot;</span>, err)<br>&#125;<br>log.Printf(<span class="hljs-string">&quot;message: %s&quot;</span>, resp.GetMessage())<br>i++<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h1 id="通信模式"><a href="#通信模式" class="headerlink" title="通信模式"></a>通信模式</h1><h1 id="Interceptor拦截器"><a href="#Interceptor拦截器" class="headerlink" title="Interceptor拦截器"></a>Interceptor拦截器</h1><h1 id="Metadata元数据"><a href="#Metadata元数据" class="headerlink" title="Metadata元数据"></a>Metadata元数据</h1><h1 id="Retry失败重试"><a href="#Retry失败重试" class="headerlink" title="Retry失败重试"></a>Retry失败重试</h1><h1 id="HealthCheck健康检查"><a href="#HealthCheck健康检查" class="headerlink" title="HealthCheck健康检查"></a>HealthCheck健康检查</h1><h1 id="Auth安全认证"><a href="#Auth安全认证" class="headerlink" title="Auth安全认证"></a>Auth安全认证</h1><h1 id="BinaryLog"><a href="#BinaryLog" class="headerlink" title="BinaryLog"></a>BinaryLog</h1><h1 id="Backoff"><a href="#Backoff" class="headerlink" title="Backoff"></a>Backoff</h1><h1 id="Balance负载均衡"><a href="#Balance负载均衡" class="headerlink" title="Balance负载均衡"></a>Balance负载均衡</h1><h1 id="Resolver名称解析"><a href="#Resolver名称解析" class="headerlink" title="Resolver名称解析"></a>Resolver名称解析</h1><h1 id="KeepAlived"><a href="#KeepAlived" class="headerlink" title="KeepAlived"></a>KeepAlived</h1><h1 id="Http2"><a href="#Http2" class="headerlink" title="Http2"></a>Http2</h1><h1 id="Trace"><a href="#Trace" class="headerlink" title="Trace"></a>Trace</h1><h1 id="第三方组件"><a href="#第三方组件" class="headerlink" title="第三方组件"></a>第三方组件</h1><h1 id="Encode编码"><a href="#Encode编码" class="headerlink" title="Encode编码"></a>Encode编码</h1><h1 id="Compressor"><a href="#Compressor" class="headerlink" title="Compressor"></a>Compressor</h1><h1 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h1><ol><li><a href="https://grpc.io/docs/">官方文档</a> <a href="https://grpc.io/docs/">https://grpc.io/docs/</a></li><li><a href="https://github.com/grpc/grpc">https://github.com/grpc/grpc</a></li><li><a href="https://github.com/protocolbuffers/protobuf">https://github.com/protocolbuffers/protobuf</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>grpc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java篇-Java新特性概览</title>
    <link href="/2021/10/15/yuque/vn1qa3/"/>
    <url>/2021/10/15/yuque/vn1qa3/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1663223651234-148d9c84-95f3-4ec1-8423-30e346c1b8d3.png#averageHue=%230e0d0c&clientId=u0fe49d46-2375-4&errorMessage=unknown%20error&from=ui&id=u963cea3b&originHeight=672&originWidth=1200&originalType=binary&ratio=1&rotation=0&showTitle=false&size=132244&status=error&style=none&taskId=u12dadae2-ccb7-43da-a801-678577e8293&title=" alt="R-C.png"></p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><blockquote><p>持续更新记录Jvav（Java）的新版本特性和使用案例</p></blockquote><h1 id="JDK19"><a href="#JDK19" class="headerlink" title="JDK19"></a>JDK19</h1><p>新版本总共包含 7 个新的 JEP：</p><table><thead><tr><th>405:</th><th><a href="https://www.oschina.net/action/GoToLink?url=https://openjdk.org/jeps/405">Record Patterns (Preview)</a></th></tr></thead><tbody><tr><td>422:</td><td><a href="https://www.oschina.net/action/GoToLink?url=https://openjdk.org/jeps/422">Linux/RISC-V Port</a></td></tr><tr><td>424:</td><td><a href="https://www.oschina.net/action/GoToLink?url=https://openjdk.org/jeps/424">Foreign Function &amp; Memory API (Preview)</a></td></tr><tr><td>425:</td><td><a href="https://www.oschina.net/action/GoToLink?url=https://openjdk.org/jeps/425">Virtual Threads (Preview)</a></td></tr><tr><td>426:</td><td><a href="https://www.oschina.net/action/GoToLink?url=https://openjdk.org/jeps/426">Vector API (Fourth Incubator)</a></td></tr><tr><td>427:</td><td><a href="https://www.oschina.net/action/GoToLink?url=https://openjdk.org/jeps/427">Pattern Matching for switch (Third Preview)</a></td></tr><tr><td>428:</td><td><a href="https://www.oschina.net/action/GoToLink?url=https://openjdk.org/jeps/428">Structured Concurrency (Incubator)</a></td></tr></tbody></table><h2 id="虚拟线程"><a href="#虚拟线程" class="headerlink" title="虚拟线程"></a>虚拟线程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">var</span> <span class="hljs-variable">virtualThread</span> <span class="hljs-operator">=</span> Thread.ofVirtual().unstarted(() -&gt; System.out.println(Thread.currentThread()));<br>virtualThread.start();<br></code></pre></td></tr></table></figure><h1 id="JDK18"><a href="#JDK18" class="headerlink" title="JDK18"></a>JDK18</h1><p>JDK 18 共包括 9 个 JEP，以及数百个较小的增强功能和一千多个错误修复。</p><table><thead><tr><th>400:</th><th><a href="https://www.oschina.net/action/GoToLink?url=https://openjdk.java.net/jeps/400">UTF-8 by Default</a></th></tr></thead><tbody><tr><td>408:</td><td><a href="https://www.oschina.net/action/GoToLink?url=https://openjdk.java.net/jeps/408">Simple Web Server</a></td></tr><tr><td>413:</td><td><a href="https://www.oschina.net/action/GoToLink?url=https://openjdk.java.net/jeps/413">Code Snippets in Java API Documentation</a></td></tr><tr><td>416:</td><td><a href="https://www.oschina.net/action/GoToLink?url=https://openjdk.java.net/jeps/416">Reimplement Core Reflection with Method Handles</a></td></tr><tr><td>417:</td><td><a href="https://www.oschina.net/action/GoToLink?url=https://openjdk.java.net/jeps/417">Vector API (Third Incubator)</a></td></tr><tr><td>418:</td><td><a href="https://www.oschina.net/action/GoToLink?url=https://openjdk.java.net/jeps/418">Internet-Address Resolution SPI</a></td></tr><tr><td>419:</td><td><a href="https://www.oschina.net/action/GoToLink?url=https://openjdk.java.net/jeps/419">Foreign Function &amp; Memory API (Second Incubator)</a></td></tr><tr><td>420:</td><td><a href="https://www.oschina.net/action/GoToLink?url=https://openjdk.java.net/jeps/420">Pattern Matching for switch (Second Preview)</a></td></tr><tr><td>421:</td><td><a href="https://www.oschina.net/action/GoToLink?url=https://openjdk.java.net/jeps/421">Deprecate Finalization for Removal</a></td></tr></tbody></table><p>该版本中并没有增加很多新特性，只是对GC、加密、安全库、字符集、I/O做一些改进</p><h1 id="JDK17"><a href="#JDK17" class="headerlink" title="JDK17"></a>JDK17</h1><p>JDK/Java 17 总共包含 14 个 JEP，具体如下：</p><table><thead><tr><th>306:</th><th><a href="https://www.oschina.net/action/GoToLink?url=https://openjdk.java.net/jeps/306">Restore Always-Strict Floating-Point Semantics</a></th></tr></thead><tbody><tr><td>356:</td><td><a href="https://www.oschina.net/action/GoToLink?url=https://openjdk.java.net/jeps/356">Enhanced Pseudo-Random Number Generators</a></td></tr><tr><td>382:</td><td><a href="https://www.oschina.net/action/GoToLink?url=https://openjdk.java.net/jeps/382">New macOS Rendering Pipeline</a></td></tr><tr><td>391:</td><td><a href="https://www.oschina.net/action/GoToLink?url=https://openjdk.java.net/jeps/391">macOS/AArch64 Port</a></td></tr><tr><td>398:</td><td><a href="https://www.oschina.net/action/GoToLink?url=https://openjdk.java.net/jeps/398">Deprecate the Applet API for Removal</a></td></tr><tr><td>403:</td><td><a href="https://www.oschina.net/action/GoToLink?url=https://openjdk.java.net/jeps/403">Strongly Encapsulate JDK Internals</a></td></tr><tr><td>406:</td><td><a href="https://www.oschina.net/action/GoToLink?url=https://openjdk.java.net/jeps/406">Pattern Matching for switch (Preview)</a></td></tr><tr><td>407:</td><td><a href="https://www.oschina.net/action/GoToLink?url=https://openjdk.java.net/jeps/407">Remove RMI Activation</a></td></tr><tr><td>409:</td><td><a href="https://www.oschina.net/action/GoToLink?url=https://openjdk.java.net/jeps/409">Sealed Classes</a></td></tr><tr><td>410:</td><td><a href="https://www.oschina.net/action/GoToLink?url=https://openjdk.java.net/jeps/410">Remove the Experimental AOT and JIT Compiler</a></td></tr><tr><td>411:</td><td><a href="https://www.oschina.net/action/GoToLink?url=https://openjdk.java.net/jeps/411">Deprecate the Security Manager for Removal</a></td></tr><tr><td>412:</td><td><a href="https://www.oschina.net/action/GoToLink?url=https://openjdk.java.net/jeps/412">Foreign Function &amp; Memory API (Incubator)</a></td></tr><tr><td>414:</td><td><a href="https://www.oschina.net/action/GoToLink?url=https://openjdk.java.net/jeps/414">Vector API (Second Incubator)</a></td></tr><tr><td>415:</td><td><a href="https://www.oschina.net/action/GoToLink?url=https://openjdk.java.net/jeps/415">Context-Specific Deserialization Filters</a></td></tr></tbody></table><h2 id="sealed关键字"><a href="#sealed关键字" class="headerlink" title="sealed关键字"></a>sealed关键字</h2><blockquote><p>被 sealed 修饰，说明它是一个密封类，并且只允许指定的 子类继承。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.jdk17;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 由sealed修饰的类通过permits来控制可以减继承实现的类</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">sealed</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span> <br>    <span class="hljs-comment">//允许实现的类</span><br>    <span class="hljs-keyword">permits</span> Circle, Rectangle &#123;<br>    <br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Shape</span>&#123;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Shape</span>&#123;<br><br>&#125;<br><br><span class="hljs-comment">//The type Start extending a sealed class Shape should be a permitted subtype of Shape</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Start</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Shape</span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Stream类改进"><a href="#Stream类改进" class="headerlink" title="Stream类改进"></a>Stream类改进</h2><h2 id="Random类改进"><a href="#Random类改进" class="headerlink" title="Random类改进"></a>Random类改进</h2><h1 id="JDK16"><a href="#JDK16" class="headerlink" title="JDK16"></a>JDK16</h1><ol><li>Mentioned Below are Some of the New Features Added in Java 16:</li><li> Foreign Linker API</li><li>Warnings for Value-Based Classes</li><li>Strong Encapsulation</li><li>Moving Z Garbage Collector Thread-Stack Processing</li><li>A Flexible Metaspace Capability</li><li>Added C++ 14 Language Features</li><li>Records Classes</li><li>A Vector API</li><li> Pattern Matching</li><li>jpackage Tool for Packaging Self-Contained Java Applications.</li><li>OpenJDK source code repositories Migration from Mercurial to Git.</li></ol><h1 id="JDK15"><a href="#JDK15" class="headerlink" title="JDK15"></a>JDK15</h1><h2 id="ZGC转正"><a href="#ZGC转正" class="headerlink" title="ZGC转正"></a>ZGC转正</h2><h1 id="JDK14"><a href="#JDK14" class="headerlink" title="JDK14"></a>JDK14</h1><h2 id="Record关键字"><a href="#Record关键字" class="headerlink" title="Record关键字"></a>Record关键字</h2><p>Java 编译器将为 record 类型生成 equals()，hashCode()，toString() 方法，以及生成适当的构造函数，并且为所有字段生成 getter 和 setter </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">record</span> <span class="hljs-title class_">Point</span><span class="hljs-params">(<span class="hljs-type">double</span> x, <span class="hljs-type">double</span> y)</span> &#123; &#125;<br><span class="hljs-comment">//等同于</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> x;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> y;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Point</span><span class="hljs-params">(<span class="hljs-type">double</span> x, <span class="hljs-type">double</span> y)</span> &#123;<br>        <span class="hljs-built_in">this</span>.x = x;<br>        <span class="hljs-built_in">this</span>.y = y;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getX</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getY</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> y;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="有用信息空指针异常"><a href="#有用信息空指针异常" class="headerlink" title="有用信息空指针异常"></a>有用信息空指针异常</h2><p>通过 JVM 参数中添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">-XX:+ShowCodeDetailsInExceptionMessages<br></code></pre></td></tr></table></figure><p>可以在空指针异常中获取更为详细的调用信息，更快的定位和解决问题。</p><h2 id="接口类型匹配"><a href="#接口类型匹配" class="headerlink" title="接口类型匹配"></a>接口类型匹配</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (o <span class="hljs-keyword">instanceof</span> String) &#123;<br>  <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> (String)o;<br>  System.out.println(s.length);<br>&#125;<br></code></pre></td></tr></table></figure><p>自动转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (o <span class="hljs-keyword">instanceof</span> String s) &#123;<br>    System.out.println(s.length());<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="JDK13"><a href="#JDK13" class="headerlink" title="JDK13"></a>JDK13</h1><h2 id="文本块"><a href="#文本块" class="headerlink" title="文本块"></a>文本块</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">htmlBlock</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">                   &lt;html&gt;</span><br><span class="hljs-string">                     &lt;body&gt;</span><br><span class="hljs-string">                       &lt;p&gt;My web page&lt;/p&gt;</span><br><span class="hljs-string">                     &lt;/body&gt;</span><br><span class="hljs-string">                   &lt;html&gt;</span><br><span class="hljs-string">                  &quot;&quot;&quot;</span>;<br></code></pre></td></tr></table></figure><h2 id="String类增强"><a href="#String类增强" class="headerlink" title="String类增强"></a>String类增强</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">formatted(): This formats the string using the string itself as the format string and is equivalent to calling <span class="hljs-title function_">format</span><span class="hljs-params">(<span class="hljs-built_in">this</span>, args)</span><br>stripIndent(): This removes incidental spaces from the string. This is useful <span class="hljs-keyword">if</span> you are reading multi-line strings and want to apply the same elimination of incidental whitespace as happens with an explicit declaration.<br>translateEscapes(): This returns the string with escape sequences, (e.g. r) translated into the appropriate Unicode value.<br></code></pre></td></tr></table></figure><h1 id="JDK12"><a href="#JDK12" class="headerlink" title="JDK12"></a>JDK12</h1><h2 id="Switch-表达式"><a href="#Switch-表达式" class="headerlink" title="Switch 表达式"></a>Switch 表达式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">var</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> MONDAY;<br><span class="hljs-type">int</span> <span class="hljs-variable">numLetters</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">switch</span> (day) &#123;<br>    <span class="hljs-keyword">case</span> MONDAY:<br>    <span class="hljs-keyword">case</span> FRIDAY:<br>    <span class="hljs-keyword">case</span> SUNDAY:<br>        numLetters = <span class="hljs-number">6</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> TUESDAY:<br>        numLetters = <span class="hljs-number">7</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> THURSDAY:<br>    <span class="hljs-keyword">case</span> SATURDAY:<br>        numLetters = <span class="hljs-number">8</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> WEDNESDAY:<br>        numLetters = <span class="hljs-number">9</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;Huh? &quot;</span> + day);<br>&#125;<br></code></pre></td></tr></table></figure><p>新版本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">numLetters</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">switch</span> (day) &#123;<br>    <span class="hljs-keyword">case</span> MONDAY, FRIDAY, SUNDAY -&gt; <span class="hljs-number">6</span>;<br>    <span class="hljs-keyword">case</span> TUESDAY -&gt; <span class="hljs-number">7</span>;<br>    <span class="hljs-keyword">case</span> THURSDAY, SATURDAY -&gt; <span class="hljs-number">8</span>;<br>    <span class="hljs-keyword">case</span> WEDNESDAY -&gt; <span class="hljs-number">9</span>;<br>    <span class="hljs-keyword">default</span> -&gt; <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;Huh? &quot;</span> + day);<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="JDK11"><a href="#JDK11" class="headerlink" title="JDK11"></a>JDK11</h1><h2 id="局部变量引入Lambda"><a href="#局部变量引入Lambda" class="headerlink" title="局部变量引入Lambda"></a>局部变量引入Lambda</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">list.stream()<br> .map((<span class="hljs-keyword">var</span> s) -&gt; s.toLowerCase())<br> .collect(Collectors.toList());<br></code></pre></td></tr></table></figure><h2 id="String类增强-1"><a href="#String类增强-1" class="headerlink" title="String类增强"></a>String类增强</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-title function_">isBlank</span><span class="hljs-params">()</span>: Returns <span class="hljs-literal">true</span> <span class="hljs-keyword">if</span> the string is empty or contains only white space codepoints, otherwise <span class="hljs-literal">false</span>.<br>Stream <span class="hljs-title function_">lines</span><span class="hljs-params">()</span>: Returns a stream of lines extracted from <span class="hljs-built_in">this</span> string, separated by line terminators.<br>String <span class="hljs-title function_">repeat</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span>: Returns a string whose value is the concatenation of <span class="hljs-built_in">this</span> string repeated count times.<br>String <span class="hljs-title function_">strip</span><span class="hljs-params">()</span>: Returns a string whose value is <span class="hljs-built_in">this</span> string, with all leading and trailing whitespace removed.<br>String <span class="hljs-title function_">stripLeading</span><span class="hljs-params">()</span>: Returns a string whose value is <span class="hljs-built_in">this</span> string, with all leading whitespace removed.<br>String <span class="hljs-title function_">stripTrailing</span><span class="hljs-params">()</span>: Returns a string whose value is <span class="hljs-built_in">this</span> string, with all trailing whitespace removed.<br></code></pre></td></tr></table></figure><h2 id="ZGC"><a href="#ZGC" class="headerlink" title="ZGC"></a>ZGC</h2><p>这是一种新的实验性垃圾收集器，设计用于需要大（数GB）堆和低延迟的应用程序。它使用一个单代堆，并与应用程序同时执行大多数（但不是全部）GC工作。它通过使用一个读取屏障来实现这一点，该屏障拦截应用程序对对象的每次读取，并确保返回的引用是正确的。这消除了在应用程序线程运行时能够同时重新定位对象的问题。</p><p>ZGC基于区域（如G1），支持NUMA并进行压缩。它不打算用作通用收集器。</p><h1 id="JDK10"><a href="#JDK10" class="headerlink" title="JDK10"></a>JDK10</h1><h2 id="var关键字"><a href="#var关键字" class="headerlink" title="var关键字"></a>var关键字</h2><p>局部变量类型自动推断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">var</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();  <span class="hljs-comment">// infers ArrayList&lt;String&gt;</span><br><span class="hljs-type">var</span> <span class="hljs-variable">stream</span> <span class="hljs-operator">=</span> list.stream();          <span class="hljs-comment">// infers Stream&lt;String&gt;</span><br></code></pre></td></tr></table></figure><h2 id="集合增强"><a href="#集合增强" class="headerlink" title="集合增强"></a>集合增强</h2><p>List，Set，Map 提供了静态方法<code>copyOf()</code>返回入参集合的一个不可变拷贝。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> &lt;E&gt; List&lt;E&gt; <span class="hljs-title function_">copyOf</span><span class="hljs-params">(Collection&lt;? extends E&gt; coll)</span> &#123;     <br>    <span class="hljs-keyword">return</span> ImmutableCollections.listCopy(coll); <br>&#125; <br></code></pre></td></tr></table></figure><h2 id="G1并行Full-GC"><a href="#G1并行Full-GC" class="headerlink" title="G1并行Full GC"></a>G1并行Full GC</h2><h1 id="JDK9"><a href="#JDK9" class="headerlink" title="JDK9"></a>JDK9</h1><h2 id="接口中允许私有方法"><a href="#接口中允许私有方法" class="headerlink" title="接口中允许私有方法"></a>接口中允许私有方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Intf</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m</span><span class="hljs-params">(String s)</span>&#123;<br>        System.out.println(s);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="集合工厂方法"><a href="#集合工厂方法" class="headerlink" title="集合工厂方法"></a>集合工厂方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Set&lt;Integer&gt; set = Set.of(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>List&lt;Integer&gt; list = List.of(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>Map&lt;String, Integer&gt; map = Map.of(<span class="hljs-string">&quot;one&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&quot;two&quot;</span>, <span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><h2 id="try-with-resources-增强"><a href="#try-with-resources-增强" class="headerlink" title="try-with-resources 增强"></a>try-with-resources 增强</h2><p>jdk9之前只能在try-with-resources里声明变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> (<span class="hljs-type">FileInputStream</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;a.txt&quot;</span>))&#123;<br>        file.read();<br>    &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>        e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><p>jdk9后可以在外面写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">FileInputStream</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;a.txt&quot;</span>);<br>  <span class="hljs-keyword">try</span> (file)&#123;<br>        file.read();<br>    &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>        e.printStackTrace();<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="响应式流"><a href="#响应式流" class="headerlink" title="响应式流"></a>响应式流</h2><p>新增了 <code>java.util.concurrent.Flow</code>类</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1664102907847-74807b88-8427-493f-bdd5-1ed0be1bd274.png#averageHue=%232e2e2e&clientId=u908746c3-f1f3-4&from=paste&height=431&id=ufa0914c5&originHeight=862&originWidth=1598&originalType=binary&ratio=1&rotation=0&showTitle=false&size=126214&status=done&style=none&taskId=uf8cb8388-894b-4a89-a0e7-35db981bebe&title=&width=799" alt="image.png"></p><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><p>模块化的出现主要是为了减少包的大小，对不同模块的权限控制更加精细</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">[open] <span class="hljs-keyword">module</span> &lt;<span class="hljs-keyword">module</span>&gt; &#123;        <br>    &lt;<span class="hljs-keyword">module</span>-statement&gt;;        <br>    &lt;<span class="hljs-keyword">module</span>-statement&gt;;        <br>... <br>&#125; <br></code></pre></td></tr></table></figure><p>open修饰符是可选的，它声明一个开放的模块。 一个开放的模块导出所有的包，以便其他模块使用反射访问。 <module> 是要定义的模块的名称。 <module-statement> 是一个模块语句。 模块声明中可以包含零个或多个模块语句。 如果它存在，它可以是五种类型的语句之一：</p><ul><li>导出语句（exports statement）；</li><li>开放语句（opens statement）；</li><li>需要语句（requires statement）；</li><li>使用语句（uses statement）；</li><li>提供语句（provides statement）。</li></ul><p>参考：<a href="https://openjdk.org/projects/jigsaw/quick-start">https://openjdk.org/projects/jigsaw/quick-start</a></p><h2 id="进程-API"><a href="#进程-API" class="headerlink" title="进程 API"></a>进程 API</h2><p>新增了<code>java.lang.ProcessHandle</code>类获取进程相关信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProcessDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 获取当前正在运行的 JVM 的进程</span><br>        <span class="hljs-type">ProcessHandle</span> <span class="hljs-variable">currentProcess</span> <span class="hljs-operator">=</span> ProcessHandle.current();<br>        System.out.println(<span class="hljs-string">&quot;进程pid =&quot;</span>+currentProcess.pid());<br>        System.out.println(<span class="hljs-string">&quot;进程信息&quot;</span>+currentProcess.info());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1664072790420-68db22e4-a3d8-42d5-b58a-9151bbc7f43e.png#averageHue=%233e4244&clientId=u908746c3-f1f3-4&from=paste&height=428&id=u5484f0f4&originHeight=856&originWidth=868&originalType=binary&ratio=1&rotation=0&showTitle=false&size=391054&status=done&style=none&taskId=uac47871b-3c5a-4f2c-8c8f-cb9d56bb093&title=&width=434" alt="image.png"></p><h2 id="Jshell"><a href="#Jshell" class="headerlink" title="Jshell"></a>Jshell</h2><p>可实现java控制台代码交互式编程（类似输入脚本）<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1664034925006-d1cba058-2477-47bf-ba20-ae9645fc3f30.png#averageHue=%23313131&clientId=u908746c3-f1f3-4&from=paste&height=247&id=u9dae5e36&originHeight=494&originWidth=902&originalType=binary&ratio=1&rotation=0&showTitle=false&size=51900&status=done&style=none&taskId=ufee7cdbe-8552-437b-ae1c-0868d54e21b&title=&width=451" alt="image.png"></p><h1 id="JDK8"><a href="#JDK8" class="headerlink" title="JDK8"></a>JDK8</h1><h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><p>该库位于<code>java.util.function</code>包下，可以将函数作为参数进行传递、运行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> java8;<br><br><span class="hljs-keyword">import</span> java.util.function.Function;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FunctionDemo</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Function&lt;String, String&gt; function = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>&lt;&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> String <span class="hljs-title function_">apply</span><span class="hljs-params">(String s)</span> &#123;<br>                <span class="hljs-keyword">return</span> String.format(<span class="hljs-string">&quot;modify %s&quot;</span>,s);<br>            &#125;<br>        &#125;;<br>        System.out.println(function.apply(<span class="hljs-string">&quot;hello&quot;</span>));<br>        m0(function);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m0</span><span class="hljs-params">(Function&lt;String,String&gt; function)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>        function.apply(s);<br>        <span class="hljs-comment">//...</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><p>lambda语法糖减少一定的代码量，格式 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">(parameters) -&gt; expression 或 (parameters) -&gt;&#123; statements; &#125;<br></code></pre></td></tr></table></figure><p><a href="https://www.yuque.com/aichihongdouheyumi/blog/yi11qm">Java 8 中 Consumer, Supplier, Predicate and Function的应用</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Lambda</span> &#123;<br>    <span class="hljs-comment">//接口</span><br>    <span class="hljs-keyword">interface</span> <span class="hljs-title class_">itf</span> &#123;<br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">m</span><span class="hljs-params">(String s)</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">itf</span> <span class="hljs-variable">itf0</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">itf</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m</span><span class="hljs-params">(String s)</span> &#123;<br>                System.out.println(s);<br>            &#125;<br>        &#125;;<br>        <span class="hljs-type">itf</span> <span class="hljs-variable">itf1</span> <span class="hljs-operator">=</span> s -&gt; System.out.println(s);<br>        itf0.m(<span class="hljs-string">&quot;hello0&quot;</span>);<br>        itf1.m(<span class="hljs-string">&quot;hello1&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h2><p>该库位于<code>java.util.stream</code>包下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StreamDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">55</span>, <span class="hljs-number">3</span>&#125;;<br>        Stream&lt;String&gt; stream = Stream.of(args);<br>        stream.map(s -&gt; s);<span class="hljs-comment">//遍历元素执行function</span><br>        stream.collect(Collectors.toList());<span class="hljs-comment">//收集</span><br>        stream.filter(s-&gt;s.equals(<span class="hljs-number">0</span>));<span class="hljs-comment">//过滤</span><br>        stream.flatMapToInt(e-&gt; IntStream.of(e.length())).forEach(System.out::println);<span class="hljs-comment">//映射元素</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h2><p>Optional的出现是为了解决NPE问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Optional;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OptionalDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span>  <span class="hljs-variable">s0</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        s0 = Optional.ofNullable(s0).orElse(<span class="hljs-string">&quot;hello&quot;</span>);<span class="hljs-comment">//如果s0是null则返回为hello</span><br>        System.out.println(s0);<span class="hljs-comment">//hello</span><br>        <br>        <span class="hljs-type">String</span>  <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br>        s1 = Optional.ofNullable(s1).orElse(<span class="hljs-string">&quot;hello&quot;</span>);<span class="hljs-comment">//如果s1是null则返回为hello</span><br>        System.out.println(s1);<span class="hljs-comment">//abc</span><br>        <br>        <span class="hljs-type">String</span>  <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        s2 = Optional.of(s2).orElse(<span class="hljs-string">&quot;hello&quot;</span>);<span class="hljs-comment">//如果s2是null则NPE</span><br>        System.out.println(s2);<br>        <br>        <span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hi&quot;</span>;<br>        s3 = Optional.ofNullable(s3).map(s -&gt; s.substring(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)).orElse(<span class="hljs-string">&quot;Hi&quot;</span>);<br>        System.out.println(s3);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Date-Time-API"><a href="#Date-Time-API" class="headerlink" title="Date Time API"></a>Date Time API</h2><p>新增了<code>LocalDate</code>、<code>LocalDateTime</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.time.LocalDate;<br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.time.format.DateTimeFormatter;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DateDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <br>        <span class="hljs-type">LocalDate</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> LocalDate.now();<br>        date.isBefore(date);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">format</span> <span class="hljs-operator">=</span> date.format(DateTimeFormatter.ISO_ORDINAL_DATE);<br>        System.out.println(format);<br><br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">year</span> <span class="hljs-operator">=</span> time.getYear();<br>        System.out.println(year);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Nashorn-javascript引擎"><a href="#Nashorn-javascript引擎" class="headerlink" title="Nashorn javascript引擎"></a>Nashorn javascript引擎</h2><h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><p>jvav8：<a href="https://www.oracle.com/java/technologies/javase/8-whats-new.html">https://www.oracle.com/java/technologies/javase/8-whats-new.html</a><br>jvav18： <a href="https://www.oracle.com/java/technologies/javase/18-relnote-issues.html#NewFeature">https://www.oracle.com/java/technologies/javase/18-relnote-issues.html#NewFeature</a></p>]]></content>
    
    
    <categories>
      
      <category>Java相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java新特性</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工具篇-MAC常用软件</title>
    <link href="/2021/04/30/yuque/agh2bl/"/>
    <url>/2021/04/30/yuque/agh2bl/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1657550113309-db1cfa33-5aba-416a-88bf-78dfd8e5f885.png#clientId=u118c17d7-c25f-4&from=markdown&id=dqqd9&originHeight=376&originWidth=728&originalType=url&ratio=1&rotation=0&showTitle=false&size=188346&status=done&style=none&taskId=u317e3a4e-443d-455f-a859-5ad981c06b1&title=" alt="image.png"></p><h1 id="开发软件"><a href="#开发软件" class="headerlink" title="开发软件"></a>开发软件</h1><p>jb全家桶</p><p>postman</p><p>finalShell</p><p>iTerm</p><p>Termius</p><p>chrom</p><p>firefox</p><h1 id="VPN工具"><a href="#VPN工具" class="headerlink" title="VPN工具"></a>VPN工具</h1><p>easyconnect</p><h1 id="办公软件"><a href="#办公软件" class="headerlink" title="办公软件"></a>办公软件</h1><p><em>Prezi</em></p><p>wps</p><p>xmind</p><h1 id="文本编辑"><a href="#文本编辑" class="headerlink" title="文本编辑"></a>文本编辑</h1><p>sublime text</p><p>typora</p><h1 id="社交软件"><a href="#社交软件" class="headerlink" title="社交软件"></a>社交软件</h1><p>qq</p><p>wechat</p><p>dingtalk</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.macwk.com/">https://www.macwk.com/</a></p>]]></content>
    
    
    <categories>
      
      <category>工具相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>读书笔记-《计算机网络-第八版》</title>
    <link href="/2021/04/19/yuque/uionam/"/>
    <url>/2021/04/19/yuque/uionam/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1658222230527-c06949a4-774a-437c-9794-da573a33ef4f.png#averageHue=%230f5e9c&clientId=u1b6824b4-74ee-4&errorMessage=unknown%20error&from=paste&height=398&id=ubd16bbc1&originHeight=796&originWidth=1446&originalType=binary&ratio=1&rotation=0&showTitle=false&size=375198&status=error&style=none&taskId=ua6e64c16-b3c5-4a18-9cdc-c41e9f5e67e&title=&width=723" alt="image.png"></p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/2630542/1658222807460-8ff6d5c4-d683-4f97-8988-8434f4e8a76e.jpeg"></p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h1 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h1><h1 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h1><h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><h2 id="IP分类"><a href="#IP分类" class="headerlink" title="IP分类"></a>IP分类</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1666407597267-f5e06d9a-012b-49e3-beed-7f7862bdf0e1.png#averageHue=%23ddd89a&clientId=u688c06a6-03fd-4&from=ui&height=300&id=ub171250f&originHeight=726&originWidth=1332&originalType=binary&ratio=1&rotation=0&showTitle=false&size=382750&status=done&style=none&taskId=u88e5dc7d-c917-489c-ba30-389a4b2f5c2&title=&width=551" alt="ed2bfcab6d5e4081a6c4fbda84979441.png"></p><ul><li><p>组成分为网络号（net-id） 和主机号（host-id）</p><table><thead><tr><th>A类</th><th>00000000(0)-01111111(127) 首位0是固定位</th><th>00000000(0)-11111111(255)</th><th>00000000(0)-11111111(255)</th><th>00000000(0)-11111111(255)</th></tr></thead><tbody><tr><td>B类</td><td>10000000(128)-10111111(191)首2位10是固定位</td><td>同上</td><td>同上</td><td>同上</td></tr><tr><td>C类</td><td>11000000(192)-11011111(223)首3位110是固定位</td><td>同上</td><td>同上</td><td>同上</td></tr></tbody></table></li><li><p>网络号全0的和全1的不会被分配给主机所以需要-2</p></li><li><p>32位，一个字节占八位，总共4个字节</p><table><thead><tr><th><strong>地址类型</strong></th><th><strong>主机地址范围</strong></th><th><strong>可分配的网络数</strong></th><th><strong>每个网络内可分配的最大主机数</strong></th></tr></thead><tbody><tr><td>A类</td><td>1.0.0.0~126.255.255.255</td><td>2^7 - 2 = 126</td><td>2^24 - 2 = 16777214</td></tr><tr><td>B类</td><td>128.0.0.0~191.255.255.255</td><td>2^14 - 1 = 16383</td><td>2^16 - 2 = 65534</td></tr><tr><td>C类</td><td>192.0.0.0~223.255.255.255</td><td>2^21 - 1 = 2097151</td><td>2^8 - 2 = 254</td></tr></tbody></table></li></ul><blockquote><p>127字段的IP是电脑用于测试使用的，我们称之为本地回环测试地址</p></blockquote><h1 id="运输层"><a href="#运输层" class="headerlink" title="运输层"></a>运输层</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/2630542/1658554231077-3d84ae08-89d1-458d-a1a4-d31bd30f8f67.jpeg"></p><h1 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h1><h1 id="网络安全"><a href="#网络安全" class="headerlink" title="网络安全"></a>网络安全</h1><h1 id="互联网上的音频-视频服务"><a href="#互联网上的音频-视频服务" class="headerlink" title="互联网上的音频/视频服务"></a>互联网上的音频/视频服务</h1><h1 id="无线网络和移动网络"><a href="#无线网络和移动网络" class="headerlink" title="无线网络和移动网络"></a>无线网络和移动网络</h1><h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><p>链接: <a href="https://pan.baidu.com/s/1zyk5rREqN9DH7EFItK7ilQ">https://pan.baidu.com/s/1zyk5rREqN9DH7EFItK7ilQ</a> 提取码: d3f3 </p><p>微课：<a href="https://www.bilibili.com/video/BV1LF41177V7?share_source=copy_web&vd_source=5345bed06ef85f5b4de5b539a22afad6">https://www.bilibili.com/video/BV1LF41177V7</a></p><p>教材：<br><a href="https://www.yuque.com/attachments/yuque/0/2022/pdf/2630542/1669822632517-228d12a1-f879-420c-ab18-90e08278af63.pdf">计算机网络 第八版 谢希仁.pdf</a></p>]]></content>
    
    
    <categories>
      
      <category>计网相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java篇-Future-Task详解</title>
    <link href="/2021/04/12/yuque/uym77g/"/>
    <url>/2021/04/12/yuque/uym77g/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1657536436102-13575594-e9f5-4f76-8e7c-7961ba515b57.png#clientId=ue4cdc1b6-59b7-4&from=markdown&id=ObjoG&originHeight=213&originWidth=258&originalType=url&ratio=1&rotation=0&showTitle=false&size=42680&status=done&style=none&taskId=ub213abe9-070c-4ee0-ba24-daac43de1be&title=" alt="image.png"></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote><p>FutureTask is base concrete implementation of Future interface and provides <code>asynchronous</code> processing. It contains the methods to start and cancel a task and also methods that can return the state of the FutureTask as whether it’s completed or cancelled.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">FutureTask(Callable&lt;V&gt; callable)<br></code></pre></td></tr></table></figure><p>Creates a FutureTask that will, upon running, execute the given Callable.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">FutureTask(Runnable runnable, V result)<br></code></pre></td></tr></table></figure><p>Creates a FutureTask that will, upon running, execute the given Runnable, and arrange that get will return the given result on successful completion.</p><p>类图</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/image-20210418142037763.png#id=oGIw7&originHeight=372&originWidth=401&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>对应的相关方法和属性</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/image-20210418142238155.png#id=T5btf&originHeight=760&originWidth=477&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>运行状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The run state of this task, initially NEW.  The run state</span><br><span class="hljs-comment"> * transitions to a terminal state only in methods set,</span><br><span class="hljs-comment"> * setException, and cancel.  During completion, state may take on</span><br><span class="hljs-comment"> * transient values of COMPLETING (while outcome is being set) or</span><br><span class="hljs-comment"> * INTERRUPTING (only while interrupting the runner to satisfy a</span><br><span class="hljs-comment"> * cancel(true)). Transitions from these intermediate to final</span><br><span class="hljs-comment"> * states use cheaper ordered/lazy writes because values are unique</span><br><span class="hljs-comment"> * and cannot be further modified.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Possible state transitions:</span><br><span class="hljs-comment"> * NEW -&gt; COMPLETING -&gt; NORMAL</span><br><span class="hljs-comment"> * NEW -&gt; COMPLETING -&gt; EXCEPTIONAL</span><br><span class="hljs-comment"> * NEW -&gt; CANCELLED</span><br><span class="hljs-comment"> * NEW -&gt; INTERRUPTING -&gt; INTERRUPTED</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> state;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">NEW</span>          <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">COMPLETING</span>   <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">NORMAL</span>       <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">EXCEPTIONAL</span>  <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">CANCELLED</span>    <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">INTERRUPTING</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">INTERRUPTED</span>  <span class="hljs-operator">=</span> <span class="hljs-number">6</span>;<br></code></pre></td></tr></table></figure><p>底层RUN方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (state != NEW ||!UNSAFE.compareAndSwapObject(<span class="hljs-built_in">this</span>, runnerOffset,<span class="hljs-literal">null</span>, Thread.currentThread()))<span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        Callable&lt;V&gt; c = callable;<br>        <span class="hljs-keyword">if</span> (c != <span class="hljs-literal">null</span> &amp;&amp; state == NEW) &#123;<br>            V result;<br>            <span class="hljs-type">boolean</span> ran;<br>            <span class="hljs-keyword">try</span> &#123;<br>                result = c.call();<br>                ran = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>                result = <span class="hljs-literal">null</span>;<br>                ran = <span class="hljs-literal">false</span>;<br>                setException(ex);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (ran)<br>                set(result);<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">// runner must be non-null until state is settled to</span><br>        <span class="hljs-comment">// prevent concurrent calls to run()</span><br>        runner = <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">// state must be re-read after nulling runner to prevent</span><br>        <span class="hljs-comment">// leaked interrupts</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> state;<br>        <span class="hljs-keyword">if</span> (s &gt;= INTERRUPTING)<br>            handlePossibleCancellationInterrupt(s);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Caculator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span>&lt;String&gt;&#123;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        Thread.sleep(<span class="hljs-number">2000</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;当前系统时间：&quot;</span>+System.currentTimeMillis());<br><br>        <span class="hljs-keyword">return</span> Thread.currentThread().getName()+<span class="hljs-string">&quot; &quot;</span>+System.currentTimeMillis();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br><br>        <span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">threadPoolExecutor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">200</span>, TimeUnit.MICROSECONDS, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;(<span class="hljs-number">30</span>));<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br><br>            <span class="hljs-type">FutureTask</span> <span class="hljs-variable">futureTask</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Caculator</span>());<br><br>            threadPoolExecutor.submit(futureTask);<br><br>        &#125;<br><br>        threadPoolExecutor.shutdown();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/FutureTask.html">JDK1.7 FutureTask</a></p>]]></content>
    
    
    <categories>
      
      <category>Java相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Future-Task</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>笔记篇-Google Guava快速入门</title>
    <link href="/2021/04/11/yuque/iytlaf/"/>
    <url>/2021/04/11/yuque/iytlaf/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1657529199002-7af4ee49-befd-4cb2-9a1f-541693d5ef92.png#clientId=u1e217968-819e-4&from=markdown&id=AXCce&originHeight=390&originWidth=800&originalType=url&ratio=1&rotation=0&showTitle=false&size=305213&status=done&style=none&taskId=u4c2da05b-167b-4106-bf78-c12149e2c3e&title=" alt="image.png"></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote><p>Guava是一种基于开源的Java库，其中包含谷歌正在由他们很多项目使用的很多核心库。这个库是为了方便编码，并减少编码错误。这个库提供用于集合，缓存，支持原语，并发性，常见注解，字符串处理，I/O和验证的实用方法。</p></blockquote><h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ul><li>标准化 - Guava库是由谷歌托管。</li><li>高效 - 可靠，快速和有效的扩展JAVA标准库</li><li>优化 -Guava库经过高度的优化。</li></ul><h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.google.guava<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>guava<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>30.1.1-jre<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- or, for Android: --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>30.1.1-android<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><p>Guava 的 Java 反射机制工具类</p><h2 id="基本工具"><a href="#基本工具" class="headerlink" title="基本工具"></a>基本工具</h2><p>Make using the Java language more pleasant.</p><ul><li><a href="https://github.com/google/guava/wiki/UsingAndAvoidingNullExplained">Using and avoiding null</a>: <code>null</code> can be ambiguous, can cause confusing errors, and is sometimes just plain unpleasant. Many Guava utilities reject and fail fast on nulls, rather than accepting them blindly.</li><li><a href="https://github.com/google/guava/wiki/PreconditionsExplained">Preconditions</a>: Test preconditions for your methods more easily.</li><li><a href="https://github.com/google/guava/wiki/CommonObjectUtilitiesExplained">Common object methods</a>: Simplify implementing <code>Object</code> methods, like <code>hashCode()</code> and <code>toString()</code>.</li><li><a href="https://github.com/google/guava/wiki/OrderingExplained">Ordering</a>: Guava’s powerful “fluent <code>Comparator</code>“ class.</li><li><a href="https://github.com/google/guava/wiki/ThrowablesExplained">Throwables</a>: Simplify propagating and examining exceptions and errors.</li></ul><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>Guava’s extensions to the JDK collections ecosystem. These are some of the most mature and popular parts of Guava.</p><ul><li><a href="https://github.com/google/guava/wiki/ImmutableCollectionsExplained">Immutable collections</a>, for defensive programming, constant collections, and improved efficiency.</li><li><a href="https://github.com/google/guava/wiki/NewCollectionTypesExplained">New collection types</a>, for use cases that the JDK collections don’t address as well as they could: multisets, multimaps, tables, bidirectional maps, and more.</li><li><a href="https://github.com/google/guava/wiki/CollectionUtilitiesExplained">Powerful collection utilities</a>, for common operations not provided in <code>java.util.Collections</code>.</li><li><a href="https://github.com/google/guava/wiki/CollectionHelpersExplained">Extension utilities</a>: writing a <code>Collection</code> decorator? Implementing <code>Iterator</code>? We can make that easier.</li></ul><h2 id="图表"><a href="#图表" class="headerlink" title="图表"></a>图表</h2><p>a library for modeling graph</p><ul><li> structured data, that is, entities and the relationships between them. Key features include: </li><li> <a href="https://github.com/google/guava/wiki/GraphsExplained#graph">Graph</a>: a graph whose edges are anonymous entities with no identity or information of their own. </li><li> <a href="https://github.com/google/guava/wiki/GraphsExplained#valuegraph">ValueGraph</a>: a graph whose edges have associated non-unique values. </li><li> <a href="https://github.com/google/guava/wiki/GraphsExplained#network">Network</a>: a graph whose edges are unique objects. </li><li> Support for graphs that are mutable and immutable, directed and undirected, and several other properties. </li></ul><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p><a href="https://github.com/google/guava/wiki/CachesExplained">缓存</a>: Local caching, done right, and supporting a wide variety of expiration behaviors.</p><h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><ul><li><a href="https://github.com/google/guava/wiki/FunctionalExplained">函数式编程</a>: Used sparingly, Guava’s functional idioms can significantly simplify code.</li></ul><h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><ul><li>并发: Powerful, simple abstractions to make it easier to write correct concurrent code. <ul><li><a href="https://github.com/google/guava/wiki/ListenableFutureExplained">ListenableFuture</a>: Futures, with callbacks when they are finished.</li><li><a href="https://github.com/google/guava/wiki/ServiceExplained">Service</a>: Things that start up and shut down, taking care of the difficult state logic for you.</li></ul></li></ul><h2 id="字符操作"><a href="#字符操作" class="headerlink" title="字符操作"></a>字符操作</h2><ul><li><a href="https://github.com/google/guava/wiki/StringsExplained">字符操作</a>: A few extremely useful string utilities: splitting, joining, padding, and more.</li></ul><h2 id="原生类型"><a href="#原生类型" class="headerlink" title="原生类型"></a>原生类型</h2><ul><li><a href="https://github.com/google/guava/wiki/PrimitivesExplained">原生类型</a>: operations on primitive types, like <code>int</code> and <code>char</code>, not provided by the JDK, including unsigned variants for some types.</li></ul><h2 id="区间"><a href="#区间" class="headerlink" title="区间"></a>区间</h2><ul><li><a href="https://github.com/google/guava/wiki/RangesExplained">区间</a>: Guava’s powerful API for dealing with ranges on <code>Comparable</code> types, both continuous and discrete.</li></ul><h2 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O</h2><ul><li><a href="https://github.com/google/guava/wiki/IOExplained">I/O</a>: Simplified I/O operations, especially on whole I/O streams and files, for Java 5 and 6.</li></ul><h2 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h2><ul><li><a href="https://github.com/google/guava/wiki/HashingExplained">哈希</a>: Tools for more sophisticated hashes than what’s provided by <code>Object.hashCode()</code>, including Bloom filters.</li></ul><h2 id="事件总线"><a href="#事件总线" class="headerlink" title="事件总线"></a>事件总线</h2><ul><li><a href="https://github.com/google/guava/wiki/EventBusExplained">事件总线</a>: Publish-subscribe-style communication between components without requiring the components to explicitly register with one another.</li></ul><h2 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h2><ul><li><a href="https://github.com/google/guava/wiki/MathExplained">数学运算</a>: Optimized, thoroughly tested math utilities not provided by the JDK.</li></ul><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><ul><li><a href="https://github.com/google/guava/wiki/ReflectionExplained">反射</a>: Guava utilities for Java’s reflective capabilities.</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://github.com/google/guava/wiki">官方文档</a></p><p><a href="https://github.com/google/guava">github guava 地址</a></p><p><a href="https://www.baeldung.com/guava-guide">https://www.baeldung.com/guava-guide</a></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Guava</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>笔记篇-Shell快速入门</title>
    <link href="/2021/04/07/yuque/vpacke/"/>
    <url>/2021/04/07/yuque/vpacke/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1657529542795-e9fc03f8-1f77-4bf7-9f2e-3f8e474e03c0.png#clientId=u322b1776-d2a5-4&errorMessage=unknown%20error&from=markdown&id=fLNKf&originHeight=338&originWidth=600&originalType=url&ratio=1&rotation=0&showTitle=false&size=171236&status=error&style=none&taskId=ucb9eb46d-338d-4f93-ad06-e8ca52c478f&title=" alt="image.png"></p><h1 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h1><blockquote><p>Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。Shell 既是一种命令语言，又是一种程序设计语言。</p></blockquote><h1 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h1><p>创建shell文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim shell.sh<br></code></pre></td></tr></table></figure><p>写入脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;Hello World&quot;<br></code></pre></td></tr></table></figure><p>赋予权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod +x shell.sh<br></code></pre></td></tr></table></figure><p>运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./shell<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Hello World<br></code></pre></td></tr></table></figure><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="Shell-变量"><a href="#Shell-变量" class="headerlink" title="Shell 变量"></a>Shell 变量</h2><p>变量名的命名须遵循如下规则：</p><ul><li>首个字符必须为字母（a-z，A-Z）。</li><li>中间不能有空格，可以使用下划线（_）。</li><li>不能使用标点符号。</li><li>不能使用bash里的关键字（可用help命令查看保留关键字）。</li></ul><p>除了显式地直接赋值，还可以用语句给变量赋值，如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">for file in `ls /etc`<br></code></pre></td></tr></table></figure><p>以上语句将 /etc 下目录的文件名循环出来。</p><hr><h3 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h3><p>使用一个定义过的变量，只要在变量名前面加美元符号即可，如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">name=&quot;mikey&quot;<br>echo $name<br>echo $&#123;name&#125;<br></code></pre></td></tr></table></figure><p>变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界，比如下面这种情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> skill <span class="hljs-keyword">in</span> Ada Coffe Action Java ; <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;I am good at <span class="hljs-variable">$&#123;skill&#125;</span>Script&quot;</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>如果不给skill变量加花括号，写成echo “I am good at <img src="https://g.yuque.com/gr/latex?skillScript%22%EF%BC%8C%E8%A7%A3%E9%87%8A%E5%99%A8%E5%B0%B1%E4%BC%9A%E6%8A%8A#card=math&code=skillScript%22%EF%BC%8C%E8%A7%A3%E9%87%8A%E5%99%A8%E5%B0%B1%E4%BC%9A%E6%8A%8A&id=kvChE">skillScript当成一个变量（其值为空），代码执行结果就不是我们期望的样子了。</p><p>推荐给所有变量加上花括号，这是个好的编程习惯。</p><p>已定义的变量，可以被重新定义，如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">your_name=&quot;tom&quot;<br>echo $your_name<br>your_name=&quot;alibaba&quot;<br>echo $your_name<br></code></pre></td></tr></table></figure><p>这样写是合法的，但注意，第二次赋值的时候不能写<img src="https://g.yuque.com/gr/latex?your_name=%22alibaba%22%EF%BC%8C%E4%BD%BF%E7%94%A8%E5%8F%98%E9%87%8F%E7%9A%84%E6%97%B6%E5%80%99%E6%89%8D%E5%8A%A0%E7%BE%8E%E5%85%83%E7%AC%A6%EF%BC%88#card=math&code=your_name%3D%22alibaba%22%EF%BC%8C%E4%BD%BF%E7%94%A8%E5%8F%98%E9%87%8F%E7%9A%84%E6%97%B6%E5%80%99%E6%89%8D%E5%8A%A0%E7%BE%8E%E5%85%83%E7%AC%A6%EF%BC%88&id=iPrS2">）。</p><hr><h2 id="Shell-字符串"><a href="#Shell-字符串" class="headerlink" title="Shell 字符串"></a>Shell 字符串</h2><p>字符串是shell编程中最常用最有用的数据类型（除了数字和字符串，也没啥其它类型好用了），字符串可以用单引号，也可以用双引号，也可以不用引号。单双引号的区别跟PHP类似。</p><h3 id="单引号"><a href="#单引号" class="headerlink" title="单引号"></a>单引号</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">str=&#x27;this is a string&#x27;<br></code></pre></td></tr></table></figure><p>单引号字符串的限制：</p><ul><li>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；</li><li>单引号字串中不能出现单引号（对单引号使用转义符后也不行）。</li></ul><h3 id="双引号"><a href="#双引号" class="headerlink" title="双引号"></a>双引号</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">name=麦奇<br>str=&quot;Hello ,\&quot;$&#123;name&#125;\&quot;,How are you?&quot;<br>echo $str<br></code></pre></td></tr></table></figure><p>双引号的优点：</p><ul><li>双引号里可以有变量</li><li>双引号里可以出现转义字符</li></ul><h3 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a>拼接字符串</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">name=&quot;麦奇&quot;<br>greeting1=&quot;hello, &quot;$name&quot; !&quot;<br>greeting2=&quot;hello, $&#123;name&#125; !&quot;<br>echo $greeting1 $greeting2<br></code></pre></td></tr></table></figure><h3 id="获取字符串长度"><a href="#获取字符串长度" class="headerlink" title="获取字符串长度"></a>获取字符串长度</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">string=&quot;abcd&quot;<br>echo $&#123;#string&#125; #输出 4<br></code></pre></td></tr></table></figure><h3 id="切割字符串"><a href="#切割字符串" class="headerlink" title="切割字符串"></a>切割字符串</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">array=($&#123;line//\,/ &#125;)<br>for i in &quot;$&#123;!array[@]&#125;&quot;; do<br>echo &quot;$&#123;array[i]&#125;&quot;<br>done<br></code></pre></td></tr></table></figure><h3 id="提取子字符串"><a href="#提取子字符串" class="headerlink" title="提取子字符串"></a>提取子字符串</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">string=&quot;alibaba is a great company&quot;<br>echo $&#123;string:1:4&#125; #输出liba<br></code></pre></td></tr></table></figure><h3 id="查找子字符串"><a href="#查找子字符串" class="headerlink" title="查找子字符串"></a>查找子字符串</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">string=&quot;alibaba is a great company&quot;<br>echo `expr index &quot;$string&quot; is`<br></code></pre></td></tr></table></figure><p><strong>注意：</strong> 以上脚本中 “`” 是反引号，而不是单引号 “‘“，不要看错了哦。</p><hr><h2 id="Shell-数组"><a href="#Shell-数组" class="headerlink" title="Shell 数组"></a>Shell 数组</h2><p>bash支持一维数组（不支持多维数组），并且没有限定数组的大小。</p><p>类似与C语言，数组元素的下标由0开始编号。获取数组中的元素要利用下标，下标可以是整数或算术表达式，其值应大于或等于0。</p><h3 id="定义数组"><a href="#定义数组" class="headerlink" title="定义数组"></a>定义数组</h3><p>在Shell中，用括号来表示数组，数组元素用”空格”符号分割开。定义数组的一般形式为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">数组名=(值1 值2 ... 值n)<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">array_name=(value0 value1 value2 value3)<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">array_name=(<br>value0<br>value1<br>value2<br>value3<br>)<br></code></pre></td></tr></table></figure><p>还可以单独定义数组的各个分量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">array_name[0]=value0<br>array_name[1]=value1<br>array_name[n]=valuen<br></code></pre></td></tr></table></figure><p>可以不使用连续的下标，而且下标的范围没有限制。</p><h3 id="读取数组"><a href="#读取数组" class="headerlink" title="读取数组"></a>读取数组</h3><p>读取数组元素值的一般格式是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">&#123;数组名[下标]&#125;</span><br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">valuen=$&#123;array_name[n]&#125;<br></code></pre></td></tr></table></figure><p>使用@符号可以获取数组中的所有元素，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo $&#123;array_name[@]&#125;<br></code></pre></td></tr></table></figure><h3 id="获取数组的长度"><a href="#获取数组的长度" class="headerlink" title="获取数组的长度"></a>获取数组的长度</h3><p>获取数组长度的方法与获取字符串长度的方法相同，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">取得数组元素的个数</span><br>length=$&#123;#array_name[@]&#125;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">或者</span><br>length=$&#123;#array_name[*]&#125;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">取得数组单个元素的长度</span><br>lengthn=$&#123;#array_name[n]&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="Shell-注释"><a href="#Shell-注释" class="headerlink" title="Shell 注释"></a>Shell 注释</h2><p>以”#”开头的行就是注释，会被解释器忽略。</p><p>sh里没有多行注释，只能每一行加一个#号。只能像这样：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">--------------------------------------------</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">这是一个自动打ipa的脚本，基于webfrogs的ipa-build书写：</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">https://github.com/webfrogs/xcode_shell/blob/master/ipa-build</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">功能：自动为etao ios app打包，产出物为14个渠道的ipa包</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">特色：全自动打包，不需要输入任何参数</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">--------------------------------------------</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#### 用户配置区 开始 #####</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment">#</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">项目根目录，推荐将此脚本放在项目的根目录，这里就不用改了</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">应用名，确保和Xcode里Product下的target_name.app名字一致</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment">##### 用户配置区 结束  #####</span></span><br></code></pre></td></tr></table></figure><p>如果在开发过程中，遇到大段的代码需要临时注释起来，过一会儿又取消注释，怎么办呢？</p><p>每一行加个#符号太费力了，可以把这一段要注释的代码用一对<code>花括号</code>括起来，定义成一个函数，没有地方调用这个函数，这块代码就不会执行，达到了和注释一样的效果。</p><h2 id="Shell-传递参数"><a href="#Shell-传递参数" class="headerlink" title="Shell 传递参数"></a>Shell 传递参数</h2><p>我们可以在执行 Shell 脚本时，向脚本传递参数，脚本内获取参数的格式为：**$n<strong>。</strong>n** 代表一个数字，1 为执行脚本的第一个参数，2 为执行脚本的第二个参数，以此类推……</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>以下实例我们向脚本传递三个参数，并分别输出，其中 <strong>$0</strong> 为执行的文件名：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>echo &quot;Shell 传递参数实例！&quot;;<br>echo &quot;执行的文件名：$0&quot;;<br>echo &quot;第一个参数为：$1&quot;;<br>echo &quot;第二个参数为：$2&quot;;<br>echo &quot;第三个参数为：$3&quot;;<br></code></pre></td></tr></table></figure><p>为脚本设置可执行权限，并执行脚本，输出结果如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chmod</span> +x test.sh</span> <br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./test.sh 1 2 3</span><br>Shell 传递参数实例！<br>执行的文件名：test.sh<br>第一个参数为：1<br>第二个参数为：2<br>第三个参数为：3<br></code></pre></td></tr></table></figure><p>另外，还有几个特殊字符用来处理参数：</p><table><thead><tr><th>参数处理</th><th>说明</th></tr></thead><tbody><tr><td>$#</td><td>传递到脚本的参数个数</td></tr><tr><td>$*</td><td>以一个单字符串显示所有向脚本传递的参数。 如”$*”用「”」括起来的情况、以”$1 $2 … $n”的形式输出所有参数。</td></tr><tr><td>$$</td><td>脚本运行的当前进程ID号</td></tr><tr><td>$!</td><td>后台运行的最后一个进程的ID号</td></tr><tr><td>$@</td><td>与<img src="https://g.yuque.com/gr/latex?*%E7%9B%B8%E5%90%8C%EF%BC%8C%E4%BD%86%E6%98%AF%E4%BD%BF%E7%94%A8%E6%97%B6%E5%8A%A0%E5%BC%95%E5%8F%B7%EF%BC%8C%E5%B9%B6%E5%9C%A8%E5%BC%95%E5%8F%B7%E4%B8%AD%E8%BF%94%E5%9B%9E%E6%AF%8F%E4%B8%AA%E5%8F%82%E6%95%B0%E3%80%82%20%E5%A6%82%22#card=math&code=%2A%E7%9B%B8%E5%90%8C%EF%BC%8C%E4%BD%86%E6%98%AF%E4%BD%BF%E7%94%A8%E6%97%B6%E5%8A%A0%E5%BC%95%E5%8F%B7%EF%BC%8C%E5%B9%B6%E5%9C%A8%E5%BC%95%E5%8F%B7%E4%B8%AD%E8%BF%94%E5%9B%9E%E6%AF%8F%E4%B8%AA%E5%8F%82%E6%95%B0%E3%80%82%20%E5%A6%82%22&id=JL0Df">@”用「”」括起来的情况、以”$1” “<img src="https://g.yuque.com/gr/latex?2%22%20%E2%80%A6%20%22#card=math&code=2%22%20%E2%80%A6%20%22&id=w3iLU">n” 的形式输出所有参数。</td></tr><tr><td>$-</td><td>显示Shell使用的当前选项，与<a href="https://www.w3cschool.cn/linux/linux-comm-set.html">set命令</a></td></tr><tr><td>功能相同。</td><td></td></tr><tr><td>$?</td><td>显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>echo &quot;Shell 传递参数实例！&quot;;<br>echo &quot;第一个参数为：$1&quot;;<br>echo &quot;参数个数为：$#&quot;;<br>echo &quot;传递的参数作为一个字符串显示：$*&quot;;<br></code></pre></td></tr></table></figure><p>执行脚本，输出结果如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chmod</span> +x test.sh</span> <br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./test.sh 1 2 3</span><br>Shell 传递参数实例！<br>第一个参数为：1<br>参数个数为：3<br>传递的参数作为一个字符串显示：1 2 3<br></code></pre></td></tr></table></figure><p>$* 与 $@ 区别：</p><ul><li>相同点：都是引用所有参数。</li><li>不同点：只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，，则 “ * “ 等价于 “1 2 3”（传递了一个参数），而 “@” 等价于 “1” “2” “3”（传递了三个参数）。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>echo &quot;-- \$* 演示 ---&quot;<br>for i in &quot;$*&quot;; do<br>    echo $i<br>done<br><br>echo &quot;-- \$@ 演示 ---&quot;<br>for i in &quot;$@&quot;; do<br>    echo $i<br>done<br></code></pre></td></tr></table></figure><p>执行脚本，输出结果如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chmod</span> +x test.sh</span> <br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./test.sh 1 2 3</span><br>-- $* 演示 ---<br>1 2 3<br>-- $@ 演示 ---<br>1<br>2<br>3<br></code></pre></td></tr></table></figure><h2 id="Shell-基本运算符"><a href="#Shell-基本运算符" class="headerlink" title="Shell 基本运算符"></a>Shell 基本运算符</h2><p>Shell 和其他编程语言一样，支持多种运算符，包括：</p><ul><li>算数运算符</li><li>关系运算符</li><li>布尔运算符</li><li>字符串运算符</li><li>文件测试运算符</li></ul><p>expr 是一款表达式计算工具，使用它能完成表达式的求值操作。</p><p>注:运算符与数之间需要空格</p><p>例如，两个数相加(注意使用的是反引号 ` 而不是单引号 ‘)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><br>val=`expr 2 + 2`<br>echo &quot;两数之和为 : $val&quot;<br></code></pre></td></tr></table></figure><p>执行脚本，输出结果如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">两数之和为 : 4<br></code></pre></td></tr></table></figure><p>两点注意：</p><ul><li>表达式和运算符之间要有空格，例如 2+2 是不对的，必须写成 2 + 2，这与我们熟悉的大多数编程语言不一样。</li><li>完整的表达式要被 `` 包含，注意这个字符不是常用的单引号，在 Esc 键下边。</li></ul><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>下表列出了常用的算术运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>+</td><td>加法</td><td><code>expr $a + $b</code></td></tr><tr><td>结果为 30。</td><td></td><td></td></tr><tr><td>-</td><td>减法</td><td><code>expr $a - $b</code></td></tr><tr><td>结果为 -10。</td><td></td><td></td></tr><tr><td>*</td><td>乘法</td><td><code>expr $a \\* $b</code></td></tr><tr><td>结果为  200。</td><td></td><td></td></tr><tr><td>/</td><td>除法</td><td><code>expr $b / $a</code></td></tr><tr><td>结果为 2。</td><td></td><td></td></tr><tr><td>%</td><td>取余</td><td><code>expr $b % $a</code></td></tr><tr><td>结果为 0。</td><td></td><td></td></tr><tr><td>=</td><td>赋值</td><td>a=$b 将把变量 b 的值赋给 a。</td></tr><tr><td>==</td><td>相等。用于比较两个数字，相同则返回 true。</td><td>[ $a == $b ] 返回 false。</td></tr><tr><td>!=</td><td>不相等。用于比较两个数字，不相同则返回 true。</td><td>[ $a != $b ] 返回 true。</td></tr></tbody></table><p>注意：条件表达式要放在方括号之间，并且要有空格，例如: [<img src="https://g.yuque.com/gr/latex?a==#card=math&code=a%3D%3D&id=UJWRg">b] 是错误的，必须写成 [ $a == $b ]。</p><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>算术运算符实例如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><br>a=10<br>b=20<br><br>val=`expr $a + $b`<br>echo &quot;a + b : $val&quot;<br><br>val=`expr $a - $b`<br>echo &quot;a - b : $val&quot;<br><br>val=`expr $a \* $b`<br>echo &quot;a * b : $val&quot;<br><br>val=`expr $b / $a`<br>echo &quot;b / a : $val&quot;<br><br>val=`expr $b % $a`<br>echo &quot;b % a : $val&quot;<br><br>if [ $a == $b ]<br>then<br>   echo &quot;a 等于 b&quot;<br>fi<br>if [ $a != $b ]<br>then<br>   echo &quot;a 不等于 b&quot;<br>fi<br></code></pre></td></tr></table></figure><p>执行脚本，输出结果如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">a + b : 30<br>a - b : -10<br>a * b : 200<br>b / a : 2<br>b % a : 0<br>a 不等于 b<br></code></pre></td></tr></table></figure><blockquote><p>注意：乘号(<em>)前边必须加反斜杠()才能实现乘法运算；if…then…fi 是条件语句，后续将会讲解。在 MAC 中 shell 的 expr 语法是：$((表达式))，此处表达式中的 “</em>“ 不需要转义符号 “” 。</p></blockquote><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。</p><p>下表列出了常用的关系运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>-eq</td><td>检测两个数是否相等，相等返回 true。</td><td>[ $a -eq $b ] 返回 false。</td></tr><tr><td>-ne</td><td>检测两个数是否相等，不相等返回 true。</td><td>[ $a -ne $b ] 返回 true。</td></tr><tr><td>-gt</td><td>检测左边的数是否大于右边的，如果是，则返回 true。</td><td>[ $a -gt $b ] 返回 false。</td></tr><tr><td>-lt</td><td>检测左边的数是否小于右边的，如果是，则返回 true。</td><td>[ $a -lt $b ] 返回 true。</td></tr><tr><td>-ge</td><td>检测左边的数是否大于等于右边的，如果是，则返回 true。</td><td>[ $a -ge $b ] 返回 false。</td></tr><tr><td>-le</td><td>检测左边的数是否小于等于右边的，如果是，则返回 true。</td><td>[ $a -le $b ] 返回 true。</td></tr></tbody></table><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><p>关系运算符实例如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><br>a=10<br>b=20<br><br>if [ $a -eq $b ]<br>then<br>   echo &quot;$a -eq $b : a 等于 b&quot;<br>else<br>   echo &quot;$a -eq $b: a 不等于 b&quot;<br>fi<br>if [ $a -ne $b ]<br>then<br>   echo &quot;$a -ne $b: a 不等于 b&quot;<br>else<br>   echo &quot;$a -ne $b : a 等于 b&quot;<br>fi<br>if [ $a -gt $b ]<br>then<br>   echo &quot;$a -gt $b: a 大于 b&quot;<br>else<br>   echo &quot;$a -gt $b: a 不大于 b&quot;<br>fi<br>if [ $a -lt $b ]<br>then<br>   echo &quot;$a -lt $b: a 小于 b&quot;<br>else<br>   echo &quot;$a -lt $b: a 不小于 b&quot;<br>fi<br>if [ $a -ge $b ]<br>then<br>   echo &quot;$a -ge $b: a 大于或等于 b&quot;<br>else<br>   echo &quot;$a -ge $b: a 小于 b&quot;<br>fi<br>if [ $a -le $b ]<br>then<br>   echo &quot;$a -le $b: a 小于或等于 b&quot;<br>else<br>   echo &quot;$a -le $b: a 大于 b&quot;<br>fi<br></code></pre></td></tr></table></figure><p>执行脚本，输出结果如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">10 -eq 20: a 不等于 b<br>10 -ne 20: a 不等于 b<br>10 -gt 20: a 不大于 b<br>10 -lt 20: a 小于 b<br>10 -ge 20: a 小于 b<br>10 -le 20: a 小于或等于 b<br></code></pre></td></tr></table></figure><h2 id="布尔运算符"><a href="#布尔运算符" class="headerlink" title="布尔运算符"></a>布尔运算符</h2><p>下表列出了常用的布尔运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>!</td><td>非运算，表达式为 true 则返回 false，否则返回 true。</td><td>[ ! false ] 返回 true。</td></tr><tr><td>-o</td><td>或运算，有一个表达式为 true 则返回 true。</td><td>[ $a -lt 20 -o $b -gt 100 ] 返回 true。</td></tr><tr><td>-a</td><td>与运算，两个表达式都为 true 才返回 true。</td><td>[ $a -lt 20 -a $b -gt 100 ] 返回 false。</td></tr></tbody></table><h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><p>布尔运算符实例如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><br>a=10<br>b=20<br><br>if [ $a != $b ]<br>then<br>   echo &quot;$a != $b : a 不等于 b&quot;<br>else<br>   echo &quot;$a != $b: a 等于 b&quot;<br>fi<br>if [ $a -lt 100 -a $b -gt 15 ]<br>then<br>   echo &quot;$a -lt 100 -a $b -gt 15 : 返回 true&quot;<br>else<br>   echo &quot;$a -lt 100 -a $b -gt 15 : 返回 false&quot;<br>fi<br>if [ $a -lt 100 -o $b -gt 100 ]<br>then<br>   echo &quot;$a -lt 100 -o $b -gt 100 : 返回 true&quot;<br>else<br>   echo &quot;$a -lt 100 -o $b -gt 100 : 返回 false&quot;<br>fi<br>if [ $a -lt 5 -o $b -gt 100 ]<br>then<br>   echo &quot;$a -lt 5 -o $b -gt 100 : 返回 true&quot;<br>else<br>   echo &quot;$a -lt 5 -o $b -gt 100 : 返回 false&quot;<br>fi<br></code></pre></td></tr></table></figure><p>执行脚本，输出结果如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">10 != 20 : a 不等于 b<br>10 -lt 100 -a 20 -gt 15 : 返回 true<br>10 -lt 100 -o 20 -gt 100 : 返回 true<br>10 -lt 5 -o 20 -gt 100 : 返回 false<br></code></pre></td></tr></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>以下介绍 Shell 的逻辑运算符，假定变量 a 为 10，变量 b 为 20:</p><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>逻辑的 AND</td><td>[[ $a -lt 100 &amp;&amp; $b -gt 100 ]] 返回 false</td></tr><tr><td>&#124;&#124;</td><td>逻辑的 OR</td><td>[[ $a -lt 100 &#124;&#124; $b -gt 100 ]] 返回 true</td></tr></tbody></table><h3 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h3><p>逻辑运算符实例如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><br>a=10<br>b=20<br><br>if [[ $a -lt 100 &amp;&amp; $b -gt 100 ]]<br>then<br>   echo &quot;返回 true&quot;<br>else<br>   echo &quot;返回 false&quot;<br>fi<br><br>if [[ $a -lt 100 || $b -gt 100 ]]<br>then<br>   echo &quot;返回 true&quot;<br>else<br>   echo &quot;返回 false&quot;<br>fi<br></code></pre></td></tr></table></figure><p>执行脚本，输出结果如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">返回 false<br>返回 true<br></code></pre></td></tr></table></figure><h2 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h2><p>下表列出了常用的字符串运算符，假定变量 a 为 “abc”，变量 b 为 “efg”：</p><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>=</td><td>检测两个字符串是否相等，相等返回 true。</td><td>[ $a = $b ] 返回 false。</td></tr><tr><td>!=</td><td>检测两个字符串是否相等，不相等返回 true。</td><td>[ $a != $b ] 返回 true。</td></tr><tr><td>-z</td><td>检测字符串长度是否为0，为0返回 true。</td><td>[ -z $a ] 返回 false。</td></tr><tr><td>-n</td><td>检测字符串长度是否为0，不为0返回 true。</td><td>[ -n $a ] 返回 true。</td></tr><tr><td>str</td><td>检测字符串是否为空，不为空返回 true。</td><td>[ $a ] 返回 true。</td></tr></tbody></table><h3 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h3><p>字符串运算符实例如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><br>a=&quot;abc&quot;<br>b=&quot;efg&quot;<br><br>if [ $a = $b ]<br>then<br>   echo &quot;$a = $b : a 等于 b&quot;<br>else<br>   echo &quot;$a = $b: a 不等于 b&quot;<br>fi<br>if [ $a != $b ]<br>then<br>   echo &quot;$a != $b : a 不等于 b&quot;<br>else<br>   echo &quot;$a != $b: a 等于 b&quot;<br>fi<br>if [ -z $a ]<br>then<br>   echo &quot;-z $a : 字符串长度为 0&quot;<br>else<br>   echo &quot;-z $a : 字符串长度不为 0&quot;<br>fi<br>if [ -n $a ]<br>then<br>   echo &quot;-n $a : 字符串长度不为 0&quot;<br>else<br>   echo &quot;-n $a : 字符串长度为 0&quot;<br>fi<br>if [ $a ]<br>then<br>   echo &quot;$a : 字符串不为空&quot;<br>else<br>   echo &quot;$a : 字符串为空&quot;<br>fi<br></code></pre></td></tr></table></figure><p>执行脚本，输出结果如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">abc = efg: a 不等于 b<br>abc != efg : a 不等于 b<br>-z abc : 字符串长度不为 0<br>-n abc : 字符串长度不为 0<br>abc : 字符串不为空<br></code></pre></td></tr></table></figure><h2 id="文件测试运算符"><a href="#文件测试运算符" class="headerlink" title="文件测试运算符"></a>文件测试运算符</h2><p>文件测试运算符用于检测 Unix 文件的各种属性。</p><p>属性检测描述如下：</p><table><thead><tr><th>操作符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>-b file</td><td>检测文件是否是块设备文件，如果是，则返回 true。</td><td>[ -b $file ] 返回 false。</td></tr><tr><td>-c file</td><td>检测文件是否是字符设备文件，如果是，则返回 true。</td><td>[ -c $file ] 返回 false。</td></tr><tr><td>-d file</td><td>检测文件是否是目录，如果是，则返回 true。</td><td>[ -d $file ] 返回 false。</td></tr><tr><td>-f file</td><td>检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。</td><td>[ -f $file ] 返回 true。</td></tr><tr><td>-g file</td><td>检测文件是否设置了 SGID 位，如果是，则返回 true。</td><td>[ -g $file ] 返回 false。</td></tr><tr><td>-k file</td><td>检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。</td><td>[ -k $file ] 返回 false。</td></tr><tr><td>-p file</td><td>检测文件是否是有名管道，如果是，则返回 true。</td><td>[ -p $file ] 返回 false。</td></tr><tr><td>-u file</td><td>检测文件是否设置了 SUID 位，如果是，则返回 true。</td><td>[ -u $file ] 返回 false。</td></tr><tr><td>-r file</td><td>检测文件是否可读，如果是，则返回 true。</td><td>[ -r $file ] 返回 true。</td></tr><tr><td>-w file</td><td>检测文件是否可写，如果是，则返回 true。</td><td>[ -w $file ] 返回 true。</td></tr><tr><td>-x file</td><td>检测文件是否可执行，如果是，则返回 true。</td><td>[ -x $file ] 返回 true。</td></tr><tr><td>-s file</td><td>检测文件是否为空（文件大小是否大于0），不为空返回 true。</td><td>[ -s $file ] 返回 true。</td></tr><tr><td>-e file</td><td>检测文件（包括目录）是否存在，如果是，则返回 true。</td><td>[ -e $file ] 返回 true。</td></tr></tbody></table><h3 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h3><p>变量 file 表示文件”/home/mikey/shell.sh”，它的大小为100字节，具有 rwx 权限。下面的代码，将检测该文件的各种属性：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>file=&quot;/home/mikey/shell.sh&quot;<br>if [ -r $file ]<br>then<br>   echo &quot;文件可读&quot;<br>else<br>   echo &quot;文件不可读&quot;<br>fi<br>if [ -w $file ]<br>then<br>   echo &quot;文件可写&quot;<br>else<br>   echo &quot;文件不可写&quot;<br>fi<br>if [ -x $file ]<br>then<br>   echo &quot;文件可执行&quot;<br>else<br>   echo &quot;文件不可执行&quot;<br>fi<br>if [ -f $file ]<br>then<br>   echo &quot;文件为普通文件&quot;<br>else<br>   echo &quot;文件为特殊文件&quot;<br>fi<br>if [ -d $file ]<br>then<br>   echo &quot;文件是个目录&quot;<br>else<br>   echo &quot;文件不是个目录&quot;<br>fi<br>if [ -s $file ]<br>then<br>   echo &quot;文件不为空&quot;<br>else<br>   echo &quot;文件为空&quot;<br>fi<br>if [ -e $file ]<br>then<br>   echo &quot;文件存在&quot;<br>else<br>   echo &quot;文件不存在&quot;<br>fi<br></code></pre></td></tr></table></figure><p>执行脚本，输出结果如下所示：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs">文件可读<br>文件可写<br>文件可执行<br>文件为普通文件<br>文件不是个目录<br>文件不为空<br>文件存在<br></code></pre></td></tr></table></figure><h2 id="Shell-echo命令"><a href="#Shell-echo命令" class="headerlink" title="Shell echo命令"></a>Shell echo命令</h2><p>Shell 的 echo 指令与 PHP 的 echo 指令类似，都是用于字符串的输出。命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo string<br></code></pre></td></tr></table></figure><p>您可以使用echo实现更复杂的输出格式控制。</p><h3 id="1-显示普通字符串"><a href="#1-显示普通字符串" class="headerlink" title="1.显示普通字符串:"></a>1.显示普通字符串:</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;It is a test&quot;<br></code></pre></td></tr></table></figure><p>这里的双引号完全可以省略，以下命令与上面实例效果一致：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo It is a test<br></code></pre></td></tr></table></figure><h3 id="2-显示转义字符"><a href="#2-显示转义字符" class="headerlink" title="2.显示转义字符"></a>2.显示转义字符</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;\&quot;It is a test\&quot;&quot;<br></code></pre></td></tr></table></figure><p>结果将是:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">&quot;It is a test&quot;<br></code></pre></td></tr></table></figure><p>同样，双引号也可以省略</p><h3 id="3-显示变量"><a href="#3-显示变量" class="headerlink" title="3.显示变量"></a>3.显示变量</h3><p>read 命令从标准输入中读取一行,并把输入行的每个字段的值指定给 shell 变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br>read name <br>echo &quot;$name It is a test&quot;<br></code></pre></td></tr></table></figure><p>以上代码保存为 test.sh，name 接收标准输入的变量，结果将是:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">mikey@mikey:~$ ./shell.sh<br>OK                     #标准输入<br>OK It is a test        #输出<br></code></pre></td></tr></table></figure><h3 id="4-显示换行"><a href="#4-显示换行" class="headerlink" title="4.显示换行"></a>4.显示换行</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo -e &quot;OK!\n&quot; # -e 开启转义<br>echo &quot;It it a test&quot;<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">OK!<br><br>It it a test<br></code></pre></td></tr></table></figure><h3 id="5-显示不换行"><a href="#5-显示不换行" class="headerlink" title="5.显示不换行"></a>5.显示不换行</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br>echo -e &quot;OK! \c&quot; # -e 开启转义 \c 不换行<br>echo &quot;It is a test&quot;<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">OK! It is a test<br></code></pre></td></tr></table></figure><h3 id="6-显示结果定向至文件"><a href="#6-显示结果定向至文件" class="headerlink" title="6.显示结果定向至文件"></a>6.显示结果定向至文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;It is a test&quot; &gt; myfile<br></code></pre></td></tr></table></figure><h3 id="7-原样输出字符串，不进行转义或取变量-用单引号"><a href="#7-原样输出字符串，不进行转义或取变量-用单引号" class="headerlink" title="7.原样输出字符串，不进行转义或取变量(用单引号)"></a>7.原样输出字符串，不进行转义或取变量(用单引号)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &#x27;$name\&quot;&#x27;<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">name\&quot;</span><br></code></pre></td></tr></table></figure><h3 id="8-显示命令执行结果"><a href="#8-显示命令执行结果" class="headerlink" title="8.显示命令执行结果"></a>8.显示命令执行结果</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo `date`<br></code></pre></td></tr></table></figure><p>注意：这里使用的是反引号```，而不是单引号<code>&#39;</code>。</p><p>结果将显示当前日期</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Sat Dec 9 14:41:48 CST 2017<br></code></pre></td></tr></table></figure><h2 id="Shell-printf-命令"><a href="#Shell-printf-命令" class="headerlink" title="Shell printf 命令"></a>Shell printf 命令</h2><p>printf 命令模仿 C 程序库（library）里的 printf() 程序。</p><p>标准所定义，因此使用 printf 的脚本比使用 echo 移植性好。</p><p>printf 使用引用文本或空格分隔的参数，外面可以在 printf 中使用格式化字符串，还可以制定字符串的宽度、左右对齐方式等。默认 printf 不会像 echo 自动添加换行符，我们可以手动添加 \n。</p><p>printf 命令的语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">printf  format-string  [arguments...]<br></code></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li><strong>format-string:</strong> 为格式控制字符串</li><li><strong>arguments:</strong> 为参数列表。</li></ul><p>实例如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello, Shell&quot;</span></span><br>Hello, Shell<br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;Hello, Shell\n&quot;</span></span><br>Hello, Shell<br><span class="hljs-meta prompt_">$</span><br></code></pre></td></tr></table></figure><p>接下来,我来用一个脚本来体现 printf 的强大功能：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br> <br>printf &quot;%-10s %-8s %-4s\n&quot; 姓名 性别 体重kg  <br>printf &quot;%-10s %-8s %-4.2f\n&quot; 郭靖 男 66.1234 <br>printf &quot;%-10s %-8s %-4.2f\n&quot; 杨过 男 48.6543 <br>printf &quot;%-10s %-8s %-4.2f\n&quot; 郭芙 女 47.9876<br></code></pre></td></tr></table></figure><p>执行脚本，输出结果如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">姓名     性别   体重kg<br>郭靖     男      66.12<br>杨过     男      48.65<br>郭芙     女      47.99<br></code></pre></td></tr></table></figure><p>%s %c %d %f都是格式替代符</p><p>%-10s 指一个宽度为 10 个字符（-表示左对齐，没有则表示右对齐），任何字符都会被显示在 10 个字符宽的字符内，如果不足则自动以空格填充，超过也会将内容全部显示出来。</p><p>%-4.2f 指格式化为小数，其中 .2 指保留 2 位小数。</p><p>更多实例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">format-string为双引号</span><br>printf &quot;%d %s\n&quot; 1 &quot;abc&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">单引号与双引号效果一样</span> <br>printf &#x27;%d %s\n&#x27; 1 &quot;abc&quot; <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">没有引号也可以输出</span><br>printf %s abcdef<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">格式只指定了一个参数，但多出的参数仍然会按照该格式输出，format-string 被重用</span><br>printf %s abc def<br><br>printf &quot;%s\n&quot; abc def<br><br>printf &quot;%s %s %s\n&quot; a b c d e f g h i j<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果没有 arguments，那么 %s 用NULL代替，%d 用 0 代替</span><br>printf &quot;%s and %d \n&quot;<br></code></pre></td></tr></table></figure><p>执行脚本，输出结果如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">1 abc<br>1 abc<br>abcdefabcdefabc<br>def<br>a b c<br>d e f<br>g h i<br>j  <br> and 0<br></code></pre></td></tr></table></figure><hr><h2 id="printf的转义序列"><a href="#printf的转义序列" class="headerlink" title="printf的转义序列"></a>printf的转义序列</h2><table><thead><tr><th>序列</th><th>说明</th></tr></thead><tbody><tr><td>\a</td><td>警告字符，通常为 ASCII 的 BEL 字符</td></tr><tr><td>\b</td><td>后退</td></tr><tr><td>\c</td><td>抑制（不显示）输出结果中任何结尾的换行字符（只在 %b 格式指示符控制下的参数字符串中有效），而且，任何留在参数里的字符、任何接下来的参数以及任何留在格式字符串中的字符，都被忽略</td></tr><tr><td>\f</td><td>换页（formfeed）</td></tr><tr><td>\n</td><td>换行</td></tr><tr><td>\r</td><td>回车（Carriage return）</td></tr><tr><td>\t</td><td>水平制表符</td></tr><tr><td>\v</td><td>垂直制表符</td></tr><tr><td>\</td><td>一个字面上的反斜杠字符</td></tr><tr><td>\ddd</td><td>表示 1 到 3 位数八进制值的字符。仅在格式字符串中有效</td></tr><tr><td>\0ddd</td><td>表示 1 到 3 位的八进制值字符</td></tr></tbody></table><h3 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;a string, no processing:&lt;%s&gt;\n&quot;</span> <span class="hljs-string">&quot;A\nB&quot;</span></span><br>a string, no processing:&lt;A\nB&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;a string, no processing:&lt;%b&gt;\n&quot;</span> <span class="hljs-string">&quot;A\nB&quot;</span></span><br>a string, no processing:&lt;A<br><span class="hljs-meta prompt_">B&gt;</span><span class="language-bash"></span><br><span class="language-bash"></span><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;www.w3cschool.cn \a&quot;</span></span><br>www.w3cschool.cn $                  #不换行<br></code></pre></td></tr></table></figure><h2 id="Shell-test命令"><a href="#Shell-test命令" class="headerlink" title="Shell test命令"></a>Shell test命令</h2><p>Shell中的 test 命令用于检查某个条件是否成立，它可以进行数值、字符和文件三个方面的测试。</p><hr><h2 id="数值测试"><a href="#数值测试" class="headerlink" title="数值测试"></a>数值测试</h2><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-eq</td><td>等于则为真</td></tr><tr><td>-ne</td><td>不等于则为真</td></tr><tr><td>-gt</td><td>大于则为真</td></tr><tr><td>-ge</td><td>大于等于则为真</td></tr><tr><td>-lt</td><td>小于则为真</td></tr><tr><td>-le</td><td>小于等于则为真</td></tr></tbody></table><p>实例演示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">num1=100<br>num2=100<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">test</span> $[num1] -eq $[num2]<br><span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;两个数相等！&#x27;</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;两个数不相等！&#x27;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">两个数相等！<br></code></pre></td></tr></table></figure><hr><h2 id="字符串测试"><a href="#字符串测试" class="headerlink" title="字符串测试"></a>字符串测试</h2><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>=</td><td>等于则为真</td></tr><tr><td>!=</td><td>不相等则为真</td></tr><tr><td>-z 字符串</td><td>字符串长度为零则为真</td></tr><tr><td>-n 字符串</td><td>字符串长度不为零则为真</td></tr></tbody></table><p>实例演示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">num1=&quot;Hello&quot;<br>num2=&quot;Hello&quot;<br>if test num1=num2<br>then<br>    echo &#x27;两个字符串相等!&#x27;<br>else<br>    echo &#x27;两个字符串不相等!&#x27;<br>fi<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">两个字符串相等!<br></code></pre></td></tr></table></figure><hr><h2 id="文件测试"><a href="#文件测试" class="headerlink" title="文件测试"></a>文件测试</h2><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-e 文件名</td><td>如果文件存在则为真</td></tr><tr><td>-r 文件名</td><td>如果文件存在且可读则为真</td></tr><tr><td>-w 文件名</td><td>如果文件存在且可写则为真</td></tr><tr><td>-x 文件名</td><td>如果文件存在且可执行则为真</td></tr><tr><td>-s 文件名</td><td>如果文件存在且至少有一个字符则为真</td></tr><tr><td>-d 文件名</td><td>如果文件存在且为目录则为真</td></tr><tr><td>-f 文件名</td><td>如果文件存在且为普通文件则为真</td></tr><tr><td>-c 文件名</td><td>如果文件存在且为字符型特殊文件则为真</td></tr><tr><td>-b 文件名</td><td>如果文件存在且为块特殊文件则为真</td></tr></tbody></table><p>实例演示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /bin<br>if test -e ./bash<br>then<br>    echo &#x27;文件已存在!&#x27;<br>else<br>    echo &#x27;文件不存在!&#x27;<br>fi<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">文件已存在!<br></code></pre></td></tr></table></figure><p>另外，Shell还提供了与( -a )、或( -o )、非( ! )三个逻辑操作符用于将测试条件连接起来，其优先级为：”!”最高，”-a”次之，”-o”最低。例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /bin<br>if test -e ./notFile -o -e ./bash<br>then<br>    echo &#x27;有一个文件存在!&#x27;<br>else<br>    echo &#x27;两个文件都不存在&#x27;<br>fi<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">有一个文件存在!<br></code></pre></td></tr></table></figure><h2 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><p>if 语句语法格式：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">if</span> condition<br>then<br>    <span class="hljs-keyword">command</span>1 <br>    <span class="hljs-keyword">command</span>2<br>    <span class="hljs-string">...</span><br>    <span class="hljs-keyword">command</span>N <br>fi<br></code></pre></td></tr></table></figure><p>写成一行（适用于终端命令提示符）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> [ $(ps -ef | grep -c <span class="hljs-string">&quot;ssh&quot;</span>) -gt 1 ]; <span class="hljs-keyword">then</span> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;true&quot;</span>; <span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>末尾的fi就是if倒过来拼写，后面还会遇到类似的。</p><h3 id="if-else-1"><a href="#if-else-1" class="headerlink" title="if else"></a>if else</h3><p>if else 语法格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">if condition<br>then<br>    command1 <br>    command2<br>    ...<br>    commandN<br>else<br>    command<br>fi<br></code></pre></td></tr></table></figure><h3 id="if-else-if-else"><a href="#if-else-if-else" class="headerlink" title="if else-if else"></a>if else-if else</h3><p>if else-if else 语法格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">if condition1<br>then<br>    command1<br>elif condition2<br>then    <br>    command2<br>else<br>    commandN<br>fi<br></code></pre></td></tr></table></figure><p>if else语句经常与test命令结合使用，如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">num1=$[2*3]<br>num2=$[1+5]<br>if test $[num1] -eq $[num2]<br>then<br>    echo &#x27;两个数字相等!&#x27;<br>else<br>    echo &#x27;两个数字不相等!&#x27;<br>fi<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">两个数字相等!<br></code></pre></td></tr></table></figure><hr><h2 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h2><p>与其他编程语言类似，Shell支持for循环。</p><p>for循环一般格式为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">for var in item1 item2 ... itemN<br>do<br>    command1<br>    command2<br>    ...<br>    commandN<br>done<br></code></pre></td></tr></table></figure><p>写成一行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">for var in item1 item2 ... itemN; do command1; command2… done;<br></code></pre></td></tr></table></figure><p>当变量值在列表里，for循环即执行一次所有命令，使用变量名获取列表中的当前取值。命令可为任何有效的shell命令和语句。in列表可以包含替换、字符串和文件名。</p><p>in列表是可选的，如果不用它，for循环使用命令行的位置参数。</p><p>例如，顺序输出当前列表中的数字：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">for loop in 1 2 3 4 5<br>do<br>    echo &quot;The value is: $loop&quot;<br>done<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">The value is: 1<br>The value is: 2<br>The value is: 3<br>The value is: 4<br>The value is: 5<br></code></pre></td></tr></table></figure><p>顺序输出字符串中的字符：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">for str in &#x27;This is a string&#x27;<br>do<br>    echo $str<br>done<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">This <span class="hljs-keyword">is</span> a <span class="hljs-built_in">string</span><br></code></pre></td></tr></table></figure><hr><h2 id="while-语句"><a href="#while-语句" class="headerlink" title="while 语句"></a>while 语句</h2><p>while循环用于不断执行一系列命令，也用于从输入文件中读取数据；命令通常为测试条件。其格式为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">while condition<br>do<br>    command<br>done<br></code></pre></td></tr></table></figure><p>以下是一个基本的while循环，测试条件是：如果int小于等于5，那么条件返回真。int从0开始，每次循环处理时，int加1。运行上述脚本，返回数字1到5，然后终止。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br>int=1<br>while(( $int&lt;=5 )) <br>do       <br>echo $int         <br>let &quot;int++&quot; <br>done<br></code></pre></td></tr></table></figure><p>运行脚本，输出：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">1<br>2<br>3<br>4<br>5<br></code></pre></td></tr></table></figure><p>while循环可用于读取键盘信息。下面的例子中，输入信息被设置为变量FILM，按结束循环。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &#x27;按下 &lt;CTRL-D&gt; 退出&#x27;<br>echo -n &#x27;输入你最喜欢的电影名: &#x27;<br>while read FILM<br>do<br>    echo &quot;是的！$FILM 是一部好电影&quot;<br>done<br></code></pre></td></tr></table></figure><p>运行脚本，输出类似下面：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">按下 <span class="hljs-tag">&lt;<span class="hljs-name">CTRL-D</span>&gt;</span> 退出<br>输入你最喜欢的电影名: W3Cschool在线教程<br>是的！W3Cschool在线教程 是一部好电影<br></code></pre></td></tr></table></figure><h3 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h3><p>无限循环语法格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">while :<br>do<br>    command<br>done<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">while true<br>do<br>    command<br>done<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">for (( ; ; ))<br></code></pre></td></tr></table></figure><hr><h2 id="until-循环"><a href="#until-循环" class="headerlink" title="until 循环"></a>until 循环</h2><p>until循环执行一系列命令直至条件为真时停止。</p><p>until循环与while循环在处理方式上刚好相反。</p><p>一般while循环优于until循环，但在某些时候—也只是极少数情况下，until循环更加有用。</p><p>until 语法格式:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">until condition<br>do<br>    command<br>done<br></code></pre></td></tr></table></figure><p>条件可为任意测试条件，测试发生在循环末尾，因此循环至少执行一次—请注意这一点。</p><hr><h2 id="case"><a href="#case" class="headerlink" title="case"></a>case</h2><p>Shell case语句为多选择语句。可以用case语句匹配一个值与一个模式，如果匹配成功，执行相匹配的命令。case语句格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">case 值 in<br>模式1)<br>    command1<br>    command2<br>    ...<br>    commandN<br>    ;;<br>模式2）<br>    command1<br>    command2<br>    ...<br>    commandN<br>    ;;<br>esac<br></code></pre></td></tr></table></figure><p>case工作方式如上所示。取值后面必须为单词in，每一模式必须以右括号结束。取值可以为变量或常数。匹配发现取值符合某一模式后，其间所有命令开始执行直至 ;;。</p><p>取值将检测匹配的每一个模式。一旦模式匹配，则执行完匹配模式相应命令后不再继续其他模式。如果无一匹配模式，使用星号 * 捕获该值，再执行后面的命令。</p><p>下面的脚本提示输入1到4，与每一种模式进行匹配：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &#x27;输入 1 到 4 之间的数字:&#x27;<br>echo &#x27;你输入的数字为:&#x27;<br>read aNum<br>case $aNum in<br>    1)  echo &#x27;你选择了 1&#x27;<br>    ;;<br>    2)  echo &#x27;你选择了 2&#x27;<br>    ;;<br>    3)  echo &#x27;你选择了 3&#x27;<br>    ;;<br>    4)  echo &#x27;你选择了 4&#x27;<br>    ;;<br>    *)  echo &#x27;你没有输入 1 到 4 之间的数字&#x27;<br>    ;;<br>esac<br></code></pre></td></tr></table></figure><p>输入不同的内容，会有不同的结果，例如：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">输入 1 到 4 之间的数字</span><span class="hljs-punctuation">:</span><br><span class="hljs-attribute">你输入的数字为</span><span class="hljs-punctuation">:</span><br>3<br>你选择了 3<br></code></pre></td></tr></table></figure><hr><h2 id="跳出循环"><a href="#跳出循环" class="headerlink" title="跳出循环"></a>跳出循环</h2><p>在循环过程中，有时候需要在未达到循环结束条件时强制跳出循环，Shell使用两个命令来实现该功能：break和continue。</p><h3 id="break命令"><a href="#break命令" class="headerlink" title="break命令"></a>break命令</h3><p>break命令允许跳出所有循环（终止执行后面的所有循环）。</p><p>下面的例子中，脚本进入死循环直至用户输入数字大于5。要跳出这个循环，返回到shell提示符下，需要使用break命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>while :<br>do<br>    echo -n &quot;输入 1 到 5 之间的数字:&quot;<br>    read aNum<br>    case $aNum in<br>        1|2|3|4|5) echo &quot;你输入的数字为 $aNum!&quot;<br>        ;;<br>        *) echo &quot;你输入的数字不是 1 到 5 之间的! 游戏结束&quot;<br>            break<br>        ;;<br>    esac<br>done<br></code></pre></td></tr></table></figure><p>执行以上代码，输出结果为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">输入 1 到 5 之间的数字:3<br>你输入的数字为 3!<br>输入 1 到 5 之间的数字:7<br>你输入的数字不是 1 到 5 之间的! 游戏结束<br></code></pre></td></tr></table></figure><h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><p>continue命令与break命令类似，只有一点差别，它不会跳出所有循环，仅仅跳出当前循环。</p><p>对上面的例子进行修改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>while :<br>do<br>    echo -n &quot;输入 1 到 5 之间的数字: &quot;<br>    read aNum<br>    case $aNum in<br>        1|2|3|4|5) echo &quot;你输入的数字为 $aNum!&quot;<br>        ;;<br>        *) echo &quot;你输入的数字不是 1 到 5 之间的!&quot;<br>            continue<br>            echo &quot;游戏结束&quot;<br>        ;;<br>    esac<br>done<br></code></pre></td></tr></table></figure><p>运行代码发现，当输入大于5的数字时，该例中的循环不会结束，语句 <strong>echo “Game is over!”</strong> 永远不会被执行。</p><hr><h2 id="esac"><a href="#esac" class="headerlink" title="esac"></a>esac</h2><p>case的语法和C family语言差别很大，它需要一个esac（就是case反过来）作为结束标记，每个case分支用右圆括号，用两个分号表示break。</p><h2 id="Shell-函数"><a href="#Shell-函数" class="headerlink" title="Shell 函数"></a>Shell 函数</h2><p>linux shell 可以用户定义函数，然后在shell脚本中可以随便调用。</p><p>shell中函数的定义格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[ function ] funname [()]<br>&#123;<br>    action;<br>    [return int;]<br>&#125;<br></code></pre></td></tr></table></figure><p>说明：</p><ul><li>1、可以带function fun() 定义，也可以直接fun() 定义,不带任何参数。</li><li>2、参数返回，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。 return后跟数值n(0-255</li></ul><p>下面的例子定义了一个函数并进行调用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>demoFun()&#123;<br>    echo &quot;这是我的第一个 shell 函数!&quot;<br>&#125;<br>echo &quot;-----函数开始执行-----&quot;<br>demoFun<br>echo &quot;-----函数执行完毕-----&quot;<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">-----函数开始执行-----<br>这是我的第一个 shell 函数!<br>-----函数执行完毕-----<br></code></pre></td></tr></table></figure><p>下面定义一个带有return语句的函数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>funWithReturn()&#123;<br>    echo &quot;这个函数会对输入的两个数字进行相加运算...&quot;<br>    echo &quot;输入第一个数字: &quot;<br>    read aNum<br>    echo &quot;输入第二个数字: &quot;<br>    read anotherNum<br>    echo &quot;两个数字分别为 $aNum 和 $anotherNum !&quot;<br>    return $(($aNum+$anotherNum))<br>&#125;<br>funWithReturn<br>echo &quot;输入的两个数字之和为 $? !&quot;<br></code></pre></td></tr></table></figure><p>输出类似下面：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">这个函数会对输入的两个数字进行相加运算...<br>输入第一个数字: <br>1<br>输入第二个数字: <br>2<br>两个数字分别为 1 和 2 !<br>输入的两个数字之和为 3 !<br></code></pre></td></tr></table></figure><p>函数返回值在调用该函数后通过 $? 来获得。</p><p>注意：所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分，直至shell解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可。</p><hr><h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><p>在Shell中，调用函数时可以向其传递参数。在函数体内部，通过 $n 的形式来获取参数的值，例如，$1表示第一个参数，$2表示第二个参数…</p><p>带参数的函数示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>funWithParam()&#123;<br>    echo &quot;第一个参数为 $1 !&quot;<br>    echo &quot;第二个参数为 $2 !&quot;<br>    echo &quot;第十个参数为 $10 !&quot;<br>    echo &quot;第十个参数为 $&#123;10&#125; !&quot;<br>    echo &quot;第十一个参数为 $&#123;11&#125; !&quot;<br>    echo &quot;参数总数有 $# 个!&quot;<br>    echo &quot;作为一个字符串输出所有参数 $* !&quot;<br>&#125;<br>funWithParam 1 2 3 4 5 6 7 8 9 34 73<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">第一个参数为 1 !<br>第二个参数为 2 !<br>第十个参数为 10 !<br>第十个参数为 34 !<br>第十一个参数为 73 !<br>参数总数有 11 个!<br>作为一个字符串输出所有参数 1 2 3 4 5 6 7 8 9 34 73 !<br></code></pre></td></tr></table></figure><p>注意，<img src="https://g.yuque.com/gr/latex?10%20%E4%B8%8D%E8%83%BD%E8%8E%B7%E5%8F%96%E7%AC%AC%E5%8D%81%E4%B8%AA%E5%8F%82%E6%95%B0%EF%BC%8C%E8%8E%B7%E5%8F%96%E7%AC%AC%E5%8D%81%E4%B8%AA%E5%8F%82%E6%95%B0%E9%9C%80%E8%A6%81#card=math&code=10%20%E4%B8%8D%E8%83%BD%E8%8E%B7%E5%8F%96%E7%AC%AC%E5%8D%81%E4%B8%AA%E5%8F%82%E6%95%B0%EF%BC%8C%E8%8E%B7%E5%8F%96%E7%AC%AC%E5%8D%81%E4%B8%AA%E5%8F%82%E6%95%B0%E9%9C%80%E8%A6%81&id=C4Kzu">{10}。当n&gt;=10时，需要使用${n}来获取参数。</p><p>另外，还有几个特殊字符用来处理参数：</p><table><thead><tr><th>参数处理</th><th>说明</th></tr></thead><tbody><tr><td>$#</td><td>传递到脚本的参数个数</td></tr><tr><td>$*</td><td>以一个单字符串显示所有向脚本传递的参数</td></tr><tr><td>$$</td><td>脚本运行的当前进程ID号</td></tr><tr><td>$!</td><td>后台运行的最后一个进程的ID号</td></tr><tr><td>$@</td><td>与$*相同，但是使用时加引号，并在引号中返回每个参数。</td></tr><tr><td>$-</td><td>显示Shell使用的当前选项，与set命令功能相同。</td></tr><tr><td>$?</td><td>显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</td></tr></tbody></table><h2 id="Shell-输入-输出重定向"><a href="#Shell-输入-输出重定向" class="headerlink" title="Shell 输入/输出重定向"></a>Shell 输入/输出重定向</h2><p>大多数 UNIX 系统命令从你的终端接受输入并将所产生的输出发送回到您的终端。一个命令通常从一个叫标准输入的地方读取输入，默认情况下，这恰好是你的终端。同样，一个命令通常将其输出写入到标准输出，默认情况下，这也是你的终端。</p><p>重定向命令列表如下：</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>command &gt; file</td><td>将输出重定向到 file。</td></tr><tr><td>command &lt; file</td><td>将输入重定向到 file。</td></tr><tr><td>command &gt;&gt; file</td><td>将输出以追加的方式重定向到 file。</td></tr><tr><td>n &gt; file</td><td>将文件描述符为 n 的文件重定向到 file。</td></tr><tr><td>n &gt;&gt; file</td><td>将文件描述符为 n 的文件以追加的方式重定向到 file。</td></tr><tr><td>n &gt;&amp; m</td><td>将输出文件 m 和 n 合并。</td></tr><tr><td>n &lt;&amp; m</td><td>将输入文件 m 和 n 合并。</td></tr><tr><td>&lt;&lt; tag</td><td>将开始标记 tag 和结束标记 tag 之间的内容作为输入。</td></tr></tbody></table><blockquote><p>需要注意的是文件描述符 0 通常是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。</p></blockquote><hr><h2 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h2><p>重定向一般通过在命令间插入特定的符号来实现。特别的，这些符号的语法如下所示:</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">comma<span class="hljs-symbol">nd1</span> &gt; file<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>上面这个命令执行command1然后将输出的内容存入file1。</p><p>注意任何file1内的已经存在的内容将被新内容替代。如果要将新内容添加在文件末尾，请使用&gt;&gt;操作符。</p><h3 id="实例-8"><a href="#实例-8" class="headerlink" title="实例"></a>实例</h3><p>执行下面的 who 命令，它将命令的完整的输出重定向在用户文件中(users):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">who</span> &gt; <span class="hljs-built_in">users</span></span><br></code></pre></td></tr></table></figure><p>执行后，并没有在终端输出信息，这是因为输出已被从默认的标准输出设备（终端）重定向到指定的文件。</p><p>你可以使用 cat 命令查看文件内容：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ cat<span class="hljs-built_in"> users</span><br><span class="hljs-built_in"></span>_mbsetupuser<span class="hljs-built_in"> console </span> Oct 31 17:35 <br>laolan   <span class="hljs-built_in"> console </span> Oct 31 17:35 <br>laolan    ttys000  Dec  1 11:33<br></code></pre></td></tr></table></figure><p>输出重定向会覆盖文件内容，请看下面的例子：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir">mikey<span class="hljs-variable">@mikey</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>echo <span class="hljs-string">&quot;输出重定向&quot;</span> &gt; shell.txt<br>mikey<span class="hljs-variable">@mikey</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>cat shell.txt <br>输出重定向<br></code></pre></td></tr></table></figure><p>如果不希望文件内容被覆盖，可以使用 &gt;&gt; 追加到文件末尾，例如：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elixir">mikey<span class="hljs-variable">@mikey</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>echo <span class="hljs-string">&quot;输出重定向-追加&quot;</span> &gt;&gt; shell.txt<br>mikey<span class="hljs-variable">@mikey</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>cat shell.txt <br>输出重定向<br>输出重定向-追加<br></code></pre></td></tr></table></figure><hr><h2 id="输入重定向"><a href="#输入重定向" class="headerlink" title="输入重定向"></a>输入重定向</h2><p>和输出重定向一样，Unix 命令也可以从文件获取输入，语法为：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">comma<span class="hljs-symbol">nd1</span> &lt; file<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>这样，本来需要从键盘获取输入的命令会转移到文件读取内容。</p><p>注意：输出重定向是大于号(&gt;)，输入重定向是小于号(&lt;)。</p><h3 id="实例-9"><a href="#实例-9" class="headerlink" title="实例"></a>实例</h3><p>接着以上实例，我们需要统计 users 文件的行数,执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mikey@mikey:~$ wc -l shell.txt <br>2 shell.txt<br></code></pre></td></tr></table></figure><p>也可以将输入重定向到 users 文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mikey@mikey:~$ wc -l &lt; shell.txt <br>2<br></code></pre></td></tr></table></figure><p>注意：上面两个例子的结果不同：第一个例子，会输出文件名；第二个不会，因为它仅仅知道从标准输入读取内容。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">command1 &lt; <span class="hljs-keyword">infile</span> &gt; <span class="hljs-keyword">outfile</span><br></code></pre></td></tr></table></figure><p>同时替换输入和输出，执行command1，从文件infile读取内容，然后将输出写入到outfile中。</p><h3 id="重定向深入讲解"><a href="#重定向深入讲解" class="headerlink" title="重定向深入讲解"></a>重定向深入讲解</h3><p>一般情况下，每个 Unix/Linux 命令运行时都会打开三个文件：</p><ul><li>标准输入文件(stdin)：stdin的文件描述符为0，Unix程序默认从stdin读取数据。</li><li>标准输出文件(stdout)：stdout 的文件描述符为1，Unix程序默认向stdout输出数据。</li><li>标准错误文件(stderr)：stderr的文件描述符为2，Unix程序会向stderr流中写入错误信息。</li></ul><p>默认情况下，command &gt; file 将 stdout 重定向到 file，command &lt; file 将stdin 重定向到 file。</p><p>如果希望 stderr 重定向到 file，可以这样写：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">command</span> 2 &gt; file</span><br></code></pre></td></tr></table></figure><p>如果希望 stderr 追加到 file 文件末尾，可以这样写：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">command</span> 2 &gt;&gt; file</span><br></code></pre></td></tr></table></figure><p><strong>2</strong> 表示标准错误文件(stderr)。</p><p>如果希望将 stdout 和 stderr 合并后重定向到 file，可以这样写：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">command</span> &gt; file 2&gt;&amp;1</span><br>或者<br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">command</span> &gt;&gt; file 2&gt;&amp;1</span><br></code></pre></td></tr></table></figure><p>如果希望对 stdin 和 stdout 都重定向，可以这样写：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">command</span> &lt; file1 &gt;file2</span><br></code></pre></td></tr></table></figure><p>command 命令将 stdin 重定向到 file1，将 stdout 重定向到 file2。</p><hr><h2 id="Here-Document"><a href="#Here-Document" class="headerlink" title="Here Document"></a>Here Document</h2><p>Here Document 是 Shell 中的一种特殊的重定向方式，用来将输入重定向到一个交互式 Shell 脚本或程序。</p><p>它的基本的形式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">command &lt;&lt; delimiter<br>    document<br>delimiter<br></code></pre></td></tr></table></figure><p>它的作用是将两个 delimiter 之间的内容(document) 作为输入传递给 command。</p><blockquote><p>注意：</p><ul><li>结尾的delimiter 一定要顶格写，前面不能有任何字符，后面也不能有任何字符，包括空格和 tab 缩进。</li><li>开始的delimiter前后的空格会被忽略掉。</li></ul></blockquote><h3 id="实例-10"><a href="#实例-10" class="headerlink" title="实例"></a>实例</h3><p>在命令行中通过 wc -l 命令计算 Here Document 的行数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">mikey@mikey:~$ wc -l &lt;&lt; EOF<br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">第一行</span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">第二行</span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">第三行</span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">EOF</span><br>3<br></code></pre></td></tr></table></figure><p>我们也可以将 Here Document 用在脚本中，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>cat &lt;&lt; EOF<br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">第一行</span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">第二行</span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">第三行</span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">EOF</span><br>EOF<br></code></pre></td></tr></table></figure><p>执行以上脚本，输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">第一行</span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">第二行</span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">第三行</span><br></code></pre></td></tr></table></figure><hr><h2 id="dev-null-文件"><a href="#dev-null-文件" class="headerlink" title="/dev/null 文件"></a>/dev/null 文件</h2><p>如果希望执行某个命令，但又不希望在屏幕上显示输出结果，那么可以将输出重定向到 /dev/null：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">command</span> &gt; /dev/null</span><br></code></pre></td></tr></table></figure><p>/dev/null 是一个特殊的文件，写入到它的内容都会被丢弃；如果尝试从该文件读取内容，那么什么也读不到。但是 /dev/null 文件非常有用，将命令的输出重定向到它，会起到”禁止输出”的效果。</p><p>如果希望屏蔽 stdout 和 stderr，可以这样写：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">command</span> &gt; /dev/null 2&gt;&amp;1</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong>0 是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。</p></blockquote><h2 id="Shell-文件包含"><a href="#Shell-文件包含" class="headerlink" title="Shell 文件包含"></a>Shell 文件包含</h2><p>和其他语言一样，Shell 也可以包含外部脚本。这样可以很方便的封装一些公用的代码作为一个独立的文件。</p><p>Shell 文件包含的语法格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">. filename   # 注意点号(.)和文件名中间有一空格<br>或<br>source filename<br></code></pre></td></tr></table></figure><h3 id="实例-11"><a href="#实例-11" class="headerlink" title="实例"></a>实例</h3><p>创建两个 shell 脚本文件。</p><p>test1.sh 代码如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>url=&quot;这个是test1的脚本&quot;<br></code></pre></td></tr></table></figure><p>test2.sh 代码如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">使用 . 号来引用test1.sh 文件</span><br>. ./test1.sh<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">或者使用以下包含文件代码</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">source</span> ./test1.sh</span><br><br>echo &quot;test2执行：$url&quot;<br></code></pre></td></tr></table></figure><p>接下来，我们为 test2.sh 添加可执行权限并执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chmod</span> +x test2.sh</span> <br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./test2.sh</span> <br>test2执行：这个是test1的脚本<br></code></pre></td></tr></table></figure><blockquote><p><strong>注：</strong>被包含的文件 test1.sh 不需要可执行权限。</p></blockquote><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.runoob.com/linux/linux-shell.html">菜鸟教程</a></p><p><a href="https://www.w3cschool.cn/linux/linux-shell.html">W3cSchool Shell教程</a></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>笔记篇-分布式锁的实现</title>
    <link href="/2021/04/04/yuque/nhfllh/"/>
    <url>/2021/04/04/yuque/nhfllh/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1657534650674-e38440dd-48bd-48b9-b8ed-fb46ede6b4a0.png#averageHue=%23090500&clientId=ua1abd993-e0fc-4&from=markdown&id=dP6HK&originHeight=383&originWidth=900&originalType=url&ratio=1&rotation=0&showTitle=false&size=78336&status=done&style=none&taskId=u62fc9b41-d8c9-4af0-8cc7-55fdeb53a15&title=" alt="image.png"></p><h1 id="什么是分布式锁"><a href="#什么是分布式锁" class="headerlink" title="什么是分布式锁"></a>什么是分布式锁</h1><blockquote><p>分布式锁是为了解决在不同机器上的应用仍能保证资源访问的有序性。当多个进程不在同一个系统中，就需要用分布式锁控制多个进程对资源的访问。</p></blockquote><h1 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h1><blockquote><p>目前实现的方式有基于MySQL、基于Redis、基于Zookeeper</p></blockquote><h1 id="基于MySQL"><a href="#基于MySQL" class="headerlink" title="基于MySQL"></a>基于MySQL</h1><h2 id="基于表记录实现"><a href="#基于表记录实现" class="headerlink" title="基于表记录实现"></a>基于表记录实现</h2><blockquote><p>通过对数据库表设计时对其做唯一约束，需要加锁进行添加记录，释放锁将记录进行删除。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `database_lock` (<br>`id` <span class="hljs-type">BIGINT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>`resource` <span class="hljs-type">int</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;锁定的资源&#x27;</span>,<br>`description` <span class="hljs-type">varchar</span>(<span class="hljs-number">1024</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> &quot;&quot; COMMENT <span class="hljs-string">&#x27;描述&#x27;</span>,<br><span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br><span class="hljs-keyword">UNIQUE</span> KEY `uiq_idx_resource` (`resource`) <br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4 COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;数据库分布式锁表&#x27;</span>;<br></code></pre></td></tr></table></figure><p>需要获取锁时对数据表进行插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> database_lock(resource, description) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;lock&#x27;</span>);<br></code></pre></td></tr></table></figure><p>释放锁时将记录进行删除</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> database_lock <span class="hljs-keyword">WHERE</span> resource<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h2 id="基于乐观锁实现"><a href="#基于乐观锁实现" class="headerlink" title="基于乐观锁实现"></a>基于乐观锁实现</h2><blockquote><p>乐观锁的思想就是获取锁的时候并不进行判断，而是在更新的时候对其获取时的版本号进行对比，如果一致则进行更新。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `optimistic_lock` (<br>`id` <span class="hljs-type">BIGINT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>`resource` <span class="hljs-type">int</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;锁定的资源&#x27;</span>,<br>`version` <span class="hljs-type">int</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;版本信息&#x27;</span>,<br>`created_at` datetime COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>`updated_at` datetime COMMENT <span class="hljs-string">&#x27;更新时间&#x27;</span>,<br>`deleted_at` datetime COMMENT <span class="hljs-string">&#x27;删除时间&#x27;</span>, <br><span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br><span class="hljs-keyword">UNIQUE</span> KEY `uiq_idx_resource` (`resource`) <br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4 COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;数据库分布式锁表&#x27;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> optimistic_lock(resource, version, created_at, updated_at) <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">20</span>, <span class="hljs-number">1</span>, CURTIME(), CURTIME());<br></code></pre></td></tr></table></figure><p>STEP1 - 获取资源： <code>SELECT resource, version FROM optimistic_lock WHERE id = 1</code><br>STEP2 - 执行业务逻辑<br>STEP3 - 更新资源：<code>UPDATE optimistic_lock SET resource = resource -1, version = version + 1 WHERE id = 1 AND version = oldVersion</code></p><h2 id="基于悲观锁实现"><a href="#基于悲观锁实现" class="headerlink" title="基于悲观锁实现"></a>基于悲观锁实现</h2><p>关闭事务自动提交</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SET</span> AUTOCOMMIT <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><p>STEP1 - 获取锁：<code>SELECT * FROM database_lock WHERE id = 1 FOR UPDATE;</code>。<br>STEP2 - 执行业务逻辑。<br>STEP3 - 释放锁：COMMIT。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> database_lock <span class="hljs-keyword">WHERE</span> description<span class="hljs-operator">=</span><span class="hljs-string">&#x27;lock&#x27;</span> <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">UPDATE</span>;<br></code></pre></td></tr></table></figure><h1 id="基于Redis实现"><a href="#基于Redis实现" class="headerlink" title="基于Redis实现"></a>基于Redis实现</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><blockquote><p>加锁实际上就是在redis中，给Key键设置一个值，为避免死锁，并给定一个过期时间。</p></blockquote><blockquote><p>SETNX 是『SET if Not eXists』(如果不存在，则 SET)的简写。</p></blockquote><p>语法 <code>SET lock_key random_value NX PX 5000</code></p><p><code>random_value</code> 是客户端生成的唯一的字符串。<br><code>NX</code> 代表只在键不存在时，才对键进行设置操作。<br><code>PX 5000</code> 设置键的过期时间为5000毫秒。</p><p>举个栗子:``</p><ul><li> 获取锁的时候，使用setnx加锁，并使用expire命令为锁添加一个超时时间，超过该时间则自动释放锁，锁的value值为一个随机生成的UUID，通过此在释放锁的时候进行判断。 </li><li> 获取锁的时候还设置一个获取的超时时间，若超过这个时间则放弃获取锁。 </li><li> 释放锁的时候，通过UUID判断是不是该锁，若是该锁，则执行delete进行锁释放。 </li></ul><h2 id="基于SETNX实现"><a href="#基于SETNX实现" class="headerlink" title="基于SETNX实现"></a>基于SETNX实现</h2><p>1.引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/redis.clients/jedis --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.6.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.开写代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SetNxLock</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br>        jedis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">&quot;47.106.210.183&quot;</span>,<span class="hljs-number">6379</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取lock</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> clientId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> lockName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> expireTime</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(String clientId,String lockName,<span class="hljs-type">long</span> expireTime)</span> &#123;<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">setNx</span> <span class="hljs-operator">=</span> jedis.setnx(lockName,clientId);<br>        <span class="hljs-keyword">if</span> (setNx==<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-comment">//如果程序在这里出现问题将无法设置过期时间</span><br>            jedis.expire(lockName,expireTime);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解锁</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> lockName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">unLock</span><span class="hljs-params">(String clientId,String lockName)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> jedis.get(lockName);<br>        <span class="hljs-keyword">if</span> (lock.equals(clientId)) &#123;<br>            <span class="hljs-type">Long</span> <span class="hljs-variable">setNx</span> <span class="hljs-operator">=</span> jedis.del(lockName);<br>            <span class="hljs-keyword">return</span> setNx==<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="基于INCR实现"><a href="#基于INCR实现" class="headerlink" title="基于INCR实现"></a>基于INCR实现</h2><p>1.这种加锁的思路是， key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 INCR 操作进行加一。然后其它用户在执行 INCR 操作进行加一时，如果返回的数大于 1 ，说明这个锁正在被使用当中。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs go">public class IncrLock &#123;<br><br>    private Jedis jedis = null;<br><br>    public IncrLock()&#123;<br>        jedis = <span class="hljs-built_in">new</span> Jedis(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">6379</span>);<br>    &#125;<br><br>    private Map&lt;String,String&gt; <span class="hljs-keyword">map</span> = <span class="hljs-built_in">new</span> HashMap&lt;&gt;();<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取lock</span><br><span class="hljs-comment">     * @param lockName</span><br><span class="hljs-comment">     * @return</span><br><span class="hljs-comment">     */</span><br>    public boolean tryLock(String clientId,String lockName) &#123;<br>        Long incrLock = jedis.incr(lockName);<br>        <span class="hljs-keyword">if</span>(incrLock == <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-comment">//记录是哪个client获取锁</span><br>            <span class="hljs-keyword">map</span>.put(lockName,clientId);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解锁</span><br><span class="hljs-comment">     * @param lockName</span><br><span class="hljs-comment">     * @return</span><br><span class="hljs-comment">     */</span><br>    public boolean unLock(String clientId,String lockName) &#123;<br>        <span class="hljs-keyword">if</span> (!clientId.equals(<span class="hljs-keyword">map</span>.get(lockName))) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        jedis.del(lockName);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="基于Redisson实现"><a href="#基于Redisson实现" class="headerlink" title="基于Redisson实现"></a>基于Redisson实现</h2><blockquote><p>Redisson在基于NIO的Netty框架上，充分的利用了Redis键值数据库提供的一系列优势，在Java实用工具包中常用接口的基础上，为使用者提供了一系列具有分布式特性的常用工具类。</p></blockquote><p>1.引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.redisson<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>redisson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.10.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.实现代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>    <span class="hljs-type">Config</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Config</span>();<br>    config.useSingleServer().setAddress(<span class="hljs-string">&quot;redis://127.0.0.1:6379&quot;</span>);<br>    config.useSingleServer().setPassword(<span class="hljs-string">&quot;redis1234&quot;</span>);<br>    <br>    <span class="hljs-keyword">final</span> <span class="hljs-type">RedissonClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> Redisson.create(config);  <br>    <span class="hljs-type">RLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> client.getLock(<span class="hljs-string">&quot;lock1&quot;</span>);<br>    <br>    <span class="hljs-keyword">try</span>&#123;<br>        lock.lock();<br>    &#125;<span class="hljs-keyword">finally</span>&#123;<br>        lock.unlock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="基于Zookeeper实现"><a href="#基于Zookeeper实现" class="headerlink" title="基于Zookeeper实现"></a>基于Zookeeper实现</h1><h2 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h2><blockquote><p>ZooKeeper是一个为分布式应用提供一致性服务的开源组件，它内部是一个分层的文件系统目录树结构，规定同一个目录下只能有一个唯一文件名。基于ZooKeeper实现分布式锁的步骤如下：</p></blockquote><p>（1）创建一个目录lock；<br>（2）线程A想获取锁就在lock目录下创建临时顺序节点；<br>（3）获取lock目录下所有的子节点，然后获取比自己小的兄弟节点，如果不存在，则说明当前线程顺序号最小，获得锁；<br>（4）线程B获取所有节点，判断自己不是最小节点，设置监听比自己次小的节点；<br>（5）线程A处理完，删除自己的节点，线程B监听到变更事件，判断自己是不是最小的节点，如果是则获得锁。</p><h2 id="Curator介绍"><a href="#Curator介绍" class="headerlink" title="Curator介绍"></a>Curator介绍</h2><blockquote><p>Curator是一个zookeeper的开源客户端，也提供了分布式锁的实现。他的使用方式也比较简单：</p></blockquote><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.curator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>curator-recipes<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.zookeeper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>zookeeper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.zookeeper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>zookeeper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>获取锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">InterProcessMutex</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterProcessMutex</span>(client, lockPath);<br><span class="hljs-keyword">if</span> ( lock.acquire(maxWait, waitUnit) ) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// do some work inside of the critical section here</span><br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        lock.release();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://curator.apache.org/">curator 官网</a></p><p><a href="https://www.cnblogs.com/liuqingzheng/p/11080501.html">三种实现分布式锁的方式</a></p><p><a href="https://zhuanlan.zhihu.com/p/163224180?utm_source=wechat_session">分布式锁用 Redis 还是 Zookeeper</a></p><p><a href="https://blog.csdn.net/sunfeizhi/article/details/51926396">基于zookeeper实现分布式锁</a></p><p><a href="https://www.zhihu.com/question/300767410?sort=created">怎样实现redis分布式锁</a></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分布式锁</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>中间件篇-ElasticSearch7.x教程</title>
    <link href="/2021/03/30/yuque/tesk05/"/>
    <url>/2021/03/30/yuque/tesk05/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1657549273518-4faedd35-3eac-4bc9-b720-6a89cd313cc9.png#clientId=u3ea2a62a-7bc2-4&from=markdown&id=CpuzB&originHeight=296&originWidth=556&originalType=url&ratio=1&rotation=0&showTitle=false&size=50344&status=done&style=none&taskId=u55f479e1-98ae-4cc9-b545-e30939d294a&title=" alt="image.png"></p><h3 id="一、-ElasticSerach-认识"><a href="#一、-ElasticSerach-认识" class="headerlink" title="一、 ElasticSerach 认识"></a>一、 ElasticSerach 认识</h3><h4 id="1-1-索引-index"><a href="#1-1-索引-index" class="headerlink" title="1.1 索引 index"></a>1.1 索引 index</h4><ul><li>一个索引可以理解成一个关系数据库的库</li></ul><h4 id="1-2-类型-type"><a href="#1-2-类型-type" class="headerlink" title="1.2 类型 type"></a>1.2 类型 type</h4><ul><li>一种type就像一类表，比如user表，order表</li></ul><h4 id="1-3-映射-mapping"><a href="#1-3-映射-mapping" class="headerlink" title="1.3 映射 mapping"></a>1.3 映射 mapping</h4><ul><li>mapping定义了每个字段的类型等信息。相当于关系型数据库中的表结</li></ul><h4 id="1-4-文档-document"><a href="#1-4-文档-document" class="headerlink" title="1.4 文档 document"></a>1.4 文档 document</h4><ul><li>一个document相当于关系型数据库中的一⾏行行记录</li></ul><h4 id="1-5-字段-field"><a href="#1-5-字段-field" class="headerlink" title="1.5 字段 field"></a>1.5 字段 field</h4><ul><li>相当于关系型数据库表的字段</li></ul><h4 id="1-6-集群-cluster"><a href="#1-6-集群-cluster" class="headerlink" title="1.6 集群 cluster"></a>1.6 集群 cluster</h4><p>-集群由一个或多个节点组成，一个集群有一个默认名称”elasticsearch”</p><h4 id="1-7-节点-node"><a href="#1-7-节点-node" class="headerlink" title="1.7 节点 node"></a>1.7 节点 node</h4><ul><li>集群的节点，一台机器 或者一个进程</li></ul><h4 id="1-8-分片和副本-node"><a href="#1-8-分片和副本-node" class="headerlink" title="1.8 分片和副本 node"></a>1.8 分片和副本 node</h4><ul><li>副本是分片的副本。分⽚有主分片(primary Shard)和副本分片(replica Shard)之分。Index数据在物理理上被分布在多个主分片中，每个主分片只存放部分数据。每个主分⽚可以有多个副本，叫副本分片，是主分片的复制。</li></ul><h4 id="1-9-核心数据类型"><a href="#1-9-核心数据类型" class="headerlink" title="1.9 核心数据类型"></a>1.9 核心数据类型</h4><h5 id="1-9-1-字符串"><a href="#1-9-1-字符串" class="headerlink" title="1.9.1 字符串:"></a>1.9.1 字符串:</h5><ul><li>text</li></ul><ol><li>用于全文索引，该类型的字段将通过分词器 进⾏分词</li></ol><ul><li>keyword</li></ul><ol><li>不分词，只能搜索该字段的完整的值</li></ol><h5 id="1-9-2-数值型"><a href="#1-9-2-数值型" class="headerlink" title="1.9.2 数值型"></a>1.9.2 数值型</h5><ol><li>long, integer, short, byte, double, float, half_float, scaled_float</li></ol><h5 id="1-9-3-数值型-boolean"><a href="#1-9-3-数值型-boolean" class="headerlink" title="1.9.3 数值型 boolean"></a>1.9.3 数值型 boolean</h5><ul><li>boolean</li></ul><h5 id="1-9-3-二进制"><a href="#1-9-3-二进制" class="headerlink" title="1.9.3 二进制"></a>1.9.3 二进制</h5><ul><li>binary</li></ul><ol><li>该类型的字段把值当做经过 base64 编码的字符串，默认不存储，且不可搜索</li></ol><h5 id="1-9-4-范围类型"><a href="#1-9-4-范围类型" class="headerlink" title="1.9.4 范围类型"></a>1.9.4 范围类型</h5><ol><li>范围类型表示值是一个范围，而不是⼀个具体的值</li><li>integer_range, float_range, long_range, double_range, date_range</li><li>譬如 age 的类型是 integer_range，那么值可以是 {“gte” : 20, “lte” : 40}；搜索 “term” : {“age”: 21} 可以搜索该值</li></ol><h5 id="1-9-5-日期"><a href="#1-9-5-日期" class="headerlink" title="1.9.5 日期"></a>1.9.5 日期</h5><ul><li>date</li></ul><ol><li>由于Json没有date类型，所以es通过识别字符串是否符合format定义的格式来判断是否为date类型</li><li>format默认为：strict_date_optional_time||epoch_millis</li><li>“2022-01-01” “2022/01/01 12:10:30” 这种字符串格式</li></ol><h3 id="二、索引基本操作"><a href="#二、索引基本操作" class="headerlink" title="二、索引基本操作"></a>二、索引基本操作</h3><p><code>基于Kibana进行操作</code></p><h4 id="2-1-创建索引-PUT请求"><a href="#2-1-创建索引-PUT请求" class="headerlink" title="2.1 创建索引 PUT请求"></a>2.1 创建索引 PUT请求</h4><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">PUT /person<br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>    <span class="hljs-string">&quot;acknowledged&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&quot;shards_acknowledged&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&quot;index&quot;</span>: <span class="hljs-string">&quot;person&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-查看索引-GET请求"><a href="#2-2-查看索引-GET请求" class="headerlink" title="2.2 查看索引 GET请求"></a>2.2 查看索引 GET请求</h4><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">PUT /person<br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><p>点击展开</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;person&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-comment">//索引</span><br>    <span class="hljs-attr">&quot;aliases&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">//别名</span><br>    <span class="hljs-attr">&quot;mappings&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">//表结构</span><br>    <span class="hljs-attr">&quot;settings&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-comment">//设置</span><br>      <span class="hljs-attr">&quot;index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-comment">//不知道什么鬼</span><br>        <span class="hljs-attr">&quot;routing&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;allocation&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;include&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;_tier_preference&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;data_content&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;number_of_shards&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">//分片</span><br>        <span class="hljs-attr">&quot;provided_name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">//名字</span><br>        <span class="hljs-attr">&quot;creation_date&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1618297457022&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">//创建时间</span><br>        <span class="hljs-attr">&quot;number_of_replicas&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">//副本</span><br>        <span class="hljs-attr">&quot;uuid&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;tAkSyPwhT1y-YIXd8aPnrQ&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">//唯一id</span><br>        <span class="hljs-attr">&quot;version&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-comment">//版本</span><br>          <span class="hljs-attr">&quot;created&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;7120099&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="2-4-删除索引-DELETE请求"><a href="#2-4-删除索引-DELETE请求" class="headerlink" title="2.4 删除索引 DELETE请求"></a>2.4 删除索引 DELETE请求</h4><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">DELETE /person<br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;acknowledged&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="2-5-批量获取索引-GET请求"><a href="#2-5-批量获取索引-GET请求" class="headerlink" title="2.5 批量获取索引 GET请求"></a>2.5 批量获取索引 GET请求</h4><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">GET /person,animal<br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;animal&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;aliases&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;mappings&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;settings&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;routing&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;allocation&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;include&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;_tier_preference&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;data_content&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;number_of_shards&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;provided_name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;animal&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;creation_date&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1618297759538&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;number_of_replicas&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;uuid&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xvlEQJznT_GszJp21OJl4g&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;version&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;created&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;7120099&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;person&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;aliases&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;mappings&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;settings&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;routing&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;allocation&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;include&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;_tier_preference&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;data_content&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;number_of_shards&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;provided_name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;creation_date&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1618297742637&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;number_of_replicas&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;uuid&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;oZslJJlaRaiOwVktJZEwYw&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;version&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;created&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;7120099&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="2-6-获取全部索引-GET请求"><a href="#2-6-获取全部索引-GET请求" class="headerlink" title="2.6 获取全部索引 GET请求"></a>2.6 获取全部索引 GET请求</h4><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">GET _all<br></code></pre></td></tr></table></figure><h4 id="2-7-使用-cat获取全部索引-GET请求"><a href="#2-7-使用-cat获取全部索引-GET请求" class="headerlink" title="2.7 使用_cat获取全部索引 GET请求"></a>2.7 使用_cat获取全部索引 GET请求</h4><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">GET /_cat/indices?v<br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs latex">yellow open   person                          oZslJJlaRaiOwVktJZEwYw   1   1          0            0       208b           208b<br>yellow open   animal                          xvlEQJznT<span class="hljs-built_in">_</span>GszJp21OJl4g   1   1          0            0       208b           208b<br></code></pre></td></tr></table></figure><h4 id="2-8-判断索引是否存在-HEAD请求"><a href="#2-8-判断索引是否存在-HEAD请求" class="headerlink" title="2.8 判断索引是否存在 HEAD请求"></a>2.8 判断索引是否存在 HEAD请求</h4><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">HEAD /person<br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs latex">200 - OK<br></code></pre></td></tr></table></figure><h4 id="2-9-关闭索引-不删除-POST请求"><a href="#2-9-关闭索引-不删除-POST请求" class="headerlink" title="2.9 关闭索引 不删除 POST请求"></a>2.9 关闭索引 不删除 POST请求</h4><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">POST /person/_close<br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;acknowledged&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;shards_acknowledged&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="2-10-打开索引-POST请求"><a href="#2-10-打开索引-POST请求" class="headerlink" title="2.10 打开索引 POST请求"></a>2.10 打开索引 POST请求</h4><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">POST /person/_open<br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;acknowledged&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;shards_acknowledged&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="三、映射的介绍与使用"><a href="#三、映射的介绍与使用" class="headerlink" title="三、映射的介绍与使用"></a>三、映射的介绍与使用</h3><ul><li>type: text 可分词<code>(划重点)</code></li><li>type: keyword 不可分词</li></ul><h4 id="3-1-创建Mapping-PUT请求"><a href="#3-1-创建Mapping-PUT请求" class="headerlink" title="3.1 创建Mapping PUT请求"></a>3.1 创建Mapping PUT请求</h4><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">PUT /person/_mapping<br>&#123;<br>  <span class="hljs-string">&quot;properties&quot;</span>:&#123;<br><span class="hljs-string">&quot;name&quot;</span>:&#123;<br><span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;text&quot;</span><br>&#125;,<br><span class="hljs-string">&quot;sex&quot;</span>:&#123;<br><span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;keyword&quot;</span><br>&#125;,<br><span class="hljs-string">&quot;idcard&quot;</span>:&#123;<br><span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;keyword&quot;</span><br>&#125;,<br><span class="hljs-string">&quot;birthday&quot;</span>:&#123;<br><span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;keyword&quot;</span><br>&#125;,<br><span class="hljs-string">&quot;desc&quot;</span>:&#123;<br><span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;text&quot;</span><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;acknowledged&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="3-2-查看Mapping信息-GET请求"><a href="#3-2-查看Mapping信息-GET请求" class="headerlink" title="3.2 查看Mapping信息 GET请求"></a>3.2 查看Mapping信息 GET请求</h4><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">GET /person/_mapping<br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;person&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;mappings&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;properties&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;birthday&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;desc&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;idcard&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;sex&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="3-3-批量获取Mapping信息-GET请求"><a href="#3-3-批量获取Mapping信息-GET请求" class="headerlink" title="3.3 批量获取Mapping信息 GET请求"></a>3.3 批量获取Mapping信息 GET请求</h4><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">GET /person,animal/_mapping<br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;person&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;mappings&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;properties&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;birthday&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;desc&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;idcard&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;sex&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;animal&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;mappings&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="3-4-获取所有Mapping信息第一种方式-GET请求"><a href="#3-4-获取所有Mapping信息第一种方式-GET请求" class="headerlink" title="3.4 获取所有Mapping信息第一种方式 GET请求"></a>3.4 获取所有Mapping信息第一种方式 GET请求</h4><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">GET /_mapping<br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;animal&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;mappings&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;person&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;mappings&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;properties&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;birthday&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;desc&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;idcard&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;sex&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="3-5-获取所有Mapping信息第二种方式-GET请求"><a href="#3-5-获取所有Mapping信息第二种方式-GET请求" class="headerlink" title="3.5 获取所有Mapping信息第二种方式 GET请求"></a>3.5 获取所有Mapping信息第二种方式 GET请求</h4><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">GET /_all/_mapping<br></code></pre></td></tr></table></figure><h4 id="3-6-增加Mapping字段-POST请求"><a href="#3-6-增加Mapping字段-POST请求" class="headerlink" title="3.6 增加Mapping字段 POST请求"></a>3.6 增加Mapping字段 POST请求</h4><ul><li> Mapping 只可增加字段<code>不可修改字段</code> </li><li> 请求 </li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json">POST /person/_mapping<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;text&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;sex&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;keyword&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;idcard&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;keyword&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;birthday&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;keyword&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;desc&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;text&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;hobby&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;text&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;acknowledged&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="四、文档的增删改查"><a href="#四、文档的增删改查" class="headerlink" title="四、文档的增删改查"></a>四、文档的增删改查</h3><h4 id="4-1-新增文档-指定ID-PUT-POST请求"><a href="#4-1-新增文档-指定ID-PUT-POST请求" class="headerlink" title="4.1 新增文档 指定ID PUT/POST请求"></a>4.1 新增文档 指定ID PUT/POST请求</h4><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">PUT /person/_doc/<span class="hljs-number">1</span><br>&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;麦奇&quot;</span>,<br>  <span class="hljs-string">&quot;sex&quot;</span>:<span class="hljs-string">&quot;男&quot;</span>,<br>  <span class="hljs-string">&quot;idcard&quot;</span>:<span class="hljs-string">&quot;123456789&quot;</span>,<br>  <span class="hljs-string">&quot;birthday&quot;</span>:<span class="hljs-string">&quot;1999/02/20&quot;</span>,<br>  <span class="hljs-string">&quot;desc&quot;</span>:<span class="hljs-string">&quot;麦奇&quot;</span>,<br>  <span class="hljs-string">&quot;hobby&quot;</span>:<span class="hljs-string">&quot;Downhill,table tennis,program design&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_version&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;result&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;created&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_seq_no&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_primary_term&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="4-2-新增文档-自动生成ID-POST请求"><a href="#4-2-新增文档-自动生成ID-POST请求" class="headerlink" title="4.2 新增文档 自动生成ID POST请求"></a>4.2 新增文档 自动生成ID POST请求</h4><ul><li> 注意: 不指定IP只能使用<code>POST</code>请求 </li><li> 注意: 自动生成ID开关要打开,关闭状态无法自动创建ID </li><li> 请求 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">POST /person/_doc<br>&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;里奥&quot;</span>,<br>  <span class="hljs-string">&quot;sex&quot;</span>:<span class="hljs-string">&quot;男&quot;</span>,<br>  <span class="hljs-string">&quot;idcard&quot;</span>:<span class="hljs-string">&quot;343232323&quot;</span>,<br>  <span class="hljs-string">&quot;birthday&quot;</span>:<span class="hljs-string">&quot;1998/02/20&quot;</span>,<br>  <span class="hljs-string">&quot;desc&quot;</span>:<span class="hljs-string">&quot;一个充满智慧的乌龟&quot;</span>,<br>  <span class="hljs-string">&quot;hobby&quot;</span>:<span class="hljs-string">&quot;program design,双节棍,高科技产品&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;khRPyngBRjMpykU9O0ps&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">// 自动生成ID</span><br>  <span class="hljs-attr">&quot;_version&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;result&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;created&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_seq_no&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_primary_term&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="4-3-自动创建索引-POST请求"><a href="#4-3-自动创建索引-POST请求" class="headerlink" title="4.3 自动创建索引 POST请求"></a>4.3 自动创建索引 POST请求</h4><ul><li> 查看auto_create_index开关状态，请求<a href="http://localhost:9200/_cluster/settings">http://localhost:9200/_cluster/settings</a> </li><li> 注意:当索引不存在并且auto_create_index为true的时候，新增文档时会⾃动创建索引，若为false是不能自动创建索引 </li><li> 请求 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">POST /china_person/_doc/<span class="hljs-number">1</span><br>&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;杨虎三&quot;</span>,<br>  <span class="hljs-string">&quot;sex&quot;</span>:<span class="hljs-string">&quot;男&quot;</span>,<br>  <span class="hljs-string">&quot;idcard&quot;</span>:<span class="hljs-string">&quot;765432345&quot;</span>,<br>  <span class="hljs-string">&quot;birthday&quot;</span>:<span class="hljs-string">&quot;1998/02/20&quot;</span>,<br>  <span class="hljs-string">&quot;desc&quot;</span>:<span class="hljs-string">&quot;一个中国人&quot;</span>,<br>  <span class="hljs-string">&quot;hobby&quot;</span>:<span class="hljs-string">&quot;吃、喝、玩、乐&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;china_person&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">// 自动创建的索引</span><br>  <span class="hljs-attr">&quot;_type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_version&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;result&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;created&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_seq_no&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_primary_term&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="4-4-查看自动创建的索引-GET请求"><a href="#4-4-查看自动创建的索引-GET请求" class="headerlink" title="4.4 查看自动创建的索引 GET请求"></a>4.4 查看自动创建的索引 GET请求</h4><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">localhost:<span class="hljs-number">9200</span>/wperson<br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;china_person&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;aliases&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;mappings&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;properties&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;birthday&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;date&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;format&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;yyyy/MM/dd HH:mm:ss||yyyy/MM/dd||epoch_millis&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;desc&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;fields&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;keyword&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;ignore_above&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">256</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;hobby&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;fields&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;keyword&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;ignore_above&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">256</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;idcard&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;fields&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;keyword&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;ignore_above&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">256</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;fields&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;keyword&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;ignore_above&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">256</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;sex&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;fields&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;keyword&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;ignore_above&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">256</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;settings&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;routing&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;allocation&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;include&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;_tier_preference&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;data_content&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;number_of_shards&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;provided_name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;china_person&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;creation_date&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1618541251930&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;number_of_replicas&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;uuid&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eRdkAL-FQMyPqfef4W9ZbA&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;version&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;created&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;7120099&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="4-5-指定操作类型"><a href="#4-5-指定操作类型" class="headerlink" title="4.5 指定操作类型"></a>4.5 指定操作类型</h4><ul><li> 新增或修改的时候可能会把原有文档修改掉，这里可以指定类型 </li><li> 比如文档存在，我要新增一条文档，但是没有指定类型可能修改掉原有的文档 </li><li> 请求 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">localhost:<span class="hljs-number">9200</span>/person/_doc/<span class="hljs-number">1</span>?op_type=create<br></code></pre></td></tr></table></figure><ul><li>请求体</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json">POST /person/_doc/<span class="hljs-number">2</span>?op_type=create<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;杨虎三&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;sex&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;男&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;idcard&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;765432345&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;birthday&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;1998/02/20&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;desc&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;一个中国人&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hobby&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;吃、喝、玩、乐&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;error&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;root_cause&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;version_conflict_engine_exception&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;reason&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;[2]: version conflict, document already exists (current version [1])&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">// 文档已经存在</span><br>        <span class="hljs-attr">&quot;index_uuid&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;oZslJJlaRaiOwVktJZEwYw&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;shard&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;version_conflict_engine_exception&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;reason&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;[2]: version conflict, document already exists (current version [1])&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;index_uuid&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;oZslJJlaRaiOwVktJZEwYw&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;shard&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;status&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">409</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="4-6-查看指定ID文档-GET请求"><a href="#4-6-查看指定ID文档-GET请求" class="headerlink" title="4.6 查看指定ID文档 GET请求"></a>4.6 查看指定ID文档 GET请求</h4><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">GET /person/_doc/<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_version&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_seq_no&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_primary_term&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;found&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_source&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;麦奇&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;sex&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;男&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;idcard&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;123456789&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;birthday&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1999/02/20&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;desc&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;麦奇&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hobby&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Downhill,table tennis,program design&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="4-7-查看多条文档-第一种方式-GET-POST请求"><a href="#4-7-查看多条文档-第一种方式-GET-POST请求" class="headerlink" title="4.7 查看多条文档 第一种方式 GET/POST请求"></a>4.7 查看多条文档 第一种方式 GET/POST请求</h4><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">GET /_mget<br>&#123;<br><span class="hljs-string">&quot;docs&quot;</span> : [<span class="hljs-comment">//  指定标签</span><br>&#123;<br><span class="hljs-string">&quot;_index&quot;</span> : <span class="hljs-string">&quot;person&quot;</span>, <span class="hljs-comment">// 指定索引</span><br><span class="hljs-string">&quot;_type&quot;</span> : <span class="hljs-string">&quot;_doc&quot;</span>, <span class="hljs-comment">// 默认类型</span><br><span class="hljs-string">&quot;_id&quot;</span> : <span class="hljs-string">&quot;1&quot;</span>      <span class="hljs-comment">// 对应id</span><br>&#125;,<br>&#123;<br><span class="hljs-string">&quot;_index&quot;</span> : <span class="hljs-string">&quot;person&quot;</span>,<br><span class="hljs-string">&quot;_type&quot;</span> : <span class="hljs-string">&quot;_doc&quot;</span>,<br><span class="hljs-string">&quot;_id&quot;</span> : <span class="hljs-string">&quot;2&quot;</span><br>&#125;<br>]<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;docs&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;_type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;_version&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;_seq_no&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;_primary_term&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;found&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;_source&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;麦奇&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;sex&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;男&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;idcard&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;123456789&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;birthday&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1999/02/20&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;desc&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;麦奇&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;hobby&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Downhill,table tennis,program design&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;_type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;_version&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;_seq_no&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;_primary_term&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;found&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;_source&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;杨虎三&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;sex&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;男&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;idcard&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;765432345&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;birthday&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1998/02/20&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;desc&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;一个中国人&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;hobby&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;吃、喝、玩、乐&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="4-8-查看多条文档-第二种方式-GET-POST请求"><a href="#4-8-查看多条文档-第二种方式-GET-POST请求" class="headerlink" title="4.8 查看多条文档 第二种方式 GET/POST请求"></a>4.8 查看多条文档 第二种方式 GET/POST请求</h4><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">GET /person/_mget <span class="hljs-comment">//指定索引</span><br>&#123;<br>  <span class="hljs-string">&quot;docs&quot;</span>:[&#123;<br>    <span class="hljs-string">&quot;_type&quot;</span>: <span class="hljs-string">&quot;_doc&quot;</span>,<br>    <span class="hljs-string">&quot;_id&quot;</span>: <span class="hljs-string">&quot;1&quot;</span><br>  &#125;,&#123;<br>    <span class="hljs-string">&quot;_type&quot;</span>: <span class="hljs-string">&quot;_doc&quot;</span>,<br>    <span class="hljs-string">&quot;_id&quot;</span>: <span class="hljs-string">&quot;2&quot;</span><br>  &#125;]<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;docs&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;_type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;_version&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;_seq_no&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;_primary_term&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;found&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;_source&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;麦奇&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;sex&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;男&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;idcard&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;123456789&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;birthday&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1999/02/20&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;desc&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;麦奇&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;hobby&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Downhill,table tennis,program design&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;_type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;_version&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;_seq_no&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;_primary_term&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;found&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;_source&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;杨虎三&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;sex&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;男&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;idcard&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;765432345&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;birthday&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1998/02/20&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;desc&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;一个中国人&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;hobby&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;吃、喝、玩、乐&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="4-9-查看多条文档-第三种方式-GET-POST请求"><a href="#4-9-查看多条文档-第三种方式-GET-POST请求" class="headerlink" title="4.9 查看多条文档 第三种方式 GET/POST请求"></a>4.9 查看多条文档 第三种方式 GET/POST请求</h4><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">GET /person/_doc/_mget    <span class="hljs-comment">//指定索引、类型</span><br>&#123;<br><span class="hljs-string">&quot;docs&quot;</span> : [<br>&#123;<br><span class="hljs-string">&quot;_id&quot;</span> : <span class="hljs-string">&quot;1&quot;</span><br>&#125;,<br>&#123;<br><span class="hljs-string">&quot;_id&quot;</span> : <span class="hljs-string">&quot;2&quot;</span><br>&#125;<br>]<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;docs&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;_type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;_version&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;_seq_no&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;_primary_term&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;found&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;_source&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;麦奇&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;sex&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;男&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;idcard&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;123456789&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;birthday&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1999/02/20&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;desc&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;麦奇&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;hobby&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Downhill,table tennis,program design&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;_type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;_version&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;_seq_no&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;_primary_term&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;found&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;_source&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;杨虎三&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;sex&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;男&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;idcard&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;765432345&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;birthday&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1998/02/20&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;desc&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;一个中国人&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;hobby&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;吃、喝、玩、乐&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="4-10-查看多条文档-第四种方式-GET-POST请求"><a href="#4-10-查看多条文档-第四种方式-GET-POST请求" class="headerlink" title="4.10 查看多条文档 第四种方式 GET/POST请求"></a>4.10 查看多条文档 第四种方式 GET/POST请求</h4><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">GET /person/_doc/_mget<br>&#123;<br><span class="hljs-string">&quot;ids&quot;</span>:[<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>响应 同上</li></ul><h4 id="4-11-修改文档-POST请求"><a href="#4-11-修改文档-POST请求" class="headerlink" title="4.11 修改文档 POST请求"></a>4.11 修改文档 POST请求</h4><ul><li> 根据提供的文档片段更新数据 </li><li> 请求 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">POST /person/_update/<span class="hljs-number">2</span><br>&#123;<br>  <span class="hljs-string">&quot;doc&quot;</span>: &#123;<span class="hljs-comment">// doc标签必须存在</span><br>  <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;杨虎三&quot;</span>,<br>  <span class="hljs-string">&quot;sex&quot;</span>:<span class="hljs-string">&quot;男&quot;</span>,<br>  <span class="hljs-string">&quot;idcard&quot;</span>:<span class="hljs-string">&quot;765432345&quot;</span>,<br>  <span class="hljs-string">&quot;birthday&quot;</span>:<span class="hljs-string">&quot;1998/02/20&quot;</span>,<br>  <span class="hljs-string">&quot;desc&quot;</span>:<span class="hljs-string">&quot;实习生小白&quot;</span>,<br>  <span class="hljs-string">&quot;hobby&quot;</span>:<span class="hljs-string">&quot;coding&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_version&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;result&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;updated&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_seq_no&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_primary_term&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="4-12-向-source增加字段-POST请求"><a href="#4-12-向-source增加字段-POST请求" class="headerlink" title="4.12 向_source增加字段 POST请求"></a>4.12 向_source增加字段 POST请求</h4><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">POST /person/_update/<span class="hljs-number">1</span><br>&#123;<br>   <span class="hljs-comment">// script:标签 ctx:上下文 ._source = _source</span><br>   <span class="hljs-comment">// 语义:通过上下文拿到 _source字段,新增age为18</span><br><span class="hljs-string">&quot;script&quot;</span>: <span class="hljs-string">&quot;ctx._source.age = 18&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_version&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;result&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;updated&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_seq_no&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_primary_term&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="4-13-向-source删除字段-POST请求"><a href="#4-13-向-source删除字段-POST请求" class="headerlink" title="4.13 向_source删除字段 POST请求"></a>4.13 向_source删除字段 POST请求</h4><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">POST /person/_update/<span class="hljs-number">1</span><br>&#123;<br>    <span class="hljs-comment">// json格式无法出现多个&quot; 所以需要转义符</span><br><span class="hljs-string">&quot;script&quot;</span>: <span class="hljs-string">&quot;ctx._source.remove(\&quot;age\&quot;)&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_version&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;result&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;updated&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_seq_no&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_primary_term&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="4-14-更新指定文档的字段-POST请求"><a href="#4-14-更新指定文档的字段-POST请求" class="headerlink" title="4.14 更新指定文档的字段 POST请求"></a>4.14 更新指定文档的字段 POST请求</h4><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">POST /person/_update/<span class="hljs-number">1</span><br>&#123;<br><span class="hljs-string">&quot;script&quot;</span>: &#123;<br>        <span class="hljs-comment">// 先获取ID为1的数据，之后进行age+4</span><br><span class="hljs-string">&quot;source&quot;</span>: <span class="hljs-string">&quot;ctx._source.age += params.age&quot;</span>,<br>        <span class="hljs-comment">// 指定参数</span><br><span class="hljs-string">&quot;params&quot;</span>: &#123;<br><span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">4</span><br>&#125;<br>&#125;,<br>    <span class="hljs-comment">// 若存在则修改,若不存在则新增</span><br><span class="hljs-string">&quot;upsert&quot;</span>:&#123;<br><span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">1</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_version&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;result&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;updated&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_seq_no&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">7</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_primary_term&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>查询更新结果</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">GET /person/_doc/<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_version&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">6</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_seq_no&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">8</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_primary_term&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;found&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_source&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;麦奇&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;sex&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;男&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;idcard&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;123456789&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;birthday&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1999/02/20&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;desc&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;麦奇&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hobby&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Downhill,table tennis,program design&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;age&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">22</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="4-15-upsert介绍"><a href="#4-15-upsert介绍" class="headerlink" title="4.15 upsert介绍"></a>4.15 upsert介绍</h4><ul><li> upsert 当指定的⽂文档不不存在时，upsert参数包含的内容将会被插⼊入到索引中，作为⼀一个新⽂文档；如果指定的⽂文档存在，ElasticSearch引擎将会执⾏行行指定的更更新逻辑 </li><li> 请求 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">POST /person/_update/<span class="hljs-number">3</span><br>&#123;<br><span class="hljs-string">&quot;script&quot;</span>: &#123;<br><span class="hljs-string">&quot;source&quot;</span>: <span class="hljs-string">&quot;ctx._source.allstar += params.allstar&quot;</span>,<br><span class="hljs-string">&quot;params&quot;</span>: &#123;<br><span class="hljs-string">&quot;allstar&quot;</span>: <span class="hljs-number">4</span><br>&#125;<br>&#125;,<br><span class="hljs-string">&quot;upsert&quot;</span>: &#123;<br><span class="hljs-string">&quot;allstar&quot;</span>: <span class="hljs-number">1</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_version&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;result&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;created&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_seq_no&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">9</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_primary_term&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>查询更新结果upsert结果</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">GET /person/_doc/<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_version&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_seq_no&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">9</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_primary_term&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;found&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_source&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;allstar&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="4-16-删除文档-DELETE请求"><a href="#4-16-删除文档-DELETE请求" class="headerlink" title="4.16 删除文档 DELETE请求"></a>4.16 删除文档 DELETE请求</h4><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">DELETE /person/_doc/<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_version&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;result&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;deleted&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_seq_no&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_primary_term&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="五、文档的搜索"><a href="#五、文档的搜索" class="headerlink" title="五、文档的搜索"></a>五、文档的搜索</h3><ul><li> term(词条)查询和full text(全⽂)查询 </li><li> 词条查询：词条查询不会分析查询条件，只有当词条和查询字符串完全匹配时，才匹配搜索 </li><li> 全⽂查询：ElasticSearch引擎会先分析查询字符串，将其拆分成多个分词，只要已分析的字段中包含词条的任意⼀个，或全部包含，就匹配查询条件，返回该⽂档；如果不包含任意一个分词，表示没有任何文档匹配查询条件 </li></ul><h4 id="5-1-单条term查询-GET-POST请求"><a href="#5-1-单条term查询-GET-POST请求" class="headerlink" title="5.1 单条term查询 GET/POST请求"></a>5.1 单条term查询 GET/POST请求</h4><ul><li>term 关键字查询，精确查询</li><li>例如SQL的where条件</li><li>ES会对其插入的数据进行分词，当为text类型的字段时，分词后使用term查询可能查询不出，可采用精确查询。</li><li>请求</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /person/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-comment">//查询idcard为765432345的人</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-comment">//词条</span><br>      <span class="hljs-attr">&quot;idcard&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;765432345&quot;</span><span class="hljs-comment">//字段名称</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;took&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;timed_out&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;skipped&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;relation&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eq&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;max_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1.6739764</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1.6739764</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_source&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;杨虎三&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;sex&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;男&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;idcard&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;765432345&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;birthday&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1998/02/20&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;desc&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;实习生小白&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;hobby&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;coding&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="5-2-多条trem查询-GET-POST请求"><a href="#5-2-多条trem查询-GET-POST请求" class="headerlink" title="5.2 多条trem查询 GET/POST请求"></a>5.2 多条trem查询 GET/POST请求</h4><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">GET /person/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;terms&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;idcard&quot;</span>: [<span class="hljs-string">&quot;343232323&quot;</span>,<span class="hljs-string">&quot;765432345&quot;</span>]<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;took&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;timed_out&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;skipped&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;relation&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eq&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;max_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1.0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;khRPyngBRjMpykU9O0ps&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1.0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_source&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;里奥&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;sex&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;男&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;idcard&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;343232323&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;birthday&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1998/02/20&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;desc&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;一个充满智慧的乌龟&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;hobby&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;program design,双节棍,高科技产品&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1.0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_source&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;杨虎三&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;sex&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;男&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;idcard&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;765432345&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;birthday&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1998/02/20&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;desc&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;实习生小白&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;hobby&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;coding&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="5-2-match-all查询-GET-POST请求"><a href="#5-2-match-all查询-GET-POST请求" class="headerlink" title="5.2 match_all查询 GET/POST请求"></a>5.2 match_all查询 GET/POST请求</h4><ul><li> 全文查询 </li><li> 请求 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">GET /person/_search<br>&#123;<br><span class="hljs-string">&quot;query&quot;</span>:&#123;<br><span class="hljs-string">&quot;match_all&quot;</span>:&#123;&#125; <span class="hljs-comment">// 查询全部文档，默认显示10条记录</span><br>&#125;,<br><span class="hljs-string">&quot;from&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-comment">// 从0开始</span><br><span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">100</span> <span class="hljs-comment">// 查询100条</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;took&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;timed_out&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;skipped&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;relation&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eq&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;max_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1.0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;khRPyngBRjMpykU9O0ps&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1.0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_source&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;里奥&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;sex&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;男&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;idcard&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;343232323&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;birthday&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1998/02/20&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;desc&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;一个充满智慧的乌龟&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;hobby&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;program design,双节棍,高科技产品&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1.0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_source&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;杨虎三&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;sex&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;男&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;idcard&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;765432345&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;birthday&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1998/02/20&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;desc&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;实习生小白&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;hobby&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;coding&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1.0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_source&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;麦奇&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;sex&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;男&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;idcard&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;123456789&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;birthday&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1999/02/20&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;desc&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;麦奇&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;hobby&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Downhill,table tennis,program design&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;age&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">26</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="5-3-match查询-GET-POST请求"><a href="#5-3-match查询-GET-POST请求" class="headerlink" title="5.3 match查询 GET/POST请求"></a>5.3 match查询 GET/POST请求</h4><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">GET /person/_search<br>&#123;<br><span class="hljs-string">&quot;query&quot;</span>:&#123;<br><span class="hljs-string">&quot;match&quot;</span>:&#123; <span class="hljs-comment">// 这里使用match</span><br><span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;麦小奇&quot;</span> <span class="hljs-comment">//name:字段 会进行分词匹配</span><br>&#125;<br>&#125;,<br><span class="hljs-string">&quot;from&quot;</span>: <span class="hljs-number">0</span>,<br><span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">100</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;took&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">14</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;timed_out&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;skipped&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;relation&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eq&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;max_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0.7703978</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0.7703978</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_source&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;麦奇&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;sex&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;男&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;idcard&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;123456789&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;birthday&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1999/02/20&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;desc&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;麦奇&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;hobby&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Downhill,table tennis,program design&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;age&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">26</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="5-4-multi-match-多个查询-GET-POST请求"><a href="#5-4-multi-match-多个查询-GET-POST请求" class="headerlink" title="5.4 multi_match 多个查询 GET/POST请求"></a>5.4 multi_match 多个查询 GET/POST请求</h4><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">GET /person/_search<br>&#123;<br><span class="hljs-string">&quot;query&quot;</span>:&#123;<br><span class="hljs-string">&quot;multi_match&quot;</span>:&#123; <span class="hljs-comment">// 选定多个字段所以使用multi_match</span><br><span class="hljs-string">&quot;query&quot;</span>: <span class="hljs-string">&quot;麦奇&quot;</span>, <span class="hljs-comment">// 值</span><br><span class="hljs-string">&quot;fields&quot;</span>: [<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;desc&quot;</span>]  <span class="hljs-comment">// 指定查询的字段</span><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;took&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">12</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;timed_out&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;skipped&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;relation&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eq&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;max_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1.987459</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1.987459</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_source&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;麦奇&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;sex&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;男&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;idcard&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;123456789&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;birthday&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1999/02/20&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;desc&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;麦奇&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;hobby&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Downhill,table tennis,program design&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;age&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">26</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_create&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1.3365866</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_source&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;麦兜&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;sex&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;男&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;idcard&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;54343423&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;birthday&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1993/02/20&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;desc&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;麦奇的好朋友&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;hobby&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;哈哈哈哈哈&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;age&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">26</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="5-4-match-phrase-多个查询-GET-POST请求"><a href="#5-4-match-phrase-多个查询-GET-POST请求" class="headerlink" title="5.4 match_phrase 多个查询 GET/POST请求"></a>5.4 match_phrase 多个查询 GET/POST请求</h4><ul><li> 准确查询 类似词条查询 </li><li> 请求 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">GET /person/_search<br>&#123;<br><span class="hljs-string">&quot;query&quot;</span>:&#123;<br><span class="hljs-string">&quot;match_phrase&quot;</span>:&#123;<br><span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;麦奇&quot;</span><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;took&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;timed_out&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;skipped&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;relation&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eq&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;max_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1.987459</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1.987459</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_source&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;麦奇&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;sex&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;男&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;idcard&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;123456789&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;birthday&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1999/02/20&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;desc&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;麦奇&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;hobby&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Downhill,table tennis,program design&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;age&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">26</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="5-5-match-phrase-profix-多个查询-GET-POST请求"><a href="#5-5-match-phrase-profix-多个查询-GET-POST请求" class="headerlink" title="5.5 match_phrase_profix 多个查询 GET/POST请求"></a>5.5 match_phrase_profix 多个查询 GET/POST请求</h4><ul><li> 可以增加前缀 </li><li> 请求 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">GET /person/_search<br>&#123;<br><span class="hljs-string">&quot;query&quot;</span>:&#123;<br><span class="hljs-string">&quot;match_phrase_prefix&quot;</span>:&#123;<br><span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;麦&quot;</span> <span class="hljs-comment">// 指定了前缀</span><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;took&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">13</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;timed_out&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;skipped&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;relation&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eq&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;max_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0.72615415</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_create&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0.72615415</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_source&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;麦兜&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;sex&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;男&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;idcard&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;54343423&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;birthday&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1993/02/20&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;desc&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;麦奇的好朋友&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;hobby&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;哈哈哈哈哈&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;age&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">26</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0.72615415</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_source&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;麦奇&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;sex&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;男&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;idcard&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;123456789&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;birthday&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1999/02/20&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;desc&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;麦奇&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;hobby&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Downhill,table tennis,program design&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;age&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">26</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="六、ElasticSerach-搜索"><a href="#六、ElasticSerach-搜索" class="headerlink" title="六、ElasticSerach 搜索"></a>六、ElasticSerach 搜索</h3><h4 id="6-1-批量导入数据"><a href="#6-1-批量导入数据" class="headerlink" title="6.1 批量导入数据"></a>6.1 批量导入数据</h4><ul><li>Bulkl</li></ul><ol><li>ES提供了Bulk的API 来进行批量操作</li></ol><ul><li>数据结构类型，以换行区分</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// 必须有一个索引叫book</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;book&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Java编程思想&quot;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;book&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;设计模式&quot;</span><span class="hljs-punctuation">&#125;</span><br> <span class="hljs-comment">// 结尾必须有换行</span><br></code></pre></td></tr></table></figure><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">curl -X POST <span class="hljs-string">&quot;localhost:9200/_bulk&quot;</span> -H <span class="hljs-string">&#x27;Content-Type: application/json&#x27;</span> --data-binary <span class="hljs-meta">@name</span> <span class="hljs-comment">// name就是文件的路径和名字</span><br></code></pre></td></tr></table></figure><ul><li>测试 查询</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;from&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">100</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="6-2-trem多种查询"><a href="#6-2-trem多种查询" class="headerlink" title="6.2 trem多种查询"></a>6.2 trem多种查询</h4><ul><li>单词级别查询</li></ul><ol><li>这些查询通常⽤用于结构化的数据，⽐比如：number, date, keyword等，而不是对text。</li><li>也就是说，全⽂本查询之前要先对⽂本内容进⾏分词，⽽单词级别的查询直接在相应字段的反向索引中精确查找，单词级别的查询⼀般⽤于数值、⽇期等类型的字段上</li><li>去找个<a href="http://www.yyyweb.com/demo/inner-show/json-generator.html">网站</a>生成数据导入</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><br>  &#x27;<span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#123;</span>repeat(<span class="hljs-number">20</span><span class="hljs-punctuation">,</span> <span class="hljs-number">30</span>)<span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span>&#x27;<span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#123;</span><br>          name <span class="hljs-punctuation">:</span> &#x27;<span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#123;</span>firstName()<span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#123;</span>surname()<span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span>&#x27;<span class="hljs-punctuation">,</span><br>          sex <span class="hljs-punctuation">:</span> &#x27;<span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#123;</span>random(<span class="hljs-string">&quot;女&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;男&quot;</span>)<span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span>&#x27;<span class="hljs-punctuation">,</span><br>          idcard <span class="hljs-punctuation">:</span> &#x27;<span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#123;</span>objectId()<span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span>&#x27;<span class="hljs-punctuation">,</span><br>          birthday <span class="hljs-punctuation">:</span> &#x27;<span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#123;</span>date(new Date(<span class="hljs-number">2014</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span>)<span class="hljs-punctuation">,</span> new Date()<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;YYYY-MM-ddThh:mm:ss Z&quot;</span>)<span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span>&#x27;<span class="hljs-punctuation">,</span><br>          desc <span class="hljs-punctuation">:</span> &#x27;<span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#123;</span>lorem(<span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;paragraphs&quot;</span>)<span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span>&#x27;<span class="hljs-punctuation">,</span><br>          hobby <span class="hljs-punctuation">:</span> &#x27;<span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#123;</span>lorem(<span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;words&quot;</span>)<span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span>&#x27;<span class="hljs-punctuation">,</span><br>          age <span class="hljs-punctuation">:</span> &#x27;<span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#123;</span>integer(<span class="hljs-number">20</span><span class="hljs-punctuation">,</span> <span class="hljs-number">40</span>)<span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span>&#x27;<br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><h5 id="6-2-1-term-query-精准匹配查询-GET-POST请求"><a href="#6-2-1-term-query-精准匹配查询-GET-POST请求" class="headerlink" title="6.2.1 term query 精准匹配查询 GET/POST请求"></a>6.2.1 term query 精准匹配查询 GET/POST请求</h5><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">GET /person/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;term&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;idcard&quot;</span>: <span class="hljs-number">343232323</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;from&quot;</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">20</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;took&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">9</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;timed_out&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;skipped&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;relation&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eq&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;max_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1.2039728</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;khRPyngBRjMpykU9O0ps&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1.2039728</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_source&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;里奥&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;sex&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;男&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;idcard&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;343232323&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;birthday&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1998/02/20&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;desc&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;一个充满智慧的乌龟&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;hobby&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;program design,双节棍,高科技产品&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="6-2-2-exsit-query-在特定的字段中查找非空值的文档-GET-POST请求"><a href="#6-2-2-exsit-query-在特定的字段中查找非空值的文档-GET-POST请求" class="headerlink" title="6.2.2 exsit query 在特定的字段中查找非空值的文档 GET/POST请求"></a>6.2.2 exsit query 在特定的字段中查找非空值的文档 GET/POST请求</h5><ul><li>请求</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">GET /person/_search<br>&#123;<br>  &quot;query&quot;: &#123;<br>    &quot;exists&quot;: &#123;<br>      &quot;field&quot;: &quot;age&quot;//查询存在age的记录<br>    &#125;<br>  &#125;,<br>  &quot;from&quot;: 0,<br>  &quot;size&quot;: 3<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;took&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">6</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;timed_out&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;skipped&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;relation&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eq&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;max_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1.0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1.0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_source&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;麦奇&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;sex&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;男&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;idcard&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;123456789&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;birthday&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1999/02/20&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;desc&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;麦奇&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;hobby&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Downhill,table tennis,program design&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;age&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">26</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_create&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1.0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_source&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Julie Peters&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;sex&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;男&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;idcard&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;6079270de8b8f59c77eb3cd2&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;birthday&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2021-01-26T05:17:20 -08:00&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;hobby&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;quis&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;age&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">29</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="6-2-3-prefix-query-查找包含带有指定前缀term的文档-GET-POST请求"><a href="#6-2-3-prefix-query-查找包含带有指定前缀term的文档-GET-POST请求" class="headerlink" title="6.2.3 prefix query 查找包含带有指定前缀term的文档 GET/POST请求"></a>6.2.3 prefix query 查找包含带有指定前缀term的文档 GET/POST请求</h5><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">GET /person/_search<br></code></pre></td></tr></table></figure><ul><li>请求体</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-comment">// 语义:查找teamNameEn 不为空的数据 teamNameEn必须为text类型</span><br>  <span class="hljs-comment">// 使用前缀类型必须为keyword,不能为text</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;prefix&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;麦&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;from&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;took&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;timed_out&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;skipped&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;relation&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eq&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;max_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1.0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1.0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_source&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;麦奇&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;sex&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;男&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;idcard&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;123456789&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;birthday&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1999/02/20&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;desc&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;麦奇&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;hobby&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Downhill,table tennis,program design&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;age&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">26</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_create&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1.0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_source&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;麦兜&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;sex&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;男&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;idcard&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;54343423&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;birthday&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1993/02/20&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;desc&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;麦奇的好朋友&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;hobby&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;哈哈哈哈哈&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;age&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">26</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="6-2-4-wildcard-query-支持通配符查询-GET-POST请求"><a href="#6-2-4-wildcard-query-支持通配符查询-GET-POST请求" class="headerlink" title="6.2.4 wildcard query 支持通配符查询 GET/POST请求"></a>6.2.4 wildcard query 支持通配符查询 GET/POST请求</h5><ul><li> *表示任意字符，?表示任意单个字符,类似SQL模糊查询 </li><li> 请求 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">GET /person/_search<br>&#123;<br>  <span class="hljs-comment">// 语义: 查询name为Ro*s *为模糊搜索</span><br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;wildcard&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Ro*s&quot;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;from&quot;</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">3</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="6-2-5-regexp-query-正则表达式查询-GET-POST请求"><a href="#6-2-5-regexp-query-正则表达式查询-GET-POST请求" class="headerlink" title="6.2.5 regexp query 正则表达式查询 GET/POST请求"></a>6.2.5 regexp query 正则表达式查询 GET/POST请求</h5><ul><li>请求</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">GET /person/_search<br>&#123;<br>  // 语义: 查询name 为Ro.*s  .表示任意 *为多个<br>  &quot;query&quot;: &#123;<br>    &quot;regexp&quot;: &#123;<br>      &quot;name&quot;: &quot;Ro.*s&quot;<br>    &#125;<br>  &#125;,<br>  &quot;from&quot;: 0,<br>  &quot;size&quot;: 3<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="6-2-6-ids-query-通过id批量查询-GET-POST请求"><a href="#6-2-6-ids-query-通过id批量查询-GET-POST请求" class="headerlink" title="6.2.6 ids query 通过id批量查询 GET/POST请求"></a>6.2.6 ids query 通过id批量查询 GET/POST请求</h5><ul><li>请求</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /person/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;ids&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;values&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;from&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="6-3-范围查询"><a href="#6-3-范围查询" class="headerlink" title="6.3 范围查询"></a>6.3 范围查询</h4><h5 id="6-3-1-第一种范围查询-GET-POST请求"><a href="#6-3-1-第一种范围查询-GET-POST请求" class="headerlink" title="6.3.1 第一种范围查询 GET/POST请求"></a>6.3.1 第一种范围查询 GET/POST请求</h5><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">GET /person/_search<br>&#123;<br>  <span class="hljs-comment">// 语义: 查找在person打了2年年到10年以内的球员</span><br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;range&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;playYear&quot;</span>:&#123; <span class="hljs-comment">//playYear 是Long类型 不要写成字符串</span><br>      <span class="hljs-string">&quot;gte&quot;</span>: <span class="hljs-number">2</span>,<br>      <span class="hljs-string">&quot;lte&quot;</span> : <span class="hljs-number">10</span><br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;from&quot;</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">3</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>gt: greater than 大于<br>gte: greater than or equal 大于等于<br>lt: less than 小于<br>lte: less than or equal 小于等于</p></blockquote><h5 id="6-3-2-第二种范围查询-GET-POST请求"><a href="#6-3-2-第二种范围查询-GET-POST请求" class="headerlink" title="6.3.2 第二种范围查询 GET/POST请求"></a>6.3.2 第二种范围查询 GET/POST请求</h5><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">GET /person/_search<br>&#123;<br>    <span class="hljs-comment">// 语义: 查找1980年年到1999年年出⽣生的球员</span><br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;range&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;birthDay&quot;</span>:&#123;<br>      <span class="hljs-string">&quot;gte&quot;</span>: <span class="hljs-string">&quot;01/01/1999&quot;</span>,<br>      <span class="hljs-string">&quot;lte&quot;</span> : <span class="hljs-string">&quot;1999&quot;</span>,,<br>      <span class="hljs-string">&quot;format&quot;</span>: <span class="hljs-string">&quot;dd/MM/yyyy||yyyy&quot;</span> <span class="hljs-comment">// 日期格式要对应get lte</span><br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;from&quot;</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">3</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-4-布尔查询"><a href="#6-4-布尔查询" class="headerlink" title="6.4 布尔查询"></a>6.4 布尔查询</h4><table><thead><tr><th>type</th><th>description</th></tr></thead><tbody><tr><td>must</td><td>必须出现在匹配文档中</td></tr><tr><td>filter</td><td>必须出现在文档中，但是不打分</td></tr><tr><td>must_not</td><td>不能出现在文档中</td></tr><tr><td>should</td><td>应该出现在文档中</td></tr></tbody></table><h5 id="6-4-1-must查询-GET-POST请求"><a href="#6-4-1-must查询-GET-POST请求" class="headerlink" title="6.4.1 must查询 GET/POST请求"></a>6.4.1 must查询 GET/POST请求</h5><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">GET /person/_search<br>&#123;<br>  <span class="hljs-comment">// 语义: 查询名字叫做james的人</span><br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;bool&quot;</span>: &#123; <span class="hljs-comment">// 布尔查询</span><br>      <span class="hljs-string">&quot;must&quot;</span>:[ <span class="hljs-comment">//匹配查询方式</span><br>        &#123;<br>          <span class="hljs-string">&quot;match&quot;</span>: &#123; <span class="hljs-comment">// 全文搜索</span><br>            <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;james&quot;</span><br>          &#125;<br>        &#125;<br>      ]<br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;from&quot;</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">3</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="6-4-2-filter查询-GET-POST请求"><a href="#6-4-2-filter查询-GET-POST请求" class="headerlink" title="6.4.2 filter查询 GET/POST请求"></a>6.4.2 filter查询 GET/POST请求</h5><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">GET /person/_search<br>&#123;<br>  <span class="hljs-comment">// 语义: 查询名字叫做james的球员 不包含打分</span><br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;bool&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;filter&quot;</span>:[<br>        &#123;<br>          <span class="hljs-string">&quot;match&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;james&quot;</span><br>          &#125;<br>        &#125;<br>      ]<br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;from&quot;</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">3</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="6-4-3-must-not查询-GET-POST请求"><a href="#6-4-3-must-not查询-GET-POST请求" class="headerlink" title="6.4.3 must_not查询 GET/POST请求"></a>6.4.3 must_not查询 GET/POST请求</h5><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">localhost:<span class="hljs-number">9200</span>/person/_search<br></code></pre></td></tr></table></figure><ul><li>请求体</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 语义: 查询名字叫做james的人,一定不在东部的</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;bool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;displayNameEn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;james&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;must_not&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;teamConferenceEn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eastern&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;from&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="6-4-4-should-第一种-查询-GET-POST请求"><a href="#6-4-4-should-第一种-查询-GET-POST请求" class="headerlink" title="6.4.4 should 第一种 查询 GET/POST请求"></a>6.4.4 should 第一种 查询 GET/POST请求</h5><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">localhost:<span class="hljs-number">9200</span>/person/_search<br></code></pre></td></tr></table></figure><ul><li>请求体</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 语义: 查找名字叫做james的打球时间应该在11到20年的西部球员</span><br>    <span class="hljs-comment">// should应该 但是不是必须</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;bool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;displayNameEn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;james&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;must_not&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;teamConferenceEn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eastern&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;should&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;range&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;playYear&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;gte&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">11</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;lte&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">20</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;from&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="6-4-5-should-第二种-查询-GET-POST请求"><a href="#6-4-5-should-第二种-查询-GET-POST请求" class="headerlink" title="6.4.5 should 第二种 查询 GET/POST请求"></a>6.4.5 should 第二种 查询 GET/POST请求</h5><ul><li>请求</li></ul><ul><li>请求体</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 语义: 查找名字叫做james的打球时间应该在11到20年的西部球员</span><br>    <span class="hljs-comment">// minimum_should_match = 1 最小匹配精度,至少有一个条件满足</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;bool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;displayNameEn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;james&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;must_not&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;teamConferenceEn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eastern&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;should&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;range&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;playYear&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;gte&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">11</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;lte&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">20</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><br>      <span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;minimum_should_match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;from&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;took&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;timed_out&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;skipped&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;relation&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eq&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;max_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1.0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;267&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1.0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_source&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;countryEn&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;United States&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;teamName&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;湖人&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;birthDay&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">473230800000</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;country&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;美国&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;teamCityEn&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Los Angeles&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;code&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;lebron_james&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;displayAffiliation&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;No College/United States&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;displayName&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;勒布朗 詹姆斯&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;schoolType&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;High School&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;teamConference&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;西部&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;teamConferenceEn&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Western&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;weight&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;113.4 公斤&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;teamCity&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;洛杉矶&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;playYear&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">16</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;jerseyNo&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;23&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;teamNameEn&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Lakers&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;draft&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2003</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;displayNameEn&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;LeBron James&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;heightValue&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2.03</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;birthDayStr&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1984-12-30&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;position&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;前锋&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;age&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">35</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;playerId&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2544&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="6-5-排序查询"><a href="#6-5-排序查询" class="headerlink" title="6.5 排序查询"></a>6.5 排序查询</h4><h5 id="6-5-1-第一种排序查询-GET-POST请求"><a href="#6-5-1-第一种排序查询-GET-POST请求" class="headerlink" title="6.5.1 第一种排序查询 GET/POST请求"></a>6.5.1 第一种排序查询 GET/POST请求</h5><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">localhost:<span class="hljs-number">9200</span>/person/_search<br></code></pre></td></tr></table></figure><ul><li>请求体</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 语义: ⽕箭队中按打球时间从⼤到⼩排序的球员</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;teamName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Rockets&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;sort&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;playYear&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;order&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;desc&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;from&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="6-5-2-第一种排序查询-GET-POST请求"><a href="#6-5-2-第一种排序查询-GET-POST请求" class="headerlink" title="6.5.2 第一种排序查询 GET/POST请求"></a>6.5.2 第一种排序查询 GET/POST请求</h5><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">localhost:<span class="hljs-number">9200</span>/person/_search<br></code></pre></td></tr></table></figure><ul><li>请求体</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 语义: ⽕箭队中按打球时间从⼤到⼩，如果年龄相同则按照身⾼从⾼到低排序的球员</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;teamNameEn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Rockets&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;sort&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;playYear&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;order&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;desc&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;heightValue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;order&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;asc&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;from&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="6-6-聚合查询指标聚合"><a href="#6-6-聚合查询指标聚合" class="headerlink" title="6.6 聚合查询指标聚合"></a>6.6 聚合查询指标聚合</h4><ul><li>ES聚合分析是什么</li></ul><ol><li> 聚合分析是数据库中重要的功能特性，完成对⼀个查询的数据集中数据的聚合计算，如：找出某字段（或计算表达式的结果）的最⼤值、最⼩值，计算和、平均值等。ES作为搜索引擎兼数据库，同样提供了强⼤的聚合分析能力。 </li><li> 对⼀个数据集求最大、最小、和、平均值等指标的聚合，在ES中称为<strong>指标聚合</strong> </li><li> 而关系型数据库中除了有聚合函数外，还可以对查询出的数据行分组group by，再在组上进行指标聚合。在ES中称为<strong>桶聚合</strong> </li></ol><h5 id="6-6-1-max-min-sum-avg-指标聚合查询-GET-POST"><a href="#6-6-1-max-min-sum-avg-指标聚合查询-GET-POST" class="headerlink" title="6.6.1 max min sum avg 指标聚合查询 GET/POST"></a>6.6.1 max min sum avg 指标聚合查询 GET/POST</h5><ul><li> max min sum avg 指标聚合 </li><li> 请求 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">localhost:<span class="hljs-number">9200</span>/person/_search<br></code></pre></td></tr></table></figure><ul><li>请求体</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 语义: 查询火箭队球员平均年龄</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;teamNameEn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Rockets&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// aggs 代表使用聚合函数</span><br>    <span class="hljs-attr">&quot;avgAge&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// avgAge是自定义的，因为是查年年龄平均所以起名avgAge</span><br>      <span class="hljs-attr">&quot;avg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// avg 平均</span><br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;age&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span> <span class="hljs-comment">// 不看数据只看指标聚合</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;took&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;timed_out&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;skipped&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">21</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;relation&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eq&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;max_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;aggregations&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;avgAge&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">26.761904761904763</span> <span class="hljs-comment">// 平均年龄</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="6-6-2-value-count-指标聚合查询-GET-POST"><a href="#6-6-2-value-count-指标聚合查询-GET-POST" class="headerlink" title="6.6.2 value_count 指标聚合查询 GET/POST"></a>6.6.2 value_count 指标聚合查询 GET/POST</h5><ul><li> 统计非空字段的文档数 </li><li> 请求 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">localhost:<span class="hljs-number">9200</span>/person/_search<br></code></pre></td></tr></table></figure><ul><li>请求体</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 语义: 查询火箭队中球员打球时间不为空的数量</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;teamNameEn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Rockets&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;countPlayerYear&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;value_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;playYear&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;took&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;timed_out&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;skipped&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">21</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;relation&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eq&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;max_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;aggregations&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;countPlayerYear&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">21</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="6-6-3-count-指标聚合查询（严格来说不属于聚合）-GET-POST"><a href="#6-6-3-count-指标聚合查询（严格来说不属于聚合）-GET-POST" class="headerlink" title="6.6.3 _count 指标聚合查询（严格来说不属于聚合） GET/POST"></a>6.6.3 _count 指标聚合查询（严格来说不属于聚合） GET/POST</h5><ul><li> 查询火箭队有多少文档，也就是有多少球员 </li><li> 请求 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">localhost:<span class="hljs-number">9200</span>/person/_count<br></code></pre></td></tr></table></figure><ul><li>请求体</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;teamNameEn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Rockets&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">21</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;successful&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;skipped&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;failed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="6-6-4-cardinality-指标聚合查询-GET-POST"><a href="#6-6-4-cardinality-指标聚合查询-GET-POST" class="headerlink" title="6.6.4 cardinality 指标聚合查询 GET/POST"></a>6.6.4 cardinality 指标聚合查询 GET/POST</h5><ul><li> Cardinality 值去重计算 </li><li> 请求 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">localhost:<span class="hljs-number">9200</span>/person/_search<br></code></pre></td></tr></table></figure><ul><li>请求体</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 语义: 查询火箭队中年龄不同的数量</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;teamNameEn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Rockets&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;countAge&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 自定义名字</span><br>      <span class="hljs-attr">&quot;cardinality&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 去掉相同的只保留一个值</span><br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;age&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;took&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;timed_out&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;skipped&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">21</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;relation&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eq&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;max_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;aggregations&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;countAge&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">13</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="6-6-5-status-种指标聚合查询-GET-POST"><a href="#6-6-5-status-种指标聚合查询-GET-POST" class="headerlink" title="6.6.5 status 种指标聚合查询 GET/POST"></a>6.6.5 status 种指标聚合查询 GET/POST</h5><ul><li> stats 统计count max min avg sum 5个值 </li><li> 请求 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">localhost:<span class="hljs-number">9200</span>/person/_search<br></code></pre></td></tr></table></figure><ul><li>请求体</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 语义:　查询火箭球员的年龄status</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;teamNameEn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Rockets&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;stats&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;age&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;took&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;timed_out&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;skipped&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">21</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;relation&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eq&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;max_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;aggregations&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;status&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;count&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">21</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;min&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">21.0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;max&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">37.0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;avg&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">26.761904761904763</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;sum&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">562.0</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="6-6-6-extended-status-种指标聚合查询-GET-POST"><a href="#6-6-6-extended-status-种指标聚合查询-GET-POST" class="headerlink" title="6.6.6 extended status 种指标聚合查询 GET/POST"></a>6.6.6 extended status 种指标聚合查询 GET/POST</h5><ul><li> Extended stats ⽐比stats多4个统计结果： 平⽅方和、⽅方差、标准差、平均值加减两个标准差的区间 </li><li> 请求 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">localhost:<span class="hljs-number">9200</span>/person/_search<br></code></pre></td></tr></table></figure><ul><li>请求体</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 查出火箭队球员的年龄Extend stats</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;teamNameEn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Rockets&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;extendedStatsAge&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;extended_stats&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;age&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;took&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;timed_out&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;skipped&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">21</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;relation&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eq&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;max_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;aggregations&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;extendedStatsAge&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;count&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">21</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;min&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">21.0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;max&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">37.0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;avg&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">26.761904761904763</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;sum&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">562.0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;sum_of_squares&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">15534.0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;variance&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">23.5147392290249</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;std_deviation&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">4.84919985451465</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;std_deviation_bounds&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;upper&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">36.46030447093406</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;lower&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">17.063505052875463</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="6-6-7-percentiles-种指标聚合查询-GET-POST"><a href="#6-6-7-percentiles-种指标聚合查询-GET-POST" class="headerlink" title="6.6.7 percentiles 种指标聚合查询 GET/POST"></a>6.6.7 percentiles 种指标聚合查询 GET/POST</h5><ul><li> Percentiles 占比百分位对应的值统计，默认返回[ 1, 5, 25, 50, 75, 95, 99 ]分位上的值 </li><li> 请求 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">localhost:<span class="hljs-number">9200</span>/person/_search<br></code></pre></td></tr></table></figure><ul><li>请求体</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 语义: 查出火箭的球员的年龄占比</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;teamNameEn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Rockets&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;percentilesAge&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;percentiles&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;age&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 这里可以指定，不使用默认</span><br>        <span class="hljs-comment">// &quot;percents&quot;: [</span><br>        <span class="hljs-comment">//   25,</span><br>        <span class="hljs-comment">//   50,</span><br>        <span class="hljs-comment">//   75</span><br>        <span class="hljs-comment">// ]</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;took&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;timed_out&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;skipped&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">21</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;relation&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eq&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;max_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;aggregations&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;percentilesAge&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;values&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;1.0&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">21.0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;5.0&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">21.0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;25.0&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">22.75</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 小于22.75岁的 占25%</span><br>        <span class="hljs-attr">&quot;50.0&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">25.0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;75.0&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">30.25</span><span class="hljs-punctuation">,</span><span class="hljs-comment">// 小于30.25岁的 占75%</span><br>        <span class="hljs-attr">&quot;95.0&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">35.349999999999994</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;99.0&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">37.0</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="6-7-聚合查询桶聚合"><a href="#6-7-聚合查询桶聚合" class="headerlink" title="6.7 聚合查询桶聚合"></a>6.7 聚合查询桶聚合</h4><h5 id="6-7-1-terms-aggregation-桶聚合查询-GET-POST"><a href="#6-7-1-terms-aggregation-桶聚合查询-GET-POST" class="headerlink" title="6.7.1 terms aggregation 桶聚合查询 GET/POST"></a>6.7.1 terms aggregation 桶聚合查询 GET/POST</h5><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">localhost:<span class="hljs-number">9200</span>/person/_search<br></code></pre></td></tr></table></figure><ul><li>请求体</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 语义: 火箭队根据年龄进行分组</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;teamNameEn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Rockets&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;aggrAge&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 因为根据年龄做桶聚合所以使用terms</span><br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;age&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span> <span class="hljs-comment">// 指定显示桶数</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;took&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;timed_out&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;skipped&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">21</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;relation&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eq&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;max_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;aggregations&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;aggrAge&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;doc_count_error_upper_bound&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;sum_other_doc_count&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;buckets&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;key&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">21</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 指定的字段 age</span><br>          <span class="hljs-attr">&quot;doc_count&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">4</span> <span class="hljs-comment">// 21岁的文档数有4个</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;key&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">25</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;doc_count&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;key&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">23</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;doc_count&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="6-7-2-order-第一种分组聚合查询-GET-POST"><a href="#6-7-2-order-第一种分组聚合查询-GET-POST" class="headerlink" title="6.7.2 order 第一种分组聚合查询 GET/POST"></a>6.7.2 order 第一种分组聚合查询 GET/POST</h5><ul><li>请求体</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 语义: 根据火箭队年龄进行分组，分组信息通过年龄从大到小排序（通过指定字段）</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;teamNameEn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Rockets&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;aggrAge&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;age&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;order&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;_key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;desc&quot;</span> <span class="hljs-comment">//&quot;_key关键字 倒序排序</span><br>        <span class="hljs-comment">//   &quot;_count&quot;: &quot;desc&quot;  通过文档排序</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;took&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;timed_out&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;skipped&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">21</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;relation&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eq&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;max_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;aggregations&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;aggrAge&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;doc_count_error_upper_bound&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;sum_other_doc_count&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">17</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;buckets&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;key&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">37</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;doc_count&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;key&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">34</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;doc_count&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;key&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">33</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;doc_count&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="6-7-3-order-第二种分组聚合查询-GET-POST"><a href="#6-7-3-order-第二种分组聚合查询-GET-POST" class="headerlink" title="6.7.3 order 第二种分组聚合查询 GET/POST"></a>6.7.3 order 第二种分组聚合查询 GET/POST</h5><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">localhost:<span class="hljs-number">9200</span>/person/_search<br></code></pre></td></tr></table></figure><ul><li>请求体</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 语义: 每支球队按该队所有球员的平均年龄进行分组排序（通过分组指标值）</span><br>  <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;aggsTeamName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 因为使用分组所以用terms</span><br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;teamNameEn&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 显示3条</span><br>        <span class="hljs-attr">&quot;order&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;avgAge&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;desc&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 因为需要通过对球队的平均年龄进行分组排序，所以再写aggs</span><br>      <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;avgAge&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;avg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;age&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;took&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;timed_out&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;skipped&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">566</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;relation&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eq&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;max_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;aggregations&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;aggsTeamName&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;doc_count_error_upper_bound&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">-1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;sum_other_doc_count&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">511</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;buckets&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;key&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Bucks&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;doc_count&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">14</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;avgAge&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">28.142857142857142</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;key&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Mavericks&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;doc_count&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">20</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;avgAge&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">27.85</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;key&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Lakers&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;doc_count&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">21</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;avgAge&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">27.714285714285715</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="6-7-3-include-筛选分组聚合查询-GET-POST"><a href="#6-7-3-include-筛选分组聚合查询-GET-POST" class="headerlink" title="6.7.3 include 筛选分组聚合查询 GET/POST"></a>6.7.3 include 筛选分组聚合查询 GET/POST</h5><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">localhost:<span class="hljs-number">9200</span>/person/_search<br></code></pre></td></tr></table></figure><ul><li>请求体</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 语义: 湖人和火箭队按球队平均年龄进行分组排序（指定值列表 ）</span><br>  <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;aggsTeamName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;teamNameEn&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// include指定队伍  [&quot;Lakes&quot;,&quot;Rockets&quot;,&quot;warriors&quot;]</span><br>        <span class="hljs-attr">&quot;include&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;Lakes&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Rockets&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;warriors&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// exclude去除[&quot;warriors&quot;]</span><br>        <span class="hljs-attr">&quot;exclude&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;warriors&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;order&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;avgAge&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;desc&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;avgAge&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;avg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;age&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;took&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;timed_out&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;skipped&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">566</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;relation&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eq&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;max_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;aggregations&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;aggsTeamName&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;doc_count_error_upper_bound&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;sum_other_doc_count&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;buckets&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;key&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Rockets&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;doc_count&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">21</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;avgAge&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">26.761904761904763</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="6-7-4-include-正则筛选分组聚合查询-GET-POST"><a href="#6-7-4-include-正则筛选分组聚合查询-GET-POST" class="headerlink" title="6.7.4 include 正则筛选分组聚合查询 GET/POST"></a>6.7.4 include 正则筛选分组聚合查询 GET/POST</h5><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">localhost:<span class="hljs-number">9200</span>/person/_search<br></code></pre></td></tr></table></figure><ul><li>请求体</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 语义: 湖人和火箭队按球队平均年龄进行分组排序（指定值列表 ）</span><br>  <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;aggsTeamName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;teamNameEn&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 使用正则表达式</span><br>        <span class="hljs-attr">&quot;include&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Lakers|Ro.*|Warriors.*&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;exclude&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;warriors&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;order&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;avgAge&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;desc&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;avgAge&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;avg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;age&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;took&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;timed_out&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;skipped&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">566</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;relation&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eq&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;max_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;aggregations&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;aggsTeamName&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;doc_count_error_upper_bound&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;sum_other_doc_count&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;buckets&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;key&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Lakers&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;doc_count&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">21</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;avgAge&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">27.714285714285715</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;key&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Rockets&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;doc_count&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">21</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;avgAge&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">26.761904761904763</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;key&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Warriors&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;doc_count&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">20</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;avgAge&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">26.25</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="6-7-4-range-aggregation-范围分组聚合查询-GET-POST"><a href="#6-7-4-range-aggregation-范围分组聚合查询-GET-POST" class="headerlink" title="6.7.4 range aggregation 范围分组聚合查询 GET/POST"></a>6.7.4 range aggregation 范围分组聚合查询 GET/POST</h5><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">localhost:<span class="hljs-number">9200</span>/person/_search<br></code></pre></td></tr></table></figure><ul><li>请求体</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 语义: 球员年龄按20、20-35、35 这样分组</span><br>  <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;ageRange&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;range&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;age&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;ranges&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>          <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;to&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">20</span><span class="hljs-punctuation">,</span>  <span class="hljs-comment">// 小于等于 20</span><br>            <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;A&quot;</span> <span class="hljs-comment">//别名 A</span><br>          <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;from&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">20</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 大于等于20</span><br>            <span class="hljs-attr">&quot;to&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">35</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">//  小于等于 35</span><br>            <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;B&quot;</span>  <span class="hljs-comment">//别名 B</span><br>          <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;from&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">35</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 大于等于35</span><br>            <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-comment">//别名 C</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;took&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;timed_out&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;skipped&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">566</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;relation&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eq&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;max_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;aggregations&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;ageRange&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;buckets&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;key&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;A&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;to&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">20.0</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;doc_count&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">15</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;key&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;B&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;from&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">20.0</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;to&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">35.0</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;doc_count&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">531</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;key&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;C&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;from&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">35.0</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;doc_count&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">20</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="6-7-5-date-rabge-aggregation-时间范围分组聚合查询-GET-POST"><a href="#6-7-5-date-rabge-aggregation-时间范围分组聚合查询-GET-POST" class="headerlink" title="6.7.5 date rabge aggregation 时间范围分组聚合查询 GET/POST"></a>6.7.5 date rabge aggregation 时间范围分组聚合查询 GET/POST</h5><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">localhost:<span class="hljs-number">9200</span>/person/_search<br></code></pre></td></tr></table></figure><ul><li>请求体</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 语义: 球员按出生年月分组</span><br>  <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;birthDayRange&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;date_range&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>   <span class="hljs-comment">// 时间类型</span><br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;birthDay&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 生日 生日是时间类型</span><br>        <span class="hljs-attr">&quot;format&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;MM-yyy&quot;</span><span class="hljs-punctuation">,</span>  <span class="hljs-comment">//时间格式 月份年份</span><br>        <span class="hljs-attr">&quot;ranges&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>          <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;from&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;01-1989&quot;</span> <span class="hljs-comment">// 小于1989年1月出生</span><br>          <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;from&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;01-1989&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 1989年1月到1999年1月</span><br>            <span class="hljs-attr">&quot;to&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;01-1999&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;from&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;01-1999&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 1999年1月到2009年1月</span><br>            <span class="hljs-attr">&quot;to&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;01-2009&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;from&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;01-2009&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;took&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;timed_out&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;skipped&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">566</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;relation&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eq&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;max_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;aggregations&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;birthDayRange&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;buckets&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;key&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;01-1989-01-1999&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;from&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">5.99616E11</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;from_as_string&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;01-1989&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;to&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">9.151488E11</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;to_as_string&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;01-1999&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;doc_count&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">426</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;key&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;01-1989-*&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;from&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">5.99616E11</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;from_as_string&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;01-1989&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;doc_count&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">469</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;key&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;01-1999-01-2009&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;from&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">9.151488E11</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;from_as_string&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;01-1999&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;to&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1.230768E12</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;to_as_string&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;01-2009&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;doc_count&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">43</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;key&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;01-2009-*&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;from&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1.230768E12</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;from_as_string&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;01-2009&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;doc_count&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="6-7-6-date-histogram-aggregation-时间范围分组聚合查询-GET-POST"><a href="#6-7-6-date-histogram-aggregation-时间范围分组聚合查询-GET-POST" class="headerlink" title="6.7.6 date histogram aggregation 时间范围分组聚合查询 GET/POST"></a>6.7.6 date histogram aggregation 时间范围分组聚合查询 GET/POST</h5><ul><li> 按天、月、年等进行聚合统计。可按 year (1y), quarter (1q), month (1M), week (1w), day (1d), hour (1h), minute (1m), second (1s) 间隔聚合 </li><li> 请求 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">localhost:<span class="hljs-number">9200</span>/person/_search<br></code></pre></td></tr></table></figure><ul><li>请求体</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 语义: 球员按出⽣生年年分组</span><br>  <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;birthday_aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;date_histogram&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;birthDay&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">//生日字段</span><br>        <span class="hljs-attr">&quot;format&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;yyyy&quot;</span><span class="hljs-punctuation">,</span>  <span class="hljs-comment">// 时间格式</span><br>        <span class="hljs-attr">&quot;calendar_interval&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;year&quot;</span> <span class="hljs-comment">// 根据年</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="6-8-query-string-查询"><a href="#6-8-query-string-查询" class="headerlink" title="6.8 query_string 查询"></a>6.8 query_string 查询</h4><ul><li>query_string 查询，如果熟悉lucene的查询语法，我们可以直接⽤用lucene查询语法写⼀一个查询串进行查询，ES中接到请求后，通过查询解析器 ,解析查询串生成对应的查询。</li></ul><h5 id="6-8-1-query-string-AND-OR-单字段查询-GET-POST请求"><a href="#6-8-1-query-string-AND-OR-单字段查询-GET-POST请求" class="headerlink" title="6.8.1 query_string AND OR 单字段查询 GET/POST请求"></a>6.8.1 query_string AND OR 单字段查询 GET/POST请求</h5><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">localhost:<span class="hljs-number">9200</span>/person/_search<br></code></pre></td></tr></table></figure><ul><li>请求体</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 语义: 指定单个字段查询（查询詹姆斯或者库里的球员）</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;query_string&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;default_field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;displayNameEn&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;james OR curry&quot;</span> <span class="hljs-comment">// 这里可以使用or或and也就是sql里的or和and</span><br>    <span class="hljs-comment">//  &quot;query&quot;: &quot;james AND curry&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="6-8-2-query-string-AND-OR-多字段查询-GET-POST请求"><a href="#6-8-2-query-string-AND-OR-多字段查询-GET-POST请求" class="headerlink" title="6.8.2 query_string AND OR 多字段查询 GET/POST请求"></a>6.8.2 query_string AND OR 多字段查询 GET/POST请求</h5><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">localhost:<span class="hljs-number">9200</span>/person/_search<br></code></pre></td></tr></table></figure><ul><li>请求体</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 语义: 指定多个字段查询（查询詹姆斯或者库里的球员）</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;query_string&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;fields&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-comment">// 指定多个字段</span><br>        <span class="hljs-string">&quot;displayNameEn&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;teamNameEn&quot;</span><br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;james AND Rockets&quot;</span> <span class="hljs-comment">// 查询条件</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="七、ElasticSerach-高级搜索"><a href="#七、ElasticSerach-高级搜索" class="headerlink" title="七、ElasticSerach 高级搜索"></a>七、ElasticSerach 高级搜索</h3><h4 id="7-1-索引别名的使用"><a href="#7-1-索引别名的使用" class="headerlink" title="7.1 索引别名的使用"></a>7.1 索引别名的使用</h4><ul><li>在开发中，随着业务需求的迭代，较老的业务逻辑就要面临更新甚至是重构，而对于es来说，为了了适应新的业务逻辑，可能就要对原有的索引做一些修改，比如对某些字段做调整，甚至是重建索引。而做这些操作的时候，可能会对业务造成影响，甚至是停机调整等问题。由此，es提供了索引别名来解决这些问题。 索引别名就像一个快捷方式或是软连接，可以指向一个或多个索引，也可以给任意一个需要索引名的API来使⽤用。别名的应用为程序提供了极大地灵活性</li></ul><h5 id="7-1-1-查询别名-GET请求"><a href="#7-1-1-查询别名-GET请求" class="headerlink" title="7.1.1 查询别名 GET请求"></a>7.1.1 查询别名 GET请求</h5><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">localhost:<span class="hljs-number">9200</span>/person/_alias <span class="hljs-comment">// 查询person别名</span><br>localhost:<span class="hljs-number">9200</span>/_aliases  <span class="hljs-comment">// 查询所有别名</span><br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-comment">// 语义: 查看所有别名</span><br>    <span class="hljs-attr">&quot;person&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;aliases&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;.kibana_task_manager&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;aliases&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;.kibana_1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;aliases&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;.kibana&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="7-1-2-新增别名-POST请求"><a href="#7-1-2-新增别名-POST请求" class="headerlink" title="7.1.2 新增别名 POST请求"></a>7.1.2 新增别名 POST请求</h5><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">localhost:<span class="hljs-number">9200</span>/_aliases<br></code></pre></td></tr></table></figure><ul><li>请求体</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 语义: person 新建别名person_v1.0</span><br>  <span class="hljs-attr">&quot;actions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;add&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;alias&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person_v1.0&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;acknowledged&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="7-1-3-删除别名-POST请求"><a href="#7-1-3-删除别名-POST请求" class="headerlink" title="7.1.3 删除别名 POST请求"></a>7.1.3 删除别名 POST请求</h5><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">localhost:<span class="hljs-number">9200</span>/_aliases<br></code></pre></td></tr></table></figure><ul><li>请求体</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-comment">// 语义: 删除person的person_v1.0别名</span><br>  <span class="hljs-attr">&quot;actions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;remove&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;alias&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person_v1.0&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;acknowledged&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="7-1-4-重命名别名-POST请求"><a href="#7-1-4-重命名别名-POST请求" class="headerlink" title="7.1.4 重命名别名 POST请求"></a>7.1.4 重命名别名 POST请求</h5><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">localhost:<span class="hljs-number">9200</span>/_aliases<br></code></pre></td></tr></table></figure><ul><li>请求体</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-comment">// 先删除person_v1.0 别名 在新增 person_v2.0别名,即是重命名</span><br>  <span class="hljs-attr">&quot;actions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;remove&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;alias&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person_v1.0&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;add&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;alias&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person_v2.0&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;acknowledged&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="7-1-5-通过别名获取索引-GET请求"><a href="#7-1-5-通过别名获取索引-GET请求" class="headerlink" title="7.1.5 通过别名获取索引 GET请求"></a>7.1.5 通过别名获取索引 GET请求</h5><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">localhost:<span class="hljs-number">9200</span>/person_v2<span class="hljs-number">.0</span><br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;person&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;aliases&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;person_v2.0&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;integer&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;birthDay&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;date&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;birthDayStr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;country&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;countryEn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;displayAffiliation&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;displayName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;displayNameEn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;draft&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;long&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;heightValue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;float&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;jerseyNo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;playYear&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;long&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;playerId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;schoolType&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;teamCity&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;teamCityEn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;teamConference&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;teamConferenceEn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;teamName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;teamNameEn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;weight&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;creation_date&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1573300240575&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;number_of_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;number_of_replicas&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;uuid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;X7FLu-8sRcijAYKUkgBZQQ&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;created&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;7020199&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;provided_name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="7-1-6-通过别名写索引-POST请求"><a href="#7-1-6-通过别名写索引-POST请求" class="headerlink" title="7.1.6 通过别名写索引 POST请求"></a>7.1.6 通过别名写索引 POST请求</h5><ul><li> 当别名指定了一个索引，则可以做写的操作 </li><li> 请求 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">localhost:<span class="hljs-number">9200</span>/person_v2<span class="hljs-number">.0</span>/_doc/<span class="hljs-number">566</span><br></code></pre></td></tr></table></figure><ul><li>请求体</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-comment">// 语义: 通过别名person_v2.0 修改id为566的球员</span><br>    <span class="hljs-attr">&quot;countryEn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Croatia&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;teamName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;快船&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;birthDay&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">858661200000</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;country&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;克罗地亚&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;teamCityEn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;LA&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ivica_zubac&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;displayAffiliation&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Croatia&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;displayName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;伊维察 祖巴茨哥哥&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">//&quot;伊维察 祖巴茨&quot;修改为&quot;伊维察 祖巴茨哥哥&quot;</span><br>    <span class="hljs-attr">&quot;schoolType&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;teamConference&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;西部&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;teamConferenceEn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Western&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;weight&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;108.9 公斤&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;teamCity&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;洛杉矶&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;playYear&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;jerseyNo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;40&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;teamNameEn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Clippers&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;draft&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2016</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;displayNameEn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Ivica Zubac&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;heightValue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2.16</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;birthDayStr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1997-03-18&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;中锋&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">22</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;playerId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1627826&quot;</span><br><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;566&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;result&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;updated&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;successful&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;failed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_seq_no&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">566</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_primary_term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="7-2-如何重建索引"><a href="#7-2-如何重建索引" class="headerlink" title="7.2 如何重建索引"></a>7.2 如何重建索引</h4><ul><li> Elasticsearch是⼀一个实时的分布式搜索引擎，为用户提供搜索服务，当我们决定存储某种数据时，在创建索引的时候需要将数据结构完整确定下来，于此同时索引的设定和很多固定配置将用不能改变。当需要改变数据结构时，就需要重新建立索引，为此，Elastic团队提供了很多辅助工具帮助开发人员进行重建索引 </li><li> 步骤 </li></ul><ol><li>person取一个别名person_latest, person_latest作为对外使用</li></ol><ul><li>POST 请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">localhost:<span class="hljs-number">9200</span>/_aliases<br></code></pre></td></tr></table></figure><ul><li>请求体</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;actions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;add&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;alias&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person_latest&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;acknowledged&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>新增一个索引person_20220101，结构复制于person索引，根据业务要求修改字段</li></ol><ul><li>PUT 请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">localhost:<span class="hljs-number">9200</span>/person_20220101<br></code></pre></td></tr></table></figure><ul><li>请求体</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;integer&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;birthDay&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;date&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;birthDayStr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;country&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;countryEn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;displayAffiliation&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;displayName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;displayNameEn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;draft&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;long&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;heightValue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;float&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;jerseyNo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;playYear&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;long&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;playerId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;schoolType&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;teamCity&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;teamCityEn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;teamConference&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;teamConferenceEn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;teamName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;teamNameEn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;weight&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;acknowledged&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;shards_acknowledged&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person_20220101&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>将person数据同步到person_20220101</li></ol><ul><li>POST 请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">localhost:<span class="hljs-number">9200</span>/_reindex <span class="hljs-comment">//同步请求 等待响应</span><br>localhost:<span class="hljs-number">9200</span>/_reindex?wait_for_completion=<span class="hljs-literal">false</span>  <span class="hljs-comment">// 异步请求 直接返回</span><br></code></pre></td></tr></table></figure><ul><li>请求体</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;dest&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person_20220101&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;took&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">102</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;timed_out&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">566</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;updated&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;created&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">566</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;deleted&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;batches&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;version_conflicts&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;noops&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;retries&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;bulk&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;search&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;throttled_millis&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;requests_per_second&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">-1.0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;throttled_until_millis&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;failures&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ol start="4"><li>给person_20220101添加别名person_latest，删除person别名person_latest</li></ol><ul><li>POST请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">localhost:<span class="hljs-number">9200</span>/_aliases<br></code></pre></td></tr></table></figure><ul><li>请求体</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;actions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;add&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person_20220101&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;alias&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person_latest&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;acknowledged&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ol start="5"><li>删除person索引</li></ol><ul><li>DELETE请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">localhost:<span class="hljs-number">9200</span>/person<br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;acknowledged&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="7-3-refresh操作"><a href="#7-3-refresh操作" class="headerlink" title="7.3 refresh操作"></a>7.3 refresh操作</h4><ul><li>理想的搜索</li></ul><ol><li> 新的数据一添加到索引中立马就能搜索到，但是真实情况不是这样的 </li><li> 我们使⽤用链式命令请求，先添加⼀一个⽂文档，再⽴立刻搜索 </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">curl -X PUT localhost:<span class="hljs-number">9200</span>/star/_doc/<span class="hljs-number">888</span> -H <span class="hljs-string">&#x27;Content-Type:</span><br><span class="hljs-string"></span><br><span class="hljs-string">application/json&#x27;</span>-d <span class="hljs-string">&#x27;&#123; &quot;displayName&quot;: &quot;蔡徐坤&quot; &#125;&#x27;</span><br><br>curl-X GET localhost:<span class="hljs-number">9200</span>/star/_doc/_search?pretty<br></code></pre></td></tr></table></figure><ol start="3"><li>强制刷新</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">curl -X PUT localhost:<span class="hljs-number">9200</span>/star/_doc/<span class="hljs-number">666</span>?refresh -H <span class="hljs-string">&#x27;Content-Type:</span><br><span class="hljs-string"></span><br><span class="hljs-string">application/json&#x27;</span>-d <span class="hljs-string">&#x27;&#123; &quot;displayName&quot;: &quot;杨超越&quot; &#125;&#x27;</span><br><br>curl-X GET localhost:<span class="hljs-number">9200</span>/star/_doc/_search?pretty<br></code></pre></td></tr></table></figure><ol start="4"><li>修改默认更更新时间(默认时间是1s)</li></ol><ul><li>PUT 请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">localhost:<span class="hljs-number">9200</span>/star/_settings<br></code></pre></td></tr></table></figure><ul><li>请求体</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;refresh_interval&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;5s&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;acknowledged&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ol start="5"><li>将refresh关闭</li></ol><ul><li>PUT 请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">localhost:<span class="hljs-number">9200</span>/star/_settings<br></code></pre></td></tr></table></figure><ul><li>请求体</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;refresh_interval&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;-1&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;acknowledged&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="7-4-高亮查询"><a href="#7-4-高亮查询" class="headerlink" title="7.4 高亮查询"></a>7.4 高亮查询</h4><ul><li> 如果返回的结果集中很多符合条件的结果，那怎么能一眼就能看到我们想要的那个结果呢？比如，我们搜索苍井空 ，在结果集中，将所有苍井空 高亮显示？ </li><li> 请求 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">localhost:<span class="hljs-number">9200</span>/person_latest/_search<br></code></pre></td></tr></table></figure><ul><li>请求体</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-comment">// 语义: 查找person james球员，对james做高亮显示</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;displayNameEn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;james&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;highlight&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 高亮关键字</span><br>    <span class="hljs-attr">&quot;fields&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 对displayNameEn做高亮</span><br>      <span class="hljs-attr">&quot;displayNameEn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><br><span class="hljs-punctuation">&#125;</span><br><br> <span class="hljs-comment">// 也可以自定义标签</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;displayNameEn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;james&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;highlight&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;fields&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;displayNameEn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-comment">// 定义高亮标签为 h1</span><br>        <span class="hljs-attr">&quot;pre_tags&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;&lt;h1&gt;&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;post_tags&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;&lt;/h1&gt;&quot;</span><span class="hljs-punctuation">]</span><br><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>响应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;took&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;timed_out&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;skipped&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;relation&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eq&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;max_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">4.699642</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person_20220101&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;214&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">4.699642</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_source&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;countryEn&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;United States&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;teamName&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;火箭&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;birthDay&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">620107200000</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;country&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;美国&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;teamCityEn&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Houston&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;code&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;james_harden&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;displayAffiliation&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Arizona State/United States&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;displayName&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;詹姆斯 哈登&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;schoolType&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;College&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;teamConference&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;西部&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;teamConferenceEn&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Western&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;weight&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;99.8 公斤&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;teamCity&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;休斯顿&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;playYear&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;jerseyNo&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;13&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;teamNameEn&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Rockets&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;draft&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2009</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;displayNameEn&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;James Harden&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;heightValue&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1.96</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;birthDayStr&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1989-08-26&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;position&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;后卫&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;age&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">30</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;playerId&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;201935&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;highlight&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-comment">// &quot;&lt;em&gt; 包裹起来是 高亮的意思</span><br>          <span class="hljs-attr">&quot;displayNameEn&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;&lt;em&gt;James&lt;/em&gt; Harden&quot;</span><br>          <span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person_20220101&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;266&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">4.699642</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_source&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;countryEn&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;United States&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;teamName&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;国王&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;birthDay&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">854082000000</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;country&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;美国&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;teamCityEn&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Sacramento&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;code&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;justin_james&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;displayAffiliation&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;United States&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;displayName&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;贾斯汀 詹姆斯&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;schoolType&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;College&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;teamConference&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;西部&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;teamConferenceEn&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Western&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;weight&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;86.2 公斤&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;teamCity&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;萨克拉门托&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;playYear&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;jerseyNo&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;teamNameEn&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Kings&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;draft&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2019</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;displayNameEn&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Justin James&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;heightValue&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2.01</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;birthDayStr&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1997-01-24&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;position&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;后卫-前锋&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;age&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">22</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;playerId&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1629713&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;highlight&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-comment">// &quot;&lt;em&gt; 包裹起来是 高亮的意思</span><br>          <span class="hljs-attr">&quot;displayNameEn&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;Justin &lt;em&gt;James&lt;/em&gt;&quot;</span><br>          <span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="7-5-查询建议"><a href="#7-5-查询建议" class="headerlink" title="7.5 查询建议"></a>7.5 查询建议</h4><ul><li>查询建议是什么</li></ul><ol><li>查询建议，是为了给用户提供更好的搜索体验。包括：词条检查，自动补全</li></ol><ul><li>Suggester</li></ul><ol><li>Term suggester</li><li>Phrase suggester</li><li>Completion suggester<table><thead><tr><th>text</th><th>指定搜索文本</th></tr></thead><tbody><tr><td>field</td><td>获取建议词的搜索字段</td></tr><tr><td>analyzer</td><td>指定分词器</td></tr><tr><td>size</td><td>每个词返回的最大建议词数</td></tr><tr><td>sort</td><td>如何对建议词进行排序，可用选项:score:先按评分排序、再按文档频率排、term顺序；frequency:先按文档频率排，再按评分、term顺序排。</td></tr><tr><td>suggest_mode</td><td>建议模式，控制提供建议词的方式：missing:仅在搜索的词项在索引中不存在时才提供建议词，默认值；popular:仅建议文档频率比搜索词项高的词；always：总是提供匹配的建议词</td></tr></tbody></table></li></ol><h5 id="7-5-1-term-suggester"><a href="#7-5-1-term-suggester" class="headerlink" title="7.5.1 term suggester"></a>7.5.1 term suggester</h5><ul><li> term 词条建议器 ，对给输入的文本进行分词，为每个分词提供词项建议 </li><li> 请求 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">localhost:<span class="hljs-number">9200</span>/person_latest/_search<br></code></pre></td></tr></table></figure><ul><li>请求体</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;suggest&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;my-suggest&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jamse&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">//用户可能输入错误 jsmes写成jamse</span><br>      <span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;suggest_mode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;missing&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;displayNameEn&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="7-5-2-phrase-suggester"><a href="#7-5-2-phrase-suggester" class="headerlink" title="7.5.2 phrase suggester"></a>7.5.2 phrase suggester</h5><ul><li> phrase 短语建议，在term的基础上，会考量多个term之间的关系，比如是否同时出现在索引的原文⾥里，相邻程度，以及词频等 </li><li> 请求 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">localhost:<span class="hljs-number">9200</span>/person_latest/_search<br></code></pre></td></tr></table></figure><ul><li>请求体</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;suggest&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;my-suggest&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jamse hardne&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;phrase&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 词组 对单词进行联系</span><br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;displayNameEn&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="7-5-3-completion-suggester"><a href="#7-5-3-completion-suggester" class="headerlink" title="7.5.3 completion suggester"></a>7.5.3 completion suggester</h5><ul><li> Completion 完成建议 </li><li> 请求 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">localhost:<span class="hljs-number">9200</span>/person_latest/_search<br></code></pre></td></tr></table></figure><ul><li>请求体</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;suggest&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;my-suggest&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Miam&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;completion&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;teamCityEn&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="八、person中国官网实战"><a href="#八、person中国官网实战" class="headerlink" title="八、person中国官网实战"></a>八、person中国官网实战</h3><ul><li>官方网站<br><code>https://china.person.com/playerindex/</code></li></ul><h4 id="8-1-项目搭建"><a href="#8-1-项目搭建" class="headerlink" title="8.1 项目搭建"></a>8.1 项目搭建</h4><ul><li>springboot 整合 elasticsearch 和 mysql</li></ul><h5 id="8-1-1-POM依赖"><a href="#8-1-1-POM依赖" class="headerlink" title="8.1.1 POM依赖"></a>8.1.1 POM依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- elasticsearch-rest-high-level-client --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch.client<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>7.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- elasticsearch --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>7.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="8-1-2-YML依赖"><a href="#8-1-2-YML依赖" class="headerlink" title="8.1.2 YML依赖"></a>8.1.2 YML依赖</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">elasticsearch:</span><br>  <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9200</span><br></code></pre></td></tr></table></figure><h5 id="8-1-3-ElasticSearch配置文件"><a href="#8-1-3-ElasticSearch配置文件" class="headerlink" title="8.1.3 ElasticSearch配置文件"></a>8.1.3 ElasticSearch配置文件</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.frame.elasticsearch.config;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.apache.http.HttpHost;<br><span class="hljs-keyword">import</span> org.elasticsearch.client.RestClient;<br><span class="hljs-keyword">import</span> org.elasticsearch.client.RestHighLevelClient;<br><span class="hljs-keyword">import</span> org.springframework.boot.SpringBootConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ElasticSearch配置文件</span><br><span class="hljs-comment"> * Es7使用RestHighLevelClient操作ES</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootConfiguration</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;elasticsearch&quot;)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ElasticSearchConfig</span> &#123;<br>    <span class="hljs-keyword">private</span> String host;<br>    <span class="hljs-keyword">private</span> Integer port;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建RestHighLevelClient 实例</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RestHighLevelClient <span class="hljs-title function_">restHighLevelClient</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">HttpHost</span> <span class="hljs-variable">http</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHost</span>(host, port, <span class="hljs-string">&quot;http&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestHighLevelClient</span>(RestClient.builder(http));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="8-1-4-ElasticSearch-CRUD入门操作"><a href="#8-1-4-ElasticSearch-CRUD入门操作" class="headerlink" title="8.1.4 ElasticSearch CRUD入门操作"></a>8.1.4 ElasticSearch CRUD入门操作</h5><ul><li>对象转Map工具类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.cglib.beans.BeanMap;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BeanUtils</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 对象转为Map</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Map&lt;String, Object&gt; <span class="hljs-title function_">beanToMap</span><span class="hljs-params">(T bean)</span> &#123;<br>        HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">if</span> (bean != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">BeanMap</span> <span class="hljs-variable">beanMap</span> <span class="hljs-operator">=</span> BeanMap.create(bean);<br>            <span class="hljs-keyword">for</span> (Object o : beanMap.keySet()) &#123;<br>                <span class="hljs-keyword">if</span> (beanMap.get(o) != <span class="hljs-literal">null</span>) &#123;<br>                    map.put(o.toString(), beanMap.get(o));<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>CRUD 实现方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;<br><span class="hljs-keyword">import</span> com.frame.common.entity.personPlayer;<br><span class="hljs-keyword">import</span> com.frame.common.utils.BeanUtils;<br><span class="hljs-keyword">import</span> com.frame.elasticsearch.mapper.personPlayerMapper;<br><span class="hljs-keyword">import</span> com.frame.elasticsearch.service.personPlayerService;<br><span class="hljs-keyword">import</span> org.elasticsearch.action.delete.DeleteRequest;<br><span class="hljs-keyword">import</span> org.elasticsearch.action.delete.DeleteResponse;<br><span class="hljs-keyword">import</span> org.elasticsearch.action.get.GetRequest;<br><span class="hljs-keyword">import</span> org.elasticsearch.action.get.GetResponse;<br><span class="hljs-keyword">import</span> org.elasticsearch.action.index.IndexRequest;<br><span class="hljs-keyword">import</span> org.elasticsearch.action.index.IndexResponse;<br><span class="hljs-keyword">import</span> org.elasticsearch.action.update.UpdateRequest;<br><span class="hljs-keyword">import</span> org.elasticsearch.action.update.UpdateResponse;<br><span class="hljs-keyword">import</span> org.elasticsearch.client.RequestOptions;<br><span class="hljs-keyword">import</span> org.elasticsearch.client.RestHighLevelClient;<br><span class="hljs-keyword">import</span> org.elasticsearch.index.reindex.BulkByScrollResponse;<br><span class="hljs-keyword">import</span> org.elasticsearch.index.reindex.DeleteByQueryRequest;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 服务实现类</span><br><span class="hljs-comment"> * &lt;/p&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Crazy.X</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2019-11-10</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">personPlayerServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">personPlayerService</span> &#123;<br><br>    <span class="hljs-comment">/* ES索引 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">person_INDEX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;person_latest&quot;</span>;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RestHighLevelClient restHighLevelClient;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加一条文档</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">addPlayer</span><span class="hljs-params">(personPlayer player, String id)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 获取 IndexRequest</span><br>        <span class="hljs-type">IndexRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexRequest</span>(person_INDEX)<br>                .id(id)<br>                .source(BeanUtils.beanToMap(player));<br>        <span class="hljs-comment">// 获取 IndexResponse</span><br>        <span class="hljs-type">IndexResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> restHighLevelClient.index(request, RequestOptions.DEFAULT);<br>        System.out.println(JSON.toJSONString(response));<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取一条文档</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title function_">getPlayer</span><span class="hljs-params">(String id)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 获取 GetRequest</span><br>        <span class="hljs-type">GetRequest</span> <span class="hljs-variable">getRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GetRequest</span>(person_INDEX, id);<br>        <span class="hljs-comment">// 获取 GetResponse</span><br>        <span class="hljs-type">GetResponse</span> <span class="hljs-variable">getResponse</span> <span class="hljs-operator">=</span> restHighLevelClient.get(getRequest, RequestOptions.DEFAULT);<br>        <span class="hljs-comment">// 返回结果</span><br>        <span class="hljs-keyword">return</span> getResponse.getSource();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 更新一条文档</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">updatePlayer</span><span class="hljs-params">(personPlayer personPlayer, String id)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 获取 UpdateRequest</span><br>        <span class="hljs-type">UpdateRequest</span> <span class="hljs-variable">updateRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateRequest</span>(person_INDEX, id)<br>                .doc(BeanUtils.beanToMap(personPlayer));<br>        <span class="hljs-comment">// 获取 UpdateResponse</span><br>        <span class="hljs-type">UpdateResponse</span> <span class="hljs-variable">update</span> <span class="hljs-operator">=</span> restHighLevelClient.update(updateRequest, RequestOptions.DEFAULT);<br>        System.out.println(JSON.toJSONString(update));<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除一条文档</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">deletePlayer</span><span class="hljs-params">(String id)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 获取 DeleteRequest</span><br>        <span class="hljs-type">DeleteRequest</span> <span class="hljs-variable">deleteRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeleteRequest</span>(person_INDEX, id).id(id);<br>        <span class="hljs-comment">// 获取 DeleteResponse</span><br>        <span class="hljs-type">DeleteResponse</span> <span class="hljs-variable">delete</span> <span class="hljs-operator">=</span> restHighLevelClient.delete(deleteRequest, RequestOptions.DEFAULT);<br>        System.out.println(delete);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除所有文档</span><br><span class="hljs-comment">     * 先查询所所有在进行删除</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">deleteAllPlayer</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 获取 deleteByQueryRequest</span><br>        <span class="hljs-type">DeleteByQueryRequest</span> <span class="hljs-variable">deleteByQueryRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeleteByQueryRequest</span>(person_INDEX);<br>        <span class="hljs-comment">// 获取 BulkByScrollResponse</span><br>        <span class="hljs-type">BulkByScrollResponse</span> <span class="hljs-variable">bulkByScrollResponse</span> <span class="hljs-operator">=</span> restHighLevelClient.deleteByQuery(<br>                deleteByQueryRequest,<br>                RequestOptions.DEFAULT<br>        );<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>CRUD 测试类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.frame.common.entity.personPlayer;<br><span class="hljs-keyword">import</span> com.frame.elasticsearch.service.personPlayerService;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">personPlayerServiceImplTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    personPlayerService personPlayerService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addPlayer</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">personPlayer</span> <span class="hljs-variable">personPlayer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">personPlayer</span>()<br>                .setId(<span class="hljs-number">999</span>)<br>                .setDisplayName(<span class="hljs-string">&quot;苍井空&quot;</span>);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> personPlayerService.addPlayer(personPlayer, <span class="hljs-string">&quot;999&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getPlayer</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        Map&lt;String, Object&gt; player = personPlayerService.getPlayer(<span class="hljs-string">&quot;999&quot;</span>);<br>        System.out.println(player);<br>    &#125;<br><br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updatePlayer</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">personPlayer</span> <span class="hljs-variable">personPlayer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">personPlayer</span>()<br>                .setId(<span class="hljs-number">999</span>)<br>                .setDisplayName(<span class="hljs-string">&quot;小泽玛利亚&quot;</span>);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> personPlayerService.updatePlayer(personPlayer, <span class="hljs-string">&quot;999&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deletePlayer</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> personPlayerService.deletePlayer(<span class="hljs-string">&quot;999&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteAllPlayer</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> personPlayerService.deleteAllPlayer();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="8-2-接口开发"><a href="#8-2-接口开发" class="headerlink" title="8.2 接口开发"></a>8.2 接口开发</h4><ul><li>Result结果集Vo</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.frame.common.enums.ResultEnum;<br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 结果封装Vo</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Result</span>&lt;T&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> Integer code;<br>    <span class="hljs-keyword">private</span> String msg;<br>    <span class="hljs-keyword">private</span> T data;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Result <span class="hljs-title function_">success</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> success(<span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Result <span class="hljs-title function_">success</span><span class="hljs-params">(T data)</span> &#123;<br>        <span class="hljs-keyword">return</span> success(ResultEnum.SUCCESS.getCode(), data);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Result <span class="hljs-title function_">success</span><span class="hljs-params">(Integer code, T data)</span> &#123;<br>        <span class="hljs-keyword">return</span> success(code, ResultEnum.SUCCESS.getMsg(), data);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Result <span class="hljs-title function_">success</span><span class="hljs-params">(String msg, T data)</span> &#123;<br>        <span class="hljs-keyword">return</span> success(ResultEnum.SUCCESS.getCode(), msg, data);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Result <span class="hljs-title function_">success</span><span class="hljs-params">(Integer code, String msg, T data)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>&lt;T&gt;(code, msg, data);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Result <span class="hljs-title function_">fail</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> fail(ResultEnum.FAIL.getCode());<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Result <span class="hljs-title function_">fail</span><span class="hljs-params">(Integer code)</span> &#123;<br>        <span class="hljs-keyword">return</span> fail(code, ResultEnum.FAIL.getMsg());<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Result <span class="hljs-title function_">fail</span><span class="hljs-params">(String msg)</span> &#123;<br>        <span class="hljs-keyword">return</span> fail(ResultEnum.FAIL.getCode(), msg);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Result <span class="hljs-title function_">fail</span><span class="hljs-params">(Integer code, String msg)</span> &#123;<br>        <span class="hljs-keyword">return</span> success(code, msg, <span class="hljs-literal">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>结果集对应的枚举</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Getter;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Result结果集枚举类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">ResultEnum</span> &#123;<br><br>    SUCCESS(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;操作成功&quot;</span>),<br>    FAIL(<span class="hljs-number">400</span>,<span class="hljs-string">&quot;操作失败&quot;</span>)<br>    ;<br>    <span class="hljs-keyword">private</span> Integer code;<br>    <span class="hljs-keyword">private</span> String msg;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="8-2-1-将数据库数据导入到elastic-search"><a href="#8-2-1-将数据库数据导入到elastic-search" class="headerlink" title="8.2.1 将数据库数据导入到elastic search"></a>8.2.1 将数据库数据导入到elastic search</h5><ul><li>controller层</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 从mysql导入数据到es</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@GetMapping(&quot;/import&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">importAllPlayer</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        personPlayerService.importAllPlayer();<br>        <span class="hljs-keyword">return</span> Result.success(<span class="hljs-string">&quot;数据导入成功&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        log.error(<span class="hljs-string">&quot;ElasticSearch导入数据失败&quot;</span>);<br>        e.printStackTrace();<br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;ElasticSearch导入数据失败&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>service层</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 从mysql导入数据到es</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">importAllPlayer</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 查询所有数据,这里使用MybatisPlus不作解释</span><br>    List&lt;personPlayer&gt; personPlayers = list();<br>    <span class="hljs-keyword">for</span> (personPlayer e : personPlayers) &#123;<br>        <span class="hljs-comment">// 此处调用的增加文档方法</span><br>        addPlayer(e, String.valueOf(e.getId()));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="8-2-2-通过姓名查找球员"><a href="#8-2-2-通过姓名查找球员" class="headerlink" title="8.2.2 通过姓名查找球员"></a>8.2.2 通过姓名查找球员</h5><ul><li>controller层</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通过姓名查找球员</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@GetMapping(&quot;/searchMatch&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">searchMatch</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;key&quot;)</span> String key,</span><br><span class="hljs-params">                          <span class="hljs-meta">@RequestParam(&quot;val&quot;)</span> String val,</span><br><span class="hljs-params">                          <span class="hljs-meta">@RequestParam(value = &quot;page&quot;, required = false, defaultValue = &quot;0&quot;)</span> Integer page,</span><br><span class="hljs-params">                          <span class="hljs-meta">@RequestParam(value = &quot;limit&quot;, required = false, defaultValue = &quot;10&quot;)</span> Integer limit)</span> &#123;<br>    List&lt;personPlayer&gt; personPlayers = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        personPlayers = personPlayerService.searchTerm(key, val, page, limit);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        log.error(<span class="hljs-string">&quot;searchMatch失败,参数[key=&#123;&#125;]][val=&#123;&#125;]]&quot;</span>, key, val);<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> Result.success(personPlayers);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>service层</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通过姓名查找球员</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;personPlayer&gt; <span class="hljs-title function_">searchMatch</span><span class="hljs-params">(String key, String val, Integer page, Integer limit)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 获取 SearchRequest</span><br>    <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">searchRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(person_INDEX);<br>    <span class="hljs-comment">// 创建 SearchSourceBuilder 用于查询语句</span><br>    <span class="hljs-type">SearchSourceBuilder</span> <span class="hljs-variable">searchSourceBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchSourceBuilder</span>();<br>    searchSourceBuilder<br>            <span class="hljs-comment">// 查询 通过match查询 key 字段名称 val 字段值</span><br>            .query(QueryBuilders.termQuery(key, val))<br>            <span class="hljs-comment">// 起始页</span><br>            .from(page)<br>            <span class="hljs-comment">// 显示条数</span><br>            .size(limit);<br>    <span class="hljs-comment">// 设置 请求源 理解为设置查询语句</span><br>    searchRequest.source(searchSourceBuilder);<br>    <span class="hljs-comment">// 获取 SearchResponse 查询数据</span><br>    <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">searchResponse</span> <span class="hljs-operator">=</span> restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);<br>    <span class="hljs-comment">// 获取碰撞之后的结果 (固定写法)</span><br>    SearchHit[] hits = searchResponse.getHits().getHits();<br>    <span class="hljs-comment">// 进行对象转换并返回</span><br>    <span class="hljs-keyword">return</span> Stream.of(hits)<br>            .map(e -&gt; JSON.parseObject(e.getSourceAsString(), personPlayer.class))<br>            .collect(Collectors.toList());<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="8-2-3-通过国家或者球队查询球员"><a href="#8-2-3-通过国家或者球队查询球员" class="headerlink" title="8.2.3 通过国家或者球队查询球员"></a>8.2.3 通过国家或者球队查询球员</h5><ul><li>controller层</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通过国家或者球队查询球员</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@GetMapping(&quot;/searchTerm&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">searchTerm</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;country&quot;, required = false)</span> String country,</span><br><span class="hljs-params">                         <span class="hljs-meta">@RequestParam(value = &quot;teamName&quot;, required = false)</span> String teamName,</span><br><span class="hljs-params">                         <span class="hljs-meta">@RequestParam(value = &quot;page&quot;, required = false, defaultValue = &quot;0&quot;)</span> Integer page,</span><br><span class="hljs-params">                         <span class="hljs-meta">@RequestParam(value = &quot;limit&quot;, required = false, defaultValue = &quot;10&quot;)</span> Integer limit)</span> &#123;<br>    List&lt;personPlayer&gt; personPlayers = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 路由选择国家 或者 球队</span><br>        <span class="hljs-keyword">if</span> (StringUtils.isNotBlank(country)) &#123;<br>            personPlayers = personPlayerService.searchTerm(<span class="hljs-string">&quot;country&quot;</span>, country, page, limit);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            personPlayers = personPlayerService.searchTerm(<span class="hljs-string">&quot;teamName&quot;</span>, teamName, page, limit);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        log.error(<span class="hljs-string">&quot;searchTerm失败,参数[country=&#123;&#125;]][teamName=&#123;&#125;]]&quot;</span>, country, teamName);<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> CollectionUtils.isNotEmpty(personPlayers) ? Result.success(personPlayers) : Result.success();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>service层</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通过国家或者球队查询球员</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;personPlayer&gt; <span class="hljs-title function_">searchTerm</span><span class="hljs-params">(String key, String val, Integer page, Integer limit)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 获取 SearchRequest</span><br>    <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">searchRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(person_INDEX);<br>    <span class="hljs-comment">// 创建 SearchSourceBuilder 用于查询语句</span><br>    <span class="hljs-type">SearchSourceBuilder</span> <span class="hljs-variable">searchSourceBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchSourceBuilder</span>();<br>    searchSourceBuilder<br>            <span class="hljs-comment">// 查询 通过match查询 key 字段名称 val 字段值</span><br>            .query(QueryBuilders.termQuery(key, val))<br>            <span class="hljs-comment">// 起始页</span><br>            .from(page)<br>            <span class="hljs-comment">// 显示条数</span><br>            .size(limit);<br>    <span class="hljs-comment">// 设置 请求源 理解为设置查询语句</span><br>    searchRequest.source(searchSourceBuilder);<br>    <span class="hljs-comment">// 获取 SearchResponse 查询数据</span><br>    <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">searchResponse</span> <span class="hljs-operator">=</span> restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);<br>    <span class="hljs-comment">// 获取碰撞之后的结果 (固定写法)</span><br>    SearchHit[] hits = searchResponse.getHits().getHits();<br>    <span class="hljs-comment">// 进行对象转换并返回</span><br>    <span class="hljs-keyword">return</span> Stream.of(hits)<br>            .map(e -&gt; JSON.parseObject(e.getSourceAsString(), personPlayer.class))<br>            .collect(Collectors.toList());<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="8-2-4-通过姓名字母查找球员"><a href="#8-2-4-通过姓名字母查找球员" class="headerlink" title="8.2.4 通过姓名字母查找球员"></a>8.2.4 通过姓名字母查找球员</h5><ul><li>controller层</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通过姓名字母查找球员</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@GetMapping(&quot;/searchPrefix&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">searchPrefix</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;prefix&quot;, required = false, defaultValue = &quot;A&quot;)</span> String prefix,</span><br><span class="hljs-params">                           <span class="hljs-meta">@RequestParam(value = &quot;page&quot;, required = false, defaultValue = &quot;0&quot;)</span> Integer page,</span><br><span class="hljs-params"></span><br><span class="hljs-params">                           <span class="hljs-meta">@RequestParam(value = &quot;limit&quot;, required = false, defaultValue = &quot;10&quot;)</span> Integer limit)</span> &#123;<br>    List&lt;personPlayer&gt; personPlayers = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        personPlayers = personPlayerService.searchPrefix(prefix, page, limit);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        log.error(<span class="hljs-string">&quot;searchPrefix失败,参数[prefix=&#123;&#125;]]&quot;</span>, prefix);<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> CollectionUtils.isNotEmpty(personPlayers) ? Result.success(personPlayers) : Result.success();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>service层</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通过姓名字母查找球员</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;personPlayer&gt; <span class="hljs-title function_">searchPrefix</span><span class="hljs-params">(String prefix, Integer page, Integer limit)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 获取 SearchRequest</span><br>    <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">searchRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(person_INDEX);<br>    <span class="hljs-comment">// 创建 SearchSourceBuilder 用于查询语句</span><br>    <span class="hljs-type">SearchSourceBuilder</span> <span class="hljs-variable">searchSourceBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchSourceBuilder</span>();<br>    searchSourceBuilder<br>            <span class="hljs-comment">// 查询 通过prefix查询 displayNameEn.keyword 名字字段 prefix 前缀字母</span><br>            .query(QueryBuilders.prefixQuery(<span class="hljs-string">&quot;displayNameEn.keyword&quot;</span>, prefix))<br>            <span class="hljs-comment">// 起始页</span><br>            .from(page)<br>            <span class="hljs-comment">// 显示条数</span><br>            .size(limit);<br>    <span class="hljs-comment">// 设置 请求源 理解为设置查询语句</span><br>    searchRequest.source(searchSourceBuilder);<br>    <span class="hljs-comment">// 获取 SearchResponse 查询数据</span><br>    <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">searchResponse</span> <span class="hljs-operator">=</span> restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);<br>    <span class="hljs-comment">// 获取碰撞之后的结果 (固定写法)</span><br>    SearchHit[] hits = searchResponse.getHits().getHits();<br>    <span class="hljs-comment">// 进行对象转换并返回</span><br>    <span class="hljs-keyword">return</span> Stream.of(hits)<br>            .map(e -&gt; JSON.parseObject(e.getSourceAsString(), personPlayer.class))<br>            .collect(Collectors.toList());<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Elasticsearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java篇-Java解析大型XML文件</title>
    <link href="/2021/03/29/yuque/uoxpex/"/>
    <url>/2021/03/29/yuque/uoxpex/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1657536155003-fd594814-c0ee-4c33-9354-ed27d115ec36.png#clientId=ufe3981b8-455c-4&from=markdown&id=DYJ80&originHeight=512&originWidth=512&originalType=url&ratio=1&rotation=0&showTitle=false&size=81692&status=done&style=none&taskId=u969a2ddc-4f9b-4dc1-bff0-fab939a6c1d&title=" alt="image.png"></p><h1 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h1><p>在一个伸手不见五指的夜晚，开完了漫长的会议后，正准备拔腿就跑的我被Leader逮了个正着，对着我说“我这里有个XML文档需要你帮我解析一下，把解析的内容放入MySQL中”，我心想之前也解析过XML问题应该不大，就爽快的接下了。回到家里打开电脑一看，好家伙5.8G的XML文件，我当时心里？？？</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/WeChatImage_20210329225917.png#id=WHF5V&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>好家伙那，我是不是得考虑分片处理了？仔细想想分片了如何对其进行解析呢？会不会加大其解析复杂的了？先不管那么多了，看看他给的结构文档吧，刚打开一看？？？</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/image-20210329232408817.png#id=MAVum&originHeight=453&originWidth=627&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>这也太多了吧129页，大概瞄了两眼，里面都是描述XML文件中的各个数据组成结构的，涉及到的内容非常繁杂，后面才发现里面写的案例确实是非常的规范，光看文档都化费我好多时间、项目还有一堆BUG等着我呢。</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/aaa.gif#id=ZnWO4&originHeight=210&originWidth=240&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h1 id="解析思路"><a href="#解析思路" class="headerlink" title="解析思路"></a>解析思路</h1><p>通过查阅资料我们知道Java解析XML的方式主要有SAX和DOM两种方式，前者它逐行扫描文档，一边扫描一边解析。而且相比于DOM，SAX可以在解析文档的任意时刻停止解析，后者操作更加灵活但是需要将整个文件加入内存，考虑到文件的大小问题，我们选择前者来进行解析。另外一方面我们需要考虑到文件里的数据组成结构的问题，通过文档可以看出，主要由以下几项组成，标准订阅源的基本 XML 元素:</p><ul><li> PFA </li><li> CountryList </li><li> OccupationList </li><li> RelationshipList </li><li> SanctionsReferencesList </li><li> Description1List </li><li> Description2List </li><li> Description3List </li><li> DateTypeList </li><li> NameTypeList </li><li> RoleTypeList </li><li> Records </li><li> Associations<br>其中, 是根元素，考虑到需要建立关联关系，对应其每个数据结构建立其对应的数据库表，在解析的过程中将数据线信息存入即可，使用批处理进行数据的插入，保证一定的效率，心想问题应该不大，明天开工解析。<br><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/img.jk51.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg#id=XOjAZ&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="> </li></ul><h1 id="开工解析"><a href="#开工解析" class="headerlink" title="开工解析"></a>开工解析</h1><p>先对其进行建立对应的数据库表，采用逆向工程生成对应的实体类，SAX的解析方法是通过继承SAX的处理器来实现具体的解析规则，如DefaultHandler的对应方法如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">resolveEntity<br>notationDecl<br>unparsedEntityDecl<br>setDocumentLocator<span class="hljs-comment">//设置文档位置</span><br>startDocument<span class="hljs-comment">//开始解析文档钩子函数</span><br>endDocument<span class="hljs-comment">//结束解析文档</span><br>startPrefixMapping<br>endPrefixMapping<br>startElement<span class="hljs-comment">//开始解析元素</span><br>endElement<span class="hljs-comment">//元素完成解析</span><br>characters<span class="hljs-comment">//解析内容(标签包含的值)</span><br>ignorableWhitespace<br>processingInstruction<br>skippedEntity<br>warning<br>error<br>fatalError<br></code></pre></td></tr></table></figure><p>当然因为上面涉及的十多个列表各自的属性类型都不一样，需要编写对应的处理器来进行解析，数据库插入采用最底层的JDBC来进行批量操作，为的是提高效率。</p><p>解析工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SaxService</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ReadXML</span><span class="hljs-params">(String uri, String NodeName, DefaultHandler handler)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 创建一个解析XML的工厂对象</span><br>            <span class="hljs-type">SAXParserFactory</span> <span class="hljs-variable">parserFactory</span> <span class="hljs-operator">=</span> SAXParserFactory.newInstance();<br>            <span class="hljs-comment">// 创建一个解析XML的对象</span><br>            <span class="hljs-type">SAXParser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> parserFactory.newSAXParser();<br>            <span class="hljs-comment">// 创建一个解析助手类</span><br>            <span class="hljs-type">ParsePersonHandler</span> <span class="hljs-variable">parsePersonHandler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParsePersonHandler</span>();<br>            parser.parse(uri,handler);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对应的解析处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ParseHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DefaultHandler</span> &#123;<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 开始解析文档，即开始解析XML根元素时调用该方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startDocument</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SAXException &#123;<br>        System.out.println(<span class="hljs-string">&quot;开始解析XML文档&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 开始解析每个元素时都会调用该方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startElement</span><span class="hljs-params">(String uri, String localName, String qName, Attributes attributes)</span> <span class="hljs-keyword">throws</span> SAXException &#123;<br>        <span class="hljs-comment">//TODO</span><br>    &#125;<br><br>    <span class="hljs-comment">// 解析到每个元素的内容时会调用此方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">characters</span><span class="hljs-params">(<span class="hljs-type">char</span>[] ch, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> length)</span> <span class="hljs-keyword">throws</span> SAXException &#123;<br>        <span class="hljs-comment">//TODO</span><br>    &#125;<br><br>    <span class="hljs-comment">// 每个元素结束的时候都会调用该方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">endElement</span><span class="hljs-params">(String uri, String localName, String qName)</span> <span class="hljs-keyword">throws</span> SAXException &#123;<br><span class="hljs-comment">//TODO</span><br>    &#125;<br>    <span class="hljs-comment">// 结束解析文档，即解析根元素结束标签时调用该方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">endDocument</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SAXException &#123;<br>        <span class="hljs-built_in">super</span>.endDocument();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="优化手段"><a href="#优化手段" class="headerlink" title="优化手段"></a>优化手段</h1><p>1.在数据库设计时候其对应的字段长度设计尽量规范。</p><p>2.可以将一些简单列表进行序列化存储在字段中，无需建立相关对应的表。</p><p>3.插入数据时尽量选择批量插入，提高效率。</p><p>终于把这个东西给搞定了，占用了８个G的数据，可以交差了。</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/u=2093565416,3902274772&fm=26&gp=0.jpg#id=eks11&originHeight=461&originWidth=500&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://github.com/mikeygithub/parse-xml.git">项目代码</a></p>]]></content>
    
    
    <categories>
      
      <category>Java相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>XML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>中间件篇-AeroSpike随机存储数据库</title>
    <link href="/2021/03/18/yuque/pwhyrw/"/>
    <url>/2021/03/18/yuque/pwhyrw/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1657549314140-1702c2fe-7819-433c-ba77-7910faa9ec92.png#averageHue=%23c72628&clientId=uf24e37c9-eec6-4&from=markdown&id=o4nOW&originHeight=40&originWidth=229&originalType=url&ratio=1&rotation=0&showTitle=false&size=3978&status=done&style=none&taskId=u0dcdf18e-ec79-4fc2-83f9-4292dc6b54a&title=" alt="image.png"></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ol><li>Aerospike 是一个分布式、可扩展的数据库，其架构有三个关键目标:</li></ol><blockquote><ol><li>为 web 规模的应用程序创建一个灵活的、可扩展的平台</li></ol></blockquote><ol start="2"><li> 提供传统数据库所期望的健壮性和可靠性(如 ACID) </li><li> 以最少的人工参与提供操作效率 </li><li> T级别大数据高并发的结构化数据存储解决方案，读写操作达微妙级，99%的响应可在1毫秒内实现，99.9%的响应可在5毫秒内实现。 </li><li> 采用混合架构，索引存储在 RAM 中，而数据存储在闪存/固态硬盘(SSD) 上，自动感知集群，可以随意增加节点线性扩容，无需分片，无需人工干预（性能与节点成正比上升），支持多语言集成；与redis相比不太会遇到性能瓶颈大部分的源代码是用 c 语言编写的，符合 ANSI C99标准。 </li></ol><h2 id="为什么要用AS"><a href="#为什么要用AS" class="headerlink" title="为什么要用AS"></a>为什么要用AS</h2><p>K-V类型的数据库必须要提的就是redis，redis数据完全存储在内存虽然保证了查询性能，但是成本太高。AS最大的卖点就是可以存储在SSD上，并且保证和redis相同的查询性能。</p><p> AS内部在访问SSD屏蔽了文件系统层级，直接访问地址，保证了数据的读取速度。 AS同时支持二级索引与聚合，支持简单的sql操作，相比于其他nosql数据库，有一定优势。 </p><h2 id="Namespaces-库"><a href="#Namespaces-库" class="headerlink" title="Namespaces(库)"></a>Namespaces(库)</h2><p>AS数据存储的最高层级，类比于传统的数据库的库层级，一个namespace包含记录（records），索引（indexes ）及策略（policies）。<br>其中策略决定namespace的行为，包括：<br>1.数据的存储位置是内存还是SSD。<br>2.一条记录存储的副本个数。<br>3.过期时间（TTL）：不同redis的针对key设置TTL，AS可以在库的层级进行全局设置，并且支持对于已存在的数据进行TTL的设置。</p><h2 id="Set-表"><a href="#Set-表" class="headerlink" title="Set(表)"></a>Set(表)</h2><p>存储于namespace，是一个逻辑分区，类比于传统数据库的表。set的存储策略继承自namespace，也可以为set设置单独的存储策略</p><h2 id="Records-行"><a href="#Records-行" class="headerlink" title="Records(行)"></a>Records(行)</h2><p>类比于传统数据库的行，包含key，Bins（value）,和Metadata（元数据）。key全局唯一，作为K-V数据库一般也是通过key去查询。Bins相当于列，存储具体的数据。元数据存储一些基本信息，例如TTL等。</p><h2 id="Key"><a href="#Key" class="headerlink" title="Key"></a>Key</h2><p>提到key，有一个和key伴生的概念是摘要（Digests），当key被存入数据库，key与set信息一起被哈希化成一个160位的摘要。数据库中，摘要为所有操作定位记录。key主要用于应用程序访问，而摘要主要用于数据库内部查找记录.</p><h2 id="Metadata"><a href="#Metadata" class="headerlink" title="Metadata"></a>Metadata</h2><p>每一条记录包含以下几条元数据<br>1.generation（代）：表示记录被修改的次数。该数字在程序度数据时返回，用来确认正在写入的数据从最后一次读开始未被修改过。</p><p>2.time-to-live（TTL）：AS会自动根据记录的TTL使其过期。每次在对象上执行写操作TTL就会增加。3.10.1版本以上，可以通过设置策略，使更新记录时不刷新TTL。</p><p>3.last-update-time （LUT）：上次更新时间，这是一个数据库内部的元数据，不会返回给客户端。</p><h2 id="Bins"><a href="#Bins" class="headerlink" title="Bins"></a>Bins</h2><p>在一条记录里，数据被存储在一个或多个bins里，bins由名称和值组成。bins不需要指定数据类型，数据类型有bins中的值决定。动态的数据类型提供了很好的灵活性。AS中每条记录可以由完全不同的bins组成。记录无模式，你可以记录的任何生命周期增加或删除bins。</p><p>在一个库中bins的名称最多包含32k，这是由内部字符串优化所致。（相比于HBase支持几百万列还是有一定差距，如果想直接将HBase表迁移到AS可能需要重新设计存储结构）</p><h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">下载</span><br>wget https://www.aerospike.com/artifacts/aerospike-server-community/4.3.0.10/aerospike-server-community-4.3.0.10-el7.tgz<br><span class="hljs-meta prompt_"># </span><span class="language-bash">解压</span><br>tar -zxvf aerospike-server-community-4.3.0.10-el7.tgz<br><span class="hljs-meta prompt_"># </span><span class="language-bash">进入目录</span><br>cd cd aerospike-server-community-4.3.0.10-el7<br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装</span><br>./asinstall<br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动服务</span><br>service aerospike start<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看状态</span><br>service aerospike status<br><span class="hljs-meta prompt_"># </span><span class="language-bash">停止服务</span><br>service aerospike stop<br><span class="hljs-meta prompt_"># </span><span class="language-bash">配置文件</span><br>vim /etc/aerospike/aerospike.conf<br></code></pre></td></tr></table></figure><p>安装AS工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">下载</span><br>wget https://www.aerospike.com/artifacts/aerospike-tools/3.16.0/aerospike-tools-3.16.0-el7.tgz<br><span class="hljs-meta prompt_"># </span><span class="language-bash">解压</span><br>tar zxvf aerospike-tools-3.16.0-el7<br><span class="hljs-meta prompt_"># </span><span class="language-bash">进入目录</span><br>cd aerospike-tools-3.16.0-el7<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看安装</span><br>yum list installed | grep aerospike-tools<br></code></pre></td></tr></table></figure><p>简单查询</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入aql</span><br>aql<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看namespaces</span><br>show namespaces<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查询<span class="hljs-built_in">test</span>命名空间下数据</span><br>select * from test<br><span class="hljs-meta prompt_"># </span><span class="language-bash">插入数据</span><br>insert into test(pk,id,name,age) values(&#x27;key1&#x27;,&#x27;101&#x27;,&#x27;AAA&#x27;,&#x27;21&#x27;);<br>insert into test(pk,id,name,age) values(&#x27;key2&#x27;,&#x27;102&#x27;,&#x27;BBB&#x27;,&#x27;18&#x27;);<br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除数据</span><br>delete from test where pk=&#x27;key2&#x27;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查询数据</span><br>格式 SELECT * FROM &lt;ns&gt;[.&lt;set&gt;] WHERE PK = &lt;key&gt;<br></code></pre></td></tr></table></figure><h1 id="AQL"><a href="#AQL" class="headerlink" title="AQL"></a>AQL</h1><p>COMMANDS</p><h2 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">INDEX</span> &lt;<span class="hljs-keyword">index</span>&gt; <span class="hljs-keyword">ON</span> &lt;ns&gt;[.&lt;<span class="hljs-keyword">set</span>&gt;] (&lt;bin&gt;) NUMERIC|<span class="hljs-keyword">STRING</span>|GEO2DSPHERE<br><span class="hljs-keyword">CREATE</span> LIST/MAPKEYS/MAPVALUES <span class="hljs-keyword">INDEX</span> &lt;<span class="hljs-keyword">index</span>&gt; <span class="hljs-keyword">ON</span> &lt;ns&gt;[.&lt;<span class="hljs-keyword">set</span>&gt;] (&lt;bin&gt;) NUMERIC|<span class="hljs-keyword">STRING</span>|GEO2DSPHERE<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">INDEX</span> &lt;ns&gt;[.&lt;<span class="hljs-keyword">set</span>&gt;] &lt;<span class="hljs-keyword">index</span>&gt;<br>Examples:<br><br>    <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">INDEX</span> idx_foo <span class="hljs-keyword">ON</span> test.demo (foo) NUMERIC<br>    <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">INDEX</span> test.demo idx_foo<br></code></pre></td></tr></table></figure><h2 id="MANAGE-UDFS"><a href="#MANAGE-UDFS" class="headerlink" title="MANAGE UDFS"></a>MANAGE UDFS</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">REGISTER</span> <span class="hljs-keyword">MODULE</span> <span class="hljs-string">&#x27;&lt;filepath&gt;&#x27;</span><br><span class="hljs-keyword">REMOVE</span> <span class="hljs-keyword">MODULE</span> &lt;filename&gt;<br><br>    &lt;filepath&gt; <span class="hljs-keyword">is</span> file path <span class="hljs-keyword">to</span> the UDF <span class="hljs-keyword">module</span>(<span class="hljs-keyword">in</span> single quotes).<br>    &lt;filename&gt; <span class="hljs-keyword">is</span> file name <span class="hljs-keyword">of</span> the UDF <span class="hljs-keyword">module</span>.<br><br>Examples:<br><br>    <span class="hljs-keyword">REGISTER</span> <span class="hljs-keyword">MODULE</span> <span class="hljs-string">&#x27;~/test.lua&#x27;</span> <br>    <span class="hljs-keyword">REMOVE</span> <span class="hljs-keyword">MODULE</span> test.lua<br></code></pre></td></tr></table></figure><h2 id="USER-ADMINISTRATION"><a href="#USER-ADMINISTRATION" class="headerlink" title="USER ADMINISTRATION"></a>USER ADMINISTRATION</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> &lt;<span class="hljs-keyword">user</span>&gt; <span class="hljs-keyword">PASSWORD</span> &lt;<span class="hljs-keyword">password</span>&gt; <span class="hljs-keyword">ROLE</span>[S] &lt;role1&gt;,&lt;role2&gt;...<br>    pre-defined roles: read|read-write|read-write-udf|sys-admin|<span class="hljs-keyword">user</span>-admin<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">USER</span> &lt;<span class="hljs-keyword">user</span>&gt;<br><span class="hljs-keyword">SET</span> <span class="hljs-keyword">PASSWORD</span> &lt;<span class="hljs-keyword">password</span>&gt; [<span class="hljs-keyword">FOR</span> &lt;<span class="hljs-keyword">user</span>&gt;]<br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ROLE</span>[S] &lt;role1&gt;,&lt;role2&gt;... <span class="hljs-keyword">TO</span> &lt;<span class="hljs-keyword">user</span>&gt;<br><span class="hljs-keyword">REVOKE</span> <span class="hljs-keyword">ROLE</span>[S] &lt;role1&gt;,&lt;role2&gt;... <span class="hljs-keyword">FROM</span> &lt;<span class="hljs-keyword">user</span>&gt;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">ROLE</span> &lt;<span class="hljs-keyword">role</span>&gt; <span class="hljs-keyword">PRIVILEGE</span>[S] &lt;priv1[.ns1[.set1]]&gt;,&lt;priv2[.ns2[.set2]]&gt;...<br>    priv: read|read-write|read-write-udf|sys-admin|<span class="hljs-keyword">user</span>-admin|data-admin<br>    ns:   <span class="hljs-keyword">namespace</span>.  Applies <span class="hljs-keyword">to</span> <span class="hljs-keyword">all</span> namespaces <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">set</span>.<br>    <span class="hljs-keyword">set</span>:  <span class="hljs-keyword">set</span> name.  Applie <span class="hljs-keyword">to</span> <span class="hljs-keyword">all</span> sets <span class="hljs-keyword">within</span> <span class="hljs-keyword">namespace</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">set</span>.<br>          sys-admin, <span class="hljs-keyword">user</span>-admin <span class="hljs-keyword">and</span> data-admin can<span class="hljs-string">&#x27;t be qualified with namespace or set.</span><br><span class="hljs-string">DROP ROLE &lt;role&gt;</span><br><span class="hljs-string">GRANT PRIVILEGE[S] &lt;priv1[.ns1[.set1]]&gt;,&lt;priv2[.ns2[.set2]]&gt;... TO &lt;role&gt;</span><br><span class="hljs-string">REVOKE PRIVILEGE[S] &lt;priv1[.ns1[.set1]]&gt;,&lt;priv2[.ns2[.set2]]&gt;... FROM &lt;role&gt;</span><br></code></pre></td></tr></table></figure><h2 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h2><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">INSERT <span class="hljs-keyword">INTO</span> &lt;ns&gt;[.&lt;<span class="hljs-keyword">set</span>&gt;] (PK, &lt;bins&gt;) VALUES (&lt;<span class="hljs-keyword">key</span>&gt;, &lt;values&gt;)<br>DELETE <span class="hljs-keyword">FROM</span> &lt;ns&gt;[.&lt;<span class="hljs-keyword">set</span>&gt;] <span class="hljs-keyword">WHERE</span> PK = &lt;<span class="hljs-keyword">key</span>&gt;<br>TRUNCATE &lt;ns&gt;[.&lt;<span class="hljs-keyword">set</span>&gt;] [upto &lt;LUT&gt;] <br><br>    &lt;ns&gt; <span class="hljs-built_in">is</span> the <span class="hljs-keyword">namespace</span> <span class="hljs-keyword">for</span> the record.<br>    &lt;<span class="hljs-keyword">set</span>&gt; <span class="hljs-built_in">is</span> the <span class="hljs-keyword">set</span> name <span class="hljs-keyword">for</span> the record.<br>    &lt;<span class="hljs-keyword">key</span>&gt; <span class="hljs-built_in">is</span> the record<span class="hljs-comment">&#x27;s primary key.</span><br>    &lt;bins&gt; <span class="hljs-built_in">is</span> a comma-separated list <span class="hljs-keyword">of</span> bin names.<br>    &lt;values&gt; <span class="hljs-built_in">is</span> comma-separated list <span class="hljs-keyword">of</span> bin values, which may include type cast expressions. <span class="hljs-keyword">Set</span> <span class="hljs-keyword">to</span> NULL (<span class="hljs-keyword">case</span> insensitive &amp; w/o quotes) <span class="hljs-keyword">to</span> delete the bin.<br>    &lt;LUT&gt; <span class="hljs-built_in">is</span> last update time upto which <span class="hljs-keyword">set</span> <span class="hljs-built_in">or</span> <span class="hljs-keyword">namespace</span> needs <span class="hljs-keyword">to</span> be truncated. LUT <span class="hljs-built_in">is</span> either nanosecond since Unix epoch <span class="hljs-built_in">like</span> <span class="hljs-number">1513687224599000000</span> <span class="hljs-built_in">or</span> <span class="hljs-keyword">in</span> <span class="hljs-type">date</span> <span class="hljs-type">string</span> <span class="hljs-keyword">in</span> format <span class="hljs-built_in">like</span> <span class="hljs-string">&quot;Dec 19 2017 12:40:00&quot;</span>.<br><br>  Type Cast Expression Formats:<br><br>      CAST(&lt;Value&gt; <span class="hljs-keyword">AS</span> &lt;TypeName&gt;)<br>      &lt;TypeName&gt;(&lt;Value&gt;)<br><br>  Supported AQL Types:<br><br>        Bin Value Type                    Equivalent Type Name(s)<br>     ===============================================================<br>      <span class="hljs-type">Integer</span>                           <span class="hljs-type">DECIMAL</span>, INT, NUMERIC<br>      Floating Point                    FLOAT, REAL<br>      Aerospike CDT (List, Map, etc.)   JSON<br>      Aerospike List                    LIST<br>      Aerospike Map                     MAP<br>      GeoJSON                           GEOJSON<br>      <span class="hljs-type">String</span>                            <span class="hljs-type">CHAR</span>, <span class="hljs-type">STRING</span>, <span class="hljs-keyword">TEXT</span>, VARCHAR<br>     ===============================================================<br><br>  [Note:  Type names <span class="hljs-built_in">and</span> keywords are <span class="hljs-keyword">case</span> insensitive.]<br><br><span class="hljs-symbol">Examples:</span><br><br>    INSERT <span class="hljs-keyword">INTO</span> test.demo (PK, foo, bar) VALUES (<span class="hljs-comment">&#x27;key1&#x27;, 123, &#x27;abc&#x27;)</span><br>    INSERT <span class="hljs-keyword">INTO</span> test.demo (PK, foo, bar) VALUES (<span class="hljs-comment">&#x27;key1&#x27;, CAST(&#x27;123&#x27; AS INT), JSON(&#x27;&#123;&quot;a&quot;: 1.2, &quot;b&quot;: [1, 2, 3]&#125;&#x27;))</span><br>    INSERT <span class="hljs-keyword">INTO</span> test.demo (PK, foo, bar) VALUES (<span class="hljs-comment">&#x27;key1&#x27;, LIST(&#x27;[1, 2, 3]&#x27;), MAP(&#x27;&#123;&quot;a&quot;: 1, &quot;b&quot;: 2&#125;&#x27;))</span><br>    INSERT <span class="hljs-keyword">INTO</span> test.demo (PK, gj) VALUES (<span class="hljs-comment">&#x27;key1&#x27;, GEOJSON(&#x27;&#123;&quot;type&quot;: &quot;Point&quot;, &quot;coordinates&quot;: [123.4, -456.7]&#125;&#x27;))</span><br>    DELETE <span class="hljs-keyword">FROM</span> test.demo <span class="hljs-keyword">WHERE</span> PK = <span class="hljs-comment">&#x27;key1&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="INVOKING-UDFS"><a href="#INVOKING-UDFS" class="headerlink" title="INVOKING UDFS"></a>INVOKING UDFS</h2><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">EXECUTE &lt;<span class="hljs-keyword">module</span>&gt;.&lt;<span class="hljs-keyword">function</span>&gt;(&lt;args&gt;) <span class="hljs-keyword">ON</span> &lt;ns&gt;[.&lt;<span class="hljs-keyword">set</span>&gt;]<br>EXECUTE &lt;<span class="hljs-keyword">module</span>&gt;.&lt;<span class="hljs-keyword">function</span>&gt;(&lt;args&gt;) <span class="hljs-keyword">ON</span> &lt;ns&gt;[.&lt;<span class="hljs-keyword">set</span>&gt;] <span class="hljs-keyword">WHERE</span> PK = &lt;<span class="hljs-keyword">key</span>&gt;<br>EXECUTE &lt;<span class="hljs-keyword">module</span>&gt;.&lt;<span class="hljs-keyword">function</span>&gt;(&lt;args&gt;) <span class="hljs-keyword">ON</span> &lt;ns&gt;[.&lt;<span class="hljs-keyword">set</span>&gt;] <span class="hljs-keyword">WHERE</span> &lt;bin&gt; = &lt;value&gt;<br>EXECUTE &lt;<span class="hljs-keyword">module</span>&gt;.&lt;<span class="hljs-keyword">function</span>&gt;(&lt;args&gt;) <span class="hljs-keyword">ON</span> &lt;ns&gt;[.&lt;<span class="hljs-keyword">set</span>&gt;] <span class="hljs-keyword">WHERE</span> &lt;bin&gt; BETWEEN &lt;lower&gt; <span class="hljs-built_in">AND</span> &lt;upper&gt;<br><br>    &lt;<span class="hljs-keyword">module</span>&gt; <span class="hljs-built_in">is</span> UDF <span class="hljs-keyword">module</span> containing the <span class="hljs-keyword">function</span> <span class="hljs-keyword">to</span> invoke.<br>    &lt;<span class="hljs-keyword">function</span>&gt; <span class="hljs-built_in">is</span> UDF <span class="hljs-keyword">to</span> invoke.<br>    &lt;args&gt; <span class="hljs-built_in">is</span> a comma-separated list <span class="hljs-keyword">of</span> argument values <span class="hljs-keyword">for</span> the UDF.<br>    &lt;ns&gt; <span class="hljs-built_in">is</span> the <span class="hljs-keyword">namespace</span> <span class="hljs-keyword">for</span> the records <span class="hljs-keyword">to</span> be queried.<br>    &lt;<span class="hljs-keyword">set</span>&gt; <span class="hljs-built_in">is</span> the <span class="hljs-keyword">set</span> name <span class="hljs-keyword">for</span> the record <span class="hljs-keyword">to</span> be queried.<br>    &lt;<span class="hljs-keyword">key</span>&gt; <span class="hljs-built_in">is</span> the record<span class="hljs-comment">&#x27;s primary key.</span><br>    &lt;bin&gt; <span class="hljs-built_in">is</span> the name <span class="hljs-keyword">of</span> a bin.<br>    &lt;value&gt; <span class="hljs-built_in">is</span> the value <span class="hljs-keyword">of</span> a bin.<br>    &lt;lower&gt; <span class="hljs-built_in">is</span> the lower bound <span class="hljs-keyword">for</span> a numeric range query.<br>    &lt;upper&gt; <span class="hljs-built_in">is</span> the lower bound <span class="hljs-keyword">for</span> a numeric range query.<br><br><span class="hljs-symbol">Examples:</span><br><br>    EXECUTE myudfs.udf1(<span class="hljs-number">2</span>) <span class="hljs-keyword">ON</span> test.demo<br>    EXECUTE myudfs.udf1(<span class="hljs-number">2</span>) <span class="hljs-keyword">ON</span> test.demo <span class="hljs-keyword">WHERE</span> PK = <span class="hljs-comment">&#x27;key1&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="OPERATE"><a href="#OPERATE" class="headerlink" title="OPERATE"></a>OPERATE</h2><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs pf">OPERATE <span class="hljs-variable">&lt;op(&lt;bin&gt;</span>, params...)&gt;[with_policy(<span class="hljs-variable">&lt;map policy&gt;</span>),] [<span class="hljs-variable">&lt;op(&lt;bin&gt;</span>, params...)&gt; with_policy (<span class="hljs-variable">&lt;map policy&gt;</span>) ...] ON <span class="hljs-variable">&lt;ns&gt;</span>[.<span class="hljs-variable">&lt;set&gt;</span>] where PK=<span class="hljs-variable">&lt;key&gt;</span><br><br>    <span class="hljs-variable">&lt;op&gt;</span> name of operation <span class="hljs-keyword">to</span> perform.<br>    <span class="hljs-variable">&lt;bin&gt;</span> is the name of a bin.<br>    <span class="hljs-variable">&lt;params&gt;</span> parameters <span class="hljs-keyword">for</span> operation.<br>    <span class="hljs-variable">&lt;map policy&gt;</span> map operation policy.<br>    <span class="hljs-variable">&lt;ns&gt;</span> is the namespace <span class="hljs-keyword">for</span> the records <span class="hljs-keyword">to</span> be queried.<br>    <span class="hljs-variable">&lt;set&gt;</span> is the <span class="hljs-built_in">set</span> name <span class="hljs-keyword">for</span> the record <span class="hljs-keyword">to</span> be queried.<br>    <span class="hljs-variable">&lt;key&gt;</span> is the record&#x27;s primary key.<br><br>OP<br>    LIST_APPEND (<span class="hljs-variable">&lt;bin&gt;</span>, <span class="hljs-variable">&lt;val&gt;</span>)         <br>    LIST_INSERT (<span class="hljs-variable">&lt;bin&gt;</span>, <span class="hljs-variable">&lt;index&gt;</span>, <span class="hljs-variable">&lt;val&gt;</span>)<br>    LIST_SET    (<span class="hljs-variable">&lt;bin&gt;</span>, <span class="hljs-variable">&lt;index&gt;</span>, <span class="hljs-variable">&lt;val&gt;</span>)<br>    LIST_GET    (<span class="hljs-variable">&lt;bin&gt;</span>, <span class="hljs-variable">&lt;index&gt;</span>)       <br>    LIST_POP    (<span class="hljs-variable">&lt;bin&gt;</span>, <span class="hljs-variable">&lt;index&gt;</span>)       <br>    LIST_REMOVE (<span class="hljs-variable">&lt;bin&gt;</span>, <span class="hljs-variable">&lt;index&gt;</span>)       <br>    LIST_APPEND_ITEMS (<span class="hljs-variable">&lt;bin&gt;</span>, <span class="hljs-variable">&lt;list of vals&gt;</span>)         <br>    LIST_INSERT_ITEMS (<span class="hljs-variable">&lt;bin&gt;</span>, <span class="hljs-variable">&lt;index&gt;</span>, <span class="hljs-variable">&lt;list of vals&gt;</span>)<br>    LIST_GET_RANGE    (<span class="hljs-variable">&lt;bin&gt;</span>, <span class="hljs-variable">&lt;startindex&gt;</span>[, <span class="hljs-variable">&lt;count&gt;</span>])<br>    LIST_POP_RANGE    (<span class="hljs-variable">&lt;bin&gt;</span>, <span class="hljs-variable">&lt;startindex&gt;</span>[, <span class="hljs-variable">&lt;count&gt;</span>])<br>    LIST_REMOVE_RANGE (<span class="hljs-variable">&lt;bin&gt;</span>, <span class="hljs-variable">&lt;startindex&gt;</span>[, <span class="hljs-variable">&lt;count&gt;</span>])<br>    LIST_TRIM         (<span class="hljs-variable">&lt;bin&gt;</span>, <span class="hljs-variable">&lt;startindex&gt;</span>[, <span class="hljs-variable">&lt;count&gt;</span>])<br>    LIST_INCREMENT    (<span class="hljs-variable">&lt;bin&gt;</span>, <span class="hljs-variable">&lt;index&gt;</span>, <span class="hljs-variable">&lt;numeric val&gt;</span>) <br>    LIST_CLEAR        (<span class="hljs-variable">&lt;bin&gt;</span>) <br>    LIST_SIZE         (<span class="hljs-variable">&lt;bin&gt;</span>) <br>    MAP_PUT             (<span class="hljs-variable">&lt;bin&gt;</span>, <span class="hljs-variable">&lt;key&gt;</span>, <span class="hljs-variable">&lt;val&gt;</span>) [with_policy (<span class="hljs-variable">&lt;map policy&gt;</span>)]<br>    MAP_PUT_ITEMS       (<span class="hljs-variable">&lt;bin&gt;</span>, <span class="hljs-variable">&lt;map&gt;</span>)  [with_policy (<span class="hljs-variable">&lt;map policy&gt;</span>)]<br>    MAP_INCREMENT       (<span class="hljs-variable">&lt;bin&gt;</span>, <span class="hljs-variable">&lt;key&gt;</span>, <span class="hljs-variable">&lt;numeric val&gt;</span>) [with_policy (<span class="hljs-variable">&lt;map policy&gt;</span>)]<br>    MAP_DECREMENT       (<span class="hljs-variable">&lt;bin&gt;</span>, <span class="hljs-variable">&lt;key&gt;</span>, <span class="hljs-variable">&lt;numeric val&gt;</span>) [with_policy (<span class="hljs-variable">&lt;map policy&gt;</span>)]<br>    MAP_GET_BY_KEY      (<span class="hljs-variable">&lt;bin&gt;</span>, <span class="hljs-variable">&lt;key&gt;</span>)  <br>    MAP_REMOVE_BY_KEY   (<span class="hljs-variable">&lt;bin&gt;</span>, <span class="hljs-variable">&lt;key&gt;</span>)  <br>    MAP_GET_BY_VALUE    (<span class="hljs-variable">&lt;bin&gt;</span>, <span class="hljs-variable">&lt;value&gt;</span>)<br>    MAP_REMOVE_BY_VALUE (<span class="hljs-variable">&lt;bin&gt;</span>, <span class="hljs-variable">&lt;value&gt;</span>)<br>    MAP_GET_BY_INDEX    (<span class="hljs-variable">&lt;bin&gt;</span>, <span class="hljs-variable">&lt;index&gt;</span>)<br>    MAP_REMOVE_BY_INDEX (<span class="hljs-variable">&lt;bin&gt;</span>, <span class="hljs-variable">&lt;index&gt;</span>)<br>    MAP_GET_BY_RANK     (<span class="hljs-variable">&lt;bin&gt;</span>, <span class="hljs-variable">&lt;rank&gt;</span>) <br>    MAP_REMOVE_BY_RANK  (<span class="hljs-variable">&lt;bin&gt;</span>, <span class="hljs-variable">&lt;rank&gt;</span>) <br>    MAP_REMOVE_BY_KEY_LIST    (<span class="hljs-variable">&lt;bin&gt;</span>, <span class="hljs-variable">&lt;list of keys&gt;</span>)         <br>    MAP_REMOVE_BY_VALUE_LIST  (<span class="hljs-variable">&lt;bin&gt;</span>, <span class="hljs-variable">&lt;list of vals&gt;</span>)         <br>    MAP_GET_BY_KEY_RANGE      (<span class="hljs-variable">&lt;bin&gt;</span>, <span class="hljs-variable">&lt;startkey&gt;</span>, <span class="hljs-variable">&lt;endkey&gt;</span>)   <br>    MAP_REMOVEBY_RANGE        (<span class="hljs-variable">&lt;bin&gt;</span>, <span class="hljs-variable">&lt;startkey&gt;</span>, <span class="hljs-variable">&lt;endkey&gt;</span>)   <br>    MAP_GET_BY_VALUE_RANGE    (<span class="hljs-variable">&lt;bin&gt;</span>, <span class="hljs-variable">&lt;startval&gt;</span>, <span class="hljs-variable">&lt;endval&gt;</span>)   <br>    MAP_REMOVE_BY_VALUE_RANGE (<span class="hljs-variable">&lt;bin&gt;</span>, <span class="hljs-variable">&lt;startval&gt;</span>, <span class="hljs-variable">&lt;endval&gt;</span>)   <br>    MAP_GET_BY_INDEX_RANGE    (<span class="hljs-variable">&lt;bin&gt;</span>, <span class="hljs-variable">&lt;startindex&gt;</span>[, <span class="hljs-variable">&lt;count&gt;</span>])<br>    MAP_REMOVE_BY_INDEX_RANGE (<span class="hljs-variable">&lt;bin&gt;</span>, <span class="hljs-variable">&lt;startindex&gt;</span>[, <span class="hljs-variable">&lt;count&gt;</span>])<br>    MAP_GET_BY_RANK_RANGE     (<span class="hljs-variable">&lt;bin&gt;</span>, <span class="hljs-variable">&lt;startrank&gt;</span> [, <span class="hljs-variable">&lt;count&gt;</span>])<br>    MAP_REMOVE_BY_RANK_RANGE  (<span class="hljs-variable">&lt;bin&gt;</span>, <span class="hljs-variable">&lt;startrank&gt;</span> [, <span class="hljs-variable">&lt;count&gt;</span>])<br>    MAP_CLEAR     (<span class="hljs-variable">&lt;bin&gt;</span>) <br>    MAP_SET_TYPE  (<span class="hljs-variable">&lt;bin&gt;</span>, <span class="hljs-variable">&lt;map type&gt;</span>) <br>    MAP_SIZE      (<span class="hljs-variable">&lt;bin&gt;</span>) <br>    TOUCH   ()            <br>    READ    (<span class="hljs-variable">&lt;bin&gt;</span>)       <br>    WRITE   (<span class="hljs-variable">&lt;bin&gt;</span>, <span class="hljs-variable">&lt;val&gt;</span>)<br>    PREPEND (<span class="hljs-variable">&lt;bin&gt;</span>, <span class="hljs-variable">&lt;val&gt;</span>)<br>    APPEND  (<span class="hljs-variable">&lt;bin&gt;</span>, <span class="hljs-variable">&lt;val&gt;</span>)<br>    INCR    (<span class="hljs-variable">&lt;bin&gt;</span>, <span class="hljs-variable">&lt;numeric val&gt;</span>)<br><br>Examples:<br><br>    OPERATE LIST_APPEND(listbin, <span class="hljs-number">1</span>), LIST_APPEND(listbin2, <span class="hljs-number">10</span>) ON test.demo where PK = &#x27;key1&#x27;<br>    OPERATE LIST_POP_RANGE(listbin, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>) ON test.demo where PK = &#x27;key1&#x27;<br></code></pre></td></tr></table></figure><h2 id="QUERY"><a href="#QUERY" class="headerlink" title="QUERY"></a>QUERY</h2><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs pf">SELECT <span class="hljs-variable">&lt;bins&gt;</span> FROM <span class="hljs-variable">&lt;ns&gt;</span>[.<span class="hljs-variable">&lt;set&gt;</span>]<br>SELECT <span class="hljs-variable">&lt;bins&gt;</span> FROM <span class="hljs-variable">&lt;ns&gt;</span>[.<span class="hljs-variable">&lt;set&gt;</span>] WHERE <span class="hljs-variable">&lt;bin&gt;</span> = <span class="hljs-variable">&lt;value&gt;</span><br>SELECT <span class="hljs-variable">&lt;bins&gt;</span> FROM <span class="hljs-variable">&lt;ns&gt;</span>[.<span class="hljs-variable">&lt;set&gt;</span>] WHERE <span class="hljs-variable">&lt;bin&gt;</span> BETWEEN <span class="hljs-variable">&lt;lower&gt;</span> AND <span class="hljs-variable">&lt;upper&gt;</span><br>SELECT <span class="hljs-variable">&lt;bins&gt;</span> FROM <span class="hljs-variable">&lt;ns&gt;</span>[.<span class="hljs-variable">&lt;set&gt;</span>] WHERE PK = <span class="hljs-variable">&lt;key&gt;</span><br>SELECT <span class="hljs-variable">&lt;bins&gt;</span> FROM <span class="hljs-variable">&lt;ns&gt;</span>[.<span class="hljs-variable">&lt;set&gt;</span>] IN <span class="hljs-variable">&lt;indextype&gt;</span> WHERE <span class="hljs-variable">&lt;bin&gt;</span> = <span class="hljs-variable">&lt;value&gt;</span><br>SELECT <span class="hljs-variable">&lt;bins&gt;</span> FROM <span class="hljs-variable">&lt;ns&gt;</span>[.<span class="hljs-variable">&lt;set&gt;</span>] IN <span class="hljs-variable">&lt;indextype&gt;</span> WHERE <span class="hljs-variable">&lt;bin&gt;</span> BETWEEN <span class="hljs-variable">&lt;lower&gt;</span> AND <span class="hljs-variable">&lt;upper&gt;</span><br>SELECT <span class="hljs-variable">&lt;bins&gt;</span> FROM <span class="hljs-variable">&lt;ns&gt;</span>[.<span class="hljs-variable">&lt;set&gt;</span>] IN <span class="hljs-variable">&lt;indextype&gt;</span> WHERE <span class="hljs-variable">&lt;bin&gt;</span> CONTAINS <span class="hljs-variable">&lt;GeoJSONPoint&gt;</span><br>SELECT <span class="hljs-variable">&lt;bins&gt;</span> FROM <span class="hljs-variable">&lt;ns&gt;</span>[.<span class="hljs-variable">&lt;set&gt;</span>] IN <span class="hljs-variable">&lt;indextype&gt;</span> WHERE <span class="hljs-variable">&lt;bin&gt;</span> WITHIN <span class="hljs-variable">&lt;GeoJSONPolygon&gt;</span><br><br>    <span class="hljs-variable">&lt;ns&gt;</span> is the namespace <span class="hljs-keyword">for</span> the records <span class="hljs-keyword">to</span> be queried.<br>    <span class="hljs-variable">&lt;set&gt;</span> is the <span class="hljs-built_in">set</span> name <span class="hljs-keyword">for</span> the record <span class="hljs-keyword">to</span> be queried.<br>    <span class="hljs-variable">&lt;key&gt;</span> is the record&#x27;s primary key.<br>    <span class="hljs-variable">&lt;bin&gt;</span> is the name of a bin.<br>    <span class="hljs-variable">&lt;value&gt;</span> is the value of a bin.<br>    <span class="hljs-variable">&lt;indextype&gt;</span> is the type of a index <span class="hljs-keyword">user</span> wants <span class="hljs-keyword">to</span> query. (LIST/MAPKEYS/MAPVALUES)<br>    <span class="hljs-variable">&lt;bins&gt;</span> can be either a wildcard (*) or a comma-separated list of bin names.<br>    <span class="hljs-variable">&lt;lower&gt;</span> is the lower bound <span class="hljs-keyword">for</span> a numeric range query.<br>    <span class="hljs-variable">&lt;upper&gt;</span> is the lower bound <span class="hljs-keyword">for</span> a numeric range query.<br><br>Examples:<br><br>    SELECT * FROM test.demo<br>    SELECT * FROM test.demo WHERE PK = &#x27;key1&#x27;<br>    SELECT foo, bar FROM test.demo WHERE PK = &#x27;key1&#x27;<br>    SELECT foo, bar FROM test.demo WHERE foo = <span class="hljs-number">123</span><br>    SELECT foo, bar FROM test.demo WHERE foo BETWEEN <span class="hljs-number">0</span> AND <span class="hljs-number">999</span><br>    SELECT * FROM test.demo WHERE gj CONTAINS CAST(&#x27;&#123;<span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;Point&quot;</span>, <span class="hljs-string">&quot;coordinates&quot;</span>: [<span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>]&#125;&#x27; AS GEOJSON)<br></code></pre></td></tr></table></figure><h2 id="AGGREGATION"><a href="#AGGREGATION" class="headerlink" title="AGGREGATION"></a>AGGREGATION</h2><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-keyword">AGGREGATE</span> &lt;<span class="hljs-keyword">module</span>&gt;.&lt;<span class="hljs-keyword">function</span>&gt;(&lt;args&gt;) <span class="hljs-keyword">ON</span> &lt;ns&gt;[.&lt;<span class="hljs-keyword">set</span>&gt;]<br><span class="hljs-keyword">AGGREGATE</span> &lt;<span class="hljs-keyword">module</span>&gt;.&lt;<span class="hljs-keyword">function</span>&gt;(&lt;args&gt;) <span class="hljs-keyword">ON</span> &lt;ns&gt;[.&lt;<span class="hljs-keyword">set</span>&gt;] <span class="hljs-keyword">WHERE</span> &lt;bin&gt; = &lt;value&gt;<br><span class="hljs-keyword">AGGREGATE</span> &lt;<span class="hljs-keyword">module</span>&gt;.&lt;<span class="hljs-keyword">function</span>&gt;(&lt;args&gt;) <span class="hljs-keyword">ON</span> &lt;ns&gt;[.&lt;<span class="hljs-keyword">set</span>&gt;] <span class="hljs-keyword">WHERE</span> &lt;bin&gt; BETWEEN &lt;lower&gt; <span class="hljs-built_in">AND</span> &lt;upper&gt;<br><br>    &lt;<span class="hljs-keyword">module</span>&gt; <span class="hljs-built_in">is</span> UDF <span class="hljs-keyword">module</span> containing the <span class="hljs-keyword">function</span> <span class="hljs-keyword">to</span> invoke.<br>    &lt;<span class="hljs-keyword">function</span>&gt; <span class="hljs-built_in">is</span> UDF <span class="hljs-keyword">to</span> invoke.<br>    &lt;args&gt; <span class="hljs-built_in">is</span> a comma-separated list <span class="hljs-keyword">of</span> argument values <span class="hljs-keyword">for</span> the UDF.<br>    &lt;ns&gt; <span class="hljs-built_in">is</span> the <span class="hljs-keyword">namespace</span> <span class="hljs-keyword">for</span> the records <span class="hljs-keyword">to</span> be queried.<br>    &lt;<span class="hljs-keyword">set</span>&gt; <span class="hljs-built_in">is</span> the <span class="hljs-keyword">set</span> name <span class="hljs-keyword">for</span> the record <span class="hljs-keyword">to</span> be queried.<br>    &lt;<span class="hljs-keyword">key</span>&gt; <span class="hljs-built_in">is</span> the record<span class="hljs-comment">&#x27;s primary key.</span><br>    &lt;bin&gt; <span class="hljs-built_in">is</span> the name <span class="hljs-keyword">of</span> a bin.<br>    &lt;value&gt; <span class="hljs-built_in">is</span> the value <span class="hljs-keyword">of</span> a bin.<br>    &lt;lower&gt; <span class="hljs-built_in">is</span> the lower bound <span class="hljs-keyword">for</span> a numeric range query.<br>    &lt;upper&gt; <span class="hljs-built_in">is</span> the lower bound <span class="hljs-keyword">for</span> a numeric range query.<br><br><span class="hljs-symbol">Examples:</span><br><br>    <span class="hljs-keyword">AGGREGATE</span> myudfs.udf2(<span class="hljs-number">2</span>) <span class="hljs-keyword">ON</span> test.demo <span class="hljs-keyword">WHERE</span> foo = <span class="hljs-number">123</span><br>    <span class="hljs-keyword">AGGREGATE</span> myudfs.udf2(<span class="hljs-number">2</span>) <span class="hljs-keyword">ON</span> test.demo <span class="hljs-keyword">WHERE</span> foo BETWEEN <span class="hljs-number">0</span> <span class="hljs-built_in">AND</span> <span class="hljs-number">999</span><br></code></pre></td></tr></table></figure><h2 id="EXPLAIN"><a href="#EXPLAIN" class="headerlink" title="EXPLAIN"></a>EXPLAIN</h2><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">EXPLAIN <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> &lt;ns&gt;[.&lt;<span class="hljs-keyword">set</span>&gt;] <span class="hljs-keyword">WHERE</span> PK = &lt;<span class="hljs-keyword">key</span>&gt;<br><br>    &lt;ns&gt; <span class="hljs-built_in">is</span> the <span class="hljs-keyword">namespace</span> <span class="hljs-keyword">for</span> the records <span class="hljs-keyword">to</span> be queried.<br>    &lt;<span class="hljs-keyword">set</span>&gt; <span class="hljs-built_in">is</span> the <span class="hljs-keyword">set</span> name <span class="hljs-keyword">for</span> the record <span class="hljs-keyword">to</span> be queried.<br>    &lt;<span class="hljs-keyword">key</span>&gt; <span class="hljs-built_in">is</span> the record<span class="hljs-comment">&#x27;s primary key.</span><br><br><span class="hljs-symbol">Examples:</span><br><br>    EXPLAIN <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> test.demo <span class="hljs-keyword">WHERE</span> PK = <span class="hljs-comment">&#x27;key1&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="INFO"><a href="#INFO" class="headerlink" title="INFO"></a>INFO</h2><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gams">SHOW NAMESPACES | <span class="hljs-keyword">SETS</span> | BINS | <span class="hljs-comment">INDEXES</span><br>SHOW <span class="hljs-comment">SCANS</span> | <span class="hljs-comment">QUERIES</span><br>STAT <span class="hljs-comment">NAMESPACE &lt;ns&gt;</span> | <span class="hljs-comment">INDEX &lt;ns&gt; &lt;indexname&gt;</span><br>STAT <span class="hljs-comment">SYSTEM</span><br>ASINFO <span class="hljs-comment">&lt;ASInfoCommand&gt;</span><br></code></pre></td></tr></table></figure><h2 id="JOB-MANAGEMENT"><a href="#JOB-MANAGEMENT" class="headerlink" title="JOB MANAGEMENT"></a>JOB MANAGEMENT</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">KILL_QUERY <span class="hljs-tag">&lt;<span class="hljs-name">transaction_id</span>&gt;</span><br>KILL_SCAN <span class="hljs-tag">&lt;<span class="hljs-name">scan_id</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="USER-ADMINISTRATION-1"><a href="#USER-ADMINISTRATION-1" class="headerlink" title="USER ADMINISTRATION"></a>USER ADMINISTRATION</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">USER</span> [&lt;<span class="hljs-keyword">user</span>&gt;]<br><span class="hljs-keyword">SHOW</span> USERS<br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">ROLE</span> &lt;<span class="hljs-keyword">role</span>&gt;<br><span class="hljs-keyword">SHOW</span> ROLES<br></code></pre></td></tr></table></figure><h2 id="MANAGE-UDFS-1"><a href="#MANAGE-UDFS-1" class="headerlink" title="MANAGE UDFS"></a>MANAGE UDFS</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">SHOW MODULES<br><span class="hljs-keyword">DESC</span> <span class="hljs-keyword">MODULE</span> &lt;filename&gt;<br><br>    &lt;filepath&gt; <span class="hljs-keyword">is</span> file path <span class="hljs-keyword">to</span> the UDF <span class="hljs-keyword">module</span>(<span class="hljs-keyword">in</span> single quotes).<br>    &lt;filename&gt; <span class="hljs-keyword">is</span> file name <span class="hljs-keyword">of</span> the UDF <span class="hljs-keyword">module</span>.<br><br>Examples:<br><br>    SHOW MODULES<br>    <span class="hljs-keyword">DESC</span> <span class="hljs-keyword">MODULE</span> test.lua<br></code></pre></td></tr></table></figure><h2 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h2><h2 id="SYSTEM"><a href="#SYSTEM" class="headerlink" title="SYSTEM"></a>SYSTEM</h2><h2 id="SETTINGS"><a href="#SETTINGS" class="headerlink" title="SETTINGS"></a>SETTINGS</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs routeros">  ECHO                          (<span class="hljs-literal">true</span> | <span class="hljs-literal">false</span>,<span class="hljs-built_in"> default </span><span class="hljs-literal">false</span>)<br>  VERBOSE                       (<span class="hljs-literal">true</span> | <span class="hljs-literal">false</span>,<span class="hljs-built_in"> default </span><span class="hljs-literal">false</span>)<br>  OUTPUT                        (TABLE | JSON | MUTE | RAW,<span class="hljs-built_in"> default </span>TABLE)<br>  OUTPUT_TYPES                  (<span class="hljs-literal">true</span> | <span class="hljs-literal">false</span>,<span class="hljs-built_in"> default </span><span class="hljs-literal">true</span>)<br>  TIMEOUT                       (time <span class="hljs-keyword">in</span> ms, default: 1000)<br>  LUA_USERPATH                  &lt;path&gt;,<span class="hljs-built_in"> default </span>: /opt/aerospike/usr/udf/lua<br>  USE_SMD                       (<span class="hljs-literal">true</span> | <span class="hljs-literal">false</span>,<span class="hljs-built_in"> default </span><span class="hljs-literal">false</span>)<br>  RECORD_TTL                    (time <span class="hljs-keyword">in</span> sec, default: 0)<br>  RECORD_PRINT_METADATA         (<span class="hljs-literal">true</span> | <span class="hljs-literal">false</span>,<span class="hljs-built_in"> default </span><span class="hljs-literal">false</span>, prints record metadata)<br>  REPLICA_ANY                   (<span class="hljs-literal">true</span> | <span class="hljs-literal">false</span>,<span class="hljs-built_in"> default </span><span class="hljs-literal">false</span>)<br>  KEY_SEND                      (<span class="hljs-literal">true</span> | <span class="hljs-literal">false</span>,<span class="hljs-built_in"> default </span><span class="hljs-literal">false</span>)<br>  DURABLE_DELETE                (<span class="hljs-literal">true</span> | <span class="hljs-literal">false</span>,<span class="hljs-built_in"> default </span><span class="hljs-literal">false</span>)<br>  FAIL_ON_CLUSTER_CHANGE        (<span class="hljs-literal">true</span> | <span class="hljs-literal">false</span>,<span class="hljs-built_in"> default </span><span class="hljs-literal">true</span>,<span class="hljs-built_in"> policy </span>applies <span class="hljs-keyword">to</span> scans)<br>  SCAN_PRIORITY                 priority of scan (LOW, MEDIUM, HIGH, AUTO),<span class="hljs-built_in"> default </span>: AUTO<br>  NO_BINS                       (<span class="hljs-literal">true</span> | <span class="hljs-literal">false</span>,<span class="hljs-built_in"> default </span><span class="hljs-literal">false</span>, <span class="hljs-literal">No</span> bins as part of scan <span class="hljs-keyword">and</span> query result)<br>  LINEARIZE_READ                (<span class="hljs-literal">true</span> | <span class="hljs-literal">false</span>,<span class="hljs-built_in"> default </span><span class="hljs-literal">false</span>, Make read linearizable, applicable only <span class="hljs-keyword">for</span> namespace with strong_consistency enabled.)<br><br><br><span class="hljs-keyword">To</span> <span class="hljs-built_in">get</span> the value of a setting, run:<br>  <br>    aql&gt; <span class="hljs-built_in">GET</span> &lt;setting&gt;<br>  <br><span class="hljs-keyword">To</span> <span class="hljs-built_in">set</span> the value of a setting, run:<br>  <br>    aql&gt; <span class="hljs-built_in">SET</span> &lt;setting&gt; &lt;value&gt;<br>  <br><span class="hljs-keyword">To</span> reset the value of a setting back <span class="hljs-keyword">to</span> default, run:<br>  <br>    aql&gt; RESET &lt;setting&gt;<br></code></pre></td></tr></table></figure><h2 id="OTHER"><a href="#OTHER" class="headerlink" title="OTHER"></a>OTHER</h2><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coq">HELP<br>QUIT|<span class="hljs-type">EXIT</span>|<span class="hljs-type">Q</span><br></code></pre></td></tr></table></figure><p><a href="https://www.aerospike.com/download/server/5.5.0.7/">下载地址</a><br><a href="https://www.aerospike.com/docs/operations/install/index.html">安装教程</a><br><a href="https://www.aerospike.com/docs/operations/install/linux/other/">参考资料</a></p><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><blockquote><p>条件：数据库已成功运行</p></blockquote><p><a href="https://github.com/aerospike-examples/aerospike-sample-applications">aerospike-sample-applications</a></p><p>导入客户端依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aerospike<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aerospike-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>简单测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.aerospike.client.AerospikeClient;<br><span class="hljs-keyword">import</span> com.aerospike.client.policy.WritePolicy;<br><span class="hljs-keyword">import</span> com.aerospike.client.Bin;<br><span class="hljs-keyword">import</span> com.aerospike.client.Key;<br><span class="hljs-keyword">import</span> com.aerospike.client.Record;<br><span class="hljs-keyword">import</span> com.aerospike.client.Value;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putRecordGetRecord</span> <span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">AerospikeClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AerospikeClient</span>(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">3000</span>);<br><br>        <span class="hljs-type">Key</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Key</span>(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;demo&quot;</span>, <span class="hljs-string">&quot;putgetkey&quot;</span>);<br>        <span class="hljs-type">Bin</span> <span class="hljs-variable">bin1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bin</span>(<span class="hljs-string">&quot;bin1&quot;</span>, <span class="hljs-string">&quot;value1&quot;</span>);<br>        <span class="hljs-type">Bin</span> <span class="hljs-variable">bin2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bin</span>(<span class="hljs-string">&quot;bin2&quot;</span>, <span class="hljs-string">&quot;value2&quot;</span>);<br><br>        <span class="hljs-comment">// Write a record</span><br>        client.put(<span class="hljs-literal">null</span>, key, bin1, bin2);<br><br>        <span class="hljs-comment">// Read a record</span><br>        <span class="hljs-type">Record</span> <span class="hljs-variable">record</span> <span class="hljs-operator">=</span> client.get(<span class="hljs-literal">null</span>, key);<br>        client.close();   <br>        System.out.println(<span class="hljs-string">&quot;Record values are:&quot;</span>);<br>        System.out.println(record);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><p><a href="https://github.com/aerospike/aerospike-dev-notebooks.docker">aerospike-dev-notebooks</a></p><p><a href="https://www.developer.aerospike.com/">https://www.developer.aerospike.com/</a></p><p><a href="https://github.com/aerospike-examples/aerospike-sample-applications">aerospike-sample-applications</a></p>]]></content>
    
    
    <categories>
      
      <category>中间件篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AeroSpike</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OS篇-Bochs在Ubuntu下的安装教程</title>
    <link href="/2021/02/15/yuque/md93nv/"/>
    <url>/2021/02/15/yuque/md93nv/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1657533165996-9d9d1352-27bf-4aae-b866-bdadadb4e9ca.png#averageHue=%23fcfcfc&clientId=u26876520-b8f1-4&from=markdown&id=MkSWy&originHeight=510&originWidth=892&originalType=url&ratio=1&rotation=0&showTitle=false&size=42914&status=done&style=none&taskId=ua8e87e14-fa1b-45d6-979d-9ff4c58d666&title=" alt="image.png"></p><blockquote><p>最近在看《操作系统真相还原》这本书，打算跟着做一个微型操作系统，就有了这篇教程</p></blockquote><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p><a href="https://mikeygithub.github.io/2021/02/26/os/OS%E7%AF%87-Bochs%E5%9C%A8Ubuntu%E4%B8%8B%E7%9A%84%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B">OS篇-Bochs在Ubuntu下的安装教程</a></p><h1 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h1><ul><li>下载</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://udomain.dl.sourceforge.net/project/bochs/bochs/2.6.2/bochs-2.6.2.tar.gz<br></code></pre></td></tr></table></figure><ul><li>解压</li></ul><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs latex">tar -zxvf bochs-2.6.2.tar.gz<br></code></pre></td></tr></table></figure><ul><li>配置</li></ul><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs latex">./configure <span class="hljs-keyword">\</span><br><span class="hljs-keyword"></span>--prefix=/your<span class="hljs-built_in">_</span>path/bochs <span class="hljs-keyword">\</span><br><span class="hljs-keyword"></span>--enable-debugger<span class="hljs-keyword">\</span><br><span class="hljs-keyword"></span>--enable-disasm <span class="hljs-keyword">\</span><br><span class="hljs-keyword"></span>--enable-iodebug <span class="hljs-keyword">\</span><br><span class="hljs-keyword"></span>--enable-x86-debugger <span class="hljs-keyword">\</span><br><span class="hljs-keyword"></span>--with-x <span class="hljs-keyword">\</span><br><span class="hljs-keyword"></span>--with-x11<br></code></pre></td></tr></table></figure><p>解释</p><blockquote><p>–prefix=/your_path/bochs 是用来指定 bochs 的安装目录,根据个人实际情况将 your_path 替换为自己待安装的路径。<br>–enable-debugger 打开 bochs 自己的调试器。<br>–enable-disasm 使 bochs 支持反汇编。<br>–enable-iodebug 启用 io 接口调试器。<br>–enable-x86-debugger 支持 x86 调试器。<br>–with-x 使用 x windows。<br>–with-x11 使用 x11 图形用户接口。</p></blockquote><ul><li>make install</li></ul><p>make install报错</p><p><code>x.cc:37:10: fatal error: X11/Xlib.h: No such file or directory #include &lt;X11/Xlib.h&gt; ^~~~~~~~~~~~</code><br>还报错<br><code>x.cc:42:10: fatal error: X11/extensions/Xrandr.h: No such file or directory #include &lt;X11/extensions/Xrandr.h&gt; ^~~~~~~~~~~~~~~~~~~~~~~~~</code></p><p>解决方法</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs latex">sudo apt-get install libx11-dev ................. for X11/Xlib.h<br>sudo apt-get install mesa-common-dev........ for GL/glx.h<br>sudo apt-get install libglu1-mesa-dev ..... for GL/glu.h<br>sudo apt-get install libxrandr-dev ........... for X11/extensions/Xrandr.h<br>sudo apt-get install libxi-dev ................... for X11/extensions/XInput.h<br></code></pre></td></tr></table></figure><h1 id="配置软件"><a href="#配置软件" class="headerlink" title="配置软件"></a>配置软件</h1><p>将安装目录下的配置文件<code>bochs/share/doc/bochs/bochsrc-sample.txt</code>复制到当前目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mv /home/mikey/bochs/share/doc/bochs/bochsrc-sample.txt ./bochsrc<br></code></pre></td></tr></table></figure><p>查看配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs shell">[work@localhost bochs]$ cat bochsrc<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">##############################################</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Configuration file <span class="hljs-keyword">for</span> Bochs</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">##############################################</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">第一步,首先设置 Bochs 在运行过程中能够使用的内存,本例为 32MB。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">关键字为:megs</span><br>megs: 32<br><span class="hljs-meta prompt_"># </span><span class="language-bash">第二步,设置对应真实机器的 BIOS 和 VGA BIOS。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">对应两个关键字为:romimage 和 vgaromimage</span><br>romimage: file=/实际路径/bochs/share/bochs/BIOS-bochs-latest<br>vgaromimage: file=/实际路径/bochs/share/bochs/VGABIOS-lgpl-latest<br><span class="hljs-meta prompt_"># </span><span class="language-bash">第三步,设置 Bochs 所使用的磁盘,软盘的关键字为 floppy。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">若只有一个软盘,则使用 floppya 即可,若有多个,则为 floppya,floppyb...</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">floppya: 1_44=a.img, status=inserted</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">第四步,选择启动盘符。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">boot: floppy</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">默认从软盘启动,将其注释</span><br>boot: disk<br><span class="hljs-meta prompt_">#</span><span class="language-bash">改为从硬盘启动。我们的任何代码都将直接写在硬盘上,所以不会再有读写软盘的操作。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">第五步,设置日志文件的输出。</span><br>log: bochs.out<br><span class="hljs-meta prompt_"># </span><span class="language-bash">第六步,开启或关闭某些功能。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">下面是关闭鼠标,并打开键盘。</span><br>mouse: enabled=0<br>keyboard_mapping: enabled=1,<br>map=/实际路径/bochs/share/bochs/keymaps/x11-pc-us.map<br><span class="hljs-meta prompt_"># </span><span class="language-bash">硬盘设置</span><br>ata0: enabled=1, ioaddr1=0x1f0, ioaddr2=0x3f0, irq=14<br><span class="hljs-meta prompt_"># </span><span class="language-bash">下面的是增加的 bochs 对 gdb 的支持,这样 gdb 便可以远程连接到此机器的 1234 端口调试了</span><br>gdbstub: enabled=1, port=1234, text_base=0, data_base=0, bss_base=0<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">##################配置文件结束#####################</span></span><br></code></pre></td></tr></table></figure><h1 id="测试开机"><a href="#测试开机" class="headerlink" title="测试开机"></a>测试开机</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs shell">mikey@mikey:~/bochs/bin$ ./bochs<br>========================================================================<br>                       Bochs x86 Emulator 2.6.2<br>                Built from SVN snapshot on May 26, 2013<br>                  Compiled on Feb 26 2021 at 11:34:31<br>========================================================================<br>00000000000i[     ] reading configuration from bochsrc<br>------------------------------<br>Bochs Configuration: Main Menu<br>------------------------------<br><br>This is the Bochs Configuration Interface, where you can describe the<br>machine that you want to simulate.  Bochs has already searched for a<br>configuration file (typically called bochsrc.txt) and loaded it if it<br>could be found.  When you are satisfied with the configuration, go<br>ahead and start the simulation.<br><br>You can also start bochs with the -q option to skip these menus.<br><br>1. Restore factory default configuration<br>2. Read options from...<br>3. Edit options<br>4. Save options to...<br>5. Restore the Bochs state from...<br>6. Begin simulation<br>7. Quit now<br><br>Please choose one: [6] 2<br><br>What is the configuration file name?<br>To cancel, type &#x27;none&#x27;. [bochsrc] <br>00000000000i[     ] reading configuration from bochsrc<br>------------------------------<br>Bochs Configuration: Main Menu<br>------------------------------<br><br>This is the Bochs Configuration Interface, where you can describe the<br>machine that you want to simulate.  Bochs has already searched for a<br>configuration file (typically called bochsrc.txt) and loaded it if it<br>could be found.  When you are satisfied with the configuration, go<br>ahead and start the simulation.<br><br>You can also start bochs with the -q option to skip these menus.<br><br>1. Restore factory default configuration<br>2. Read options from...<br>3. Edit options<br>4. Save options to...<br>5. Restore the Bochs state from...<br>6. Begin simulation<br>7. Quit now<br><br>Please choose one: [6] 6<br>00000000000i[     ] installing x module as the Bochs GUI<br>00000000000i[     ] Bochs x86 Emulator 2.6.2<br>00000000000i[     ]   Built from SVN snapshot on May 26, 2013<br>00000000000i[     ] Compiled on Feb 26 2021 at 11:34:31<br>00000000000i[     ] System configuration<br>00000000000i[     ]   processors: 1 (cores=1, HT threads=1)<br>00000000000i[     ]   A20 line support: yes<br>00000000000i[     ] IPS is set to 4000000<br>00000000000i[     ] CPU configuration<br>00000000000i[     ]   SMP support: no<br>00000000000i[     ]   level: 6<br>00000000000i[     ]   APIC support: xapic<br>00000000000i[     ]   FPU support: yes<br>00000000000i[     ]   MMX support: yes<br>00000000000i[     ]   3dnow! support: no<br>00000000000i[     ]   SEP support: yes<br>00000000000i[     ]   SSE support: sse2<br>00000000000i[     ]   XSAVE support: no <br>00000000000i[     ]   AES support: no<br>00000000000i[     ]   MOVBE support: no<br>00000000000i[     ]   ADX support: no<br>00000000000i[     ]   x86-64 support: no<br>00000000000i[     ]   MWAIT support: yes<br>00000000000i[     ] Optimization configuration<br>00000000000i[     ]   RepeatSpeedups support: no<br>00000000000i[     ]   Fast function calls: no<br>00000000000i[     ]   Handlers Chaining speedups: no<br>00000000000i[     ] Devices configuration<br>00000000000i[     ]   NE2000 support: no<br>00000000000i[     ]   PCI support: yes, enabled=yes<br>00000000000i[     ]   SB16 support: no<br>00000000000i[     ]   USB support: no<br>00000000000i[     ]   VGA extension support: vbe<br>00000000000i[MEM0 ] allocated memory at 0x7f7ad1cea010. after alignment, vector=0x7f7ad1ceb000<br>00000000000i[MEM0 ] 32.00MB<br>00000000000i[MEM0 ] mem block size = 0x00100000, blocks=32<br>00000000000i[MEM0 ] rom at 0xfffe0000/131072 (&#x27;/home/mikey/bochs/share/bochs/BIOS-bochs-latest&#x27;)<br>00000000000i[     ] init_dev of &#x27;pci&#x27; plugin device by virtual method<br>00000000000i[DEV  ] i440FX PMC present at device 0, function 0<br>00000000000i[     ] init_dev of &#x27;pci2isa&#x27; plugin device by virtual method<br>00000000000i[DEV  ] PIIX3 PCI-to-ISA bridge present at device 1, function 0<br>00000000000i[     ] init_dev of &#x27;cmos&#x27; plugin device by virtual method<br>00000000000i[CMOS ] Using local time for initial clock<br>00000000000i[CMOS ] Setting initial clock to: Fri Feb 26 11:58:08 2021 (time0=1614311888)<br>00000000000i[     ] init_dev of &#x27;dma&#x27; plugin device by virtual method<br>00000000000i[DMA  ] channel 4 used by cascade<br>00000000000i[     ] init_dev of &#x27;pic&#x27; plugin device by virtual method<br>00000000000i[     ] init_dev of &#x27;pit&#x27; plugin device by virtual method<br>00000000000i[     ] init_dev of &#x27;floppy&#x27; plugin device by virtual method<br>00000000000i[DMA  ] channel 2 used by Floppy Drive<br>00000000000i[     ] init_dev of &#x27;vga&#x27; plugin device by virtual method<br>00000000000i[MEM0 ] Register memory access handlers: 0x0000000a0000 - 0x0000000bffff<br>00000000000i[VGA  ] interval=200000<br>00000000000i[MEM0 ] Register memory access handlers: 0x0000e0000000 - 0x0000e0ffffff<br>00000000000i[BXVGA] VBE Bochs Display Extension Enabled<br>00000000000i[XGUI ] test_alloc_colors: 16 colors available out of 16 colors tried<br>00000000000i[XGUI ] font 8 wide x 16 high, display depth = 24<br>00000000000i[MEM0 ] rom at 0xc0000/41472 (&#x27;/home/mikey/bochs/share/bochs/VGABIOS-lgpl-latest&#x27;)<br>00000000000i[     ] init_dev of &#x27;acpi&#x27; plugin device by virtual method<br>00000000000i[DEV  ] ACPI Controller present at device 1, function 3<br>00000000000i[     ] init_dev of &#x27;ioapic&#x27; plugin device by virtual method<br>00000000000i[IOAP ] initializing I/O APIC<br>00000000000i[MEM0 ] Register memory access handlers: 0x0000fec00000 - 0x0000fec00fff<br>00000000000i[IOAP ] IOAPIC enabled (base address = 0xfec00000)<br>00000000000i[     ] init_dev of &#x27;keyboard&#x27; plugin device by virtual method<br>00000000000i[KBD  ] will paste characters every 400 keyboard ticks<br>00000000000i[     ] init_dev of &#x27;harddrv&#x27; plugin device by virtual method<br>00000000000i[HD   ] HD on ata0-0: &#x27;disk.img&#x27;, &#x27;flat&#x27; mode<br>00000000000p[HD   ] &gt;&gt;PANIC&lt;&lt; ata0-0: could not open hard drive image file &#x27;disk.img&#x27;<br>========================================================================<br>Bochs is exiting with the following message:<br>[HD   ] ata0-0: could not open hard drive image file &#x27;disk.img&#x27;<br>========================================================================<br>00000000000i[CTRL ] quit_sim called with exit code 1<br></code></pre></td></tr></table></figure><p>因为还没有设置启动盘所以报错，但是可以看到GUI界面还是挺激动的是吧哈哈哈哈</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/image-20210226120003077.png#id=vqNea&originHeight=643&originWidth=1043&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h1 id="创建启动盘"><a href="#创建启动盘" class="headerlink" title="创建启动盘"></a>创建启动盘</h1><p>使用<code>bin/bximage</code>进行创建</p><blockquote><p>-fd 创建软盘。<br>-hd 创建硬盘。<br>-mode 创建硬盘的类型,有 flat、sparse、growing 三种。<br>-size 指创建多大的硬盘,以 MB 为单位。<br>-q 以静默模式创建,创建过程中不会和用户交互</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">bin/bximage -hd -mode=&quot;flat&quot; -size=60 -q hd60M.img<br></code></pre></td></tr></table></figure><p>这个命令串中最后一个 hd60M.img 是咱们创建的虚拟硬盘的名称。</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/image-20210226121421416.png#id=tqrQm&originHeight=424&originWidth=794&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>修改配置文件</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/image-20210226122039438.png#id=MpTgo&originHeight=618&originWidth=1042&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>重新启动<code>./bochs -f bochsrc</code>查看效果</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/image-20210226122004018.png#id=i8Aqp&originHeight=614&originWidth=1038&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h1 id="编写MBR"><a href="#编写MBR" class="headerlink" title="编写MBR"></a>编写MBR</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim mbr.S<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs bash">;主引导程序<br>;------------------------------------------------------------<br>SECTION MBR vstart=0x7c00<br>mov ax,cs<br>mov ds,ax<br>mov es,ax<br>mov ss,ax<br>mov fs,ax<br>mov sp,0x7c00<br>; 清屏利用 0x06 号功能,上卷全部行, 则可清屏 。<br>; -----------------------------------------------------------<br>;INT 0x10<br>;功能号:0x06<br>;功能描述:上卷窗口<br>;------------------------------------------------------<br>;输入:<br>;AH 功能号= 0x06<br>;AL = 上卷的行数(如果为 0,表示全部)<br>;BH = 上卷行属性<br>;(CL,CH) = 窗口左上角的(X,Y)位置<br>;(DL,DH) = 窗口右下角的(X,Y)位置<br>;无返回值:<br>mov ax, 0x600<br>mov bx, 0x700<br>mov cx, 0<br>; 左上角: (0, 0)<br>mov dx, 0x184f<br>; 右下角: (80,25),<br>; VGA 文本模式中,一行只能容纳 80 个字符,共 25 行 。<br>; 下标从 0 开始,所以 0x18=24,0x4f=79<br>int 0x10<br>; int 0x10<br>;;;;;;;;;<br>;下面这三行代码获取光标位置<br>;;;;;;;;;<br>;.get_cursor 获取当前光标位置,在光 标位置处打印字符 。<br>mov ah, 3<br>; 输入: 3 号子功能是获取光标位置,需要存入 ah 寄存器<br>mov bh, 0<br>; bh 寄存器存储的是待获取光标的页号<br>; 输出: ch=光标开始行,cl=光标结束行<br>; dh=光标所在行号,dl=光标所在列号<br>int 0x10<br>;;;;;;;;;<br>;获取光标位置结束<br>;;;;;;;;;;;;;;;;<br>;;;;;;;;;<br>;打印字符串<br>;;;;;;;;;;;<br>;还是用 10h 中断,不过这次调用 13 号子功能打印字符串<br>mov ax, message<br>mov bp, ax<br>; es:bp 为串首地址,es 此时同 cs 一致,<br>; 开头时已经为 sreg 初始化<br>; 光标位置要用到 dx 寄存器中内容,cx 中的光标位置可忽略<br>mov cx, 5<br>; cx 为串长度,不包括结束符 0 的字符个数<br>mov ax, 0x1301<br>;子功能号 13 显示字符及属性,要存入 ah 寄存器,<br>; al 设置写字符方式 ah=01: 显示字符串,光标跟随移动<br>mov bx, 0x2<br>; bh 存储要显示的页号,此处是第 0 页,<br>; bl 中是字符属性,属性黑底绿字(bl = 02h)<br>int 0x10<br>; 执行 BIOS 0x10 号中断<br>;;;;;;;;;<br>;打字字符串结束<br>;;;;;;;;;;;;;;;<br>; 使程序悬停在此<br>jmp $<br>message db <span class="hljs-string">&quot;1 MBR&quot;</span><br><span class="hljs-built_in">times</span> 510-($-$$) db 0<br>db 0x55,0xaa<br></code></pre></td></tr></table></figure><p>编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nasm -o mbr.bin mbr.S<br></code></pre></td></tr></table></figure><p>查看其大小为512k</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls -lb mbr.bin<br></code></pre></td></tr></table></figure><p>配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dd if=/home/mikey/bochs/bin/mbr.bin of=/home/mikey/bochs/bin/hd60M.img bs=512 count=1 conv=notrunc<br></code></pre></td></tr></table></figure><p>查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./bochs -f bochsrc<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/image-20210226142846512.png#id=ycBUv&originHeight=619&originWidth=1037&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>即可完成一个简单MBR的编写</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>《操作系统真相还原》</p><p><a href="https://www.cnblogs.com/lfri/p/11489223.html">Ubuntu 16.04LTS 安装和配置Bochs</a></p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Bochs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux篇-Linux操作系统教程</title>
    <link href="/2021/02/01/yuque/ir54qb/"/>
    <url>/2021/02/01/yuque/ir54qb/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/2630542/1657548313851-20957688-ea81-4e22-82ec-44086900c4fc.jpeg#averageHue=%2333394b&clientId=u5360bbb0-114c-4&from=markdown&id=HtL8s&originHeight=328&originWidth=616&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=u3e0266d2-913c-4f61-a269-0461a404388&title="></p><h1 id="第1章-Linux概述"><a href="#第1章-Linux概述" class="headerlink" title="第1章 Linux概述"></a>第1章 Linux概述</h1><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/image-20210226185336241.png#id=eNqoq&originHeight=384&originWidth=528&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><ul><li>操作系统（Operation System，简称OS）是管理计算机硬件与软件资源的程序，是计算机系统的内核与基石。</li><li>操作系统本质上是运行在计算机上的软件程序 ；</li><li>为用户提供一个与系统交互的操作界面 ；</li><li>操作系统分内核与外壳 ：</li></ul><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>目前最流行的个人桌面操作系统 。</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/image-20210226185613561.png#id=gvoNl&originHeight=308&originWidth=428&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="Unix"><a href="#Unix" class="headerlink" title="Unix"></a>Unix</h2><p>最早的多用户、多任务操作系统</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/image-20210226185620701.png#id=ZNxnT&originHeight=509&originWidth=668&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><ul><li>类Unix系统：Linux是一种自由、开放源码的类似Unix的操作系统</li><li>Linux内核：严格来说，Linux这个词本身只表示Linux内核</li></ul><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/image-20210226185743281.png#id=ZVY5f&originHeight=153&originWidth=178&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><ul><li>1991年，芬兰的业余计算机爱好者Linus Torvalds</li><li>编写了一款类似Minix的系统（基于微内核架构的类Unix操作系统）</li><li>被ftp管理员命名为Linux</li><li>加入到自由软件基金的GNU计划中</li><li>Linux以一只可爱的企鹅作为标志，象征着敢作敢为、热爱生活。</li></ul><p><code>内核版本</code></p><p>Linux内核版本由3个数字组成：a.b.c ：</p><p>a：当前发布的内核主版本；<br>b：偶数表示稳定版，奇数表示开发中的版本；<br>c：错误修补的次数。</p><p>Linux内核在内核官方网站<a href="http://www.kerenl.org上发布/">www.kerenl.org上发布</a></p><table><thead><tr><th><strong>内核版本</strong></th><th><strong>日期</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>0.00</td><td>1991.2.4</td><td>两个进程，分别显示AAA和BBB</td></tr><tr><td>0.01</td><td>1991.9</td><td>第一个向外公布的Linux内核版本</td></tr><tr><td>0.02</td><td>1991.10.5</td><td>Linux第一个稳定的工作版本</td></tr><tr><td>0.11</td><td>1991.12.8</td><td>基本可以正常运行的内核版本</td></tr><tr><td>0.12</td><td>1992.1.15</td><td>主要加入数学协处理器的软件模拟程序</td></tr><tr><td>0.95(0.13)</td><td>1992.3.8</td><td>开始加入虚拟文件系统思想的内核版本</td></tr><tr><td>2.0</td><td>1996.2.9</td><td>支持多处理器</td></tr><tr><td>2.2</td><td>1999.1.26</td><td>支持许多新的文件系统类型，使用全新的文件缓存机制</td></tr><tr><td>2.4</td><td>2001.1.4</td><td>使用一种适应性很强的资源管理系统</td></tr><tr><td>2.6</td><td>2003.12.7</td><td>性能、安全性和驱动程序进行改进</td></tr><tr><td>2.6.30</td><td>2009.6</td><td>改善文件系统、加入完整性检验补丁、线程中断处理支持等</td></tr><tr><td>2.6.32</td><td>2009.12</td><td>改进Btrfs文件系统、内存控制器支持、运行时电源管理</td></tr><tr><td>2.6.34</td><td>2010.5</td><td>支持flash设备文件系统、新的Vhost net、新的perf功能等</td></tr><tr><td>2.6.38</td><td>2011.3.15</td><td>合并自动进程分组、优化进程调度，改善VFS虚拟文件系统可扩展性，透明化内存Huge Pages使用过程，实现按需自动调用等</td></tr></tbody></table><h2 id="Linux发行版"><a href="#Linux发行版" class="headerlink" title="Linux发行版"></a>Linux发行版</h2><h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/image-20210226190142767.png#id=BNGAk&originHeight=1080&originWidth=1920&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>Ubuntu Linux系统具有如下特色：</p><ul><li><code>系统安全性高</code>，采用“sudo”工具，所有系统相关的任务均需要使用此指令，并输入密码，比起传统系统以管理员账号进行管理工作具有更大的安全性。</li><li><code>统易用性强</code>，传统的Linux系统软件安装和删除经常需要用户自己解决软件的依赖性问题，Ubuntu采用APT系统可轻松进行软件安装和删除。</li><li><code>供多种安装方式</code>，可以直接裸机安装或在虚拟机上进行安装，也可以通过安装程序提供的wubi.exe程序在Windows上进行安装，这为初学者学习和研究Linux带来了便利</li><li><code>界面友好</code>，Ubuntu提供的桌面操作方式特别适合熟悉Windows的用户，初学者易于上手</li></ul><hr><p>Ubuntu 每六个月发布一个新版本，用户可以免费升级到最新版本 。<br>Ubuntu版本的命名遵从“Y.MM (开发代号)”格式，Y代表年份，MM代表月份 。<br>由于受到来自官方的和非官方的社区支持，Ubuntu还有不少衍生版本 。</p><hr><p>流行的官方衍生版 ：</p><ul><li>Kubuntu：基于KDE桌面环境。与Ubuntu的唯一区别在于桌面环境。</li><li>Edubuntu：用于教育的衍生版，内置的软件全部免费</li><li>Xubuntu：基于XFce桌面环境。</li><li>Ubuntu Studio：更适合于多媒体设计人员的衍生版。</li></ul><h3 id="Redhat"><a href="#Redhat" class="headerlink" title="Redhat"></a>Redhat</h3><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/image-20210226190256321.png#id=ztTlK&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>美国的“红帽子”公司，1995年发布了桌面版的Red Hat Linux2.0 ；<br>2003年，Red Hat Linux9.0发布 ；<br>2004年，Red Hat公司正式决定停止对Red Hat Linux9.0的支持；<br>原本的桌面版Red Hat Linux发行包则与来自民间的Fedora计划合并，成为Fedora Core发行版</p><h3 id="Fedora"><a href="#Fedora" class="headerlink" title="Fedora"></a>Fedora</h3><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/image-20210226190326510.png#id=m8p82&originHeight=442&originWidth=592&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>由Fedora Project社区开发、Red Hat公司赞助一个开放的、创新的Linux操作系统，它允许任何人自由地使用、修改和重发布 。</p><h3 id="OpenSuse"><a href="#OpenSuse" class="headerlink" title="OpenSuse"></a>OpenSuse</h3><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/image-20210226190441643.png#id=v8bQV&originHeight=480&originWidth=647&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>最早是由德国的四个Linux爱好者推出的项目，2003年被Novell公司收购。<br>OpenSUSE向用户提供了漂亮的桌面环境，并提供了优秀的系统管理工具YaST。</p><h3 id="Debian"><a href="#Debian" class="headerlink" title="Debian"></a>Debian</h3><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/image-20210226190506322.png#id=y8Nmf&originHeight=448&originWidth=712&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>创始人是伊恩默多克（Ian Murdock）。<br>发行版提供众多的软件包-deb包。<br>Ubuntu就是基于Debian发行版，两者使用APT作为软件管理系统。</p><h3 id="Mandriva"><a href="#Mandriva" class="headerlink" title="Mandriva"></a>Mandriva</h3><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/image-20210226190536314.png#id=trqHc&originHeight=427&originWidth=560&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>法国的Mandriva公司开发 。<br>众多国际级Linux发行版中唯一一个默认即支持中文环境的Linux。</p><h2 id="Linux和Windows的相似之处"><a href="#Linux和Windows的相似之处" class="headerlink" title="Linux和Windows的相似之处"></a>Linux和Windows的相似之处</h2><ul><li>都是多用户操作系统，都可以由许多不同的用户来使用，都可以以组成员的方式来控制资源的访问权限；</li><li>都支持多文件系统，文件资源可以通过FTP或者其他协议与其他客户机共享；</li><li>都支持多种网络协议，比如TCP/IP、NetBIOS等；</li><li>都可以提供网络服务能力，如DHCP和DNS等。</li></ul><h2 id="Linux和Windows的不同之处"><a href="#Linux和Windows的不同之处" class="headerlink" title="Linux和Windows的不同之处"></a>Linux和Windows的不同之处</h2><table><thead><tr><th><strong>比较项</strong></th><th><strong>Linux</strong></th><th><strong>Windows</strong></th></tr></thead><tbody><tr><td>定位</td><td>Linux的设计定位是网络，设计灵感来自于网络操作系统Unix，因此它的命令的设计比较简单、简洁。由于纯文本可以非常好地跨网络工作，所以Linux配置文件和数据都以文本为基础</td><td>Windows最初的目标是家庭和办公应用，例如打印、图形化服务</td></tr><tr><td>图形用户界面</td><td>图形环境并没有集成到Linux内核中，而是运行于系统之上的单独一层，这意味着可以在需要时再运行GUI</td><td>Windows是把GUI直接集成到操作系统内的</td></tr><tr><td>文件扩展名</td><td>Linux不使用文件扩展名来识别文件的类型，而是根据文件头的内容来识别其类型</td><td>使用文件扩展名来识别文件的类型</td></tr><tr><td>文件执行</td><td>Linux通过文件访问权限来判断是否为可执行文件。程序和脚本（其实是文本文件）的创建者或管理员可以将需要执行的文件赋予可执行权限，这样做有利于安全。保存到系统上的可执行文件不能自动执行，因此可以防止许多脚本病毒</td><td>对于Windows来说用户双击.exe为扩展名的文件系统都尝试加载执行</td></tr><tr><td>系统重启问题</td><td>Linux的设计思想之一是，遵循“牛顿运动定律”，一旦开始运行，它将保持运行状态，直到受到外界因素的干扰，比如硬件故障。除了内核之外，其他软件的安装、卸载都不需要重新引导系统</td><td>Windows在安装软件，特比是安装驱动程序后，经常需要重启系统</td></tr><tr><td>远程管理</td><td>可以远程地完成Linux中的很多工作。只要系统的基本网路服务在运行，就可以远程登录并管理系统。如果系统中一个特定的服务出现了问题，可以在进行故障诊断的同时让其他服务继续运行：当在一个系统上同时运行多个服务的时候（例如同时运行FTP、DNS、WWW服务），这种管理方式非常重要</td><td>Windows的远程管理功能较弱</td></tr></tbody></table><h1 id="第2章-基本操作"><a href="#第2章-基本操作" class="headerlink" title="第2章 基本操作"></a>第2章 基本操作</h1><h2 id="软件包"><a href="#软件包" class="headerlink" title="软件包"></a>软件包</h2><p>Internet上有专门为Ubuntu建立的软件包仓库，其中包含大量的软件包，它们按照是否遵守GPL协议分成四种类型：</p><table><thead><tr><th><strong>类型</strong></th><th><strong>特点</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>main（主要）</td><td>开源软件，可以被自由发布</td><td>Ubuntu开发团队提供完全技术支持的软件</td></tr><tr><td>restricted（受限）</td><td>专供特殊用途的软件</td><td>被Ubuntu开发团队支持，但因为不能直接修改程序，因而Ubuntu可能不能提供完全的技术支持。一般主要是硬件驱动程序</td></tr><tr><td>universe（公共）</td><td>自由发布</td><td>可以和“main”软件相安无事地共同运行，但没有安全升级的保障</td></tr><tr><td>multiverse（多元化）</td><td>不开源、不允许自由发布</td><td>不被Ubuntu开发团队支持，用户自己承担任何版权和技术风险</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/image-20210226191433268.png#id=H6OpE&originHeight=497&originWidth=680&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="Linux桌面"><a href="#Linux桌面" class="headerlink" title="Linux桌面"></a>Linux桌面</h2><p>X Window：是Unix/Linux中的底层图形界面系统 ；</p><h2 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h2><p>Shell命令可以分为内部命令和外部命令：</p><ul><li>内部命令，也称作内置命令，是Shell程序的一部分，其中包含的是一些比较简单的Linux系统命令，这些命令在Shell程序内部完成运行。</li><li>外部命令，是Linux系统中的实用应用程序，命令的可执行实体不在Shell内部，但是其执行过程由Shell控制。</li></ul><p><code>可以通过“which”命令来判断某个命令是否是外部命令</code></p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/image-20210226191706371.png#id=blg85&originHeight=198&originWidth=530&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><ul><li>man命令，用于查看外部命令的帮助手册。</li><li>help命令，用于查看内部命令的帮助手册</li></ul><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/image-20210226220920398.png#id=QfVvs&originHeight=289&originWidth=760&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install xxxx<br></code></pre></td></tr></table></figure><p>卸载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt remove xxxx<br></code></pre></td></tr></table></figure><h2 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h2><table><thead><tr><th><strong>类型</strong></th><th><strong>命令</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>进入vim</td><td>vim</td><td>启动vim</td></tr><tr><td>vim 文件名</td><td>启动vim并打开或新建文件</td><td></td></tr><tr><td>光标移动</td><td>h</td><td>向左移动一个字符</td></tr><tr><td>j</td><td>向下移动一行</td><td></td></tr><tr><td>k</td><td>向上移动一行</td><td></td></tr><tr><td>l</td><td>向右移动以行</td><td></td></tr><tr><td>0</td><td>移动到行开始（注意是数字0，不是字母o）</td><td></td></tr><tr><td>$</td><td>移动到行尾</td><td></td></tr><tr><td>屏幕翻滚</td><td>Ctrl+u</td><td>向文件首翻半屏</td></tr><tr><td>Ctrl+d</td><td>向文件尾翻半屏</td><td></td></tr><tr><td>Ctrl+f</td><td>向文件尾翻一屏</td><td></td></tr><tr><td>Ctrl+b</td><td>向文件首翻一屏</td><td></td></tr><tr><td>文本插入/追加</td><td>a</td><td>在光标后追加文本</td></tr><tr><td>A</td><td>在当前行尾追加</td><td></td></tr><tr><td>i</td><td>在光标前插入</td><td></td></tr><tr><td>I</td><td>在当前行首插入</td><td></td></tr><tr><td>o</td><td>在当前行下面新开一行</td><td></td></tr><tr><td>O</td><td>在当前行上面新开一行</td><td></td></tr><tr><td>文本删除</td><td>dd</td><td>删除当前行</td></tr><tr><td>dw</td><td>删除一个单词</td><td></td></tr><tr><td>nx</td><td>删除光标后n个字符，例如3x</td><td></td></tr><tr><td>nX</td><td>删除光标前n个字符，例如3X</td><td></td></tr><tr><td>撤销/重做</td><td>u</td><td>恢复上一个命令以前的状态，可以多次按下u命令</td></tr><tr><td>.</td><td>重复一条命令</td><td></td></tr><tr><td>搜索</td><td>/字符串</td><td>向下搜索字符串</td></tr><tr><td>?字符串</td><td>向上搜索字符串</td><td></td></tr><tr><td>n</td><td>继续搜索</td><td></td></tr><tr><td>N</td><td>继续向相反防线搜索</td><td></td></tr><tr><td>替换</td><td>:s/p1/p2/g</td><td>将当前行中所有p1均用p2替换</td></tr><tr><td>:n1,n2s/p1/p2/g</td><td>将底n1至n2行中所有p1均用p2替换</td><td></td></tr><tr><td>:g/p1/s//p2/g</td><td>将文件中所有p1均用p2替换</td><td></td></tr><tr><td>复制/粘贴</td><td>nyy</td><td>将当前n行放入缓冲区</td></tr><tr><td>p</td><td>将缓冲区的内容放到当前行下面</td><td></td></tr><tr><td>保存文件</td><td>w</td><td>存盘</td></tr><tr><td>w 文件名</td><td>存盘至文件</td><td></td></tr><tr><td>退出vim</td><td>q</td><td>退出</td></tr><tr><td>wq</td><td>保存退出</td><td></td></tr><tr><td>q!</td><td>强制退出</td><td></td></tr></tbody></table><h1 id="第3章-文件系统"><a href="#第3章-文件系统" class="headerlink" title="第3章 文件系统"></a>第3章 文件系统</h1><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/image-20210226223834451.png#id=RO3qt&originHeight=315&originWidth=823&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>命令行打开文件管理系统GUI</p><blockquote><p>nautilus</p></blockquote><ul><li>当用户登录Linux时或在Ubuntu上打开一个终端后，首先进入一个特殊目录，称为“用户主目录” ；</li><li>Linux规定可以用符号“~”表示当前登录用户的“用户主目录”。</li><li>当前所在的目录称为“当前工作目录”。当前工作目录可以用“.”表示，当前工作目录的父目录可以用“..”表示。</li></ul><p>对每个执行的命令，Linux系统都会自动打开3个文件，并且都有一个小的整数与之对应 ：</p><ul><li>stdin，标准输入文件，一般指键盘输入，用0表示；</li><li>stdout，标准输出文件，一般指显示器，用1表示；</li><li>stderr，标准错误输出文件，一般指显示器，用2表示。</li></ul><h2 id="比较文件"><a href="#比较文件" class="headerlink" title="比较文件"></a>比较文件</h2><p>diff命令用来比较两个文件的内容，通过把其中一个文件转换成另一个文件的命令的形式来显示这两个文件之间的区别<br>示例 ：使用Gedit或vim在当前用户主目录下创建两个文件t1.txt和t2.txt，然后使用命令比较两个文件的内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">diff t1.txt t2.txt<br></code></pre></td></tr></table></figure><h2 id="删除重复行"><a href="#删除重复行" class="headerlink" title="删除重复行"></a>删除重复行</h2><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/image-20210226224321037.png#id=TspdU&originHeight=370&originWidth=723&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="访问权限"><a href="#访问权限" class="headerlink" title="访问权限"></a>访问权限</h2><p>1、访问权限的分类：</p><ul><li>可读（r）</li><li>可写（w）</li><li>可执行（x）三种</li></ul><p>2、访问权限的用户类别，有三种不同的类型的用户可对文件或目录进行访问：</p><ul><li>文件所有者</li><li>同组用户</li><li>其他用户</li></ul><p>3、访问权限的表示：<br>共有10个字符组成，第一个字符指定了文件类型。剩下的是文件或目录的访问权限，分为三组，每组用三位表示，分别为：</p><ul><li>文件所有者的读、写和执行权限</li><li>与文件所有者同组的用户的读、写和执行权限</li><li>系统中其他用户的读、写和执行权限</li></ul><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/image-20210226224517215.png#id=mXmwW&originHeight=234&originWidth=712&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>在Linux中，可以使用命令chmod来改变文件或目录的访问权限。<br>语法格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod [选项] [mode] &lt;文件或目录&gt;<br></code></pre></td></tr></table></figure><p>常用选项有 ：</p><ul><li> -c  若该档案权限确实已经更改，才显示其更改动作 ； </li><li> -f  若该档案权限无法被更改也不要显示错误信息； </li><li> -v  显示权限变更的详细资料； </li><li> -R  对目前目录下的所有档案与子目录进行相同的权限变更（即以递归的方式逐个变更）； </li><li> mode是权限标记，可以有两种格式：符号标记和八进制数； </li><li> 文件或目录，是要设置的文件名或目录名，必须输入。 </li></ul><p>使用符号标记法修改权限时，chmod命令中的mode是由<code>[who] [operator] [permission]</code>三部分组成。其中：<br>操作对象[who]可以是下述字母中任何一个或者它们的组合：</p><ul><li>u，表示“用户（user）”，即文件或目录的所有者；</li><li>g，表示“同组（group）用户”，即与文件所有者同组的所有者；</li><li>o，表示“其他（other）用户”；</li><li>a，表示“所有（all）用户”，它是系统默认值。</li></ul><p>其中：操作符<code>[operator]</code>可以是：</p><ul><li>+，添加某个权限；</li><li>-，取消某个权限；</li><li>=，赋予给定权限并取消其他权限,即设定唯一的权限；</li></ul><p>其中需要[permission]所表示的权限可用下述字母的任何一个或任意的组合：</p><ul><li>r，可读 ；</li><li>w，可写 ；</li><li>x，可执行 ；</li></ul><p>八进制数法修改权限<br>使用八进制数法修改权限时，chmod命令中的mode用三个八进制数abc表示，其中：</p><ul><li>a表示用户（user）的权限；</li><li>b表示同组（group）用户的权限；</li><li>c表示其他（other）的权限</li></ul><p>而八进制数是4（可读）、2（可写）、1（可执行）的组合。因此：</p><ul><li>若要读、写、执行权限（rwx），则4+2+1=7；</li><li>若要读、写权限（rw-），则4+2=6；</li><li>若要读、执行权限（r-x），则4+1=5</li></ul><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>正则表达式：描述了一种字符串匹配的模式，可以用来检查一个串是否含有某种子串、将匹配的子串做替换或者从某个串中取出符合某个条件的子串等；<br>支持正则表达式的常用工具有grep、egrep、vim等，尤其是egrep能较好地支持正则表达式，而grep对正则表达式支持的较少</p><table><thead><tr><th><strong>符号</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>\</td><td>将下一字符标记为特殊字符、文本、八进制转义符。例如，“n”匹配字符“n”，“\n”匹配换行符</td></tr><tr><td>^</td><td>匹配输入字符串开始的位置。例如，“^st”匹配以st开始的行</td></tr><tr><td>$</td><td>匹配输入字符串结尾的位置。例如，“st$”匹配以st结尾的行</td></tr><tr><td>*</td><td>零次或多次匹配前面的字符或表达式，例如，“zo*”匹配“z”和“zoo”</td></tr><tr><td>+</td><td>一次或多次匹配前面的字符或表达式，例如“zo+”与“zo”和“zoo”匹配，但与“z”不匹配</td></tr><tr><td>？</td><td>零次或一次匹配与前面的字符或表达式，例如“do?”匹配“do”或“does”中的“do”</td></tr><tr><td>{n}</td><td>n是非负整数，正好匹配n次，例如，“o｛2｝”与“Bob”中的“o”不匹配，但与“food”中的两“o”匹配</td></tr><tr><td>｛n，m｝</td><td>m和n是非负整数，其中n&lt;=m。匹配至少n次，至多m次，例如“o｛1，3｝”匹配“foooood”中的前三个“o”</td></tr><tr><td>x&#124;y</td><td>匹配x或y。例如“z&#124;food”匹配“z”或“food”，“(z&#124;f)ood”匹配“zood”或“food”</td></tr><tr><td>[a-z]</td><td>字符范围，匹配指定范围内的任何字符，例如，“[a-z]”匹配“a”到“z”范围内的任何小写字母</td></tr><tr><td>[^a-z]</td><td>反向字符范围。匹配不在指定范围内的任何字符，例如“[^a-z]”匹配任何不在“a”到“z”范围内的任何字符</td></tr><tr><td>\b</td><td>匹配一个字边界，例如，“er\b”匹配“never”中的“er”，但不匹配“verb”中的“er”</td></tr><tr><td>\B</td><td>非字边界匹配，例如，“er\B”匹配“verb”中的“er”，但不匹配“never”中的“er”</td></tr><tr><td>\f</td><td>换页符匹配</td></tr><tr><td>\f</td><td>换页符匹配</td></tr><tr><td>\d</td><td>数字字符匹配，等效于[0-9]</td></tr><tr><td>\D</td><td>非数字字符匹配，等效于[^0-9]</td></tr><tr><td>\n</td><td>换行符匹配</td></tr><tr><td>\r</td><td>匹配一个回车符</td></tr><tr><td>\s</td><td>匹配任何空白字符，包括空格，制表符，换页符等。</td></tr><tr><td>\t</td><td>制表符匹配</td></tr><tr><td>\w</td><td>匹配任何字类字符</td></tr><tr><td>\W</td><td>匹配任何非字类字符</td></tr></tbody></table><h2 id="文件内容查找"><a href="#文件内容查找" class="headerlink" title="文件内容查找"></a>文件内容查找</h2><p>搜索文件内容的命令有grep、egrep和fgrep，三个命令中：</p><ul><li> fgrep命令是执行速度最快的，不过有较多的限制； </li><li> egrep是最慢的，但却是最灵活的，完全支持正则表达式； </li><li> grep具有合理的速度和部分正则表达式支持 </li></ul><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/image-20210226230830381.png#id=IFYKz&originHeight=178&originWidth=838&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>其中：<br>常用选项：<br>-c：显示匹配的行数；<br>-n：显示匹配内容所在的文档的行号；<br>-i：匹配时忽略大小写；<br>-v：输出不匹配内容；<br>-x：只选择能匹配完整一行的匹配。</p><p>其中：<br>模式，可以使用正则表达式描述字符串匹配的模式。<br>常用的正则表达式操作符有：<br>‘’：匹配的字符串在行首，如：‘xyz’匹配所有以xyz开头的行<br>‘<img src="https://g.yuque.com/gr/latex?%E2%80%99%EF%BC%9A%E5%8C%B9%E9%85%8D%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9C%A8%E8%A1%8C%E5%B0%BE%EF%BC%8C%E5%A6%82%EF%BC%9A%E2%80%98xyz#card=math&code=%E2%80%99%EF%BC%9A%E5%8C%B9%E9%85%8D%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9C%A8%E8%A1%8C%E5%B0%BE%EF%BC%8C%E5%A6%82%EF%BC%9A%E2%80%98xyz&id=WqPb4">’匹配所有以xyz结尾的行<br>‘&lt;’：指匹配表达式的开始，如：‘&lt;man’匹配‘manic’ 等<br>。。。</p><p>其中：<br>文件列表，是要查找的文件名列表。<br>如果没有文件列表，则从标准输入中读入数据<br>当使用“grep –E”等同于使用egrep；<br>当使用“grep -F”等同于使用fgrep。</p><p>2、关于引号的使用<br>一般情况下当grep命令格式中的“模式”是一个不包含空格的简单字符串时，既可以使用单引号也可以使用双引号，或者甚至不适用引号<br>例如查找在abn文件中查找包含字符串hello的行，以下三个命令是等价的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">grep  hello  abn<br>grep &#x27;hello&#x27; abn<br>grep &quot;hello&quot; abn<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">grep ‘$hello’ abn  #查找abn文件中包含字符串$hello的行<br>grep “$hello” abn  #查找abn文件中包含变量hello所代表的内容的行<br>grep  $hello  abn  #同上，与命令“grep  &quot;$hello&quot;  abn”意义相同<br></code></pre></td></tr></table></figure><h2 id="文件排序"><a href="#文件排序" class="headerlink" title="文件排序"></a>文件排序</h2><p>Linux中文件排序使用sort命令，该命令可以对文件内容进行排序输出，但不改变文件原有内容。其语法格式如下</p><p><code>sort [选项] &lt;文件或目录&gt;</code></p><p>其中：<br>常用选项有：<br>-r，以反向的顺序来排序<br>-u，排序输出时，去掉重复行<br>文件或目录，是需要排序的文件名或目录名。</p><h2 id="文件压缩与解压缩"><a href="#文件压缩与解压缩" class="headerlink" title="文件压缩与解压缩"></a>文件压缩与解压缩</h2><p>文件压缩的命令有：<code>gzip</code>、<code>gzexe</code>、<code>zcat</code>。<br>本小结介绍gzip命令的应用。其语法格式如下</p><p><code>gzip [选项] &lt;文件列表&gt;</code></p><p>其中：<br>常用选项有：<br>-c 将输出写到标准输出上，并保留原有文档<br>-d 将压缩文件解压<br>-r 递归式地查找指定目录并压缩其中的所有文件或是解压缩</p><h2 id="文件备份和还原"><a href="#文件备份和还原" class="headerlink" title="文件备份和还原"></a>文件备份和还原</h2><p><code>tar [选项] &lt;文件或目录&gt;</code></p><p>其中“选项”是命令执行时可使用的参数，tar命令选项分为：主选项和辅助选项。</p><ul><li> 常用主选项有 ：</li><li>c 创建新的档案文件；</li><li>r 把要存档的文件追加到档案的末尾；</li><li>t 列出档案文件的内容，查看已经备份了哪些文件</li><li>u 更新文件；</li><li>x 从档案文件中释放文件。 </li><li> 常用辅助选项有 ：</li><li>f 指定是要使用的文件名，这个选项通常是必选项，选项后面要有文件名；</li><li>v 详细报告tar处理的文件信息；</li><li>z 用gzip来压缩/解压缩文件，加上该选项后可以将档案文件进行压缩，但还原时也一定要使用该选项进行解压缩。 </li></ul><h1 id="第4章-高级操作"><a href="#第4章-高级操作" class="headerlink" title="第4章 高级操作"></a>第4章 高级操作</h1><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/image-20210226231642366.png#id=skBT5&originHeight=311&originWidth=560&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><ul><li>Linux是多任务操作系统，每个运行着的程序实例就是一个进程。<br>在单CPU情况下，每个进程每次只执行很短的时间，执行过后CPU被Linux分配给另外一个进程，这种进程间的快速切换给用户的感觉就是可以同时运行多个程序。</li><li>Linux进程都需要从某个进程创建出来，此时创建者进程称为“父进程”，被创建的进程称为“子进程”。<br>进程可以具有多种状态中的一种，可以从一种状态切换到另一种状态，直到执行结束或非正常终止<table><thead><tr><th><strong>状态</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>就绪</td><td>进程准备执行，但没有得到CPU</td></tr><tr><td>执行</td><td>进程正在执行（使用CPU）</td></tr><tr><td>等待</td><td>进程等待事件发生。可能的事件包括I/O（例如磁盘读写操作）完成，父进程等待一个或多个子进程退出</td></tr><tr><td>交换</td><td>进程准备运行，但是它暂时被放置到磁盘上；或者该进程需要很多内存但是系统现在没有足够的内存空间可用</td></tr><tr><td>僵死</td><td>进程执行退出操作之前其父进程已经终止，该进程就变成僵死进程</td></tr></tbody></table></li></ul><p>Linux操作系统包括三种不同类型的进程：</p><ul><li>交互进程：由用户启动（通过桌面点击操作或在终端中运行命令），可以工作在前台或后台；</li><li>批处理进程：和终端没有联系，是一个进程序列（提交给Linux进程等待队列的进程）；</li><li>守护进程；也称监控进程，由Shell或Linux系统自动启动，工作在后台，用于监视特定任务；</li></ul><p>启动进程的方式有两种：</p><ul><li>手工启动：<br>前台启动：直接在终端中输入程序名（外部命令名），例如：vim ；<br>后台启动：输入程序名时加“&amp;”，例如：vim&amp;。</li><li>调度启动 ：<br>指定系统在特定时间运行程序，可用at，batch和cron调度</li></ul><h2 id="作业机制"><a href="#作业机制" class="headerlink" title="作业机制"></a>作业机制</h2><p>事先进行调度安排，指定时间运行任务。<br>Linux中常用at、batch和crontab命令进行作业控制，他们之间的区别如下：</p><ul><li><code>at命令</code>：在指定的精确时间执行；</li></ul><p>语法格式：<code>at [选项] &lt;时间&gt;</code></p><p>其中，若省略选项，表示是设定作业，常用“选项”如下：<br>-d，删除指定的调度作业；<br>-f 文件名，从指定文件中读取执行的命令</p><table><thead><tr><th><strong>类型</strong></th><th><strong>时间表示法</strong></th><th><strong>说明</strong></th><th><strong>举例</strong></th></tr></thead><tbody><tr><td>绝对表示法</td><td>midnight</td><td>当天午夜</td><td>at midnight</td></tr><tr><td>moon</td><td>当天中午</td><td>at moon</td><td></td></tr><tr><td>hh:mm [mm/dd/yy]</td><td>时:分 月/日/年</td><td>at 12:23at 23:01 5/21/09</td><td></td></tr><tr><td>相对表示法</td><td>now+n minutes</td><td>现在起向后n分钟</td><td>at now+30 minutes</td></tr><tr><td>now+n hours</td><td>现在起向后n小时</td><td>at now +2 hours</td><td></td></tr><tr><td>now+n days</td><td>现在起向后n天</td><td>at now+5 days</td><td></td></tr><tr><td>now+n weeks</td><td>现在起向后n周</td><td>at now+1 weeks</td><td></td></tr></tbody></table><p>与at命令相关的还有atq命令（显示队列中的作业信息）和atrm命令（删除队列作业）。下图所示为atq和arm命令的使用方法</p><ul><li><code>batch命令</code>：在系统负载较低的时候执；</li></ul><p>2、batcht命令：设定完作业后，会等到系统载荷小于0.8的时候执行作业。<br>在使用batch时，不需要参数，batch执行时依然是在at输入符下输入要执行的命令，最后输入Ctrl+d结束batch命令，如图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/image-20210226232157429.png#id=xSKRK&originHeight=214&originWidth=608&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>上述命令执行完毕后，立刻使用“ls”命令就可以看到“bt.txt”文件。如图所示 。这是因为此时系统负载较小，所以作业立即执行了 。</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/image-20210226232216555.png#id=fY31A&originHeight=309&originWidth=685&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><ul><li><code>crontab命令</code>：用于创建周期运行的任务作业。</li></ul><p>crontab命令：可以设定周期运行的任务作业 。<br>使用命令“crontab -e”，即可创建作业，该命令打开一个编辑窗口，用户需要将设定的任务写入文件中。<br>首次使用该命令时，系统要求选择默认的编辑器，如图所示。本例中选择“3”，使用vim作为默认编辑器。</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/image-20210226232247830.png#id=pfg46&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>3、crontab命令：可以设定周期运行的任务作业 。<br>在打开的编辑器内，需要按照如下固定格式输入要执行的任务：</p><p><code>分钟 小时 日期 月份 星期 命令</code></p><p>可以使用通配符“*”表示任何时间，例如要设定在每日10点20分执行一次“touch test.txt”，可以输入以下内容：</p><p><code>20 10 * * * touch test.txt</code></p><p>入完crontab作业后，按下ESC键，输入“:wq”，保存退出，crontab即可生效。若要编辑crontab作业，可以再次运行“crontab -e”命令；若要查询crontab作业，可以使用命令“crontab -l”，如图所示</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/image-20210226232419159.png#id=IaThG&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><p>Linux的进程管理是通过进程管理工具实现的，主要有以下工具命令：</p><ul><li>ps，查询列举进程；</li><li>pgrep，按名字查询进程；</li><li>pstree，显示进程树；</li><li>kill，杀死进程。</li></ul><h3 id="ps命令：查询进程"><a href="#ps命令：查询进程" class="headerlink" title="ps命令：查询进程"></a>ps命令：查询进程</h3><p>ps用于查询进程，其语法格式如下：</p><p><code>ps [选项] &lt;程序名&gt;</code></p><table><thead><tr><th><strong>选项参数</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>a</td><td>显示终端上的所有进程，包括其他用户的进程</td></tr><tr><td>u</td><td>按用户名和启动时间的顺序来显示进程</td></tr><tr><td>x</td><td>显示无控制终端的进程</td></tr><tr><td>l</td><td>长格式显示</td></tr><tr><td>-e</td><td>显示所有进程</td></tr><tr><td>-f</td><td>全格式输出，即可以看到进程的命令行</td></tr><tr><td>-u</td><td>有效使用者相关的进程</td></tr></tbody></table><p>ps命令常用的选项组合是“aux”、“-ef”等。</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/image-20210226232634201.png#id=fY0J5&originHeight=611&originWidth=771&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>ps命令相关显示信息如下：<br>USER，运行进程的用户；<br>PID，进程的ID号；<br>%CPU，进程使用的CPU资源百分比；<br>%MEM，进程使用的内存资源百分比；<br>VSZ，进程使用的虚拟内存（Kbytes）；<br>RSS，进程所使用物理内存的大小；<br>TTY，进程关联的终端，如果没有终端显示“？”；<br>STAT，进程目前的状态，主要状态如表4- 4所示；<br>TIME，当前为止进程已经运行的时间，或休眠和停止之前运行的时间；<br>COMMAND，进程的程序名。</p><p>其中进程状态（stat），如下表所示。</p><table><thead><tr><th><strong>进程状态</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>R</td><td>正在运行，或等待被系统调度来使用CPU</td></tr><tr><td>S</td><td>休眠</td></tr><tr><td>T</td><td>停止或正在被系统侦测</td></tr><tr><td>Z</td><td>僵死进程</td></tr></tbody></table><h3 id="pgrep命令"><a href="#pgrep命令" class="headerlink" title="pgrep命令"></a>pgrep命令</h3><p>1、通过程序的名字来查询进程，一般用来判断程序是否正在运行，这在服务器的配置和管理中可以用到<br>语法格式如下：<code>pgrep [选项] &lt;程序名&gt;</code></p><p>其中，常用选项如下 ：<br>-l，列出程序名和进程ID；<br>-o，程序名匹配最早生成的进程；<br>-n，程序名匹配最新生成的进程。</p><p>2、pgrep命令：通过程序的名字来查询进程，一般用来判断程序是否正在运行，这在服务器的配置和管理中可以用到<br>例如，“/sbin/init”程序是一个系统进程，可以使用pgrep命令查看其进程ID，如图所示 ：</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/image-20210226233323912.png#id=BIMrO&originHeight=163&originWidth=770&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h3 id="pstree命令"><a href="#pstree命令" class="headerlink" title="pstree命令"></a>pstree命令</h3><p>使用树形结构显示进程间的关系。pstree有很多参数，一般情况下直接使用pstree命令获取进程间的关系情况。如图示 ：</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/image-20210226233435108.png#id=SxZYW&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h3 id="kill命令"><a href="#kill命令" class="headerlink" title="kill命令"></a>kill命令</h3><p>当某个进程由于某种原因（如死锁）需要用户干预以提前终止。一般结合ps或pgrep命令，找到进程的ID，然后用kill终止它。<br>kill命令语法格式如下：</p><p><code>kill [信号代码] 进程ID</code></p><p>其中，信号代码可以省略，常用的信号代码是-9，表示<code>强制终止</code>。</p><h2 id="多用户和多任务"><a href="#多用户和多任务" class="headerlink" title="多用户和多任务"></a>多用户和多任务</h2><p>有两个概念需要理解：</p><ul><li> 单用户多任务：单个用户可以同时执行多个进程（程序），例如单个用户可以同时运行vim、gedit等多个进程； </li><li> 多用户多任务：多个用户同时登录并使用系统，例如有本地用户、远程的网络用户同时登录系统。<br><code>Linux支持多用户同时使用系统，也支持单个用户运行多个任务</code> </li></ul><h3 id="用户和组管理"><a href="#用户和组管理" class="headerlink" title="用户和组管理"></a>用户和组管理</h3><table><thead><tr><th><strong>命令</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>useradd</td><td>创建新用户</td></tr><tr><td>userdel</td><td>删除用户</td></tr><tr><td>usermod</td><td>修改用户账号</td></tr><tr><td>passwd</td><td>修改用户口令</td></tr><tr><td>groupadd</td><td>创建组</td></tr><tr><td>groupdel</td><td>删除组</td></tr></tbody></table><h2 id="相关系统文件"><a href="#相关系统文件" class="headerlink" title="相关系统文件"></a>相关系统文件</h2><ul><li>/etc/passwd <blockquote><p>“/etc/passwd”是用户账号文件，该文件每行存放1个账户的一些信息，信息被“：”隔开成7个域，内容格式如下：</p></blockquote></li></ul><p><code>用户名:口令:用户ID:组ID:用户全名或描述:登录目录:登录Shell</code></p><p>上述信息中的“口令”，其实只是个特殊字符，如“x”或“*”，真正的口令在/etc/shadow文件中</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/image-20210226234325106.png#id=t9l12&originHeight=613&originWidth=772&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>2、/etc/shadow<br>“/etc/shadow”是用户口令文件，其中存放已经加密的用户口令，每行一个用户信息，用“：”分割成9个域，包括：<br>用户名<br>加密后的口令<br>从1970年1月1日至今密码最近一次被修改的天数<br>从1970年1月1日起多少天内口令不能修改<br>从1970年1月1日多少天内口令必须修改<br>提前多少天警告用户口令将过期<br>在口令过期之后多少天禁用此用户<br>从1970年1月1日起多少天后口令失效<br>保留</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/image-20210226234419850.png#id=J1MOj&originHeight=616&originWidth=770&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>3、/etc/group<br>“/etc/group”是组账号文件，每行存放一个组账号信息，用“：”分割成4个域：</p><p><code>组名:组口令:组ID:组成员列表</code></p><p>其中“组口令”一般的Linux系统都不使用，通常这个位置是一个特殊字符，例如“x”</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/image-20210226234527544.png#id=fdH0I&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><h3 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h3><p>输出重定向用大于号“&gt;”，如果这条命令要往标准输出写入或者发送信息，那么都将写入输出文件中，而不是与命令所关联的显示器。<br>其语法格式有两条：</p><p><code>命令 &gt; 文件</code><br><code>命令 &gt;&gt; 文件</code></p><p>上述第一条命令，将命令的执行结果送至指定的文件中，若文件已存在，则<code>覆盖</code>；<br>第二条命令，将命令的执行结果<code>追加</code>到指定文件中。</p><h3 id="输入重定向"><a href="#输入重定向" class="headerlink" title="输入重定向"></a>输入重定向</h3><p>输入重定向用小于号“&lt;”来表示，如果命令从标准输入中读取输入，这个输入就是来自输入文件，而不是和命令相关的键盘。<br>其语法格式如下：</p><p>&lt;命令&gt;  &lt;  &lt;文件&gt;</p><p>其中：</p><ul><li>命令，可以是任何一条Shell命令；</li><li>文件，是要作为输入命令的文件</li></ul><h3 id="错误输出重定向"><a href="#错误输出重定向" class="headerlink" title="错误输出重定向"></a>错误输出重定向</h3><p>可以通过描述符（0、1、2）与操作符“&lt;”和“&gt;”相关联，来对标准输入、标准输出、错误输出重定向。<br>示例：通过使用“2&gt; ”对一条命令标准出错进行重定向</p><p>$ cat a.c<br>$ cat a.c 2&gt; error.txt</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/image-20210226234827588.png#id=RurYu&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><h3 id="管道的概念"><a href="#管道的概念" class="headerlink" title="管道的概念"></a>管道的概念</h3><p>Linux系统允许通过管道操作将一条命令的输出作为另一条命令的标准输入。管道的操作符是一个竖杠“|”。下图说明了管道操作的含义</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/image-20210226235005809.png#id=Gr19j&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>简单的说就是利用管道符“|”将两个命令分开，管道符左边命令的输出就会作为管道符右边命令的输入；<br>连续使用管道意味着第一个命令的输出会作为第二个命令的输入，第二个命令的输出又会作为第三个命令的输入，依此类推。</p><ul><li>使用ls和more命令，利用管道操作分屏显示目录“/usr/include”里的内容。具体操作步骤如下：</li></ul><p>1、用ls命令查看目录“/usr/include”里的内容<code>ls /usr/include</code></p><p>2、ls命令通过管道将内容输出到more命令，从而可以进行分屏控<code>ls /usr/include | more</code></p><ul><li>使用ls、grep和more命令，利用管道操作查找“/usr/include”目录内以字符串“lib”开头的“.h”文件，并分屏显示</li></ul><p><code>ls /usr/include | grep &#39;^lib&#39; | more</code></p><h1 id="第5章-Shell编程"><a href="#第5章-Shell编程" class="headerlink" title="第5章 Shell编程"></a>第5章 Shell编程</h1><ul><li> 在Linux系统中，虽然有各种各样的图形化操作工具，但是Shell仍然是一个非常灵活的工具：<br>Shell不仅能够执行命令，而且是一门非常优秀的编程语言。 </li><li> 通过使用Shell编程可以使大量的任务自动化。 </li><li> Shell程序特别擅长系统管理任务，尤其适合那些易用性、可维护性和便携性比效率更重要的任务。 </li></ul><h2 id="Shell特点"><a href="#Shell特点" class="headerlink" title="Shell特点"></a>Shell特点</h2><p>Linux系统中的Shell脚本通常具备以下特点：</p><ul><li>Shell脚本程序是由Shell环境解释执行的；</li><li>Shell脚本不需要编译、连接及生成可执行文件，直接由相应的解释器解释执行即可；</li><li>执行Shell程序时，Shell脚本文件需要具有可执行的权限；</li><li>Shell脚本可以使用变量、控制语句等比较复杂的结构；</li><li>Shell脚本是从上而下，顺序执行的。</li></ul><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><table><thead><tr><th><strong>环境变量</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>$PATH</td><td>以冒号分割的，统常用来搜索命令的目录列表</td></tr><tr><td>$HOME</td><td>当前用户的主目录</td></tr><tr><td>$0</td><td>shell脚本程序的名字</td></tr><tr><td>$#</td><td>传递给脚本的参数个数，如果脚本程序在调用时没有传递任何参数，则$#的值是0</td></tr><tr><td>$IFS</td><td>输入域分隔符。当Shell读取输入时，它给出用来分隔单词的一组字符，通常是空格、制表符和换行符等</td></tr><tr><td>$1,$2,…</td><td>脚本程序调用时传递过来的参数</td></tr><tr><td>$*</td><td>在一个变量中列出所有的参数，各个参数之间用$IFS中的第一个字符分隔</td></tr></tbody></table><p>参考资料</p><h1 id="第6章-网络操作"><a href="#第6章-网络操作" class="headerlink" title="第6章 网络操作"></a>第6章 网络操作</h1><p>TCP/IP协议应用层协议是直接为用户服务的网络协议，常见应用层协议如表所示：</p><table><thead><tr><th><strong>协议</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>HTTP</td><td>超文本传输协议，用于实现互联网中的www服务</td></tr><tr><td>FTP</td><td>文件传输协议，实现上传下载</td></tr><tr><td>DNS</td><td>域名解析服务，提供域名到IP地址之间的转换</td></tr><tr><td>Telnet</td><td>用户远程登录服务</td></tr></tbody></table><h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><p>TCP/IP协议中的网络层也称为IP层，按照该层协议的要求，为连接在Internet上的每个主机分配一个32bit长的地址，称之为IP地址。</p><p>IP地址用二进制表示，32bit的IP地址可换算成4个字节。</p><p>为了方便使用，IP地址经常被写成十进制的形式，中间用“.”分开不同的字节，如“202.102.134.68”。</p><h2 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h2><p>按照TCP/IP协议的要求，可以将IP地址划分成“网络地址”和“主机地址”两部分。</p><p>为了方便计算，使用“子网掩码”来指明一个IP地址哪些位标示的是“主机”所在子网，哪些位标示的是主机的位掩码。</p><p>与IP地址相同，子网掩码也用二进制来表示，长度也是32位，且有以下规律：<br>子网掩码的二进制位1和0分别连续；<br>左边是网络位，用二进制数“1”表示，“1”的数目等于网络位的长度；<br>右边是主机位，用二进制数“0”表示，“0”的数目等于主机位的长度。</p><p>以上规则的设计目的是：<code>让子网掩码与IP地址做“与”运算时用“0”遮住原主机数，而不改变原网络段数字，且方便通过“0”的位数确定子网的主机数。</code></p><h2 id="网络命令"><a href="#网络命令" class="headerlink" title="网络命令"></a>网络命令</h2><table><thead><tr><th><strong>命令</strong></th><th><strong>功能</strong></th><th><strong>备注</strong></th></tr></thead><tbody><tr><td>ifconfig</td><td>查看和配置网络接口的参数</td><td></td></tr><tr><td>ping</td><td>用于查看网络上的主机是否在工作</td><td></td></tr><tr><td>ftp</td><td>登录到FTP服务器，以利用ftp协议上传和下载文件</td><td>需要安装FTP客户端软件，Ubuntu11.04已默认安装</td></tr><tr><td>telnet</td><td>利用telnet协议访问主机</td><td>需要安装telnet客户端软件，Ubuntu11.04已默认安装</td></tr><tr><td>ssh</td><td>利用ssh协议登录对方主机</td><td>需要ssh客户端软件，Ubuntu11.04已默认安装</td></tr><tr><td>iptables</td><td>网络数据包过滤设置</td><td></td></tr></tbody></table><h3 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h3><p>1、查看网络配置情况<br>使用ifconfig查看当前系统网络配置情况的语法格式如下：</p><p><code>ifconfig [网络接口]</code></p><p>其中，“网络接口”是一个后跟单元号的驱动设备名，例如第一个以太网接口eth0、第二个以太网接口eth1等 ；<br>使用以上命令时，若省略“网路接口”，则查询本机所有网络接口的配置情况。</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/image-20210227000231844.png#id=rHrjg&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>2、配置指定接口参数<br>使用ifconfig命令配置指定接口（如eth0、eth1）的参数（如IP地址、网络掩码、广播地址等），语法格式如下：</p><p><code>ifocnifg &lt;网络接口&gt; [选项] &lt;IP地址&gt;</code></p><p>其中，常用“选项”如下：<br>down，关闭指定的网络设备<br>up，启动指定的网络设备<br>netmask&lt;子网掩码&gt;</p><p>示例：设置本机eth0的IP地址为“192.168.1.6”子网掩码为“255.255.255.0”。</p><p><code>sudo ifconfig eth0 192.168.1.6 netmask 255.255.255.0</code></p><h3 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h3><p>使用ping命令可以检查网络是否能够连通。<br>常用语法格式如下：</p><p><code>ping &lt;IP地址&gt;</code></p><p>其中，“IP地址”是要测试能够通过网络到达的主机的IP地址。</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/image-20210227000534701.png#id=vagKW&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h3 id="FTP"><a href="#FTP" class="headerlink" title="FTP"></a>FTP</h3><p>使用ftp命令可登录到FTP服务器，ftp命令运行成功后，用户需要输入相应的用户名和密码，验证通过后，用户可以使用相关的FTP客户端命令进行远程文件操作。<br>FTP登录命令常用语法格式如下：</p><p><code>ftp &lt;IP地址&gt;</code></p><p>其中，“IP地址”是提供FTP服务的主机IP地址。</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/image-20210227000626239.png#id=x6rwB&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><table><thead><tr><th><strong>命令</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>ls</td><td>列举服务器上的文件</td></tr><tr><td>get</td><td>下载文件</td></tr><tr><td>put</td><td>上传文件</td></tr><tr><td>mkdir</td><td>建立目录</td></tr><tr><td>rmdir</td><td>删除目录</td></tr><tr><td>cd</td><td>改变工作目录</td></tr><tr><td>help</td><td>查看帮助</td></tr><tr><td>bye</td><td>退出FTP</td></tr></tbody></table><h1 id="第7章-编程工具"><a href="#第7章-编程工具" class="headerlink" title="第7章 编程工具"></a>第7章 编程工具</h1><h2 id="编译链接"><a href="#编译链接" class="headerlink" title="编译链接"></a>编译链接</h2><p>在Linux中，C程序的编译用gcc程序，链接用ld程序，gcc编译完后可自动调用ld程序完成链接过程。因此这里重点介绍gcc程序。<br>调用gcc编译程序的的语法格式如下：</p><p><code>gcc [选项] &lt;文件名&gt;</code></p><p>其中，最常使用的选项有：<br>-c：只编译，不链接成为可执行文件<br>-o output_filename：确定输出文件,默认是a.out<br>-g：产生符号调试工具（GNU的gdb）所必要的符号信息<br>l-pg：产生代码剖析工具gprof使用的信息<br>-w：忽略警告信息<br>文件名：需要编译程序的文件名</p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>Linux上调试C语言程序，可使用gdb程序。<br>使用gdb调试程序前，需要先使用gcc的“-g”选项编译程序，而后通过gdb命令加载编译好的程序， gdb会不断从键盘接收用户命令并完成相应的任务，直到输入q命令（quit的简写）让它退出为止。</p><p><code>&lt;gdb&gt; &lt;可执行程序&gt;</code></p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/image-20210227000951646.png#id=PNbpQ&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><table><thead><tr><th><strong>命令</strong></th><th><strong>命令简写</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>list</td><td>l</td><td>列出程序的源代码</td></tr><tr><td>break</td><td>b</td><td>b &lt;代码行号&gt;，在某代码行设置断点</td></tr><tr><td>run</td><td>r</td><td>从头开始，全速运行程序至断点处</td></tr><tr><td>step</td><td>s</td><td>单步执行</td></tr><tr><td>continue</td><td>c</td><td>继续运行到下一个断点</td></tr><tr><td>delete</td><td>d</td><td>直接运行d命令，表示要删除所有断点；d &lt;代码行号&gt;，表示删除指定的断点</td></tr><tr><td>print</td><td>p</td><td>p &lt;变量名&gt;，显示某个变量的值</td></tr><tr><td>kill</td><td>k</td><td>停止被调试程序的运行</td></tr></tbody></table><h2 id="make工具"><a href="#make工具" class="headerlink" title="make工具"></a>make工具</h2><p>make工程管理器简称make工具，可以同时管理一个项目中多个文件的编译链接和生成。<br>make工具其实是个“自动编译管理器”， “自动”是指它能够根据文件时间去自动发现更新过的文件而减少编译的工作量。<br>make工具通过“Makefile”文件的内容自动执行大量的编译工作，而用户只需要编写一些简单的编辑语句，这极大地提高了实际项目的工作效率，几乎所有Linux下的项目均会使用它。</p><p>使用make工具时的语法格式如下：<code>make [选项] [目标]</code></p><p>其中，如果省略“选项”和“目标”，则make工具会寻找当前目录下的Makefile文件，解释执行其中的规则：<br>常用的“选项”如下<br>-f 文件，告诉make工具使用指定的文件作为Makefile文件<br>-d，显示调试信息<br>-n，测试模式，并不真正执行任何命令<br>-s，安静模式，不输出任何信息<br>“目标”：直接执行Makefile中的指定目标</p><p>Makefile文件由注释和一系列的“make规则”组成。“make规则”由以下格式组成</p><p><code>&lt;目标文件列表&gt;:[依赖文件列表][&lt;Tab&gt;命令列表]</code></p><p>其中：<br>目标文件列表：一系列文件名，文件之间要用空格隔开，是make最终需要创建的文件<br>依赖文件列表：一系列文件名，文件之间要用空格隔开，是生成目标文件所依赖的一个或多个其他文件<br>命令列表：必须有个前导TAB键操作。生成目标文件所需要执行的shell命令。一个make规则可以有多个命令行，每一条命令占一行。且每一个命令的第一个字符必须是制表符[Tab]。</p><blockquote><p>无论上述那个Makefile文件（本例假设使用上述第一个Makefile文件），都可以直接执行make命令，make工具自动寻找当前目录下的Makefile，并解释执行其中的规则：</p></blockquote><h2 id="gprof工具"><a href="#gprof工具" class="headerlink" title="gprof工具"></a>gprof工具</h2><p>gprof常用语法格式如下</p><p><code>gprof [选项] [可执行程序] [数据文件]</code></p><p>其中，“选项”是命令执行时可使用的参数，常用“选项”有中：<br>-b：不再输出统计图表中每个字段的详细描述<br>-p：输出函数的调用图<br>-q：输出函数时间消耗列表<br>-z：显示从未使用过的函数<br>可执行程序，指gcc用“-pg”选项编译的程序，可以省略，默认是是当前目录下的a.out文件<br>目标文件，可以省略，默认是当前目录下的gmon.out文件</p><p>使用gprof工具对程序进行静态分析。具体操作步骤如下<br>1、使用gcc的“-pg”选项编译程序</p><p><code>gcc –pg –o hello.exe hello.c</code></p><p>2、运行编译好的程序</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/image-20210227001247211.png#id=kMHZf&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>3、用gprof命令查看gmon.out保存的信息</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/image-20210227001258170.png#id=m7I5t&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="time工具"><a href="#time工具" class="headerlink" title="time工具"></a>time工具</h2><p>time工具用于分析一个程序或任何Shell命令的运行效率。<br>Linux下time命令可以获取一个程序的执行时间，包括程序的实际运行时间（real time），以及程序运行在用户态的时间（user time）和内核态的时间（sys time）。它们的意义如下：</p><ul><li>实际运行时间，是指程序从开始运行到结束所花费的时间</li><li>用户态时间，是真正的代码执行时间</li><li>内核态时间，是指程序执行时系统活动所花费的时间</li></ul><p>time工具的常用语法格式如下：</p><p><code>&lt;time&gt; [选项] [用户程序]</code></p><p>其中，“选项”是命令执行时可使用的参数，常用“选项”有：<br>-o：将time的输出写入所指定的文件中，如果文件已经存在，系统将覆盖其内容<br>-a：配合-o使用，将结果写到文件末端，而不会覆盖掉原来的内容<br>-p：把显示格式设定为百分比的形式<br>用户程序，要动态分析的程序名，需要包含路径</p><p><code>time ./hello.exe</code></p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/image-20210227001357047.png#id=z1MTp&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.xduph.com/">计算机组成与系统结构</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java篇-高性能的Dubbo框架</title>
    <link href="/2021/01/22/yuque/pdutpf/"/>
    <url>/2021/01/22/yuque/pdutpf/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1657545155001-2ab8e47f-920d-4d93-b94d-3586eebc50f1.png#clientId=u52bed449-578d-4&from=markdown&id=hbS96&originHeight=945&originWidth=1905&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=u899575bf-1f6a-4bad-a1c4-a3d929c0f09&title="></p><h1 id="框架简介"><a href="#框架简介" class="headerlink" title="框架简介"></a>框架简介</h1><blockquote><p>Apache Dubbo is a high-performance, java based open source RPC framework.</p></blockquote><h1 id="框架特点"><a href="#框架特点" class="headerlink" title="框架特点"></a>框架特点</h1><ul><li>基于透明接口的RPC</li></ul><blockquote><p>Dubbo提供了基于高性能接口的RPC，对用户是透明的。</p></blockquote><ul><li>智能负载均衡</li></ul><blockquote><p>Dubbo支持开箱即用的多种负载平衡策略，可感知下游服务状态以减少总体延迟并提高系统吞吐量。</p></blockquote><ul><li>自动服务注册和发现</li></ul><blockquote><p>Dubbo支持多个服务注册表，可以立即检测在线/离线服务。</p></blockquote><ul><li>高扩展性</li></ul><blockquote><p>Dubbo的微内核和插件设计确保第三方实现可以轻松地将其扩展为协议，传输和序列化等核心功能。</p></blockquote><ul><li>运行时流量路由</li></ul><blockquote><p>可以在运行时配置Dubbo，以便可以根据不同的规则路由流量，这使得支持蓝绿色部署，数据中心感知路由等功能变得容易。</p></blockquote><ul><li>可视化服务治理</li></ul><blockquote><p>Dubbo提供了用于服务管理和维护的丰富工具，例如查询服务元数据，运行状况和统计信息。</p></blockquote><h1 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h1><p> 下载源码 </p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">https</span>://github.com/apache/dubbo.git dubbo<br>cd dubbo/dubbo-demo/dubbo-demo-<span class="hljs-keyword">xml</span><br><span class="hljs-title">mvn</span> clean install<br></code></pre></td></tr></table></figure><p> 运行Zookeeper </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://downloads.apache.org/zookeeper/zookeeper-3.6.2/apache-zookeeper-3.6.2-bin.tar.gz<br>tar -zxvf apache-zookeeper-3.6.2-bin.tar.gz<br><span class="hljs-built_in">cd</span> apache-zookeeper-3.6.2-bin/bin<br>./zkServer.sh start<br></code></pre></td></tr></table></figure><p> 运行程序 </p><p>先运行<code>org.apache.dubbo.demo.provider.Application</code></p><p>再运行<code>org.apache.dubbo.demo.consumer.Application</code></p><p><code>确保使用JDK1.8其他版本容易出问题</code></p><h1 id="详细介绍"><a href="#详细介绍" class="headerlink" title="详细介绍"></a>详细介绍</h1><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/dubbo-framework.jpg#id=GtogN&originHeight=674&originWidth=900&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>图例说明：</p><ul><li>图中左边淡蓝背景的为服务消费方使用的接口，右边淡绿色背景的为服务提供方使用的接口，位于中轴线上的为双方都用到的接口。</li><li>图中从下至上分为十层，各层均为单向依赖，右边的黑色箭头代表层之间的依赖关系，每一层都可以剥离上层被复用，其中，Service 和 Config 层为 API，其它各层均为 SPI。</li><li>图中绿色小块的为扩展接口，蓝色小块为实现类，图中只显示用于关联各层的实现类。</li><li>图中蓝色虚线为初始化过程，即启动时组装链，红色实线为方法调用过程，即运行时调时链，紫色三角箭头为继承，可以把子类看作父类的同一个节点，线上的文字为调用的方法。</li></ul><h2 id="各层说明"><a href="#各层说明" class="headerlink" title="各层说明"></a>各层说明</h2><ul><li><strong>config 配置层</strong>：对外配置接口，以 <code>ServiceConfig</code>, <code>ReferenceConfig</code> 为中心，可以直接初始化配置类，也可以通过 spring 解析配置生成配置类</li><li><strong>proxy 服务代理层</strong>：服务接口透明代理，生成服务的客户端 Stub 和服务器端 Skeleton, 以 <code>ServiceProxy</code> 为中心，扩展接口为 <code>ProxyFactory</code></li><li><strong>registry 注册中心层</strong>：封装服务地址的注册与发现，以服务 URL 为中心，扩展接口为 <code>RegistryFactory</code>, <code>Registry</code>, <code>RegistryService</code></li><li><strong>cluster 路由层</strong>：封装多个提供者的路由及负载均衡，并桥接注册中心，以 <code>Invoker</code> 为中心，扩展接口为 <code>Cluster</code>, <code>Directory</code>, <code>Router</code>, <code>LoadBalance</code></li><li><strong>monitor 监控层</strong>：RPC 调用次数和调用时间监控，以 <code>Statistics</code> 为中心，扩展接口为 <code>MonitorFactory</code>, <code>Monitor</code>, <code>MonitorService</code></li><li><strong>protocol 远程调用层</strong>：封装 RPC 调用，以 <code>Invocation</code>, <code>Result</code> 为中心，扩展接口为 <code>Protocol</code>, <code>Invoker</code>, <code>Exporter</code></li><li><strong>exchange 信息交换层</strong>：封装请求响应模式，同步转异步，以 <code>Request</code>, <code>Response</code> 为中心，扩展接口为 <code>Exchanger</code>, <code>ExchangeChannel</code>, <code>ExchangeClient</code>, <code>ExchangeServer</code></li><li><strong>transport 网络传输层</strong>：抽象 mina 和 netty 为统一接口，以 <code>Message</code> 为中心，扩展接口为 <code>Channel</code>, <code>Transporter</code>, <code>Client</code>, <code>Server</code>, <code>Codec</code></li><li><strong>serialize 数据序列化层</strong>：可复用的一些工具，扩展接口为 <code>Serialization</code>, <code>ObjectInput</code>, <code>ObjectOutput</code>, <code>ThreadPool</code></li></ul><h2 id="关系说明"><a href="#关系说明" class="headerlink" title="关系说明"></a>关系说明</h2><ul><li>在 RPC 中，Protocol 是核心层，也就是只要有 Protocol + Invoker + Exporter 就可以完成非透明的 RPC 调用，然后在 Invoker 的主过程上 Filter 拦截点。</li><li>图中的 Consumer 和 Provider 是抽象概念，只是想让看图者更直观的了解哪些类分属于客户端与服务器端，不用 Client 和 Server 的原因是 Dubbo 在很多场景下都使用 Provider, Consumer, Registry, Monitor 划分逻辑拓普节点，保持统一概念。</li><li>而 Cluster 是外围概念，所以 Cluster 的目的是将多个 Invoker 伪装成一个 Invoker，这样其它人只要关注 Protocol 层 Invoker 即可，加上 Cluster 或者去掉 Cluster 对其它层都不会造成影响，因为只有一个提供者时，是不需要 Cluster 的。</li><li>Proxy 层封装了所有接口的透明化代理，而在其它层都以 Invoker 为中心，只有到了暴露给用户使用时，才用 Proxy 将 Invoker 转成接口，或将接口实现转成 Invoker，也就是去掉 Proxy 层 RPC 是可以 Run 的，只是不那么透明，不那么看起来像调本地服务一样调远程服务。</li><li>而 Remoting 实现是 Dubbo 协议的实现，如果你选择 RMI 协议，整个 Remoting 都不会用上，Remoting 内部再划为 Transport 传输层和 Exchange 信息交换层，Transport 层只负责单向消息传输，是对 Mina, Netty, Grizzly 的抽象，它也可以扩展 UDP 传输，而 Exchange 层是在传输层之上封装了 Request-Response 语义。</li><li>Registry 和 Monitor 实际上不算一层，而是一个独立的节点，只是为了全局概览，用层的方式画在一起。</li></ul><h2 id="模块分包"><a href="#模块分包" class="headerlink" title="模块分包"></a>模块分包</h2><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/dubbo-modules.jpg#id=bExrs&originHeight=317&originWidth=471&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>模块说明：</p><ul><li><strong>dubbo-common 公共逻辑模块</strong>：包括 Util 类和通用模型。</li><li><strong>dubbo-remoting 远程通讯模块</strong>：相当于 Dubbo 协议的实现，如果 RPC 用 RMI协议则不需要使用此包。</li><li><strong>dubbo-rpc 远程调用模块</strong>：抽象各种协议，以及动态代理，只包含一对一的调用，不关心集群的管理。</li><li><strong>dubbo-cluster 集群模块</strong>：将多个服务提供方伪装为一个提供方，包括：负载均衡, 容错，路由等，集群的地址列表可以是静态配置的，也可以是由注册中心下发。</li><li><strong>dubbo-registry 注册中心模块</strong>：基于注册中心下发地址的集群方式，以及对各种注册中心的抽象。</li><li><strong>dubbo-monitor 监控模块</strong>：统计服务调用次数，调用时间的，调用链跟踪的服务。</li><li><strong>dubbo-config 配置模块</strong>：是 Dubbo 对外的 API，用户通过 Config 使用Dubbo，隐藏 Dubbo 所有细节。</li><li><strong>dubbo-container 容器模块</strong>：是一个 Standlone 的容器，以简单的 Main 加载 Spring 启动，因为服务通常不需要 Tomcat/JBoss 等 Web 容器的特性，没必要用 Web 容器去加载服务。</li></ul><p>整体上按照分层结构进行分包，与分层的不同点在于：</p><ul><li>container 为服务容器，用于部署运行服务，没有在层中画出。</li><li>protocol 层和 proxy 层都放在 rpc 模块中，这两层是 rpc 的核心，在不需要集群也就是只有一个提供者时，可以只使用这两层完成 rpc 调用。</li><li>transport 层和 exchange 层都放在 remoting 模块中，为 rpc 调用的通讯基础。</li><li>serialize 层放在 common 模块中，以便更大程度复用。</li></ul><h2 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h2><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/dubbo-relation.jpg#id=RTZjA&originHeight=330&originWidth=500&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>图例说明：</p><ul><li>图中小方块 Protocol, Cluster, Proxy, Service, Container, Registry, Monitor 代表层或模块，蓝色的表示与业务有交互，绿色的表示只对 Dubbo 内部交互。</li><li>图中背景方块 Consumer, Provider, Registry, Monitor 代表部署逻辑拓扑节点。</li><li>图中蓝色虚线为初始化时调用，红色虚线为运行时异步调用，红色实线为运行时同步调用。</li><li>图中只包含 RPC 的层，不包含 Remoting 的层，Remoting 整体都隐含在 Protocol 中。</li></ul><h2 id="调用链"><a href="#调用链" class="headerlink" title="调用链"></a>调用链</h2><p>展开总设计图的红色调用链，如下：</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/dubbo-extension.jpg#id=LHAsU&originHeight=738&originWidth=800&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="暴露服务时序"><a href="#暴露服务时序" class="headerlink" title="暴露服务时序"></a>暴露服务时序</h2><p>展开总设计图左边服务提供方暴露服务的蓝色初始化链，时序图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/dubbo-export.jpg#id=ZABql&originHeight=540&originWidth=821&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="引用服务时序"><a href="#引用服务时序" class="headerlink" title="引用服务时序"></a>引用服务时序</h2><p>展开总设计图右边服务消费方引用服务的蓝色初始化链，时序图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/dubbo-refer.jpg#id=IhYv9&originHeight=716&originWidth=1006&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="领域模型"><a href="#领域模型" class="headerlink" title="领域模型"></a>领域模型</h2><p>在 Dubbo 的核心领域模型中：</p><ul><li>Protocol 是服务域，它是 Invoker 暴露和引用的主功能入口，它负责 Invoker 的生命周期管理。</li><li>Invoker 是实体域，它是 Dubbo 的核心模型，其它模型都向它靠扰，或转换成它，它代表一个可执行体，可向它发起 invoke 调用，它有可能是一个本地的实现，也可能是一个远程的实现，也可能一个集群实现。</li><li>Invocation 是会话域，它持有调用过程中的变量，比如方法名，参数等。</li></ul><h2 id="基本设计原则"><a href="#基本设计原则" class="headerlink" title="基本设计原则"></a>基本设计原则</h2><ul><li>采用 Microkernel + Plugin 模式，Microkernel 只负责组装 Plugin，Dubbo 自身的功能也是通过扩展点实现的，也就是 Dubbo 的所有功能点都可被用户自定义扩展所替换。</li><li>采用 URL 作为配置信息的统一格式，所有扩展点都通过传递 URL 携带配置信息。</li></ul><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">https</span>://github.com/apache/dubbo.git dubbo<br></code></pre></td></tr></table></figure><h2 id="简单用例分析"><a href="#简单用例分析" class="headerlink" title="简单用例分析"></a>简单用例分析</h2><p> provider端 </p><p>目录结构</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs stylus">dubbo-demo-xml-provider/<span class="hljs-attribute">src</span>/<br>└── <span class="hljs-selector-tag">main</span><br>    ├── java<br>    │   └── org<br>    │       └── apache<br>    │           └── dubbo<br>    │               └── demo<br>    │                   └── provider<br>    │                       ├── Application<span class="hljs-selector-class">.java</span><br>    │                       ├── DemoServiceImpl<span class="hljs-selector-class">.java</span><br>    │                       └── GreetingServiceImpl<span class="hljs-selector-class">.java</span><br>    └── resources<br>        ├── dubbo<span class="hljs-selector-class">.properties</span><br>        ├── log4j<span class="hljs-selector-class">.properties</span><br>        └── spring<br>            └── dubbo-provider.xml<br></code></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:dubbo</span>=<span class="hljs-string">&quot;http://dubbo.apache.org/schema/dubbo&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:application</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;demo-provider&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:parameter</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;mapping-type&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;metadata&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dubbo:application</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:config-center</span> <span class="hljs-attr">address</span>=<span class="hljs-string">&quot;zookeeper://127.0.0.1:2181&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:metadata-report</span> <span class="hljs-attr">address</span>=<span class="hljs-string">&quot;zookeeper://127.0.0.1:2181&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:registry</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;registry1&quot;</span> <span class="hljs-attr">address</span>=<span class="hljs-string">&quot;zookeeper://127.0.0.1:2181&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:protocol</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dubbo&quot;</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;-1&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--注入bean--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demoService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.dubbo.demo.provider.DemoServiceImpl&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;greetingService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.dubbo.demo.provider.GreetingServiceImpl&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--暴露接口服务--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:service</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;org.apache.dubbo.demo.DemoService&quot;</span> <span class="hljs-attr">timeout</span>=<span class="hljs-string">&quot;3000&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;demoService&quot;</span> <span class="hljs-attr">registry</span>=<span class="hljs-string">&quot;registry1&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:service</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.0.0&quot;</span> <span class="hljs-attr">group</span>=<span class="hljs-string">&quot;greeting&quot;</span> <span class="hljs-attr">timeout</span>=<span class="hljs-string">&quot;5000&quot;</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;org.apache.dubbo.demo.GreetingService&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;greetingService&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>应用类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;spring/dubbo-provider.xml&quot;</span>);<br>        context.start();<span class="hljs-comment">//启动上下文</span><br>        System.in.read();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DemoService</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(DemoServiceImpl.class);<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sayHello</span><span class="hljs-params">(String name)</span> &#123;<br>        logger.info(<span class="hljs-string">&quot;Hello &quot;</span> + name + <span class="hljs-string">&quot;, request from consumer: &quot;</span> + RpcContext.getContext().getRemoteAddress());<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello &quot;</span> + name + <span class="hljs-string">&quot;, response from provider: &quot;</span> + RpcContext.getContext().getLocalAddress();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> CompletableFuture&lt;String&gt; <span class="hljs-title function_">sayHelloAsync</span><span class="hljs-params">(String name)</span> &#123;<br>        CompletableFuture&lt;String&gt; cf = CompletableFuture.supplyAsync(() -&gt; &#123;<br><span class="hljs-comment">//            try &#123;</span><br><span class="hljs-comment">//                Thread.sleep(1000);</span><br><span class="hljs-comment">//            &#125; catch (InterruptedException e) &#123;</span><br><span class="hljs-comment">//                e.printStackTrace();</span><br><span class="hljs-comment">//            &#125;</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;async result&quot;</span>;<br>        &#125;);<br>        <span class="hljs-keyword">return</span> cf;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GreetingServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">GreetingService</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Greetings!&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> consumer端 </p><p>目录结构</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs stylus">dubbo-demo-xml-consumer/<span class="hljs-attribute">src</span>/<br>└── <span class="hljs-selector-tag">main</span><br>    ├── java<br>    │   └── org<br>    │       └── apache<br>    │           └── dubbo<br>    │               └── demo<br>    │                   └── consumer<br>    │                       └── Application<span class="hljs-selector-class">.java</span><br>    └── resources<br>        ├── dubbo<span class="hljs-selector-class">.properties</span><br>        ├── log4j<span class="hljs-selector-class">.properties</span><br>        └── spring<br>            └── dubbo-consumer.xml<br></code></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:dubbo</span>=<span class="hljs-string">&quot;http://dubbo.apache.org/schema/dubbo&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:application</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;demo-consumer&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:parameter</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;mapping-type&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;metadata&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:parameter</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;enable-auto-migration&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dubbo:application</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--注册地址--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:registry</span> <span class="hljs-attr">address</span>=<span class="hljs-string">&quot;zookeeper://127.0.0.1:2181&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--引用服务--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:reference</span> <span class="hljs-attr">provided-by</span>=<span class="hljs-string">&quot;demo-provider&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demoService&quot;</span> <span class="hljs-attr">check</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">                     <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;org.apache.dubbo.demo.DemoService&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:reference</span> <span class="hljs-attr">provided-by</span>=<span class="hljs-string">&quot;demo-provider&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.0.0&quot;</span> <span class="hljs-attr">group</span>=<span class="hljs-string">&quot;greeting&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;greetingService&quot;</span> <span class="hljs-attr">check</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">                     <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;org.apache.dubbo.demo.GreetingService&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>应用类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * In order to make sure multicast registry works, need to specify &#x27;-Djava.net.preferIPv4Stack=true&#x27; before</span><br><span class="hljs-comment">     * launch the application</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//获取服务相关信息</span><br>        <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;spring/dubbo-consumer.xml&quot;</span>);<br>        context.start();<br>        <span class="hljs-comment">//获取Service</span><br>        <span class="hljs-type">DemoService</span> <span class="hljs-variable">demoService</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;demoService&quot;</span>, DemoService.class);<br>        <span class="hljs-type">GreetingService</span> <span class="hljs-variable">greetingService</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;greetingService&quot;</span>, GreetingService.class);<br>        <span class="hljs-comment">//多线程调用</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-comment">//调用服务</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">greetings</span> <span class="hljs-operator">=</span> greetingService.hello();<br>                System.out.println(greetings + <span class="hljs-string">&quot; from separated thread.&quot;</span>);<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">100</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;).start();<br>        <span class="hljs-comment">//循环调用</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            CompletableFuture&lt;String&gt; hello = demoService.sayHelloAsync(<span class="hljs-string">&quot;world&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;result: &quot;</span> + hello.get());<br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">greetings</span> <span class="hljs-operator">=</span> greetingService.hello();<br>            System.out.println(<span class="hljs-string">&quot;result: &quot;</span> + greetings);<br><br>            Thread.sleep(<span class="hljs-number">500</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Dubbo-Admin"><a href="#Dubbo-Admin" class="headerlink" title="Dubbo Admin"></a>Dubbo Admin</h1><p>目前的管理控制台已经发布 0.1 版本，结构上采取了前后端分离的方式，前端使用 Vue 和 Vuetify 分别作为 Javascript 框架和UI框架，后端采用 Spring Boot 框架。既可以按照标准的 Maven 方式进行打包，部署，也可以采用前后端分离的部署方式，方便开发，功能上，目前具备了服务查询，服务治理(包括 Dubbo 2.7 中新增的治理规则)以及服务测试三部分内容。</p><h3 id="Maven方式部署"><a href="#Maven方式部署" class="headerlink" title="Maven方式部署"></a>Maven方式部署</h3><ul><li>安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/apache/dubbo-admin.git<br>cd dubbo-admin<br>mvn clean package<br>cd dubbo-admin-distribution/target<br>java -jar dubbo-admin-0.1.jar<br></code></pre></td></tr></table></figure><ul><li>访问</li></ul><p><a href="http://localhost:8080/">http://localhost:8080</a></p><h3 id="前后端分离部署"><a href="#前后端分离部署" class="headerlink" title="前后端分离部署"></a>前后端分离部署</h3><ul><li>前端</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd dubbo-admin-ui <br>npm install <br>npm run dev<br></code></pre></td></tr></table></figure><ul><li>后端</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd dubbo-admin-server<br>mvn clean package <br>cd target<br>java -jar dubbo-admin-server-0.1.jar<br></code></pre></td></tr></table></figure><ul><li>访问</li></ul><p><a href="http://localhost:8081/">http://localhost:8081</a></p><ul><li>前后端分离模式下，前端的修改可以实时生效</li></ul><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置: 1"></a>配置: <a href="https://dubbo.apache.org/zh/docs/v2.7/admin/ops/introduction/#fn:1">1</a></h3><p>配置文件为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dubbo-admin-server/src/main/resources/application.properties<br></code></pre></td></tr></table></figure><p>主要的配置有：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">admin.config-center</span>=zookeeper://<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">2181</span><br><span class="hljs-attr">admin.registry.address</span>=zookeeper://<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">2181</span><br><span class="hljs-attr">admin.metadata-report.address</span>=zookeeper://<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">2181</span><br></code></pre></td></tr></table></figure><p>三个配置项分别指定了配置中心，注册中心和元数据中心的地址，关于这三个中心的详细说明，可以参考<a href="https://dubbo.apache.org/zh/docs/v2.7/user/configuration/config-center">这里</a>。</p><p>也可以和 Dubbo 2.7 一样，在配置中心指定元数据和注册中心的地址，以 zookeeper 为例，配置的路径和内容如下:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># /dubbo/config/dubbo/dubbo.properties</span><br><span class="hljs-attr">dubbo.registry.address</span>=zookeeper://<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">2181</span><br><span class="hljs-attr">dubbo.metadata-report.address</span>=zookeeper://<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">2181</span><br></code></pre></td></tr></table></figure><p>配置中心里的地址会覆盖掉本地 <code>application.properties</code> 的配置</p><p>其他配置请访问 github 中的文档:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">https://github.com/apache/dubbo-admin<br></code></pre></td></tr></table></figure><h2 id="Docker-方式运行"><a href="#Docker-方式运行" class="headerlink" title="Docker 方式运行"></a>Docker 方式运行</h2><p>Start a Apache Dubbo Admin</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -p 8080:8080 apache/dubbo-admin<br></code></pre></td></tr></table></figure><p>It will use all default configuration and connect to zookeeper://127.0.0.1:2181</p><p>… via docker stack deploy or docker-compose<br>Example stack.yml:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">version: &#x27;3&#x27;<br><br>services:<br>  zookeeper:<br>    image: zookeeper<br>    ports:<br>      - 2181:2181<br>  admin:<br>    image: apache/dubbo-admin<br>    depends_on:<br>      - zookeeper<br>    ports:<br>      - 8080<br>    environment:<br>      - admin.registry.address=zookeeper://zookeeper:2181<br>      - admin.config-center=zookeeper://zookeeper:2181<br>      - admin.metadata-report.address=zookeeper://zookeeper:2181<br></code></pre></td></tr></table></figure><p>Try in PWD</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">Environment variables<br>admin.registry.address<br><br>admin.config-center<br><br>admin.metadata-report.address<br></code></pre></td></tr></table></figure><h1 id="性能方面"><a href="#性能方面" class="headerlink" title="性能方面"></a>性能方面</h1><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://dubbo.apache.org/zh/docs/v2.7/">官方文档</a></p>]]></content>
    
    
    <categories>
      
      <category>Java相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Dubbo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络篇-Wireshark使用教程</title>
    <link href="/2021/01/09/yuque/gklabh/"/>
    <url>/2021/01/09/yuque/gklabh/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1657547567233-5b34b418-9929-466d-a07b-ee547fd70066.png#clientId=u1981decc-b7f9-4&from=markdown&height=384&id=YF7VD&originHeight=716&originWidth=1146&originalType=url&ratio=1&rotation=0&showTitle=false&size=533675&status=done&style=none&taskId=ub43d41ed-93c0-46c5-9620-fc1dfe83ef7&title=&width=615" alt="image.png"></p><h1 id="工具简介"><a href="#工具简介" class="headerlink" title="工具简介"></a>工具简介</h1><p>Wireshark是一个网络数据包分析器。网络包分析器尽可能详细地呈现捕获的包数据。<br>你可以把网络数据包分析仪想象成一个测量设备，用来检测网络电缆内部发生的事情，就像电工用伏特计检测电缆内部发生的事情一样（当然是在更高的层次上）。<br>在过去，这些工具要么非常昂贵，要么是专有的，要么两者兼而有之。然而，随着Wireshark的出现，情况发生了变化。Wireshark是免费的，是开源的，是当今最好的数据包分析器之一。</p><h1 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h1><p>环境 <code>Ubuntu18.04</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install wireshark<br></code></pre></td></tr></table></figure><p>启动缺少权限</p><p>     wireshark:Couldn’t run /usr/bin/dumpcap in child process: Permission denied </p><p>解决方法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install libcap2-bin wireshark<br>sudo chgrp myusername /usr/bin/dumpcap<br>sudo chmod 750 /usr/bin/dumpcap<br>sudo setcap cap_net_raw,cap_net_admin+eip /usr/bin/dumpcap<br></code></pre></td></tr></table></figure><h1 id="上手使用"><a href="#上手使用" class="headerlink" title="上手使用"></a>上手使用</h1><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/wireshark-cat.png#id=Rypap&originHeight=953&originWidth=1917&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h1 id="参数详解"><a href="#参数详解" class="headerlink" title="参数详解"></a>参数详解</h1><p>（1）Frame:   物理层的数据帧概况</p><p>（2）Ethernet II: 数据链路层以太网帧头部信息</p><p>（3）Internet Protocol Version 4: 互联网层IP包头部信息</p><p>（4）Transmission Control Protocol:  传输层T的数据段头部信息，此处是TCP</p><p>（5）Hypertext Transfer Protocol:  应用层的信息，此处是HTTP协议</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.wireshark.org/docs/wsug_html_chunked/">Wireshark User’s Guide</a></p><p><a href="https://www.cnblogs.com/mq0036/p/11187138.html">wireshark抓包新手使用教程</a></p>]]></content>
    
    
    <categories>
      
      <category>工具相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Wireshark</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java篇-死锁的排查方法</title>
    <link href="/2020/12/21/yuque/ia3obr/"/>
    <url>/2020/12/21/yuque/ia3obr/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/2630542/1657551533195-441441cf-1edc-4d0a-9ee0-99f62ec52287.jpeg#clientId=uea64f579-255a-4&from=markdown&id=V3qP0&originHeight=580&originWidth=1240&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=uee071c51-707e-4028-8372-24bf7c3595d&title="></p><h1 id="死锁成立条件"><a href="#死锁成立条件" class="headerlink" title="死锁成立条件"></a>死锁成立条件</h1><p>1、<code>互斥</code>：某种资源一次只允许一个进程访问，即该资源一旦分配给某个进程，其他进程就不能再访问，直到该进程访问结束。<br>2、<code>占有且等待</code>：一个进程本身占有资源（一种或多种），同时还有资源未得到满足，正在等待其他进程释放该资源。<br>3、<code>不可抢占</code>：别人已经占有了某项资源，你不能因为自己也需要该资源，就去把别人的资源抢过来。<br>4、<code>循环等待</code>：存在一个进程链，使得每个进程都占有下一个进程所需的至少一种资源。</p><h1 id="如何排查死锁"><a href="#如何排查死锁" class="headerlink" title="如何排查死锁"></a>如何排查死锁</h1><ul><li>jps 查看进程</li><li>jstack 打印堆栈信息</li><li>jconsole 可视化查看详情</li></ul><h1 id="简单排查示例"><a href="#简单排查示例" class="headerlink" title="简单排查示例"></a>简单排查示例</h1><h2 id="通过jstack查看"><a href="#通过jstack查看" class="headerlink" title="通过jstack查看"></a>通过jstack查看</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeadLock</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">private</span> String lockA;<br>    <span class="hljs-keyword">private</span> String lockB;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DeadLock</span><span class="hljs-params">(String lockA, String lockB)</span> &#123;<br>        <span class="hljs-built_in">this</span>.lockA = lockA;<br>        <span class="hljs-built_in">this</span>.lockB = lockB;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (lockA)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">synchronized</span> (lockB)&#123;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        String lockA=<span class="hljs-string">&quot;lockA&quot;</span>;<br>        String lockB=<span class="hljs-string">&quot;lockB&quot;</span>;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DeadLock</span>(lockA,lockB),<span class="hljs-string">&quot;ThreadAA&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DeadLock</span>(lockB,lockA),<span class="hljs-string">&quot;ThreadBB&quot;</span>).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs shell">ikey@mikey:~/Downloads/sdkmoderation/algorithm$ jps<br>31408 Jps<br>30899 Launcher<br>30902 DeadLock<br>4235 Main<br>mikey@mikey:~/Downloads/sdkmoderation/algorithm$ jstack 30902<br>2020-12-21 22:39:40<br>Full thread dump Java HotSpot(TM) 64-Bit Server VM (25.221-b11 mixed mode):<br><br>&quot;Attach Listener&quot; #13 daemon prio=9 os_prio=0 tid=0x00007f60fc001000 nid=0x78e8 waiting on condition [0x0000000000000000]<br>   java.lang.Thread.State: RUNNABLE<br><br>&quot;DestroyJavaVM&quot; #12 prio=5 os_prio=0 tid=0x00007f613c00d800 nid=0x78b7 waiting on condition [0x0000000000000000]<br>   java.lang.Thread.State: RUNNABLE<br><br>&quot;ThreadBB&quot; #11 prio=5 os_prio=0 tid=0x00007f613c20e000 nid=0x78e2 waiting for monitor entry [0x00007f6126944000]<br>   java.lang.Thread.State: BLOCKED (on object monitor)<br>        at demo.DeadLock.run(DeadLock.java:22)<br>        - waiting to lock &lt;0x000000076d283280&gt; (a java.lang.String)<br>        - locked &lt;0x000000076d2832b8&gt; (a java.lang.String)<br>        at java.lang.Thread.run(Thread.java:748)<br><br>&quot;ThreadAA&quot; #10 prio=5 os_prio=0 tid=0x00007f613c20c800 nid=0x78e1 waiting for monitor entry [0x00007f6126a45000]<br>   java.lang.Thread.State: BLOCKED (on object monitor)<br>        at demo.DeadLock.run(DeadLock.java:22)<br>        - waiting to lock &lt;0x000000076d2832b8&gt; (a java.lang.String)<br>        - locked &lt;0x000000076d283280&gt; (a java.lang.String)<br>        at java.lang.Thread.run(Thread.java:748)<br><br>&quot;Service Thread&quot; #9 daemon prio=9 os_prio=0 tid=0x00007f613c207800 nid=0x78df runnable [0x0000000000000000]<br>   java.lang.Thread.State: RUNNABLE<br><br>&quot;C1 CompilerThread2&quot; #8 daemon prio=9 os_prio=0 tid=0x00007f613c204000 nid=0x78de waiting on condition [0x0000000000000000]<br>   java.lang.Thread.State: RUNNABLE<br><br>&quot;C2 CompilerThread1&quot; #7 daemon prio=9 os_prio=0 tid=0x00007f613c202000 nid=0x78dd waiting on condition [0x0000000000000000]<br>   java.lang.Thread.State: RUNNABLE<br><br>&quot;C2 CompilerThread0&quot; #6 daemon prio=9 os_prio=0 tid=0x00007f613c200800 nid=0x78dc waiting on condition [0x0000000000000000]<br>   java.lang.Thread.State: RUNNABLE<br><br>&quot;Monitor Ctrl-Break&quot; #5 daemon prio=5 os_prio=0 tid=0x00007f613c1fe000 nid=0x78db runnable [0x00007f6127262000]<br>   java.lang.Thread.State: RUNNABLE<br>        at java.net.SocketInputStream.socketRead0(Native Method)<br>        at java.net.SocketInputStream.socketRead(SocketInputStream.java:116)<br>        at java.net.SocketInputStream.read(SocketInputStream.java:171)<br>        at java.net.SocketInputStream.read(SocketInputStream.java:141)<br>        at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)<br>        at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)<br>        at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)<br>        - locked &lt;0x000000076d2fa148&gt; (a java.io.InputStreamReader)<br>        at java.io.InputStreamReader.read(InputStreamReader.java:184)<br>        at java.io.BufferedReader.fill(BufferedReader.java:161)<br>        at java.io.BufferedReader.readLine(BufferedReader.java:324)<br>        - locked &lt;0x000000076d2fa148&gt; (a java.io.InputStreamReader)<br>        at java.io.BufferedReader.readLine(BufferedReader.java:389)<br>        at com.intellij.rt.execution.application.AppMainV2$1.run(AppMainV2.java:47)<br><br>&quot;Signal Dispatcher&quot; #4 daemon prio=9 os_prio=0 tid=0x00007f613c183000 nid=0x78c6 runnable [0x0000000000000000]<br>   java.lang.Thread.State: RUNNABLE<br><br>&quot;Finalizer&quot; #3 daemon prio=8 os_prio=0 tid=0x00007f613c151000 nid=0x78c5 in Object.wait() [0x00007f61278f7000]<br>   java.lang.Thread.State: WAITING (on object monitor)<br>        at java.lang.Object.wait(Native Method)<br>        - waiting on &lt;0x000000076d188ed8&gt; (a java.lang.ref.ReferenceQueue$Lock)<br>        at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:144)<br>        - locked &lt;0x000000076d188ed8&gt; (a java.lang.ref.ReferenceQueue$Lock)<br>        at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:165)<br>        at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:216)<br><br>&quot;Reference Handler&quot; #2 daemon prio=10 os_prio=0 tid=0x00007f613c14c800 nid=0x78c4 in Object.wait() [0x00007f61279f8000]<br>   java.lang.Thread.State: WAITING (on object monitor)<br>        at java.lang.Object.wait(Native Method)<br>        - waiting on &lt;0x000000076d186c00&gt; (a java.lang.ref.Reference$Lock)<br>        at java.lang.Object.wait(Object.java:502)<br>        at java.lang.ref.Reference.tryHandlePending(Reference.java:191)<br>        - locked &lt;0x000000076d186c00&gt; (a java.lang.ref.Reference$Lock)<br>        at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:153)<br><br>&quot;VM Thread&quot; os_prio=0 tid=0x00007f613c143000 nid=0x78c1 runnable <br><br>&quot;GC task thread#0 (ParallelGC)&quot; os_prio=0 tid=0x00007f613c023800 nid=0x78bc runnable <br><br>&quot;GC task thread#1 (ParallelGC)&quot; os_prio=0 tid=0x00007f613c025000 nid=0x78bd runnable <br><br>&quot;GC task thread#2 (ParallelGC)&quot; os_prio=0 tid=0x00007f613c027000 nid=0x78be runnable <br><br>&quot;GC task thread#3 (ParallelGC)&quot; os_prio=0 tid=0x00007f613c028800 nid=0x78bf runnable <br><br>&quot;VM Periodic Task Thread&quot; os_prio=0 tid=0x00007f613c20a000 nid=0x78e0 waiting on condition <br><br>JNI global references: 12<br><br><br>Found one Java-level deadlock:<br>=============================<br>&quot;ThreadBB&quot;:<br>  waiting to lock monitor 0x00007f6104006528 (object 0x000000076d283280, a java.lang.String),<br>  which is held by &quot;ThreadAA&quot;<br>&quot;ThreadAA&quot;:<br>  waiting to lock monitor 0x00007f6104005088 (object 0x000000076d2832b8, a java.lang.String),<br>  which is held by &quot;ThreadBB&quot;<br><br>Java stack information for the threads listed above:<br>===================================================<br>&quot;ThreadBB&quot;:<br>        at demo.DeadLock.run(DeadLock.java:22)<br>        - waiting to lock &lt;0x000000076d283280&gt; (a java.lang.String)<br>        - locked &lt;0x000000076d2832b8&gt; (a java.lang.String)<br>        at java.lang.Thread.run(Thread.java:748)<br>&quot;ThreadAA&quot;:<br>        at demo.DeadLock.run(DeadLock.java:22)<br>        - waiting to lock &lt;0x000000076d2832b8&gt; (a java.lang.String)<br>        - locked &lt;0x000000076d283280&gt; (a java.lang.String)<br>        at java.lang.Thread.run(Thread.java:748)<br><br>Found 1 deadlock.<br></code></pre></td></tr></table></figure><blockquote><p>通过上面的堆栈信息可知死锁的方法</p></blockquote><h2 id="通过Jconsole检查"><a href="#通过Jconsole检查" class="headerlink" title="通过Jconsole检查"></a>通过Jconsole检查</h2><p>1.连接到java应用<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1663253710785-b4d34ad5-fd52-44f9-805b-6337c507d9fa.png#clientId=u15320914-f935-4&from=paste&height=750&id=uf326328b&originHeight=1500&originWidth=1800&originalType=binary&ratio=1&rotation=0&showTitle=false&size=225410&status=done&style=none&taskId=u101820a6-e42f-48ca-81f6-998c013e1a9&title=&width=900" alt="image.png"><br>2.检查死锁<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1663253755693-6bb6e054-7081-4df1-b83b-92f4702ce808.png#clientId=u15320914-f935-4&from=paste&height=750&id=u1770cb95&originHeight=1500&originWidth=1800&originalType=binary&ratio=1&rotation=0&showTitle=false&size=204079&status=done&style=none&taskId=u258aa0d2-5d14-4726-94ee-f1fea4783cf&title=&width=900" alt="image.png"></p><h1 id="参考相关资料"><a href="#参考相关资料" class="headerlink" title="参考相关资料"></a>参考相关资料</h1><p><a href="https://blog.csdn.net/yuandengta/article/details/107189812">如何快速排查死锁？如何避免死锁？（值得收藏）</a></p>]]></content>
    
    
    <categories>
      
      <category>Java相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>死锁排查</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工具篇-Mermaid使用教程</title>
    <link href="/2020/12/07/yuque/cliduo/"/>
    <url>/2020/12/07/yuque/cliduo/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1657550113476-567ce1b6-c67d-4264-829f-1d183d8eddfb.png#clientId=uff351527-8c7b-4&from=markdown&id=NYPN9&originHeight=497&originWidth=1170&originalType=url&ratio=1&rotation=0&showTitle=false&size=213226&status=done&style=none&taskId=u62a74fc4-ed1e-4682-9a78-44948afbc8a&title=" alt="image.png"></p><h1 id="Mermaid简介"><a href="#Mermaid简介" class="headerlink" title="Mermaid简介"></a>Mermaid简介</h1><p>mermaid 美人鱼, 是一个类似 markdown，用文本语法来描述文档图形(流程图、 时序图、甘特图)的工具，您可以在文档中嵌入一段 mermaid 文本来生成 SVG 形式的图形 比如插入下面的代码</p><p>编写代码</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs latex">graph TD<br>    Start --&gt; Stop<br></code></pre></td></tr></table></figure><p>生成图示</p><p>编写代码</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">graph TD</span><br>    <span class="hljs-comment">B((开始))</span> <span class="hljs-literal">--</span>&gt;<span class="hljs-comment">C&#123;判断&#125;</span><br>    <span class="hljs-comment">C</span> <span class="hljs-literal">--</span>  <span class="hljs-comment">a=1</span> <span class="hljs-literal">--</span>&gt;<span class="hljs-comment">D</span><span class="hljs-title">[</span><span class="hljs-comment">执行语句1</span><span class="hljs-title">]</span><br>    <span class="hljs-comment">C</span> <span class="hljs-literal">--</span>  <span class="hljs-comment">a=2</span>  <span class="hljs-literal">--</span>&gt;<span class="hljs-comment">E</span><span class="hljs-title">[</span><span class="hljs-comment">执行语句2</span><span class="hljs-title">]</span><br>    <span class="hljs-comment">C</span> <span class="hljs-literal">--</span>  <span class="hljs-comment">a=3</span> <span class="hljs-literal">--</span>&gt;<span class="hljs-comment">F</span><span class="hljs-title">[</span><span class="hljs-comment">执行语句3</span><span class="hljs-title">]</span><br>    <span class="hljs-comment">C</span> <span class="hljs-literal">--</span> <span class="hljs-comment">a=4</span>  <span class="hljs-literal">--</span>&gt;<span class="hljs-comment">G</span><span class="hljs-title">[</span><span class="hljs-comment">执行语句4</span><span class="hljs-title">]</span><br>    <span class="hljs-comment">D</span><span class="hljs-literal">--</span>&gt; <span class="hljs-comment">AA((结束))</span><br>    <span class="hljs-comment">E</span><span class="hljs-literal">--</span>&gt; <span class="hljs-comment">AA</span><br>    <span class="hljs-comment">F</span><span class="hljs-literal">--</span>&gt; <span class="hljs-comment">AA</span><br>   <span class="hljs-comment">G</span><span class="hljs-literal">--</span>&gt; <span class="hljs-comment">AA</span><br></code></pre></td></tr></table></figure><p>生成对应图：</p><h1 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h1><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><table><thead><tr><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>TB</td><td>从上到下</td></tr><tr><td>TD</td><td>自顶向下/从上至下相同</td></tr><tr><td>BT</td><td>从下至上</td></tr><tr><td>RL</td><td>从右至左</td></tr><tr><td>LR</td><td>从左至右</td></tr></tbody></table><p>代码</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs latex">graph LR<br>    A--&gt;|text|B<br></code></pre></td></tr></table></figure><p>图示</p><h2 id="顺序图"><a href="#顺序图" class="headerlink" title="顺序图"></a>顺序图</h2><p>代码</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs latex">sequenceDiagram<br>    autonumber<br>    Alice-&gt;&gt;John: Hello John, how are you?<br>    loop Healthcheck<br>        John-&gt;&gt;John: Fight against hypochondria<br>    end<br>    Note right of John: Rational thoughts!<br>    John--&gt;&gt;Alice: Great!<br>    John-&gt;&gt;Bob: How about you?<br>    Bob--&gt;&gt;John: Jolly good!<br></code></pre></td></tr></table></figure><p>图像</p><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p>代码</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs latex">classDiagram<br>classA &lt;|-- classB : implements<br>classC *-- classD : composition<br>classE o-- classF : association<br></code></pre></td></tr></table></figure><p>图示</p><h2 id="状态图"><a href="#状态图" class="headerlink" title="状态图"></a>状态图</h2><p>代码</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs latex">stateDiagram-v2<br>    [*] --&gt; Still<br>    Still --&gt; [*]<br><br>    Still --&gt; Moving<br>    Moving --&gt; Still<br>    Moving --&gt; Crash<br>    Crash --&gt; [*]<br></code></pre></td></tr></table></figure><p>图示</p><h2 id="实体关系图"><a href="#实体关系图" class="headerlink" title="实体关系图"></a>实体关系图</h2><p>代码</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs latex">erDiagram<br>    CUSTOMER ||--o&#123; ORDER : places<br>    CUSTOMER &#123;<br>        string name<br>        string custNumber<br>        string sector<br>    &#125;<br>    ORDER ||--|&#123; LINE-ITEM : contains<br>    ORDER &#123;<br>        int orderNumber<br>        string deliveryAddress<br>    &#125;<br>    LINE-ITEM &#123;<br>        string productCode<br>        int quantity<br>        float pricePerUnit<br>    &#125;<br></code></pre></td></tr></table></figure><p>图示</p><h2 id="用户旅程"><a href="#用户旅程" class="headerlink" title="用户旅程"></a>用户旅程</h2><p>代码</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs latex">journey<br>    title My working day<br>    section Go to work<br>      Make tea: 5: Me<br>      Go upstairs: 3: Me<br>      Do work: 1: Me, Cat<br>    section Go home<br>      Go downstairs: 5: Me<br>      Sit down: 5: Me<br></code></pre></td></tr></table></figure><p>图示</p><h2 id="甘特"><a href="#甘特" class="headerlink" title="甘特"></a>甘特</h2><p>代码</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs latex">gantt<br>    title A Gantt Diagram<br>    dateFormat  YYYY-MM-DD<br>    section Section<br>    A task           :a1, 2014-01-01, 30d<br>    Another task     :after a1  , 20d<br>    section Another<br>    Task in sec      :2014-01-12  , 12d<br>    another task      : 24d<br></code></pre></td></tr></table></figure><p>图示</p><h2 id="饼形图"><a href="#饼形图" class="headerlink" title="饼形图"></a>饼形图</h2><p>代码</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs latex">pie<br>    title Key elements in Product X<br>    &quot;Calcium&quot; : 42.96<br>    &quot;Potassium&quot; : 50.05<br>    &quot;Magnesium&quot; : 10.01<br>    &quot;Iron&quot; :  5<br></code></pre></td></tr></table></figure><p>图示</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://mermaid-js.github.io/mermaid/#/">官方文档</a></p>]]></content>
    
    
    <categories>
      
      <category>工具相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mermaid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux篇-select/poll/epoll源码分析</title>
    <link href="/2020/12/03/yuque/xzqx4t/"/>
    <url>/2020/12/03/yuque/xzqx4t/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1657548314271-6146a444-380f-45c1-9ad1-2f51537c2f24.png#clientId=u121e745f-0dbf-4&from=markdown&id=DjrFn&originHeight=383&originWidth=900&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=u3dc3c2e2-816b-4793-b243-b039b6a65f9&title="><br><a href="https://github.com/torvalds/linux"></a><br>I/O复用使得程序同时监听多个文件描述符</p><p>通常网络程序在以下情况需要使用到I/O复用</p><ul><li>客户端程序（用户进程）要同时处理多个socket</li><li>客户端程序要同时处理用户输入和网络连接</li><li>TCP服务要同时处理监听socket和连接socket（这是I/O复用最多的场景）</li><li>服务器需要同时处理TCP请求和UDP请求</li><li>服务器要同时监听多个端口，或者处理多种服务</li></ul><blockquote><p>Linux下实现I/O复用的系统调用主要有select、poll和epoll</p></blockquote><h1 id="select模型"><a href="#select模型" class="headerlink" title="select模型"></a>select模型</h1><p>select系统调用的用途是：在一段时间内，监听用户感兴趣的文件描述符上的可读、可写和异常事件。</p><h3 id="代码流程"><a href="#代码流程" class="headerlink" title="代码流程"></a>代码流程</h3><h4 id="1-系统调用开始"><a href="#1-系统调用开始" class="headerlink" title="1.系统调用开始"></a>1.系统调用开始</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 代码基于linux5-19-RC8 linux/fs/select.c</span><br><span class="hljs-comment">// 系统调用别名</span><br>SYSCALL_DEFINE5(select, <span class="hljs-type">int</span>, n, fd_set __user *, inp, fd_set __user *, outp,fd_set __user *, <span class="hljs-built_in">exp</span>, <span class="hljs-keyword">struct</span> __kernel_old_timeval __user *, tvp)&#123;<br><span class="hljs-keyword">return</span> kern_select(n, inp, outp, <span class="hljs-built_in">exp</span>, tvp);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">undef</span> __FD_SETSIZE</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __FD_SETSIZE1024 <span class="hljs-comment">//fd_set最大支持1024个描述符</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> fds_bits[__FD_SETSIZE / (<span class="hljs-number">8</span> * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">long</span>))];<br>&#125; __kernel_fd_set;<br><br><span class="hljs-comment">//linux/types.h</span><br><span class="hljs-keyword">typedef</span> __kernel_fd_setfd_set;<br><br></code></pre></td></tr></table></figure><h4 id="2-调用kern-select函数执行"><a href="#2-调用kern-select函数执行" class="headerlink" title="2.调用kern_select函数执行"></a>2.调用kern_select函数执行</h4><blockquote><p>判断是否是带有超时时间如果带有则需要复制到内核空间</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * select调用入口</span><br><span class="hljs-comment"> * @param n 指定被监听文件描述符的总数</span><br><span class="hljs-comment"> * @param __user 用户空间宏定义 表示后面的指针是用户空间的数据</span><br><span class="hljs-comment"> * @param inp 读描述符集指针</span><br><span class="hljs-comment"> * @param outp 写描述符集指针</span><br><span class="hljs-comment"> * @param exp 异常描述符集指针</span><br><span class="hljs-comment"> * @param tvp 超时时间指针</span><br><span class="hljs-comment"> * @return 返回可以操作的文件描述符数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">kern_select</span><span class="hljs-params">(<span class="hljs-type">int</span> n, fd_set __user *inp, fd_set __user *outp, fd_set __user *<span class="hljs-built_in">exp</span>, <span class="hljs-keyword">struct</span> __kernel_old_timeval __user *tvp)</span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timespec64</span> <span class="hljs-title">end_time</span>, *<span class="hljs-title">to</span> =</span> <span class="hljs-literal">NULL</span>;<span class="hljs-comment">//超时结构体</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> __<span class="hljs-title">kernel_old_timeval</span> <span class="hljs-title">tv</span>;</span><span class="hljs-comment">//旧版本超时结构体</span><br><span class="hljs-type">int</span> ret;<br><span class="hljs-comment">//如果是带有超时调用</span><br><span class="hljs-keyword">if</span> (tvp) &#123;<br><span class="hljs-comment">//将超时参数从用户空间的数据拷贝到内核空间</span><br><span class="hljs-keyword">if</span> (copy_from_user(&amp;tv, tvp, <span class="hljs-keyword">sizeof</span>(tv)))<span class="hljs-keyword">return</span> -EFAULT;<br><span class="hljs-comment">//将超时时间设置给end_time变量</span><br>to = &amp;end_time;<br><span class="hljs-keyword">if</span> (poll_select_set_timeout(to,tv.tv_sec + (tv.tv_usec / USEC_PER_SEC),(tv.tv_usec % USEC_PER_SEC) * NSEC_PER_USEC))<span class="hljs-keyword">return</span> -EINVAL;<br>&#125;<br><span class="hljs-comment">//（主线）执行select调用</span><br>ret = core_sys_select(n, inp, outp, <span class="hljs-built_in">exp</span>, to);<br><span class="hljs-comment">//将剩余时间写回</span><br><span class="hljs-keyword">return</span> poll_select_finish(&amp;end_time, tvp, PT_TIMEVAL, ret);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-调用core-sys-select执行"><a href="#3-调用core-sys-select执行" class="headerlink" title="3.调用core_sys_select执行"></a>3.调用core_sys_select执行</h4><blockquote><p>分配位图内存</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 核心系统调用select</span><br><span class="hljs-comment">* @param n 指定被监听文件描述符的总数</span><br><span class="hljs-comment">* @param __user 用户空间宏定义 表示后面的指针是用户空间的数据</span><br><span class="hljs-comment">* @param inp 读描述符集指针</span><br><span class="hljs-comment">* @param outp 写描述符集指针</span><br><span class="hljs-comment">* @param exp 异常描述符集指针</span><br><span class="hljs-comment">* @param 超时时间指针（已复制到内核空间）</span><br><span class="hljs-comment">* @return 返回可以操作的文件描述符数</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">core_sys_select</span><span class="hljs-params">(<span class="hljs-type">int</span> n, fd_set __user *inp, fd_set __user *outp,fd_set __user *<span class="hljs-built_in">exp</span>, <span class="hljs-keyword">struct</span> timespec64 *end_time)</span>&#123;<br>fd_set_bits fds;<span class="hljs-comment">//文件描述符集位图（结构体看3.1）</span><br><span class="hljs-type">void</span> *bits;<br><span class="hljs-type">int</span> ret, max_fds;<span class="hljs-comment">//最大文件描述符</span><br><span class="hljs-type">size_t</span> size, alloc_size;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fdtable</span> *<span class="hljs-title">fdt</span>;</span><span class="hljs-comment">//文件描述符表</span><br><span class="hljs-comment">/* Allocate small arguments on the stack to save memory and be faster */</span><br><span class="hljs-comment">//在栈上分配一段内存</span><br><span class="hljs-type">long</span> stack_fds[SELECT_STACK_ALLOC/<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">long</span>)];<br>ret = -EINVAL;<br><span class="hljs-comment">//参数验证小于0直接返回</span><br><span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">0</span>)<span class="hljs-keyword">goto</span> out_nofds;<br><span class="hljs-comment">/* max_fds can increase, so grab it once to avoid race */</span><br><span class="hljs-comment">//获得当前进程打开的文件 fd 表，获取最大的 fd</span><br>rcu_read_lock();<br>    <span class="hljs-comment">//读取文件描述符表</span><br>fdt = files_fdtable(current-&gt;files);<br>    <span class="hljs-comment">//从files结构中获取最大值（当前进程能够处理的最大文件数目）</span><br>max_fds = fdt-&gt;max_fds;<br>    <span class="hljs-comment">//释放rcu锁</span><br>rcu_read_unlock();<br><span class="hljs-comment">//防止n超过最大的fds</span><br><span class="hljs-keyword">if</span> (n &gt; max_fds)n = max_fds;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * We need 6 bitmaps (in/out/ex for both incoming and outgoing),</span><br><span class="hljs-comment"> * since we used fdset we need to allocate memory in units of</span><br><span class="hljs-comment"> * long-words. </span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//根据传入的需要监控的fd数量获取其需要分配的字节大小</span><br>size = FDS_BYTES(n);<br>bits = stack_fds;<br><span class="hljs-comment">/* 如果栈上的内存太小，那么就在堆上重新分配内存</span><br><span class="hljs-comment">     * 为什么是除以6呢？</span><br><span class="hljs-comment">     * 因为每个文件描述符要占6个bit（输入：可读，可写，异常；输出结果：可读，可写，异常）*/</span><br><span class="hljs-keyword">if</span> (size &gt; <span class="hljs-keyword">sizeof</span>(stack_fds) / <span class="hljs-number">6</span>) &#123;<br><span class="hljs-comment">/* Not enough space in on-stack array; must use kmalloc */</span><br>ret = -ENOMEM;<br><span class="hljs-keyword">if</span> (size &gt; (SIZE_MAX / <span class="hljs-number">6</span>))<span class="hljs-keyword">goto</span> out_nofds;<br>alloc_size = <span class="hljs-number">6</span> * size;<br>bits = kvmalloc(alloc_size, GFP_KERNEL);<span class="hljs-comment">//分配虚拟内存</span><br><span class="hljs-keyword">if</span> (!bits)<span class="hljs-keyword">goto</span> out_nofds;<span class="hljs-comment">//分配失败直接结束</span><br>&#125;<br><span class="hljs-comment">//设置好bitmap对应的内存地址</span><br>fds.in      = bits;<span class="hljs-comment">//可读</span><br>fds.out     = bits +   size;<span class="hljs-comment">//可写</span><br>fds.ex      = bits + <span class="hljs-number">2</span>*size;<span class="hljs-comment">//异常</span><br>fds.res_in  = bits + <span class="hljs-number">3</span>*size;<span class="hljs-comment">//返回结果，可读</span><br>fds.res_out = bits + <span class="hljs-number">4</span>*size;<span class="hljs-comment">//返回结果，可写</span><br>fds.res_ex  = bits + <span class="hljs-number">5</span>*size;<span class="hljs-comment">//返回结果，异常</span><br><span class="hljs-comment">//将fd从用户空间（用户进程）拷贝到内核空间</span><br><span class="hljs-keyword">if</span> ((ret = get_fd_set(n, inp, fds.in)) ||(ret = get_fd_set(n, outp, fds.out)) ||(ret = get_fd_set(n, <span class="hljs-built_in">exp</span>, fds.ex)))<span class="hljs-keyword">goto</span> out;<br><span class="hljs-comment">//清空返回结果的文件描述符集</span><br>zero_fd_set(n, fds.res_in);<br>zero_fd_set(n, fds.res_out);<br>zero_fd_set(n, fds.res_ex);<br><span class="hljs-comment">//执行select（主线）</span><br>ret = do_select(n, &amp;fds, end_time);<br>    <span class="hljs-comment">//错误结束</span><br><span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>)<span class="hljs-keyword">goto</span> out;<br>    <span class="hljs-comment">//超时结束</span><br><span class="hljs-keyword">if</span> (!ret) &#123;<br>ret = -ERESTARTNOHAND;<br>        <span class="hljs-comment">// 检测到有信号则系统调用退出，返回用户空间执行信号处理函数</span><br><span class="hljs-keyword">if</span> (signal_pending(current))<span class="hljs-keyword">goto</span> out;<br>ret = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//将fd拷贝到用户空间（用户进程）</span><br><span class="hljs-keyword">if</span> (set_fd_set(n, inp, fds.res_in) ||set_fd_set(n, outp, fds.res_out) ||set_fd_set(n, <span class="hljs-built_in">exp</span>, fds.res_ex))ret = -EFAULT;<br><br>out:<br>    <span class="hljs-comment">//如果是堆内存需要主动释放</span><br><span class="hljs-keyword">if</span> (bits != stack_fds)kvfree(bits);<span class="hljs-comment">//释放堆内存</span><br>out_nofds:<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="3-1结构体-fd-set-bits"><a href="#3-1结构体-fd-set-bits" class="headerlink" title="3.1结构体 fd_set_bits"></a>3.1结构体 fd_set_bits</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-comment">//指针都是用来指向描述符集合</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *in, *out, *ex;<span class="hljs-comment">//输入的文件描述符集事件</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *res_in, *res_out, *res_ex;<span class="hljs-comment">//响应的文件描述符集事件</span><br>&#125; fd_set_bits;<br></code></pre></td></tr></table></figure><h4 id="3-2结构体-fdtable文件描述符表"><a href="#3-2结构体-fdtable文件描述符表" class="headerlink" title="3.2结构体 fdtable文件描述符表"></a>3.2结构体 fdtable文件描述符表</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fdtable</span> &#123;</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> max_fds;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> __<span class="hljs-title">rcu</span> **<span class="hljs-title">fd</span>;</span>      <span class="hljs-comment">/* current fd array */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *close_on_exec;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *open_fds;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *full_fds_bits;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rcu_head</span> <span class="hljs-title">rcu</span>;</span><br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="4-调用-do-select-方法"><a href="#4-调用-do-select-方法" class="headerlink" title="4.调用 do_select 方法"></a>4.调用 do_select 方法</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * select 的具体实现</span><br><span class="hljs-comment"> * @param n 指定被监听文件描述符的总数</span><br><span class="hljs-comment"> * @param fds 文件描述符位图</span><br><span class="hljs-comment"> * @param end_time 超时时间</span><br><span class="hljs-comment"> * @return</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">do_select</span><span class="hljs-params">(<span class="hljs-type">int</span> n, fd_set_bits *fds, <span class="hljs-keyword">struct</span> timespec64 *end_time)</span>&#123;<br><span class="hljs-type">ktime_t</span> expire, *to = <span class="hljs-literal">NULL</span>;<span class="hljs-comment">//</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poll_wqueues</span> <span class="hljs-title">table</span>;</span><span class="hljs-comment">//定义一个poll_wqueues变量</span><br>poll_table *wait;<br><span class="hljs-type">int</span> retval, i, timed_out = <span class="hljs-number">0</span>;<span class="hljs-comment">//超时标识</span><br>u64 slack = <span class="hljs-number">0</span>;<br><span class="hljs-type">__poll_t</span> busy_flag = net_busy_loop_on() ? POLL_BUSY_LOOP : <span class="hljs-number">0</span>;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> busy_start = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">//Read Copy Update 锁机制</span><br>rcu_read_lock();<br><span class="hljs-comment">//根据设置的fd位图fds，检查确认所有位置对应的fd确实被打开了，并返回最大的fd</span><br>retval = max_select_fd(n, fds);<br><span class="hljs-comment">//释放锁</span><br>rcu_read_unlock();<br><span class="hljs-comment">//如果为负值直接返回</span><br><span class="hljs-keyword">if</span> (retval &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> retval;<br>n = retval;<br><span class="hljs-comment">//初始化 poll_wqueues （重点）</span><br><span class="hljs-comment">//poll_wqueues.poll_table.qproc函数指针初始化，该函数是驱动程序中poll函数（fop-&gt;poll）实现中必须要调用的poll_wait()中使用的函数。</span><br>poll_initwait(&amp;table);<br>wait = &amp;table.pt;<span class="hljs-comment">//poll_table封装在poll_wqueues中</span><br><span class="hljs-comment">//判断是否超时</span><br><span class="hljs-keyword">if</span> (end_time &amp;&amp; !end_time-&gt;tv_sec &amp;&amp; !end_time-&gt;tv_nsec) &#123;<br>wait-&gt;_qproc = <span class="hljs-literal">NULL</span>;<br>timed_out = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">//重新估算时间</span><br><span class="hljs-keyword">if</span> (end_time &amp;&amp; !timed_out)slack = select_estimate_accuracy(end_time);<br><br>retval = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (;;) &#123;<span class="hljs-comment">//死循环</span><br><span class="hljs-comment">//六种类型指针</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *rinp, *routp, *rexp, *inp, *outp, *<span class="hljs-built_in">exp</span>;<br><span class="hljs-type">bool</span> can_busy_loop = <span class="hljs-literal">false</span>;<br><span class="hljs-comment">//给上面指针赋值，指向fds对应的类型</span><br>inp = fds-&gt;in; outp = fds-&gt;out; <span class="hljs-built_in">exp</span> = fds-&gt;ex;<br>rinp = fds-&gt;res_in; routp = fds-&gt;res_out; rexp = fds-&gt;res_ex;<br><span class="hljs-comment">//遍历所有的fd（n个文件描述符）</span><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; ++rinp, ++routp, ++rexp) &#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> in, out, ex, all_bits, bit = <span class="hljs-number">1</span>, j;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> res_in = <span class="hljs-number">0</span>, res_out = <span class="hljs-number">0</span>, res_ex = <span class="hljs-number">0</span>;<br><span class="hljs-type">__poll_t</span> mask;<br><span class="hljs-comment">// 先取出当前循环周期中的32（设long占32位）个文件描述符对应的bitmaps</span><br>in = *inp++; out = *outp++; ex = *<span class="hljs-built_in">exp</span>++;<br>all_bits = in | out | ex;<span class="hljs-comment">//按位或，组合所有类型</span><br><span class="hljs-keyword">if</span> (all_bits == <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//当前位图块没有需要处理的文件描述符(关心的fd)，则结束本块fd，调到下一个fd位图块</span><br>i += BITS_PER_LONG;<span class="hljs-comment">//BITS_PER_LONG 位图宏定义</span><br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-comment">//遍历当前所有位</span><br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; BITS_PER_LONG; ++j, ++i, bit &lt;&lt;= <span class="hljs-number">1</span>) &#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fd</span> <span class="hljs-title">f</span>;</span><br><span class="hljs-comment">//struct fd &#123;</span><br><span class="hljs-comment">//struct file *file;//文件指针</span><br><span class="hljs-comment">//unsigned int flags;</span><br><span class="hljs-comment">//&#125;;</span><br><span class="hljs-comment">//i超出n范围直接跳出</span><br><span class="hljs-keyword">if</span> (i &gt;= n)<span class="hljs-keyword">break</span>;<br><span class="hljs-comment">//跳过不关心的bit</span><br><span class="hljs-keyword">if</span> (!(bit &amp; all_bits))<span class="hljs-keyword">continue</span>;<br>mask = EPOLLNVAL;<br><span class="hljs-comment">//获取当前文件描述符的file结构指针</span><br>f = fdget(i);<br><span class="hljs-comment">//因为没有rdlock加锁，因此当前进程中描述符i对应的文件可能已经 被异步关闭。这就是为什么需要判断file是否为空的原因</span><br><span class="hljs-comment">//（重点主线）如果文件存在</span><br><span class="hljs-keyword">if</span> (f.file) &#123;<br><span class="hljs-comment">// 设置poll_table智能柜想要监听的事件</span><br>wait_key_set(wait, in, out, bit,busy_flag);<br><span class="hljs-comment">//（重点）调用文件的poll操作，返回准备好的事件</span><br>mask = vfs_poll(f.file, wait);<br><span class="hljs-comment">// 关闭文件监听</span><br>fdput(f);<br>&#125;<br><span class="hljs-comment">/* events验证，其中retval表示就绪的资源数 */</span><br><span class="hljs-comment">//可读</span><br><span class="hljs-keyword">if</span> ((mask &amp; POLLIN_SET) &amp;&amp; (in &amp; bit)) &#123;<br>res_in |= bit;<span class="hljs-comment">//设置响应</span><br>retval++;<br>wait-&gt;_qproc = <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-comment">//可写</span><br><span class="hljs-keyword">if</span> ((mask &amp; POLLOUT_SET) &amp;&amp; (out &amp; bit)) &#123;<br>res_out |= bit;<br>retval++;<br>wait-&gt;_qproc = <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-comment">//异常</span><br><span class="hljs-keyword">if</span> ((mask &amp; POLLEX_SET) &amp;&amp; (ex &amp; bit)) &#123;<br>res_ex |= bit;<br>retval++;<br>wait-&gt;_qproc = <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-comment">/* got something, stop busy polling */</span><br><span class="hljs-keyword">if</span> (retval) &#123;<br>can_busy_loop = <span class="hljs-literal">false</span>;<br>busy_flag = <span class="hljs-number">0</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * only remember a returned</span><br><span class="hljs-comment"> * POLL_BUSY_LOOP if we asked for it</span><br><span class="hljs-comment"> */</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (busy_flag &amp; mask)can_busy_loop = <span class="hljs-literal">true</span>;<br><br>&#125;<br><span class="hljs-comment">/* 写出结果，注意写出的目的地是传进来的fd_set_bits */</span><br><span class="hljs-keyword">if</span> (res_in)*rinp = res_in;<br><span class="hljs-keyword">if</span> (res_out)*routp = res_out;<br><span class="hljs-keyword">if</span> (res_ex)*rexp = res_ex;<br><span class="hljs-comment">//主动让出cpu等待下次循环</span><br>cond_resched();<br>&#125;<span class="hljs-comment">//遍历完n个fd</span><br>wait-&gt;_qproc = <span class="hljs-literal">NULL</span>;<br><span class="hljs-comment">//如果当前这轮循环有准备好的事件|超时|（中断）检测到有信号则系统调用退出，返回用户空间执行信号处理函数 跳出死循环</span><br><span class="hljs-keyword">if</span> (retval || timed_out || signal_pending(current))<span class="hljs-keyword">break</span>;<br><span class="hljs-comment">//存在错误</span><br><span class="hljs-keyword">if</span> (table.error) &#123;<br>retval = table.error;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br><span class="hljs-comment">/* only if found POLL_BUSY_LOOP sockets &amp;&amp; not out of time */</span><br><span class="hljs-keyword">if</span> (can_busy_loop &amp;&amp; !need_resched()) &#123;<br><span class="hljs-keyword">if</span> (!busy_start) &#123;<br>busy_start = busy_loop_current_time();<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (!busy_loop_timeout(busy_start))<span class="hljs-keyword">continue</span>;<br>&#125;<br>busy_flag = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * If this is the first loop and we have a timeout</span><br><span class="hljs-comment"> * given, then we convert to ktime_t and set the to</span><br><span class="hljs-comment"> * pointer to the expiry value.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (end_time &amp;&amp; !to) &#123;<br>expire = timespec64_to_ktime(*end_time);<br>to = &amp;expire;<br>&#125;<br><span class="hljs-comment">/* 能够到达这一步就说明没有发生就绪、中断以及超时 */</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 判断poll_wqueues是否已触发，如果还没有触发，那就设置当前运行状态为可中断阻塞并进行睡眠，等待被唤醒...</span><br><span class="hljs-comment"> * 被唤醒之后重新进行迭代，获取资源就绪情况...</span><br><span class="hljs-comment"> * 在向资源注册监听与判断poll_wqueues是否已触发这段时间内，可能资源异步就绪了，如果没有触发标志，那么可能就</span><br><span class="hljs-comment"> * 会丢失资源就绪这个事件，可能导致select()永久沉睡...</span><br><span class="hljs-comment"> * 这就是为什么需要poll_wqueues.triggered字段的原因...</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (!poll_schedule_timeout(&amp;table, TASK_INTERRUPTIBLE,to, slack))timed_out = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">      * 1. 卸载安装到资源监听队列上的poll_table_entry</span><br><span class="hljs-comment">      * 2. 释放poll_wqueues占用的资源</span><br><span class="hljs-comment">      */</span><br>poll_freewait(&amp;table);<br><span class="hljs-comment">//返回就绪的资源数</span><br><span class="hljs-keyword">return</span> retval;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-1-结构体"><a href="#4-1-结构体" class="headerlink" title="4.1 结构体"></a>4.1 结构体</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poll_wqueues</span> &#123;</span><br>poll_table pt;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poll_table_page</span> *<span class="hljs-title">table</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span> *<span class="hljs-title">polling_task</span>;</span><span class="hljs-comment">//保存当前调用select的用户进程struct task_struct结构体</span><br><span class="hljs-type">int</span> triggered;<span class="hljs-comment">//当前用户进程被唤醒后置成1，以免该进程接着进睡眠</span><br><span class="hljs-type">int</span> error;<span class="hljs-comment">//错误码</span><br><span class="hljs-type">int</span> inline_index;<span class="hljs-comment">//数组inline_entries的引用下标</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poll_table_entry</span> <span class="hljs-title">inline_entries</span>[<span class="hljs-title">N_INLINE_POLL_ENTRIES</span>];</span><br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poll_table_page</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poll_table_page</span> * <span class="hljs-title">next</span>;</span><span class="hljs-comment">//指向下一个申请的物理页</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poll_table_entry</span> * <span class="hljs-title">entry</span>;</span><span class="hljs-comment">//指向entries[]中首个待分配(空的) poll_table_entry地址</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poll_table_entry</span> <span class="hljs-title">entries</span>[];</span><span class="hljs-comment">//该page页后面剩余的空间都是待分配的poll_table_entry结构体</span><br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poll_table_struct</span> &#123;</span><br>poll_queue_proc _qproc;<br><span class="hljs-type">__poll_t</span> _key;<br>&#125; poll_table;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poll_table_entry</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> *<span class="hljs-title">filp</span>;</span><span class="hljs-comment">//指向特定fd对应的file结构体;</span><br><span class="hljs-type">__poll_t</span> key;<span class="hljs-comment">//等待特定fd对应硬件设备的事件掩码，如POLLIN、 POLLOUT、POLLERR</span><br><span class="hljs-type">wait_queue_entry_t</span> wait;<span class="hljs-comment">//代表调用select()的应用进程，等待在fd对应设备的特定事件 (读或者写)的等待队列头上，的等待队列项</span><br><span class="hljs-type">wait_queue_head_t</span> *wait_address;<span class="hljs-comment">//设备驱动程序中特定事件的等待队列头(该fd执行fop-&gt;poll，需要等待时在哪等，所以叫等待地址)</span><br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="4-2-调用-poll-initwait-进行初始化"><a href="#4-2-调用-poll-initwait-进行初始化" class="headerlink" title="4.2 调用 poll_initwait 进行初始化"></a>4.2 调用 poll_initwait 进行初始化</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">poll_initwait</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> poll_wqueues *pwq)</span>&#123;<br>init_poll_funcptr(&amp;pwq-&gt;pt, __pollwait);<br>pwq-&gt;polling_task = current;<br>pwq-&gt;triggered = <span class="hljs-number">0</span>;<br>pwq-&gt;error = <span class="hljs-number">0</span>;<br>pwq-&gt;table = <span class="hljs-literal">NULL</span>;<br>pwq-&gt;inline_index = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-4-调用-init-poll-funcptr-初始化开启监听事件"><a href="#4-4-调用-init-poll-funcptr-初始化开启监听事件" class="headerlink" title="4.4 调用 init_poll_funcptr 初始化开启监听事件"></a>4.4 调用 init_poll_funcptr 初始化开启监听事件</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">init_poll_funcptr</span><span class="hljs-params">(poll_table *pt, poll_queue_proc qproc)</span>&#123;<br>pt-&gt;_qproc = qproc;<br>pt-&gt;_key   = ~(<span class="hljs-type">__poll_t</span>)<span class="hljs-number">0</span>;<span class="hljs-comment">//缺省开启全部事件监听</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-5-调用wait-key-set设置要监听的事件"><a href="#4-5-调用wait-key-set设置要监听的事件" class="headerlink" title="4.5 调用wait_key_set设置要监听的事件"></a>4.5 调用wait_key_set设置要监听的事件</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> POLLIN_SET (EPOLLRDNORM | EPOLLRDBAND | EPOLLIN | EPOLLHUP | EPOLLERR | EPOLLNVAL)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> POLLOUT_SET (EPOLLWRBAND | EPOLLWRNORM | EPOLLOUT | EPOLLERR | EPOLLNVAL)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> POLLEX_SET (EPOLLPRI | EPOLLNVAL)</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 设置 poll_table 要监听的事件</span><br><span class="hljs-comment"> * @param wait</span><br><span class="hljs-comment"> * @param in</span><br><span class="hljs-comment"> * @param out</span><br><span class="hljs-comment"> * @param bit</span><br><span class="hljs-comment"> * @param ll_flag</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">wait_key_set</span><span class="hljs-params">(poll_table *wait, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> in,<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> out, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> bit,<span class="hljs-type">__poll_t</span> ll_flag)</span> &#123;<br>wait-&gt;_key = POLLEX_SET | ll_flag;<br><span class="hljs-keyword">if</span> (in &amp; bit)wait-&gt;_key |= POLLIN_SET;<span class="hljs-comment">//in事件</span><br><span class="hljs-keyword">if</span> (out &amp; bit)wait-&gt;_key |= POLLOUT_SET;<span class="hljs-comment">//out事件</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="4-6-调用-vfs-poll-返回准备好的事件"><a href="#4-6-调用-vfs-poll-返回准备好的事件" class="headerlink" title="4.6 调用 vfs_poll 返回准备好的事件"></a>4.6 调用 vfs_poll 返回准备好的事件</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 调用文件操作的poll方法</span><br><span class="hljs-comment"> * @param file 文件</span><br><span class="hljs-comment"> * @param pt poll_table_struct 结构体指针</span><br><span class="hljs-comment"> * @return 返回准备好的事件</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">__poll_t</span> <span class="hljs-title function_">vfs_poll</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *file, <span class="hljs-keyword">struct</span> poll_table_struct *pt)</span>&#123;<br><span class="hljs-comment">//如果 fd 所在的文件系统的 file_operations 实现了 poll ，那么就会直接调用，如果没有，那么就会报告响应的错误码</span><br><span class="hljs-keyword">if</span> (unlikely(!file-&gt;f_op-&gt;poll))<span class="hljs-keyword">return</span> DEFAULT_POLLMASK;<br><span class="hljs-keyword">return</span> file-&gt;f_op-&gt;poll(file, pt);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-7-结构体file"><a href="#4-7-结构体file" class="headerlink" title="4.7 结构体file"></a>4.7 结构体file</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//linux-5.19-rc8/include/linux/fs.h</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">llist_node</span><span class="hljs-title">fu_llist</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rcu_head</span> <span class="hljs-title">fu_rcuhead</span>;</span><br>&#125; f_u;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">path</span><span class="hljs-title">f_path</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inode</span>*<span class="hljs-title">f_inode</span>;</span><span class="hljs-comment">/* cached value */</span><br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file_operations</span>*<span class="hljs-title">f_op</span>;</span><span class="hljs-comment">//（主线）文件支持的操作</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Protects f_ep, f_flags.</span><br><span class="hljs-comment"> * Must not be taken from IRQ context.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">spinlock_t</span>f_lock;<br><span class="hljs-type">atomic_long_t</span>f_count;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> f_flags;<br><span class="hljs-type">fmode_t</span>f_mode;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mutex</span><span class="hljs-title">f_pos_lock</span>;</span><br><span class="hljs-type">loff_t</span>f_pos;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fown_struct</span><span class="hljs-title">f_owner</span>;</span><br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cred</span>*<span class="hljs-title">f_cred</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file_ra_state</span><span class="hljs-title">f_ra</span>;</span><br><br>u64f_version;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_SECURITY</span><br><span class="hljs-type">void</span>*f_security;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-comment">/* needed for tty driver, and maybe others */</span><br><span class="hljs-type">void</span>*private_data;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_EPOLL</span><br><span class="hljs-comment">/* Used by fs/eventpoll.c to link all the hooks to this file */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hlist_head</span>*<span class="hljs-title">f_ep</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* #ifdef CONFIG_EPOLL */</span></span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">address_space</span>*<span class="hljs-title">f_mapping</span>;</span><br><span class="hljs-type">errseq_t</span>f_wb_err;<br><span class="hljs-type">errseq_t</span>f_sb_err; <span class="hljs-comment">/* for syncfs */</span><br>&#125; __randomize_layout<br>  __attribute__((aligned(<span class="hljs-number">4</span>)));<span class="hljs-comment">/* lest something weird decides that 2 is OK */</span><br></code></pre></td></tr></table></figure><h4 id="4-8-结构体-file-operations-（4-6中调用的poll）"><a href="#4-8-结构体-file-operations-（4-6中调用的poll）" class="headerlink" title="4.8 结构体 file_operations （4.6中调用的poll）"></a>4.8 结构体 file_operations （4.6中调用的poll）</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file_operations</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">module</span> *<span class="hljs-title">owner</span>;</span><br><span class="hljs-type">loff_t</span> (*llseek) (<span class="hljs-keyword">struct</span> file *, <span class="hljs-type">loff_t</span>, <span class="hljs-type">int</span>);<br><span class="hljs-type">ssize_t</span> (*read) (<span class="hljs-keyword">struct</span> file *, <span class="hljs-type">char</span> __user *, <span class="hljs-type">size_t</span>, <span class="hljs-type">loff_t</span> *);<br><span class="hljs-type">ssize_t</span> (*write) (<span class="hljs-keyword">struct</span> file *, <span class="hljs-type">const</span> <span class="hljs-type">char</span> __user *, <span class="hljs-type">size_t</span>, <span class="hljs-type">loff_t</span> *);<br><span class="hljs-type">ssize_t</span> (*read_iter) (<span class="hljs-keyword">struct</span> kiocb *, <span class="hljs-keyword">struct</span> iov_iter *);<br><span class="hljs-type">ssize_t</span> (*write_iter) (<span class="hljs-keyword">struct</span> kiocb *, <span class="hljs-keyword">struct</span> iov_iter *);<br><span class="hljs-type">int</span> (*iopoll)(<span class="hljs-keyword">struct</span> kiocb *kiocb, <span class="hljs-keyword">struct</span> io_comp_batch *,<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flags);<br><span class="hljs-type">int</span> (*iterate) (<span class="hljs-keyword">struct</span> file *, <span class="hljs-keyword">struct</span> dir_context *);<br><span class="hljs-type">int</span> (*iterate_shared) (<span class="hljs-keyword">struct</span> file *, <span class="hljs-keyword">struct</span> dir_context *);<br><span class="hljs-type">__poll_t</span> (*poll) (<span class="hljs-keyword">struct</span> file *, <span class="hljs-keyword">struct</span> poll_table_struct *);<span class="hljs-comment">//（主线）调用文件的poll方法操作</span><br><span class="hljs-type">long</span> (*unlocked_ioctl) (<span class="hljs-keyword">struct</span> file *, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>);<br><span class="hljs-type">long</span> (*compat_ioctl) (<span class="hljs-keyword">struct</span> file *, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>);<br><span class="hljs-type">int</span> (*mmap) (<span class="hljs-keyword">struct</span> file *, <span class="hljs-keyword">struct</span> vm_area_struct *);<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> mmap_supported_flags;<br><span class="hljs-type">int</span> (*open) (<span class="hljs-keyword">struct</span> inode *, <span class="hljs-keyword">struct</span> file *);<br><span class="hljs-type">int</span> (*flush) (<span class="hljs-keyword">struct</span> file *, <span class="hljs-type">fl_owner_t</span> id);<br><span class="hljs-type">int</span> (*release) (<span class="hljs-keyword">struct</span> inode *, <span class="hljs-keyword">struct</span> file *);<br><span class="hljs-type">int</span> (*fsync) (<span class="hljs-keyword">struct</span> file *, <span class="hljs-type">loff_t</span>, <span class="hljs-type">loff_t</span>, <span class="hljs-type">int</span> datasync);<br><span class="hljs-type">int</span> (*fasync) (<span class="hljs-type">int</span>, <span class="hljs-keyword">struct</span> file *, <span class="hljs-type">int</span>);<br><span class="hljs-type">int</span> (*lock) (<span class="hljs-keyword">struct</span> file *, <span class="hljs-type">int</span>, <span class="hljs-keyword">struct</span> file_lock *);<br><span class="hljs-type">ssize_t</span> (*sendpage) (<span class="hljs-keyword">struct</span> file *, <span class="hljs-keyword">struct</span> page *, <span class="hljs-type">int</span>, <span class="hljs-type">size_t</span>, <span class="hljs-type">loff_t</span> *, <span class="hljs-type">int</span>);<br><span class="hljs-type">unsigned</span> <span class="hljs-title function_">long</span> <span class="hljs-params">(*get_unmapped_area)</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)</span>;<br><span class="hljs-type">int</span> (*check_flags)(<span class="hljs-type">int</span>);<br><span class="hljs-type">int</span> (*flock) (<span class="hljs-keyword">struct</span> file *, <span class="hljs-type">int</span>, <span class="hljs-keyword">struct</span> file_lock *);<br><span class="hljs-type">ssize_t</span> (*splice_write)(<span class="hljs-keyword">struct</span> pipe_inode_info *, <span class="hljs-keyword">struct</span> file *, <span class="hljs-type">loff_t</span> *, <span class="hljs-type">size_t</span>, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>);<br><span class="hljs-type">ssize_t</span> (*splice_read)(<span class="hljs-keyword">struct</span> file *, <span class="hljs-type">loff_t</span> *, <span class="hljs-keyword">struct</span> pipe_inode_info *, <span class="hljs-type">size_t</span>, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>);<br><span class="hljs-type">int</span> (*setlease)(<span class="hljs-keyword">struct</span> file *, <span class="hljs-type">long</span>, <span class="hljs-keyword">struct</span> file_lock **, <span class="hljs-type">void</span> **);<br><span class="hljs-type">long</span> (*fallocate)(<span class="hljs-keyword">struct</span> file *file, <span class="hljs-type">int</span> mode, <span class="hljs-type">loff_t</span> offset,<span class="hljs-type">loff_t</span> len);<br><span class="hljs-type">void</span> (*show_fdinfo)(<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-keyword">struct</span> file *f);<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> CONFIG_MMU</span><br><span class="hljs-type">unsigned</span> (*mmap_capabilities)(<span class="hljs-keyword">struct</span> file *);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-type">ssize_t</span> (*copy_file_range)(<span class="hljs-keyword">struct</span> file *, <span class="hljs-type">loff_t</span>, <span class="hljs-keyword">struct</span> file *,<span class="hljs-type">loff_t</span>, <span class="hljs-type">size_t</span>, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>);<br><span class="hljs-type">loff_t</span> (*remap_file_range)(<span class="hljs-keyword">struct</span> file *file_in, <span class="hljs-type">loff_t</span> pos_in,<span class="hljs-keyword">struct</span> file *file_out, <span class="hljs-type">loff_t</span> pos_out,<span class="hljs-type">loff_t</span> len, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> remap_flags);<br><span class="hljs-type">int</span> (*fadvise)(<span class="hljs-keyword">struct</span> file *, <span class="hljs-type">loff_t</span>, <span class="hljs-type">loff_t</span>, <span class="hljs-type">int</span>);<br><span class="hljs-type">int</span> (*uring_cmd)(<span class="hljs-keyword">struct</span> io_uring_cmd *ioucmd, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> issue_flags);<br>&#125; __randomize_layout;<br></code></pre></td></tr></table></figure><h4 id="4-9-释放-poll-wqueues-的资源占用"><a href="#4-9-释放-poll-wqueues-的资源占用" class="headerlink" title="4.9 释放 poll_wqueues 的资源占用"></a>4.9 释放 poll_wqueues 的资源占用</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 释放 poll_wqueues 的资源占用</span><br><span class="hljs-comment"> * @param pwq </span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">poll_freewait</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> poll_wqueues *pwq)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poll_table_page</span> * <span class="hljs-title">p</span> =</span> pwq-&gt;table;<br><span class="hljs-type">int</span> i;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; pwq-&gt;inline_index; i++)free_poll_entry(pwq-&gt;inline_entries + i);<br><span class="hljs-keyword">while</span> (p) &#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poll_table_entry</span> * <span class="hljs-title">entry</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poll_table_page</span> *<span class="hljs-title">old</span>;</span><br><br>entry = p-&gt;entry;<br><span class="hljs-keyword">do</span> &#123;<br>entry--;<br>free_poll_entry(entry);<br>&#125; <span class="hljs-keyword">while</span> (entry &gt; p-&gt;entries);<br>old = p;<br>p = p-&gt;next;<br>free_page((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) old);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="流程图示"><a href="#流程图示" class="headerlink" title="流程图示"></a>流程图示</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/2630542/1661245514701-83285cdc-90e4-4dff-a79c-56e5e3af52cb.jpeg"></p><h3 id="相关总结"><a href="#相关总结" class="headerlink" title="相关总结"></a>相关总结</h3><p>优点：</p><ul><li>用户可以在一个线程内同时处理多个socket的IO请求。同时没有多线程多进程那样耗费系统资源  </li><li>目前几乎在所有的平台上支持，其良好跨平台支持也是它的一个优点</li></ul><p>缺点：</p><ul><li>可处理的fd集有限，默认1024个</li><li>采用轮询遍历每个fd位图其效率较为低下，调用处于阻塞状态</li><li>客户进程获取返回的数据后还需遍历fd集才知道哪些fd准备好</li><li>每次调用需要复制大量的句柄数据结构到内核空间，产生巨大的开销</li></ul><h2 id="简单案例"><a href="#简单案例" class="headerlink" title="简单案例"></a>简单案例</h2><h1 id="poll模型"><a href="#poll模型" class="headerlink" title="poll模型"></a>poll模型</h1><blockquote><p>poll的代码和select在同一个文件中</p></blockquote><h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><h4 id="1-系统调用函数"><a href="#1-系统调用函数" class="headerlink" title="1.系统调用函数"></a>1.系统调用函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 代码基于linux5-19-RC8 linux/fs/select.c</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* poll系统调用</span><br><span class="hljs-comment">* @param ufds 用户空间poll文件描述符</span><br><span class="hljs-comment">* @param nfds ufds的长度</span><br><span class="hljs-comment">* @param timeout_msecs 超时参数</span><br><span class="hljs-comment">*/</span><br>SYSCALL_DEFINE3(poll, <span class="hljs-keyword">struct</span> pollfd __user *, ufds, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>, nfds,<span class="hljs-type">int</span>, timeout_msecs)&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timespec64</span> <span class="hljs-title">end_time</span>, *<span class="hljs-title">to</span> =</span> <span class="hljs-literal">NULL</span>;<span class="hljs-comment">//超时时间</span><br>    <span class="hljs-type">int</span> ret;<span class="hljs-comment">//响应结果</span><br>    <span class="hljs-keyword">if</span> (timeout_msecs &gt;= <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//计算超时时间</span><br>        to = &amp;end_time;<br>        poll_select_set_timeout(to, timeout_msecs / MSEC_PER_SEC,<br>                                NSEC_PER_MSEC * (timeout_msecs % MSEC_PER_SEC));<br>    &#125;<br>    <span class="hljs-comment">//(主线)核心调用</span><br>    ret = do_sys_poll(ufds, nfds, to);<br>    <span class="hljs-comment">//错误码（系统错误）-ERESTARTNOHAND表明,被中断的系统调用</span><br>    <span class="hljs-keyword">if</span> (ret == -ERESTARTNOHAND) &#123;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">restart_block</span> *<span class="hljs-title">restart_block</span>;</span><br><br>        restart_block = &amp;current-&gt;restart_block;<br>        restart_block-&gt;poll.ufds = ufds;<br>        restart_block-&gt;poll.nfds = nfds;<br>        <span class="hljs-comment">//是否超时</span><br>        <span class="hljs-keyword">if</span> (timeout_msecs &gt;= <span class="hljs-number">0</span>) &#123;<br>            restart_block-&gt;poll.tv_sec = end_time.tv_sec;<br>            restart_block-&gt;poll.tv_nsec = end_time.tv_nsec;<br>            restart_block-&gt;poll.has_timeout = <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span><br>            restart_block-&gt;poll.has_timeout = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//重启服务</span><br>        ret = set_restart_fn(restart_block, do_restart_poll);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-1-pollfd结构体"><a href="#1-1-pollfd结构体" class="headerlink" title="1.1 pollfd结构体"></a>1.1 pollfd结构体</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * poll文件描述符结构体</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pollfd</span> &#123;</span><br><span class="hljs-type">int</span> fd;<span class="hljs-comment">//文件描述符</span><br><span class="hljs-type">short</span> <span class="hljs-type">int</span> events;<span class="hljs-comment">//关心的events</span><br><span class="hljs-type">short</span> <span class="hljs-type">int</span> revents;<span class="hljs-comment">//返回就绪的events</span><br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="2-调用do-sys-poll方法"><a href="#2-调用do-sys-poll方法" class="headerlink" title="2.调用do_sys_poll方法"></a>2.调用do_sys_poll方法</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * poll系统调用核心：</span><br><span class="hljs-comment"> * - 分配链表空间</span><br><span class="hljs-comment"> * - 初始化 poll_wqueues 控制块</span><br><span class="hljs-comment"> * - 调用 do_poll 方法</span><br><span class="hljs-comment"> * @param __user</span><br><span class="hljs-comment"> * @return 返回</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">do_sys_poll</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> pollfd __user *ufds, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> nfds, <span class="hljs-keyword">struct</span> timespec64 *end_time)</span> &#123;<br><span class="hljs-comment">//定义一个poll调用控制块（表）</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poll_wqueues</span> <span class="hljs-title">table</span>;</span><br><span class="hljs-type">int</span> err = -EFAULT, fdcount, len;<br><span class="hljs-comment">/* Allocate small arguments on the stack to save memory and be</span><br><span class="hljs-comment">   faster - use long to make sure the buffer is aligned properly</span><br><span class="hljs-comment">   on 64 bit archs to avoid unaligned access */</span><br><span class="hljs-comment">//优先在栈上分配空间</span><br><span class="hljs-type">long</span> stack_pps[POLL_STACK_ALLOC/<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">long</span>)];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poll_list</span> *<span class="hljs-title">const</span> <span class="hljs-title">head</span> =</span> (<span class="hljs-keyword">struct</span> poll_list *)stack_pps;<br> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poll_list</span> *<span class="hljs-title">walk</span> =</span> head;<br> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> todo = nfds;<br><span class="hljs-comment">//检查是否超出长度限制</span><br><span class="hljs-keyword">if</span> (nfds &gt; rlimit(RLIMIT_NOFILE))<span class="hljs-keyword">return</span> -EINVAL;<br><span class="hljs-comment">//获取分配的空间长度</span><br>len = <span class="hljs-type">min_t</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>, nfds, N_STACK_PPS);<br><span class="hljs-comment">//为每一个节点（pollfd）进行分配空间</span><br><span class="hljs-keyword">for</span> (;;) &#123;<br>walk-&gt;next = <span class="hljs-literal">NULL</span>;<br>walk-&gt;len = len;<br><span class="hljs-comment">//所需长度为0则可跳出循环</span><br><span class="hljs-keyword">if</span> (!len)<span class="hljs-keyword">break</span>;<br><span class="hljs-comment">//复制文件描述符到内核空间</span><br><span class="hljs-keyword">if</span> (copy_from_user(walk-&gt;entries, ufds + nfds-todo,<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> pollfd) * walk-&gt;len))<span class="hljs-keyword">goto</span> out_fds;<br><br>todo -= walk-&gt;len;<br><span class="hljs-keyword">if</span> (!todo)<span class="hljs-keyword">break</span>;<br><br>len = min(todo, POLLFD_PER_PAGE);<br><span class="hljs-comment">//在堆区分配空间</span><br>walk = walk-&gt;next = kmalloc(struct_size(walk, entries, len),GFP_KERNEL);<br><span class="hljs-keyword">if</span> (!walk) &#123;<br>err = -ENOMEM;<br><span class="hljs-keyword">goto</span> out_fds;<br>&#125;<br>&#125;<br><span class="hljs-comment">//初始化poll控制块</span><br>poll_initwait(&amp;table);<br><span class="hljs-comment">//(主线）执行poll调用</span><br>fdcount = do_poll(head, &amp;table, end_time);<br><span class="hljs-comment">//释放poll控制块</span><br>poll_freewait(&amp;table);<br><span class="hljs-comment">//如果用户没有写入权限</span><br><span class="hljs-keyword">if</span> (!user_write_access_begin(ufds, nfds * <span class="hljs-keyword">sizeof</span>(*ufds)))<span class="hljs-keyword">goto</span> out_fds;<br><br><span class="hljs-keyword">for</span> (walk = head; walk; walk = walk-&gt;next) &#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pollfd</span> *<span class="hljs-title">fds</span> =</span> walk-&gt;entries;<br><span class="hljs-type">int</span> j;<br><br><span class="hljs-keyword">for</span> (j = walk-&gt;len; j; fds++, ufds++, j--)<br>unsafe_put_user(fds-&gt;revents, &amp;ufds-&gt;revents, Efault);<br>  &#125;<br>user_write_access_end();<br><br>err = fdcount;<br>out_fds:<br>walk = head-&gt;next;<br><span class="hljs-keyword">while</span> (walk) &#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poll_list</span> *<span class="hljs-title">pos</span> =</span> walk;<br>walk = walk-&gt;next;<br>kfree(pos);<br>&#125;<br><br><span class="hljs-keyword">return</span> err;<br><br>Efault:<br>user_write_access_end();<br>err = -EFAULT;<br><span class="hljs-keyword">goto</span> out_fds;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-1调用poll-initwait-amp-table-初始化poll控制块"><a href="#2-1调用poll-initwait-amp-table-初始化poll控制块" class="headerlink" title="2.1调用poll_initwait(&amp;table)初始化poll控制块"></a>2.1调用poll_initwait(&amp;table)初始化poll控制块</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 初始化poll队列</span><br><span class="hljs-comment"> * @param pwq</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">poll_initwait</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> poll_wqueues *pwq)</span> &#123;<br><span class="hljs-comment">//调用__pollwait初始化监听队列</span><br>init_poll_funcptr(&amp;pwq-&gt;pt, __pollwait);<br>pwq-&gt;polling_task = current;<span class="hljs-comment">//当前调用的进程</span><br>pwq-&gt;triggered = <span class="hljs-number">0</span>;<span class="hljs-comment">//是否已经触发</span><br>pwq-&gt;error = <span class="hljs-number">0</span>;<span class="hljs-comment">//是否错误</span><br>pwq-&gt;table = <span class="hljs-literal">NULL</span>;<br>pwq-&gt;inline_index = <span class="hljs-number">0</span>;<br>&#125;<br>EXPORT_SYMBOL(poll_initwait);<br></code></pre></td></tr></table></figure><h4 id="2-1-1调用-pollwait添加监听文件"><a href="#2-1-1调用-pollwait添加监听文件" class="headerlink" title="2.1.1调用__pollwait添加监听文件"></a>2.1.1调用__pollwait添加监听文件</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Add a new entry */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将poll_table_entry挂载到资源文件的监听队列</span><br><span class="hljs-comment"> * @param filp 被监听的资源文件</span><br><span class="hljs-comment"> * @param wait_address 被监听的资源文件的等待队列头</span><br><span class="hljs-comment"> * @param p 在poll_initwait()中设置的poll_tbale</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> __pollwait(<span class="hljs-keyword">struct</span> file *filp, <span class="hljs-type">wait_queue_head_t</span> *wait_address,poll_table *p)&#123;<br><span class="hljs-comment">//获取 poll_wqueues</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poll_wqueues</span> *<span class="hljs-title">pwq</span> =</span> container_of(p, <span class="hljs-keyword">struct</span> poll_wqueues, pt);<br><span class="hljs-comment">//获取 poll_table_entry</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poll_table_entry</span> *<span class="hljs-title">entry</span> =</span> poll_get_entry(pwq);<br><span class="hljs-comment">//如果获取不到直接返回</span><br><span class="hljs-keyword">if</span> (!entry)<span class="hljs-keyword">return</span>;<br><span class="hljs-comment">//增加资源文件引用计数并关联到entry的filp属性</span><br>entry-&gt;filp = get_file(filp);<br><span class="hljs-comment">//保存资源文件到队列头</span><br>entry-&gt;wait_address = wait_address;<br><span class="hljs-comment">//赋值监听事件给entry的key</span><br>entry-&gt;key = p-&gt;_key;<br><span class="hljs-comment">//初始化一个等待队列节点，其中唤醒函数设置为pollwake(重点)</span><br>init_waitqueue_func_entry(&amp;entry-&gt;wait, pollwake);<br><span class="hljs-comment">//</span><br>entry-&gt;wait.private = pwq;<br><span class="hljs-comment">//添加到监听队列</span><br>add_wait_queue(wait_address, &amp;entry-&gt;wait);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-调用-do-poll-方法"><a href="#3-调用-do-poll-方法" class="headerlink" title="3.调用 do_poll 方法"></a>3.调用 do_poll 方法</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 核心调用poll</span><br><span class="hljs-comment"> * @param list fd列表的链表</span><br><span class="hljs-comment"> * @param wait 调度控制块</span><br><span class="hljs-comment"> * @param end_time 超时时间</span><br><span class="hljs-comment"> * @return 返回准备好的fd个数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">do_poll</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> poll_list *<span class="hljs-built_in">list</span>, <span class="hljs-keyword">struct</span> poll_wqueues *wait,<span class="hljs-keyword">struct</span> timespec64 *end_time)</span>&#123;<br><span class="hljs-comment">//获取poll_table</span><br>poll_table* pt = &amp;wait-&gt;pt;<br><span class="hljs-comment">//时间</span><br><span class="hljs-type">ktime_t</span> expire, *to = <span class="hljs-literal">NULL</span>;<br><span class="hljs-type">int</span> timed_out = <span class="hljs-number">0</span>, count = <span class="hljs-number">0</span>;<br>u64 slack = <span class="hljs-number">0</span>;<br><span class="hljs-type">__poll_t</span> busy_flag = net_busy_loop_on() ? POLL_BUSY_LOOP : <span class="hljs-number">0</span>;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> busy_start = <span class="hljs-number">0</span>;<br><span class="hljs-comment">/* Optimise the no-wait case */</span><br><span class="hljs-comment">//判断是否超时</span><br><span class="hljs-keyword">if</span> (end_time &amp;&amp; !end_time-&gt;tv_sec &amp;&amp; !end_time-&gt;tv_nsec) &#123;<br>pt-&gt;_qproc = <span class="hljs-literal">NULL</span>;<br>timed_out = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">//预估时间</span><br><span class="hljs-keyword">if</span> (end_time &amp;&amp; !timed_out)slack = select_estimate_accuracy(end_time);<br><span class="hljs-comment">//死循环遍历</span><br><span class="hljs-keyword">for</span> (;;) &#123;<br><span class="hljs-comment">//当前遍历的链表节点（节点中包含pollfd数组）</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poll_list</span> *<span class="hljs-title">walk</span>;</span><br><span class="hljs-type">bool</span> can_busy_loop = <span class="hljs-literal">false</span>;<br><span class="hljs-comment">//遍历链表</span><br><span class="hljs-keyword">for</span> (walk = <span class="hljs-built_in">list</span>; walk != <span class="hljs-literal">NULL</span>; walk = walk-&gt;next) &#123;<span class="hljs-comment">//walk = walk-&gt;next链表移动</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pollfd</span> * <span class="hljs-title">pfd</span>, * <span class="hljs-title">pfd_end</span>;</span><br>pfd = walk-&gt;entries;<br>pfd_end = pfd + walk-&gt;len;<br><span class="hljs-comment">//遍历当前节点的所有fd</span><br><span class="hljs-keyword">for</span> (; pfd != pfd_end; pfd++) &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Fish for events. If we found one, record it</span><br><span class="hljs-comment"> * and kill poll_table-&gt;_qproc, so we don&#x27;t</span><br><span class="hljs-comment"> * needlessly register any other waiters after</span><br><span class="hljs-comment"> * this. They&#x27;ll get immediately deregistered</span><br><span class="hljs-comment"> * when we break out and return.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//(主线) 调用do_pollfd 返回触发的事件</span><br><span class="hljs-keyword">if</span> (do_pollfd(pfd, pt, &amp;can_busy_loop,busy_flag)) &#123;<br>count++;<br>pt-&gt;_qproc = <span class="hljs-literal">NULL</span>;<br><span class="hljs-comment">/* found something, stop busy polling */</span><br>busy_flag = <span class="hljs-number">0</span>;<br>can_busy_loop = <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * All waiters have already been registered, so don&#x27;t provide</span><br><span class="hljs-comment"> * a poll_table-&gt;_qproc to them on the next loop iteration.</span><br><span class="hljs-comment"> */</span><br>pt-&gt;_qproc = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">if</span> (!count) &#123;<br>count = wait-&gt;error;<br><span class="hljs-keyword">if</span> (signal_pending(current))count = -ERESTARTNOHAND;<br>&#125;<br><span class="hljs-comment">//有准备好的fd或者超时则跳出死循环</span><br><span class="hljs-keyword">if</span> (count || timed_out)<span class="hljs-keyword">break</span>;<br><br><span class="hljs-comment">/* only if found POLL_BUSY_LOOP sockets &amp;&amp; not out of time */</span><br><span class="hljs-keyword">if</span> (can_busy_loop &amp;&amp; !need_resched()) &#123;<br><span class="hljs-keyword">if</span> (!busy_start) &#123;<br>busy_start = busy_loop_current_time();<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (!busy_loop_timeout(busy_start))<br><span class="hljs-keyword">continue</span>;<br>&#125;<br>busy_flag = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * If this is the first loop and we have a timeout</span><br><span class="hljs-comment"> * given, then we convert to ktime_t and set the to</span><br><span class="hljs-comment"> * pointer to the expiry value.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (end_time &amp;&amp; !to) &#123;<br>expire = timespec64_to_ktime(*end_time);<br>to = &amp;expire;<br>&#125;<br><span class="hljs-comment">//判断是否超时</span><br><span class="hljs-keyword">if</span> (!poll_schedule_timeout(wait, TASK_INTERRUPTIBLE, to, slack))timed_out = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> count;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-1-调用-do-pollfd"><a href="#3-1-调用-do-pollfd" class="headerlink" title="3.1 调用 do_pollfd"></a>3.1 调用 do_pollfd</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 调用fd驱动函数</span><br><span class="hljs-comment"> * @param pollfd pollfd结构体</span><br><span class="hljs-comment"> * @param pwait</span><br><span class="hljs-comment"> * @param can_busy_poll</span><br><span class="hljs-comment"> * @param busy_flag</span><br><span class="hljs-comment"> * @return 返回准备好的事件</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">__poll_t</span> <span class="hljs-title function_">do_pollfd</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> pollfd *pollfd, poll_table *pwait,<span class="hljs-type">bool</span> *can_busy_poll,<span class="hljs-type">__poll_t</span> busy_flag)</span> &#123;<br><span class="hljs-comment">//文件描述符</span><br><span class="hljs-type">int</span> fd = pollfd-&gt;fd;<br><span class="hljs-type">__poll_t</span> mask = <span class="hljs-number">0</span>, filter;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fd</span> <span class="hljs-title">f</span>;</span><br><span class="hljs-comment">//fd无效直接返回</span><br><span class="hljs-keyword">if</span> (fd &lt; <span class="hljs-number">0</span>)<span class="hljs-keyword">goto</span> out;<br>mask = EPOLLNVAL;<br><span class="hljs-comment">//获取真正的文件</span><br>f = fdget(fd);<br><span class="hljs-comment">//验证文件有效性</span><br><span class="hljs-keyword">if</span> (!f.file)<span class="hljs-keyword">goto</span> out;<br><span class="hljs-comment">/* userland u16 -&gt;events contains POLL... bitmap */</span><br>filter = demangle_poll(pollfd-&gt;events) | EPOLLERR | EPOLLHUP;<br>pwait-&gt;_key = filter | busy_flag;<br><span class="hljs-comment">//(核心)调用file的驱动 vfs_poll 返回该文件已经准备好的事件</span><br>mask = vfs_poll(f.file, pwait);<br><span class="hljs-keyword">if</span> (mask &amp; busy_flag)*can_busy_poll = <span class="hljs-literal">true</span>;<br>mask &amp;= filter;<span class="hljs-comment">/* Mask out unneeded events. */</span><br>fdput(f);<br><br>out:<br><span class="hljs-comment">/* ... and so does -&gt;revents */</span><br>pollfd-&gt;revents = mangle_poll(mask);<br><span class="hljs-keyword">return</span> mask;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-poll-freewait-amp-table"><a href="#2-2-poll-freewait-amp-table" class="headerlink" title="2.2 poll_freewait(&amp;table);"></a>2.2 poll_freewait(&amp;table);</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 释放 poll_wqueues 的资源占用</span><br><span class="hljs-comment"> * @param pwq</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">poll_freewait</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> poll_wqueues *pwq)</span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poll_table_page</span> * <span class="hljs-title">p</span> =</span> pwq-&gt;table;<br><span class="hljs-type">int</span> i;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; pwq-&gt;inline_index; i++)free_poll_entry(pwq-&gt;inline_entries + i);<br><span class="hljs-keyword">while</span> (p) &#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poll_table_entry</span> * <span class="hljs-title">entry</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poll_table_page</span> *<span class="hljs-title">old</span>;</span><br><br>entry = p-&gt;entry;<br><span class="hljs-keyword">do</span> &#123;<br>entry--;<br>free_poll_entry(entry);<br>&#125; <span class="hljs-keyword">while</span> (entry &gt; p-&gt;entries);<br>old = p;<br>p = p-&gt;next;<br>free_page((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) old);<br>&#125;<br>&#125;<br>EXPORT_SYMBOL(poll_freewait);<br></code></pre></td></tr></table></figure><h3 id="流程图示-1"><a href="#流程图示-1" class="headerlink" title="流程图示"></a>流程图示</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/2630542/1661849115702-b12de91b-3233-4aab-858a-da5c9d40d43c.jpeg"></p><h3 id="相关总结-1"><a href="#相关总结-1" class="headerlink" title="相关总结"></a>相关总结</h3><p>优点：</p><ul><li>和select相比能监听的fd个数更多（采用链表的方式存储）</li><li>poll 事件相比 select 的in/out/err ，明显支持的情况更多</li></ul><p>缺点：</p><ul><li>和select一样每次监听都需要不断的遍历每个fd，效率不是很高</li><li>每次调用都需要将用户态的fd复制到内核态中</li><li>每次用户进程都需要遍历fd才能知道那个准备好</li></ul><h2 id="简单案例-1"><a href="#简单案例-1" class="headerlink" title="简单案例"></a>简单案例</h2><h1 id="epoll模型"><a href="#epoll模型" class="headerlink" title="epoll模型"></a>epoll模型</h1><p>epoll没有最大并发连接的限制，上限是最大可以打开文件的数目，这个数字一般远大于2048, 一般来说这个数目和系统内存关系很大，具体数目可以cat /proc/sys/fs/file-max察看。Epoll最大的优点就在于它只管你“活跃”的连接，而跟连接总数无关，因此在实际的网络环境中，Epoll的效率就会远远高于select和poll。</p><p>epoll函数</p><ul><li>do_epoll_create : 创建epoll控制块</li><li>do_epoll_ctl : 增删改操作</li><li>do_epoll_wait : 陷入内核等待</li></ul><h3 id="创建流程"><a href="#创建流程" class="headerlink" title="创建流程"></a>创建流程</h3><h4 id="1-创建epoll系统调用"><a href="#1-创建epoll系统调用" class="headerlink" title="1. 创建epoll系统调用"></a>1. 创建epoll系统调用</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * epoll系统调用</span><br><span class="hljs-comment"> */</span><br>SYSCALL_DEFINE1(epoll_create1, <span class="hljs-type">int</span>, flags)<br>&#123;<br><span class="hljs-keyword">return</span> do_epoll_create(flags);<br>&#125;<br><br>SYSCALL_DEFINE1(epoll_create, <span class="hljs-type">int</span>, size)<br>&#123;<br><span class="hljs-keyword">if</span> (size &lt;= <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> -EINVAL;<br><br><span class="hljs-keyword">return</span> do_epoll_create(<span class="hljs-number">0</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2-调用do-epoll-create创建epoll"><a href="#2-调用do-epoll-create创建epoll" class="headerlink" title="2.调用do_epoll_create创建epoll"></a>2.调用do_epoll_create创建epoll</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建epoll的fd</span><br><span class="hljs-comment"> * @param flags</span><br><span class="hljs-comment"> * @return</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">do_epoll_create</span><span class="hljs-params">(<span class="hljs-type">int</span> flags)</span> &#123;<br><span class="hljs-type">int</span> error, fd;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">eventpoll</span> *<span class="hljs-title">ep</span> =</span> <span class="hljs-literal">NULL</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> *<span class="hljs-title">file</span>;</span><br><br><span class="hljs-comment">/* Check the EPOLL_* constant for consistency.  */</span><br>BUILD_BUG_ON(EPOLL_CLOEXEC != O_CLOEXEC);<br><br><span class="hljs-keyword">if</span> (flags &amp; ~EPOLL_CLOEXEC)<span class="hljs-keyword">return</span> -EINVAL;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Create the internal data structure (&quot;struct eventpoll&quot;).</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//传入应用创建eventpoll的结构体</span><br>error = ep_alloc(&amp;ep);<br><span class="hljs-comment">//出现错误返回错误</span><br><span class="hljs-keyword">if</span> (error &lt; <span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> error;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Creates all the items needed to setup an eventpoll file. That is,</span><br><span class="hljs-comment"> * a file structure and a free file descriptor.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//创建设置eventpoll文件所需的所有项。即文件结构和自由文件描述符。</span><br>fd = get_unused_fd_flags(O_RDWR | (flags &amp; O_CLOEXEC));<br><span class="hljs-keyword">if</span> (fd &lt; <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//创建失败</span><br>error = fd;<br><span class="hljs-keyword">goto</span> out_free_ep;<br>&#125;<br><span class="hljs-comment">//创建一个名字为“[eventpoll]”的eventpollfs文件描述符</span><br>file = anon_inode_getfile(<span class="hljs-string">&quot;[eventpoll]&quot;</span>, &amp;eventpoll_fops, ep,O_RDWR | (flags &amp; O_CLOEXEC));<br><span class="hljs-keyword">if</span> (IS_ERR(file)) &#123;<br>error = PTR_ERR(file);<br><span class="hljs-keyword">goto</span> out_free_fd;<br>&#125;<br><span class="hljs-comment">//赋值个ep</span><br>ep-&gt;file = file;<br><span class="hljs-comment">//将文件加入fd数组表（绑定file和fd）</span><br>fd_install(fd, file);<br><span class="hljs-comment">//返回fd</span><br><span class="hljs-keyword">return</span> fd;<br><br>out_free_fd:<br>put_unused_fd(fd);<br>out_free_ep:<br>ep_free(ep);<br><span class="hljs-keyword">return</span> error;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-1-创建分配一个eventpoll结构体"><a href="#2-1-创建分配一个eventpoll结构体" class="headerlink" title="2.1.创建分配一个eventpoll结构体"></a>2.1.创建分配一个eventpoll结构体</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建分配一个eventpoll</span><br><span class="hljs-comment"> * @param pep</span><br><span class="hljs-comment"> * @return</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">ep_alloc</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> eventpoll **pep)</span>&#123;<br><span class="hljs-type">int</span> error;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">user_struct</span> *<span class="hljs-title">user</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">eventpoll</span> *<span class="hljs-title">ep</span>;</span><br><br>user = get_current_user();<span class="hljs-comment">//当前用户</span><br>error = -ENOMEM;<br>ep = kzalloc(<span class="hljs-keyword">sizeof</span>(*ep), GFP_KERNEL);<span class="hljs-comment">//申请内存</span><br><span class="hljs-keyword">if</span> (unlikely(!ep))<span class="hljs-keyword">goto</span> free_uid;<span class="hljs-comment">//分配失败</span><br><span class="hljs-comment">//初始化互斥锁</span><br>mutex_init(&amp;ep-&gt;mtx);<br>rwlock_init(&amp;ep-&gt;lock);<span class="hljs-comment">//初始化读写锁</span><br>init_waitqueue_head(&amp;ep-&gt;wq);<span class="hljs-comment">//初始化等待队列头</span><br>init_waitqueue_head(&amp;ep-&gt;poll_wait);<br>INIT_LIST_HEAD(&amp;ep-&gt;rdllist);<span class="hljs-comment">//初始化就绪队列</span><br>ep-&gt;rbr = RB_ROOT_CACHED;<span class="hljs-comment">//初始化红黑树</span><br>ep-&gt;ovflist = EP_UNACTIVE_PTR;<br>ep-&gt;user = user;<span class="hljs-comment">//当前用户</span><br><br>*pep = ep;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//正常返回0</span><br><span class="hljs-comment">//出现错误</span><br>free_uid:<br>free_uid(user);<br><span class="hljs-keyword">return</span> error;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="修改流程"><a href="#修改流程" class="headerlink" title="修改流程"></a>修改流程</h3><h4 id="1-修改epoll系统调用"><a href="#1-修改epoll系统调用" class="headerlink" title="1.修改epoll系统调用"></a>1.修改epoll系统调用</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 代码基于linux5-19-RC8 linux/fs/eventpoll.c</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * epoll系统调用函数 实现插入/删除/修改fd的功能</span><br><span class="hljs-comment"> */</span><br>SYSCALL_DEFINE4(epoll_ctl, <span class="hljs-type">int</span>, epfd, <span class="hljs-type">int</span>, op, <span class="hljs-type">int</span>, fd,<span class="hljs-keyword">struct</span> epoll_event __user *, event)<br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epoll_event</span> <span class="hljs-title">epds</span>;</span><br><span class="hljs-comment">//判断是否需要来自用户空间的事件副本 &amp;&amp; 拷贝事件到内核空间</span><br><span class="hljs-keyword">if</span> (ep_op_has_event(op) &amp;&amp; copy_from_user(&amp;epds, event, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> epoll_event)))<span class="hljs-keyword">return</span> -EFAULT;<br><span class="hljs-comment">//执行操作</span><br><span class="hljs-keyword">return</span> do_epoll_ctl(epfd, op, fd, &amp;epds, <span class="hljs-literal">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-1-epoll事件结构体"><a href="#1-1-epoll事件结构体" class="headerlink" title="1.1 epoll事件结构体"></a>1.1 epoll事件结构体</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * epoll事件结构体</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epoll_event</span> &#123;</span><br><span class="hljs-type">__poll_t</span> events;<span class="hljs-comment">//事件</span><br>__u64 data;<span class="hljs-comment">//数据</span><br>&#125; EPOLL_PACKED;<br></code></pre></td></tr></table></figure><h4 id="2-调用-do-epoll-ctl"><a href="#2-调用-do-epoll-ctl" class="headerlink" title="2. 调用 do_epoll_ctl"></a>2. 调用 do_epoll_ctl</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * epoll操作方法</span><br><span class="hljs-comment"> * @param epfd</span><br><span class="hljs-comment"> * @param op 操作类型 [EPOLL_CTL_ADD,EPOLL_CTL_DEL,EPOLL_CTL_MOD]</span><br><span class="hljs-comment"> * @param fd 文件描述符</span><br><span class="hljs-comment"> * @param epds epoll_event结构体</span><br><span class="hljs-comment"> * @param nonblock 是否是非阻塞</span><br><span class="hljs-comment"> * @return</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">do_epoll_ctl</span><span class="hljs-params">(<span class="hljs-type">int</span> epfd, <span class="hljs-type">int</span> op, <span class="hljs-type">int</span> fd, <span class="hljs-keyword">struct</span> epoll_event *epds,<span class="hljs-type">bool</span> nonblock)</span> &#123;<br><span class="hljs-type">int</span> error;<br><span class="hljs-type">int</span> full_check = <span class="hljs-number">0</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fd</span> <span class="hljs-title">f</span>, <span class="hljs-title">tf</span>;</span><br><span class="hljs-comment">//eventpoll结构体</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">eventpoll</span> *<span class="hljs-title">ep</span>;</span><br><span class="hljs-comment">//epitem结构体</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epitem</span> *<span class="hljs-title">epi</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">eventpoll</span> *<span class="hljs-title">tep</span> =</span> <span class="hljs-literal">NULL</span>;<br><br>error = -EBADF;<br>f = fdget(epfd);<span class="hljs-comment">//获取文件描述符</span><br><span class="hljs-keyword">if</span> (!f.file) <span class="hljs-keyword">goto</span> error_return;<br><br><span class="hljs-comment">/* Get the &quot;struct file *&quot; for the target file */</span><br><span class="hljs-comment">//目标文件</span><br>tf = fdget(fd);<br><span class="hljs-keyword">if</span> (!tf.file)<span class="hljs-keyword">goto</span> error_fput;<br><br><span class="hljs-comment">/* The target file descriptor must support poll */</span><br>error = -EPERM;<br><span class="hljs-comment">//如果文件不支持则直接退出</span><br><span class="hljs-keyword">if</span> (!file_can_poll(tf.file))<span class="hljs-keyword">goto</span> error_tgt_fput;<br><br><span class="hljs-comment">/* Check if EPOLLWAKEUP is allowed */</span><br><span class="hljs-comment">// 检查是否支持epoll唤醒</span><br><span class="hljs-keyword">if</span> (ep_op_has_event(op))ep_take_care_of_epollwakeup(epds);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * We have to check that the file structure underneath the file descriptor</span><br><span class="hljs-comment"> * the user passed to us _is_ an eventpoll file. And also we do not permit</span><br><span class="hljs-comment"> * adding an epoll file descriptor inside itself.</span><br><span class="hljs-comment"> */</span><br>error = -EINVAL;<br><span class="hljs-comment">//检查文件</span><br><span class="hljs-keyword">if</span> (f.file == tf.file || !is_file_epoll(f.file))<br><span class="hljs-keyword">goto</span> error_tgt_fput;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * epoll adds to the wakeup queue at EPOLL_CTL_ADD time only,</span><br><span class="hljs-comment"> * so EPOLLEXCLUSIVE is not allowed for a EPOLL_CTL_MOD operation.</span><br><span class="hljs-comment"> * Also, we do not currently supported nested exclusive wakeups.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (ep_op_has_event(op) &amp;&amp; (epds-&gt;events &amp; EPOLLEXCLUSIVE)) &#123;<br><span class="hljs-keyword">if</span> (op == EPOLL_CTL_MOD)<br><span class="hljs-keyword">goto</span> error_tgt_fput;<br><span class="hljs-keyword">if</span> (op == EPOLL_CTL_ADD &amp;&amp; (is_file_epoll(tf.file) ||<br>(epds-&gt;events &amp; ~EPOLLEXCLUSIVE_OK_BITS)))<br><span class="hljs-keyword">goto</span> error_tgt_fput;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * At this point it is safe to assume that the &quot;private_data&quot; contains</span><br><span class="hljs-comment"> * our own data structure.</span><br><span class="hljs-comment"> */</span><br>ep = f.file-&gt;private_data;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * When we insert an epoll file descriptor inside another epoll file</span><br><span class="hljs-comment"> * descriptor, there is the chance of creating closed loops, which are</span><br><span class="hljs-comment"> * better be handled here, than in more critical paths. While we are</span><br><span class="hljs-comment"> * checking for loops we also determine the list of files reachable</span><br><span class="hljs-comment"> * and hang them on the tfile_check_list, so we can check that we</span><br><span class="hljs-comment"> * haven&#x27;t created too many possible wakeup paths.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * We do not need to take the global &#x27;epumutex&#x27; on EPOLL_CTL_ADD when</span><br><span class="hljs-comment"> * the epoll file descriptor is attaching directly to a wakeup source,</span><br><span class="hljs-comment"> * unless the epoll file descriptor is nested. The purpose of taking the</span><br><span class="hljs-comment"> * &#x27;epmutex&#x27; on add is to prevent complex toplogies such as loops and</span><br><span class="hljs-comment"> * deep wakeup paths from forming in parallel through multiple</span><br><span class="hljs-comment"> * EPOLL_CTL_ADD operations.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//需要获取mutex对红黑树进行操作</span><br>error = epoll_mutex_lock(&amp;ep-&gt;mtx, <span class="hljs-number">0</span>, nonblock);<br><span class="hljs-keyword">if</span> (error)<br><span class="hljs-keyword">goto</span> error_tgt_fput;<br><span class="hljs-keyword">if</span> (op == EPOLL_CTL_ADD) &#123;<br><span class="hljs-keyword">if</span> (READ_ONCE(f.file-&gt;f_ep) || ep-&gt;gen == loop_check_gen ||<br>    is_file_epoll(tf.file)) &#123;<br>mutex_unlock(&amp;ep-&gt;mtx);<br>error = epoll_mutex_lock(&amp;epmutex, <span class="hljs-number">0</span>, nonblock);<br><span class="hljs-keyword">if</span> (error)<br><span class="hljs-keyword">goto</span> error_tgt_fput;<br>loop_check_gen++;<br>full_check = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (is_file_epoll(tf.file)) &#123;<br>tep = tf.file-&gt;private_data;<br>error = -ELOOP;<br><span class="hljs-keyword">if</span> (ep_loop_check(ep, tep) != <span class="hljs-number">0</span>)<br><span class="hljs-keyword">goto</span> error_tgt_fput;<br>&#125;<br>error = epoll_mutex_lock(&amp;ep-&gt;mtx, <span class="hljs-number">0</span>, nonblock);<br><span class="hljs-keyword">if</span> (error)<br><span class="hljs-keyword">goto</span> error_tgt_fput;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Try to lookup the file inside our RB tree. Since we grabbed &quot;mtx&quot;</span><br><span class="hljs-comment"> * above, we can be sure to be able to use the item looked up by</span><br><span class="hljs-comment"> * ep_find() till we release the mutex.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//从红黑树中寻找添加的fd是否存在，存在则返回到ep中，否则返回NULL</span><br>epi = ep_find(ep, tf.file, fd);<br><br>error = -EINVAL;<br><span class="hljs-keyword">switch</span> (op) &#123;<span class="hljs-comment">//区分op类型增删改</span><br><span class="hljs-keyword">case</span> EPOLL_CTL_ADD:<span class="hljs-comment">//新增</span><br><span class="hljs-comment">//查找不到则添加</span><br><span class="hljs-keyword">if</span> (!epi) &#123;<br>epds-&gt;events |= EPOLLERR | EPOLLHUP;<br>error = ep_insert(ep, epds, tf.file, fd, full_check);<span class="hljs-comment">//插入</span><br>&#125; <span class="hljs-keyword">else</span><span class="hljs-comment">//否则不重复添加</span><br>error = -EEXIST;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> EPOLL_CTL_DEL:<span class="hljs-comment">//删除</span><br><span class="hljs-keyword">if</span> (epi)<br>error = ep_remove(ep, epi);<span class="hljs-comment">//删除</span><br><span class="hljs-keyword">else</span><br>error = -ENOENT;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> EPOLL_CTL_MOD:<span class="hljs-comment">//修改</span><br><span class="hljs-keyword">if</span> (epi) &#123;<br><span class="hljs-keyword">if</span> (!(epi-&gt;event.events &amp; EPOLLEXCLUSIVE)) &#123;<br>epds-&gt;events |= EPOLLERR | EPOLLHUP;<br>error = ep_modify(ep, epi, epds);<br>&#125;<br>&#125; <span class="hljs-keyword">else</span><br>error = -ENOENT;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>mutex_unlock(&amp;ep-&gt;mtx);<br><br>error_tgt_fput:<br><span class="hljs-keyword">if</span> (full_check) &#123;<br>clear_tfile_check_list();<br>loop_check_gen++;<br>mutex_unlock(&amp;epmutex);<br>&#125;<br><br>fdput(tf);<br>error_fput:<br>fdput(f);<br>error_return:<br><br><span class="hljs-keyword">return</span> error;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-1-结构体eventpoll控制块"><a href="#2-1-结构体eventpoll控制块" class="headerlink" title="2.1 结构体eventpoll控制块"></a>2.1 结构体eventpoll控制块</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">eventpoll</span> &#123;</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * This mutex is used to ensure that files are not removed</span><br><span class="hljs-comment"> * while epoll is using them. This is held during the event</span><br><span class="hljs-comment"> * collection loop, the file cleanup path, the epoll file exit</span><br><span class="hljs-comment"> * code and the ctl operations.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mutex</span> <span class="hljs-title">mtx</span>;</span><br><br><span class="hljs-comment">/* Wait queue used by sys_epoll_wait() */</span><br><span class="hljs-type">wait_queue_head_t</span> wq;<span class="hljs-comment">//调用进程等待队列</span><br><br><span class="hljs-comment">/* Wait queue used by file-&gt;poll() */</span><br><span class="hljs-type">wait_queue_head_t</span> poll_wait;<span class="hljs-comment">//等待队列队头（如果被监听的文件是一个epoll类型）</span><br><br><span class="hljs-comment">/* List of ready file descriptors */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">rdllist</span>;</span><span class="hljs-comment">//已经准备好的文件描述符队列队头（双向链表）</span><br><br><span class="hljs-comment">/* Lock which protects rdllist and ovflist */</span><br><span class="hljs-type">rwlock_t</span> lock;<span class="hljs-comment">//读写锁</span><br><br><span class="hljs-comment">/* RB tree root used to store monitored fd structs */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_root_cached</span> <span class="hljs-title">rbr</span>;</span><span class="hljs-comment">//红黑树root节点（存储epitem）</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * This is a single linked list that chains all the &quot;struct epitem&quot; that</span><br><span class="hljs-comment"> * happened while transferring ready events to userspace w/out</span><br><span class="hljs-comment"> * holding -&gt;lock.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epitem</span> *<span class="hljs-title">ovflist</span>;</span><span class="hljs-comment">//</span><br><br><span class="hljs-comment">/* wakeup_source used when ep_scan_ready_list is running */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">wakeup_source</span> *<span class="hljs-title">ws</span>;</span><br><br><span class="hljs-comment">/* The user that created the eventpoll descriptor */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">user_struct</span> *<span class="hljs-title">user</span>;</span><span class="hljs-comment">//当前进程用户</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> *<span class="hljs-title">file</span>;</span><span class="hljs-comment">//真正的文件</span><br><br><span class="hljs-comment">/* used to optimize loop detection check */</span><br>u64 gen;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hlist_head</span> <span class="hljs-title">refs</span>;</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_NET_RX_BUSY_POLL</span><br><span class="hljs-comment">/* used to track busy poll napi_id */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> napi_id;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_DEBUG_LOCK_ALLOC</span><br><span class="hljs-comment">/* tracks wakeup nests for lockdep validation */</span><br>u8 nests;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;;<br><br></code></pre></td></tr></table></figure><h4 id="2-2-结构体epitem红黑树节点"><a href="#2-2-结构体epitem红黑树节点" class="headerlink" title="2.2 结构体epitem红黑树节点"></a>2.2 结构体epitem红黑树节点</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epitem</span> &#123;</span><br>    <br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br><span class="hljs-comment">/* RB tree node links this structure to the eventpoll RB tree */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_node</span> <span class="hljs-title">rbn</span>;</span><span class="hljs-comment">//指向红黑树的节点</span><br><span class="hljs-comment">/* Used to free the struct epitem */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rcu_head</span> <span class="hljs-title">rcu</span>;</span><br>&#125;;<br><br><span class="hljs-comment">/* List header used to link this structure to the eventpoll ready list */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">rdllink</span>;</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Works together &quot;struct eventpoll&quot;-&gt;ovflist in keeping the</span><br><span class="hljs-comment"> * single linked chain of items.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epitem</span> *<span class="hljs-title">next</span>;</span><span class="hljs-comment">//</span><br><br><span class="hljs-comment">/* The file descriptor information this item refers to */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epoll_filefd</span> <span class="hljs-title">ffd</span>;</span><span class="hljs-comment">//文件fd</span><br><br><span class="hljs-comment">/* List containing poll wait queues */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">eppoll_entry</span> *<span class="hljs-title">pwqlist</span>;</span><span class="hljs-comment">//等待队列</span><br><br><span class="hljs-comment">/* The &quot;container&quot; of this item */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">eventpoll</span> *<span class="hljs-title">ep</span>;</span><span class="hljs-comment">//指向eventpoll控制块</span><br><br><span class="hljs-comment">/* List header used to link this item to the &quot;struct file&quot; items list */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hlist_node</span> <span class="hljs-title">fllink</span>;</span><br><br><span class="hljs-comment">/* wakeup_source used when EPOLLWAKEUP is set */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">wakeup_source</span> __<span class="hljs-title">rcu</span> *<span class="hljs-title">ws</span>;</span><br><br><span class="hljs-comment">/* The structure that describe the interested events and the source fd */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epoll_event</span> <span class="hljs-title">event</span>;</span><span class="hljs-comment">//事件</span><br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="2-3-红黑树查找对应的fd的epitem"><a href="#2-3-红黑树查找对应的fd的epitem" class="headerlink" title="2.3 红黑树查找对应的fd的epitem"></a>2.3 红黑树查找对应的fd的epitem</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 红黑树查找对应的fd的epitem</span><br><span class="hljs-comment"> * @param ep</span><br><span class="hljs-comment"> * @param file</span><br><span class="hljs-comment"> * @param fd</span><br><span class="hljs-comment"> * @return</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-keyword">struct</span> epitem *<span class="hljs-title function_">ep_find</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> eventpoll *ep, <span class="hljs-keyword">struct</span> file *file, <span class="hljs-type">int</span> fd)</span>&#123;<br><span class="hljs-type">int</span> kcmp;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_node</span> *<span class="hljs-title">rbp</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epitem</span> *<span class="hljs-title">epi</span>, *<span class="hljs-title">epir</span> =</span> <span class="hljs-literal">NULL</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epoll_filefd</span> <span class="hljs-title">ffd</span>;</span><br><br>ep_set_ffd(&amp;ffd, file, fd);<span class="hljs-comment">//初始化指针</span><br><span class="hljs-comment">//二分搜索</span><br><span class="hljs-keyword">for</span> (rbp = ep-&gt;rbr.rb_root.rb_node; rbp; ) &#123;<br>epi = rb_entry(rbp, <span class="hljs-keyword">struct</span> epitem, rbn);<br>kcmp = ep_cmp_ffd(&amp;ffd, &amp;epi-&gt;ffd);<br><span class="hljs-keyword">if</span> (kcmp &gt; <span class="hljs-number">0</span>)<br>rbp = rbp-&gt;rb_right;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (kcmp &lt; <span class="hljs-number">0</span>)<br>rbp = rbp-&gt;rb_left;<br><span class="hljs-keyword">else</span> &#123;<br>epir = epi;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> epir;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h3><h4 id="1-调用ep-insert插入"><a href="#1-调用ep-insert插入" class="headerlink" title="1.调用ep_insert插入"></a>1.调用ep_insert插入</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 插入操作（必须在持有“mtx”的情况下调用）</span><br><span class="hljs-comment"> * @param ep 控制块</span><br><span class="hljs-comment"> * @param event</span><br><span class="hljs-comment"> * @param tfile</span><br><span class="hljs-comment"> * @param fd</span><br><span class="hljs-comment"> * @param full_check</span><br><span class="hljs-comment"> * @return</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">ep_insert</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> eventpoll *ep, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> epoll_event *event,<span class="hljs-keyword">struct</span> file *tfile, <span class="hljs-type">int</span> fd, <span class="hljs-type">int</span> full_check)</span><br>&#123;<br><span class="hljs-type">int</span> error, pwake = <span class="hljs-number">0</span>;<br><span class="hljs-type">__poll_t</span> revents;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epitem</span> *<span class="hljs-title">epi</span>;</span><span class="hljs-comment">//红黑树节点结构体</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ep_pqueue</span> <span class="hljs-title">epq</span>;</span><span class="hljs-comment">//epoll队列</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">eventpoll</span> *<span class="hljs-title">tep</span> =</span> <span class="hljs-literal">NULL</span>;<br><span class="hljs-comment">//判断是否是epoll文件</span><br><span class="hljs-keyword">if</span> (is_file_epoll(tfile))tep = tfile-&gt;private_data;<br><br>lockdep_assert_irqs_enabled();<br><span class="hljs-comment">//epoll可监控的最大值</span><br><span class="hljs-comment">//unsigned int sysctl_nr_open __read_mostly = 1024*1024;</span><br><span class="hljs-keyword">if</span> (unlikely(percpu_counter_compare(&amp;ep-&gt;user-&gt;epoll_watches,max_user_watches) &gt;= <span class="hljs-number">0</span>))<span class="hljs-keyword">return</span> -ENOSPC;<br><span class="hljs-comment">//增加cpu计数</span><br>percpu_counter_inc(&amp;ep-&gt;user-&gt;epoll_watches);<br><span class="hljs-comment">//从缓存中申请内存,申请失败减掉计数</span><br><span class="hljs-comment">//epi_cache内存池在epoll模块初始化时已经分配,这里根据slab直接取一个epitem</span><br><span class="hljs-keyword">if</span> (!(epi = kmem_cache_zalloc(epi_cache, GFP_KERNEL))) &#123;<br>percpu_counter_dec(&amp;ep-&gt;user-&gt;epoll_watches);<br><span class="hljs-keyword">return</span> -ENOMEM;<br>&#125;<br><span class="hljs-comment">//初始化工作 epitem</span><br><span class="hljs-comment">/* Item initialization follow here ... */</span><br>INIT_LIST_HEAD(&amp;epi-&gt;rdllink);<br>epi-&gt;ep = ep;<span class="hljs-comment">//设置指向ep的指针</span><br>ep_set_ffd(&amp;epi-&gt;ffd, tfile, fd);<span class="hljs-comment">//设置ffd</span><br>epi-&gt;event = *event;<span class="hljs-comment">//设置监听的事件</span><br>epi-&gt;next = EP_UNACTIVE_PTR;<br><span class="hljs-comment">//加锁</span><br><span class="hljs-keyword">if</span> (tep)mutex_lock_nested(&amp;tep-&gt;mtx, <span class="hljs-number">1</span>);<br><span class="hljs-comment">/* Add the current item to the list of active epoll hook for this file */</span><br><span class="hljs-comment">//将当前项添加到此文件的活动epoll钩子列表</span><br><span class="hljs-keyword">if</span> (unlikely(attach_epitem(tfile, epi) &lt; <span class="hljs-number">0</span>)) &#123;<br><span class="hljs-keyword">if</span> (tep)mutex_unlock(&amp;tep-&gt;mtx);<br>kmem_cache_free(epi_cache, epi);<br>percpu_counter_dec(&amp;ep-&gt;user-&gt;epoll_watches);<br><span class="hljs-keyword">return</span> -ENOMEM;<br>&#125;<br><br><span class="hljs-keyword">if</span> (full_check &amp;&amp; !tep)list_file(tfile);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Add the current item to the RB tree. All RB tree operations are</span><br><span class="hljs-comment"> * protected by &quot;mtx&quot;, and ep_insert() is called with &quot;mtx&quot; held.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//插入到红黑树中</span><br>ep_rbtree_insert(ep, epi);<br><span class="hljs-keyword">if</span> (tep)mutex_unlock(&amp;tep-&gt;mtx);<br><br><span class="hljs-comment">/* now check if we&#x27;ve created too many backpaths */</span><br><span class="hljs-keyword">if</span> (unlikely(full_check &amp;&amp; reverse_path_check())) &#123;<br>ep_remove(ep, epi);<br><span class="hljs-keyword">return</span> -EINVAL;<br>&#125;<br><span class="hljs-comment">//如果events里设置了EPOLLWAKEUP, 还需要为autosleep创建一个唤醒源 ep_create_wakeup_source</span><br><span class="hljs-keyword">if</span> (epi-&gt;event.events &amp; EPOLLWAKEUP) &#123;<br>error = ep_create_wakeup_source(epi);<br><span class="hljs-keyword">if</span> (error) &#123;<br>ep_remove(ep, epi);<br><span class="hljs-keyword">return</span> error;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/* Initialize the poll table using the queue callback */</span><br><span class="hljs-comment">//初始化</span><br>epq.epi = epi;<br><br><span class="hljs-comment">/* 设置epq的回调函数为ep_ptable_queue_proc,当调用poll_wait时会调用该回调函数，</span><br><span class="hljs-comment">      * 而函数体ep_ptable_queue_proc内部所做的主要工作,</span><br><span class="hljs-comment">      * 就是把epitem对应fd的事件到来时的回调函数设置为ep_poll_callback。</span><br><span class="hljs-comment">      * ep_poll_callback所做的主要工作就是把就绪的fd放到就绪链表rdllist上,</span><br><span class="hljs-comment">      * 然后唤醒epoll_wait的调用者, 被唤醒的进程再把rdllist上就绪的fd的events拷贝给用户进程,</span><br><span class="hljs-comment">      * 完成一个闭环。</span><br><span class="hljs-comment">     */</span><br>init_poll_funcptr(&amp;epq.pt, ep_ptable_queue_proc);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Attach the item to the poll hooks and get current event bits.</span><br><span class="hljs-comment"> * We can safely use the file* here because its usage count has</span><br><span class="hljs-comment"> * been increased by the caller of this function. Note that after</span><br><span class="hljs-comment"> * this operation completes, the poll callback can start hitting</span><br><span class="hljs-comment"> * the new item.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//如果当前监听的事件刚好发生，则直接返回</span><br>revents = ep_item_poll(epi, &amp;epq.pt, <span class="hljs-number">1</span>);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * We have to check if something went wrong during the poll wait queue</span><br><span class="hljs-comment"> * install process. Namely an allocation for a wait queue failed due</span><br><span class="hljs-comment"> * high memory pressure.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (unlikely(!epq.epi)) &#123;<br>ep_remove(ep, epi);<br><span class="hljs-keyword">return</span> -ENOMEM;<br>&#125;<br><br><span class="hljs-comment">/* We have to drop the new item inside our item list to keep track of it */</span><br>write_lock_irq(&amp;ep-&gt;lock);<br><br><span class="hljs-comment">/* record NAPI ID of new item if present */</span><br>ep_set_busy_poll_napi_id(epi);<br><br><span class="hljs-comment">/* If the file is already &quot;ready&quot; we drop it inside the ready list */</span><br><span class="hljs-comment">//如果当前的epi已经就绪了，上面的revents返回就绪的事件，则把其加入就绪列表rdllink</span><br><span class="hljs-keyword">if</span> (revents &amp;&amp; !ep_is_linked(epi)) &#123;<br><span class="hljs-comment">//加入就序列表尾部</span><br>list_add_tail(&amp;epi-&gt;rdllink, &amp;ep-&gt;rdllist);<br>ep_pm_stay_awake(epi);<br><span class="hljs-comment">/* Notify waiting tasks that events are available */</span><br><span class="hljs-comment">//主动唤醒通知等待任务事件可用</span><br><span class="hljs-keyword">if</span> (waitqueue_active(&amp;ep-&gt;wq))wake_up(&amp;ep-&gt;wq);<br><span class="hljs-keyword">if</span> (waitqueue_active(&amp;ep-&gt;poll_wait))pwake++;<br>&#125;<br><span class="hljs-comment">//释放ep的锁</span><br>write_unlock_irq(&amp;ep-&gt;lock);<br><br><span class="hljs-comment">/* We have to call this outside the lock */</span><br><span class="hljs-keyword">if</span> (pwake)ep_poll_safewake(ep, <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2-插入节点到红黑树"><a href="#2-插入节点到红黑树" class="headerlink" title="2.插入节点到红黑树"></a>2.插入节点到红黑树</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 插入epi到红黑树中</span><br><span class="hljs-comment"> * @param ep eventpoll控制块</span><br><span class="hljs-comment"> * @param epi 插入的节点</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ep_rbtree_insert</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> eventpoll *ep, <span class="hljs-keyword">struct</span> epitem *epi)</span><br>&#123;<br><span class="hljs-type">int</span> kcmp;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_node</span> **<span class="hljs-title">p</span> =</span> &amp;ep-&gt;rbr.rb_root.rb_node, *parent = <span class="hljs-literal">NULL</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epitem</span> *<span class="hljs-title">epic</span>;</span><br><span class="hljs-type">bool</span> leftmost = <span class="hljs-literal">true</span>;<br><br><span class="hljs-keyword">while</span> (*p) &#123;<br>parent = *p;<br>epic = rb_entry(parent, <span class="hljs-keyword">struct</span> epitem, rbn);<br>kcmp = ep_cmp_ffd(&amp;epi-&gt;ffd, &amp;epic-&gt;ffd);<br><span class="hljs-keyword">if</span> (kcmp &gt; <span class="hljs-number">0</span>) &#123;<br>p = &amp;parent-&gt;rb_right;<br>leftmost = <span class="hljs-literal">false</span>;<br>&#125; <span class="hljs-keyword">else</span><br>p = &amp;parent-&gt;rb_left;<br>&#125;<br><span class="hljs-comment">//通过rbn关联（注意实际上插入红黑树的是rbn,通过其进行关联epitem）</span><br>rb_link_node(&amp;epi-&gt;rbn, parent, p);<br>rb_insert_color_cached(&amp;epi-&gt;rbn, &amp;ep-&gt;rbr, leftmost);<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 红黑树的插入操作</span><br><span class="hljs-comment"> * @param node </span><br><span class="hljs-comment"> * @param parent </span><br><span class="hljs-comment"> * @param rb_link </span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">rb_link_node</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> rb_node *node, <span class="hljs-keyword">struct</span> rb_node *parent,<span class="hljs-keyword">struct</span> rb_node **rb_link)</span><br>&#123;<br>node-&gt;__rb_parent_color = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)parent;<span class="hljs-comment">//父节点颜色</span><br>node-&gt;rb_left = node-&gt;rb_right = <span class="hljs-literal">NULL</span>;<span class="hljs-comment">//设置其左右节点为NULL</span><br>*rb_link = node;<span class="hljs-comment">//将rb_link指针指向node</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-1查找到对应插入的位置"><a href="#2-1查找到对应插入的位置" class="headerlink" title="2.1查找到对应插入的位置"></a>2.1查找到对应插入的位置</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 插入epi到红黑树中</span><br><span class="hljs-comment"> * @param ep eventpoll控制块</span><br><span class="hljs-comment"> * @param epi 插入的节点</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ep_rbtree_insert</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> eventpoll *ep, <span class="hljs-keyword">struct</span> epitem *epi)</span><br>&#123;<br><span class="hljs-type">int</span> kcmp;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_node</span> **<span class="hljs-title">p</span> =</span> &amp;ep-&gt;rbr.rb_root.rb_node, *parent = <span class="hljs-literal">NULL</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epitem</span> *<span class="hljs-title">epic</span>;</span><br><span class="hljs-type">bool</span> leftmost = <span class="hljs-literal">true</span>;<br><br><span class="hljs-keyword">while</span> (*p) &#123;<br>parent = *p;<br>epic = rb_entry(parent, <span class="hljs-keyword">struct</span> epitem, rbn);<br>kcmp = ep_cmp_ffd(&amp;epi-&gt;ffd, &amp;epic-&gt;ffd);<br><span class="hljs-keyword">if</span> (kcmp &gt; <span class="hljs-number">0</span>) &#123;<br>p = &amp;parent-&gt;rb_right;<br>leftmost = <span class="hljs-literal">false</span>;<br>&#125; <span class="hljs-keyword">else</span><br>p = &amp;parent-&gt;rb_left;<br>&#125;<br><span class="hljs-comment">//通过rbn关联</span><br>rb_link_node(&amp;epi-&gt;rbn, parent, p);<br>rb_insert_color_cached(&amp;epi-&gt;rbn, &amp;ep-&gt;rbr, leftmost);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-插入节点"><a href="#2-2-插入节点" class="headerlink" title="2.2 插入节点"></a>2.2 插入节点</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">rb_link_node</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> rb_node *node, <span class="hljs-keyword">struct</span> rb_node *parent,<span class="hljs-keyword">struct</span> rb_node **rb_link)</span><br>&#123;<br>node-&gt;__rb_parent_color = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)parent;<br>node-&gt;rb_left = node-&gt;rb_right = <span class="hljs-literal">NULL</span>;<br>*rb_link = node;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-初始化poll回调函数指针"><a href="#3-初始化poll回调函数指针" class="headerlink" title="3.初始化poll回调函数指针"></a>3.初始化poll回调函数指针</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 初始化</span><br><span class="hljs-comment"> * @param pt</span><br><span class="hljs-comment"> * @param qproc</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">init_poll_funcptr</span><span class="hljs-params">(poll_table *pt, poll_queue_proc qproc)</span><br>&#123;<br><span class="hljs-comment">//pt是poll_table_struct结构体类型，设置其回调函数</span><br>pt-&gt;_qproc = qproc;<br><span class="hljs-comment">//默认监听所有事件</span><br>pt-&gt;_key   = ~(<span class="hljs-type">__poll_t</span>)<span class="hljs-number">0</span>; <span class="hljs-comment">/* all events enabled */</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-1-结构体poll-table-struct"><a href="#3-1-结构体poll-table-struct" class="headerlink" title="3.1 结构体poll_table_struct"></a>3.1 结构体poll_table_struct</h4><blockquote><p>存储回调函数和监听的事件类型</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">poll_table_struct</span> &#123;</span><br>poll_queue_proc _qproc;<br><span class="hljs-type">__poll_t</span> _key;<br>&#125; poll_table;<br></code></pre></td></tr></table></figure><h4 id="3-2-唤醒时回调的函数"><a href="#3-2-唤醒时回调的函数" class="headerlink" title="3.2 唤醒时回调的函数"></a>3.2 唤醒时回调的函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ep_ptable_queue_proc</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *file, <span class="hljs-type">wait_queue_head_t</span> *whead,poll_table *pt)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ep_pqueue</span> *<span class="hljs-title">epq</span> =</span> container_of(pt, <span class="hljs-keyword">struct</span> ep_pqueue, pt);<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epitem</span> *<span class="hljs-title">epi</span> =</span> epq-&gt;epi;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">eppoll_entry</span> *<span class="hljs-title">pwq</span>;</span><span class="hljs-comment">//结构体见3.3</span><br><br><span class="hljs-keyword">if</span> (unlikely(!epi))<span class="hljs-comment">// an earlier allocation has failed</span><br><span class="hljs-keyword">return</span>;<br><br>pwq = kmem_cache_alloc(pwq_cache, GFP_KERNEL);<br><span class="hljs-keyword">if</span> (unlikely(!pwq)) &#123;<br>epq-&gt;epi = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">//初始化等待队列，当唤醒时调用ep_poll_callback</span><br>init_waitqueue_func_entry(&amp;pwq-&gt;wait, ep_poll_callback);<br>pwq-&gt;whead = whead;<br>pwq-&gt;base = epi;<br><span class="hljs-keyword">if</span> (epi-&gt;event.events &amp; EPOLLEXCLUSIVE)add_wait_queue_exclusive(whead, &amp;pwq-&gt;wait);<br><span class="hljs-keyword">else</span> add_wait_queue(whead, &amp;pwq-&gt;wait);<br>pwq-&gt;next = epi-&gt;pwqlist;<br>epi-&gt;pwqlist = pwq;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-结构体-eppoll-entry"><a href="#3-3-结构体-eppoll-entry" class="headerlink" title="3.3 结构体 eppoll_entry"></a>3.3 结构体 eppoll_entry</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Wait structure used by the poll hooks */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">eppoll_entry</span> &#123;</span><br><span class="hljs-comment">/* List header used to link this structure to the &quot;struct epitem&quot; */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">eppoll_entry</span> *<span class="hljs-title">next</span>;</span><br><span class="hljs-comment">/* The &quot;base&quot; pointer is set to the container &quot;struct epitem&quot; */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epitem</span> *<span class="hljs-title">base</span>;</span><br><span class="hljs-comment">/* Wait queue item that will be linked to the target file wait queue head.*/</span><br><span class="hljs-type">wait_queue_entry_t</span> wait;<br><span class="hljs-comment">/* The wait queue head that linked the &quot;wait&quot; wait queue item */</span><br><span class="hljs-type">wait_queue_head_t</span> *whead;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="3-4-回调函数ep-poll-callback"><a href="#3-4-回调函数ep-poll-callback" class="headerlink" title="3.4 回调函数ep_poll_callback"></a>3.4 回调函数ep_poll_callback</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * epoll回调函数主要的功能是将被监视文件的等待事件就绪时，</span><br><span class="hljs-comment"> * 将文件对应的epitem实例添加到就绪队列中，当用户调用epoll_wait()时，</span><br><span class="hljs-comment"> * 内核会将就绪队列中的事件报告给用户</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * @param wait</span><br><span class="hljs-comment"> * @param mode</span><br><span class="hljs-comment"> * @param sync</span><br><span class="hljs-comment"> * @param key</span><br><span class="hljs-comment"> * @return</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">ep_poll_callback</span><span class="hljs-params">(<span class="hljs-type">wait_queue_entry_t</span> *wait, <span class="hljs-type">unsigned</span> mode, <span class="hljs-type">int</span> sync, <span class="hljs-type">void</span> *key)</span><br>&#123;<br><span class="hljs-type">int</span> pwake = <span class="hljs-number">0</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epitem</span> *<span class="hljs-title">epi</span> =</span> ep_item_from_wait(wait);<span class="hljs-comment">//从等待队列指针获取“struct epitem”</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">eventpoll</span> *<span class="hljs-title">ep</span> =</span> epi-&gt;ep;<span class="hljs-comment">//ep控制块</span><br><span class="hljs-type">__poll_t</span> pollflags = key_to_poll(key);<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> flags;<br><span class="hljs-type">int</span> ewake = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//获取读锁</span><br>read_lock_irqsave(&amp;ep-&gt;lock, flags);<br><br>ep_set_busy_poll_napi_id(epi);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * If the event mask does not contain any poll(2) event, we consider the</span><br><span class="hljs-comment"> * descriptor to be disabled. This condition is likely the effect of the</span><br><span class="hljs-comment"> * EPOLLONESHOT bit that disables the descriptor when an event is received,</span><br><span class="hljs-comment"> * until the next EPOLL_CTL_MOD will be issued.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//如果当前epitem不感兴趣任何事件则直接跳出</span><br><span class="hljs-keyword">if</span> (!(epi-&gt;event.events &amp; ~EP_PRIVATE_BITS))<br><span class="hljs-keyword">goto</span> out_unlock;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Check the events coming with the callback. At this stage, not</span><br><span class="hljs-comment"> * every device reports the events in the &quot;key&quot; parameter of the</span><br><span class="hljs-comment"> * callback. We need to be able to handle both cases here, hence the</span><br><span class="hljs-comment"> * test for &quot;key&quot; != NULL before the event match test.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (pollflags &amp;&amp; !(pollflags &amp; epi-&gt;event.events))<br><span class="hljs-keyword">goto</span> out_unlock;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * If we are transferring events to userspace, we can hold no locks</span><br><span class="hljs-comment"> * (because we&#x27;re accessing user memory, and because of linux f_op-&gt;poll()</span><br><span class="hljs-comment"> * semantics). All the events that happen during that period of time are</span><br><span class="hljs-comment"> * chained in ep-&gt;ovflist and requeued later on.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">// ovflist默认值是EP_UNACTIVE_PTR，epoll_wait()遍历rdllist之前会把ovflist设置为NULL，</span><br><span class="hljs-comment">// 遍历完再恢复为EP_UNACTIVE_PTR，因此通过判断ovflist的值是不是EP_UNACTIVE_PTR可知此时rdllist是不是正在被访问。</span><br><span class="hljs-keyword">if</span> (READ_ONCE(ep-&gt;ovflist) != EP_UNACTIVE_PTR) &#123;<br><span class="hljs-keyword">if</span> (chain_epi_lockless(epi))ep_pm_stay_awake_rcu(epi);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!ep_is_linked(epi)) &#123;<br><span class="hljs-comment">/* In the usual case, add event to ready list. */</span><br><span class="hljs-comment">//将事件添加到就绪列表</span><br><span class="hljs-keyword">if</span> (list_add_tail_lockless(&amp;epi-&gt;rdllink, &amp;ep-&gt;rdllist))ep_pm_stay_awake_rcu(epi);<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Wake up ( if active ) both the eventpoll wait list and the -&gt;poll()</span><br><span class="hljs-comment"> * wait list.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//如果等待队列不为空，则将他们进行唤醒</span><br><span class="hljs-keyword">if</span> (waitqueue_active(&amp;ep-&gt;wq)) &#123;<br><span class="hljs-keyword">if</span> ((epi-&gt;event.events &amp; EPOLLEXCLUSIVE) &amp;&amp;<br>!(pollflags &amp; POLLFREE)) &#123;<br><span class="hljs-keyword">switch</span> (pollflags &amp; EPOLLINOUT_BITS) &#123;<br><span class="hljs-keyword">case</span> EPOLLIN:<br><span class="hljs-keyword">if</span> (epi-&gt;event.events &amp; EPOLLIN)<br>ewake = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> EPOLLOUT:<br><span class="hljs-keyword">if</span> (epi-&gt;event.events &amp; EPOLLOUT)<br>ewake = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>ewake = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">//唤醒等待的进程</span><br>wake_up(&amp;ep-&gt;wq);<br>&#125;<br><span class="hljs-keyword">if</span> (waitqueue_active(&amp;ep-&gt;poll_wait))<br>pwake++;<br><br>out_unlock:<br>read_unlock_irqrestore(&amp;ep-&gt;lock, flags);<br><br><span class="hljs-comment">/* We have to call this outside the lock */</span><br><span class="hljs-keyword">if</span> (pwake)<br>ep_poll_safewake(ep, epi);<br><br><span class="hljs-keyword">if</span> (!(epi-&gt;event.events &amp; EPOLLEXCLUSIVE))<br>ewake = <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">if</span> (pollflags &amp; POLLFREE) &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * If we race with ep_remove_wait_queue() it can miss</span><br><span class="hljs-comment"> * -&gt;whead = NULL and do another remove_wait_queue() after</span><br><span class="hljs-comment"> * us, so we can&#x27;t use __remove_wait_queue().</span><br><span class="hljs-comment"> */</span><br>list_del_init(&amp;wait-&gt;entry);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * -&gt;whead != NULL protects us from the race with ep_free()</span><br><span class="hljs-comment"> * or ep_remove(), ep_remove_wait_queue() takes whead-&gt;lock</span><br><span class="hljs-comment"> * held by the caller. Once we nullify it, nothing protects</span><br><span class="hljs-comment"> * ep/epi or even wait.</span><br><span class="hljs-comment"> */</span><br>smp_store_release(&amp;ep_pwq_from_wait(wait)-&gt;whead, <span class="hljs-literal">NULL</span>);<br>&#125;<br><br><span class="hljs-keyword">return</span> ewake;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-调用ep-item-poll函数"><a href="#4-调用ep-item-poll函数" class="headerlink" title="4.调用ep_item_poll函数"></a>4.调用ep_item_poll函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 核心调用</span><br><span class="hljs-comment"> * @param epi epitem 节点</span><br><span class="hljs-comment"> * @param pt poll_table </span><br><span class="hljs-comment"> * @param depth</span><br><span class="hljs-comment"> * @return</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">__poll_t</span> <span class="hljs-title function_">ep_item_poll</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> epitem *epi, poll_table *pt, <span class="hljs-type">int</span> depth)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> *<span class="hljs-title">file</span> =</span> epi-&gt;ffd.file;<br><span class="hljs-type">__poll_t</span> res;<br><br>pt-&gt;_key = epi-&gt;event.events;<br><span class="hljs-keyword">if</span> (!is_file_epoll(file))<span class="hljs-comment">//不支持epoll则调用poll</span><br>res = vfs_poll(file, pt);<br><span class="hljs-keyword">else</span><span class="hljs-comment">//（主线）否则调用epoll</span><br>res = __ep_eventpoll_poll(file, pt, depth);<br><span class="hljs-keyword">return</span> res &amp; epi-&gt;event.events;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-1-调用-ep-eventpoll-poll"><a href="#4-1-调用-ep-eventpoll-poll" class="headerlink" title="4.1 调用 __ep_eventpoll_poll"></a>4.1 调用 __ep_eventpoll_poll</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 主线</span><br><span class="hljs-comment"> * @param file 文件</span><br><span class="hljs-comment"> * @param wait poll_table</span><br><span class="hljs-comment"> * @param depth</span><br><span class="hljs-comment"> * @return</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">__poll_t</span> __ep_eventpoll_poll(<span class="hljs-keyword">struct</span> file *file, poll_table *wait, <span class="hljs-type">int</span> depth)<br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">eventpoll</span> *<span class="hljs-title">ep</span> =</span> file-&gt;private_data;<span class="hljs-comment">//获取ep控制块</span><br>LIST_HEAD(txlist);<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epitem</span> *<span class="hljs-title">epi</span>, *<span class="hljs-title">tmp</span>;</span><br>poll_table pt;<br><span class="hljs-type">__poll_t</span> res = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//重置回调函数为NULL</span><br>init_poll_funcptr(&amp;pt, <span class="hljs-literal">NULL</span>);<br><span class="hljs-comment">/* Insert inside our poll wait queue */</span><br><span class="hljs-comment">//主线</span><br>poll_wait(file, &amp;ep-&gt;poll_wait, wait);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Proceed to find out if wanted events are really available inside</span><br><span class="hljs-comment"> * the ready list.</span><br><span class="hljs-comment"> */</span><br>mutex_lock_nested(&amp;ep-&gt;mtx, depth);<br><span class="hljs-comment">//</span><br>ep_start_scan(ep, &amp;txlist);<br>list_for_each_entry_safe(epi, tmp, &amp;txlist, rdllink) &#123;<br><span class="hljs-keyword">if</span> (ep_item_poll(epi, &amp;pt, depth + <span class="hljs-number">1</span>)) &#123;<br>res = EPOLLIN | EPOLLRDNORM;<br><span class="hljs-keyword">break</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Item has been dropped into the ready list by the poll</span><br><span class="hljs-comment"> * callback, but it&#x27;s not actually ready, as far as</span><br><span class="hljs-comment"> * caller requested events goes. We can remove it here.</span><br><span class="hljs-comment"> */</span><br>__pm_relax(ep_wakeup_source(epi));<br>list_del_init(&amp;epi-&gt;rdllink);<br>&#125;<br>&#125;<br>ep_done_scan(ep, &amp;txlist);<br>mutex_unlock(&amp;ep-&gt;mtx);<br><span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2-调用poll-wait函数触发回调"><a href="#4-2-调用poll-wait函数触发回调" class="headerlink" title="4.2 调用poll_wait函数触发回调"></a>4.2 调用poll_wait函数触发回调</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 调用回调函数</span><br><span class="hljs-comment"> * @param filp</span><br><span class="hljs-comment"> * @param wait_address</span><br><span class="hljs-comment"> * @param p</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">poll_wait</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file * filp, <span class="hljs-type">wait_queue_head_t</span> * wait_address, poll_table *p)</span><br>&#123;<br><span class="hljs-keyword">if</span> (p &amp;&amp; p-&gt;_qproc &amp;&amp; wait_address)<br>        <span class="hljs-comment">//调用init_poll_funcptr设置的回调函数</span><br>p-&gt;_qproc(filp, wait_address, p);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><h4 id="1-调用ep-remove删除"><a href="#1-调用ep-remove删除" class="headerlink" title="1. 调用ep_remove删除"></a>1. 调用ep_remove删除</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 移除 epitem 操作</span><br><span class="hljs-comment"> * @param ep ep控制块</span><br><span class="hljs-comment"> * @param epi 需要移除的epitem</span><br><span class="hljs-comment"> * @return</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">ep_remove</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> eventpoll *ep, <span class="hljs-keyword">struct</span> epitem *epi)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> *<span class="hljs-title">file</span> =</span> epi-&gt;ffd.file;<span class="hljs-comment">//获取文件</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epitems_head</span> *<span class="hljs-title">to_free</span>;</span><span class="hljs-comment">//epitem头指针</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hlist_head</span> *<span class="hljs-title">head</span>;</span><br><br>lockdep_assert_irqs_enabled();<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Removes poll wait queue hooks.</span><br><span class="hljs-comment"> */</span><br>ep_unregister_pollwait(ep, epi);<br><br><span class="hljs-comment">/* Remove the current item from the list of epoll hooks */</span><br>spin_lock(&amp;file-&gt;f_lock);<span class="hljs-comment">//获取锁</span><br>to_free = <span class="hljs-literal">NULL</span>;<br>head = file-&gt;f_ep;<br><span class="hljs-comment">//遍历fllink获取要移除的节点</span><br><span class="hljs-keyword">if</span> (head-&gt;first == &amp;epi-&gt;fllink &amp;&amp; !epi-&gt;fllink.next) &#123;<br>file-&gt;f_ep = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">if</span> (!is_file_epoll(file)) &#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epitems_head</span> *<span class="hljs-title">v</span>;</span><br>v = container_of(head, <span class="hljs-keyword">struct</span> epitems_head, epitems);<br><span class="hljs-keyword">if</span> (!smp_load_acquire(&amp;v-&gt;next))<br>to_free = v;<br>&#125;<br>&#125;<br>hlist_del_rcu(&amp;epi-&gt;fllink);<br>spin_unlock(&amp;file-&gt;f_lock);<br>free_ephead(to_free);<span class="hljs-comment">//释放</span><br><br>rb_erase_cached(&amp;epi-&gt;rbn, &amp;ep-&gt;rbr);<br><br>write_lock_irq(&amp;ep-&gt;lock);<br><span class="hljs-keyword">if</span> (ep_is_linked(epi))<br>list_del_init(&amp;epi-&gt;rdllink);<br>write_unlock_irq(&amp;ep-&gt;lock);<br><br>wakeup_source_unregister(ep_wakeup_source(epi));<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * At this point it is safe to free the eventpoll item. Use the union</span><br><span class="hljs-comment"> * field epi-&gt;rcu, since we are trying to minimize the size of</span><br><span class="hljs-comment"> * &#x27;struct epitem&#x27;. The &#x27;rbn&#x27; field is no longer in use. Protected by</span><br><span class="hljs-comment"> * ep-&gt;mtx. The rcu read side, reverse_path_check_proc(), does not make</span><br><span class="hljs-comment"> * use of the rbn field.</span><br><span class="hljs-comment"> */</span><br>call_rcu(&amp;epi-&gt;rcu, epi_rcu_free);<span class="hljs-comment">//释放</span><br><br>percpu_counter_dec(&amp;ep-&gt;user-&gt;epoll_watches);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-移除进程等待队列wq"><a href="#2-移除进程等待队列wq" class="headerlink" title="2.移除进程等待队列wq"></a>2.移除进程等待队列wq</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 取消注册的进程</span><br><span class="hljs-comment"> * @param ep </span><br><span class="hljs-comment"> * @param epi </span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ep_unregister_pollwait</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> eventpoll *ep, <span class="hljs-keyword">struct</span> epitem *epi)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">eppoll_entry</span> **<span class="hljs-title">p</span> =</span> &amp;epi-&gt;pwqlist;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">eppoll_entry</span> *<span class="hljs-title">pwq</span>;</span><br><br><span class="hljs-keyword">while</span> ((pwq = *p) != <span class="hljs-literal">NULL</span>) &#123;<br>*p = pwq-&gt;next;<br>ep_remove_wait_queue(pwq);<span class="hljs-comment">//移除</span><br>kmem_cache_free(pwq_cache, pwq);<span class="hljs-comment">//释放内存</span><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="修改操作"><a href="#修改操作" class="headerlink" title="修改操作"></a>修改操作</h3><h4 id="1-调用ep-modify修改"><a href="#1-调用ep-modify修改" class="headerlink" title="1.调用ep_modify修改"></a>1.调用ep_modify修改</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 修改操作：将epi设置为感兴趣的event</span><br><span class="hljs-comment"> * @param ep控制块</span><br><span class="hljs-comment"> * @param epi epitem</span><br><span class="hljs-comment"> * @param event 更改后的事件</span><br><span class="hljs-comment"> * @return</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">ep_modify</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> eventpoll *ep, <span class="hljs-keyword">struct</span> epitem *epi,<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> epoll_event *event)</span><br>&#123;<br><span class="hljs-type">int</span> pwake = <span class="hljs-number">0</span>;<br>poll_table pt;<br><br>lockdep_assert_irqs_enabled();<br><span class="hljs-comment">//将pt的回调函数置空</span><br>init_poll_funcptr(&amp;pt, <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Set the new event interest mask before calling f_op-&gt;poll();</span><br><span class="hljs-comment"> * otherwise we might miss an event that happens between the</span><br><span class="hljs-comment"> * f_op-&gt;poll() call and the new event set registering.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//设置新的感兴趣的事件</span><br>epi-&gt;event.events = event-&gt;events; <span class="hljs-comment">/* need barrier below */</span><br>epi-&gt;event.data = event-&gt;data; <span class="hljs-comment">/* protected by mtx */</span><br><span class="hljs-comment">//加入唤醒源</span><br><span class="hljs-keyword">if</span> (epi-&gt;event.events &amp; EPOLLWAKEUP) &#123;<br><span class="hljs-keyword">if</span> (!ep_has_wakeup_source(epi))<br>ep_create_wakeup_source(epi);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ep_has_wakeup_source(epi)) &#123;<br>ep_destroy_wakeup_source(epi);<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * The following barrier has two effects:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 1) Flush epi changes above to other CPUs.  This ensures</span><br><span class="hljs-comment"> *    we do not miss events from ep_poll_callback if an</span><br><span class="hljs-comment"> *    event occurs immediately after we call f_op-&gt;poll().</span><br><span class="hljs-comment"> *    We need this because we did not take ep-&gt;lock while</span><br><span class="hljs-comment"> *    changing epi above (but ep_poll_callback does take</span><br><span class="hljs-comment"> *    ep-&gt;lock).</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 2) We also need to ensure we do not miss _past_ events</span><br><span class="hljs-comment"> *    when calling f_op-&gt;poll().  This barrier also</span><br><span class="hljs-comment"> *    pairs with the barrier in wq_has_sleeper (see</span><br><span class="hljs-comment"> *    comments for wq_has_sleeper).</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * This barrier will now guarantee ep_poll_callback or f_op-&gt;poll</span><br><span class="hljs-comment"> * (or both) will notice the readiness of an item.</span><br><span class="hljs-comment"> */</span><br>smp_mb();<span class="hljs-comment">//内存屏障</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Get current event bits. We can safely use the file* here because</span><br><span class="hljs-comment"> * its usage count has been increased by the caller of this function.</span><br><span class="hljs-comment"> * If the item is &quot;hot&quot; and it is not registered inside the ready</span><br><span class="hljs-comment"> * list, push it inside.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//如果在当前有准备好的事件了则将其加入到就绪队列中去</span><br><span class="hljs-keyword">if</span> (ep_item_poll(epi, &amp;pt, <span class="hljs-number">1</span>)) &#123;<br>write_lock_irq(&amp;ep-&gt;lock);<br><span class="hljs-keyword">if</span> (!ep_is_linked(epi)) &#123;<br>list_add_tail(&amp;epi-&gt;rdllink, &amp;ep-&gt;rdllist);<br>ep_pm_stay_awake(epi);<br><br><span class="hljs-comment">/* Notify waiting tasks that events are available */</span><br><span class="hljs-keyword">if</span> (waitqueue_active(&amp;ep-&gt;wq))<br>wake_up(&amp;ep-&gt;wq);<br><span class="hljs-keyword">if</span> (waitqueue_active(&amp;ep-&gt;poll_wait))<br>pwake++;<br>&#125;<br>write_unlock_irq(&amp;ep-&gt;lock);<br>&#125;<br><br><span class="hljs-comment">/* We have to call this outside the lock */</span><br><span class="hljs-keyword">if</span> (pwake)<br>ep_poll_safewake(ep, <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="陷入内核"><a href="#陷入内核" class="headerlink" title="陷入内核"></a>陷入内核</h3><h4 id="1-系统调用"><a href="#1-系统调用" class="headerlink" title="1.系统调用"></a>1.系统调用</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">SYSCALL_DEFINE4(epoll_wait, <span class="hljs-type">int</span>, epfd, <span class="hljs-keyword">struct</span> epoll_event __user *, events,<span class="hljs-type">int</span>, maxevents, <span class="hljs-type">int</span>, timeout)<br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timespec64</span> <span class="hljs-title">to</span>;</span><br><span class="hljs-keyword">return</span> do_epoll_wait(epfd, events, maxevents,ep_timeout_to_timespec(&amp;to, timeout));<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-调用do-epoll-wait"><a href="#2-调用do-epoll-wait" class="headerlink" title="2.调用do_epoll_wait"></a>2.调用do_epoll_wait</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 等待事件</span><br><span class="hljs-comment"> * @param epfd</span><br><span class="hljs-comment"> * @param events 用户空间事件</span><br><span class="hljs-comment"> * @param maxevents 最大事件数</span><br><span class="hljs-comment"> * @param to 超时时间</span><br><span class="hljs-comment"> * @return 返回准备好的事件个数/调用错误响应码</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">do_epoll_wait</span><span class="hljs-params">(<span class="hljs-type">int</span> epfd, <span class="hljs-keyword">struct</span> epoll_event __user *events,<span class="hljs-type">int</span> maxevents, <span class="hljs-keyword">struct</span> timespec64 *to)</span><br>&#123;<br><span class="hljs-type">int</span> error;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fd</span> <span class="hljs-title">f</span>;</span><span class="hljs-comment">//文件描述符</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">eventpoll</span> *<span class="hljs-title">ep</span>;</span><span class="hljs-comment">//ep控制块</span><br><br><span class="hljs-comment">/* The maximum number of event must be greater than zero */</span><br><span class="hljs-keyword">if</span> (maxevents &lt;= <span class="hljs-number">0</span> || maxevents &gt; EP_MAX_EVENTS)<span class="hljs-keyword">return</span> -EINVAL;<br><br><span class="hljs-comment">/* Verify that the area passed by the user is writeable */</span><br><span class="hljs-comment">//检查是否能正常访问</span><br><span class="hljs-keyword">if</span> (!access_ok(events, maxevents * <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> epoll_event)))<span class="hljs-keyword">return</span> -EFAULT;<br><br><span class="hljs-comment">/* Get the &quot;struct file *&quot; for the eventpoll file */</span><br><span class="hljs-comment">//根据epfd获取对应的fd</span><br>f = fdget(epfd);<br><span class="hljs-keyword">if</span> (!f.file)<span class="hljs-keyword">return</span> -EBADF;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * We have to check that the file structure underneath the fd</span><br><span class="hljs-comment"> * the user passed to us _is_ an eventpoll file.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//判断当前文件是否支持epoll</span><br>error = -EINVAL;<br><span class="hljs-keyword">if</span> (!is_file_epoll(f.file))<span class="hljs-keyword">goto</span> error_fput;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * At this point it is safe to assume that the &quot;private_data&quot; contains</span><br><span class="hljs-comment"> * our own data structure.</span><br><span class="hljs-comment"> */</span><br>ep = f.file-&gt;private_data;<br><br><span class="hljs-comment">/* Time to fish for events ... */</span><br><span class="hljs-comment">//(主线)调用ep_poll函数</span><br>error = ep_poll(ep, events, maxevents, to);<br><br>error_fput:<br>fdput(f);<br><span class="hljs-keyword">return</span> error;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-调用ep-poll"><a href="#3-调用ep-poll" class="headerlink" title="3.调用ep_poll"></a>3.调用ep_poll</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ep_poll - Retrieves ready events, and delivers them to the caller-supplied event buffer.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @ep: Pointer to the eventpoll context.</span><br><span class="hljs-comment"> * @events: Pointer to the userspace buffer where the ready events should be stored.</span><br><span class="hljs-comment"> * @maxevents: Size (in terms of number of events) of the caller event buffer.</span><br><span class="hljs-comment"> * @timeout: Maximum timeout for the ready events fetch operation, in</span><br><span class="hljs-comment"> *           timespec. If the timeout is zero, the function will not block,</span><br><span class="hljs-comment"> *           while if the @timeout ptr is NULL, the function will block</span><br><span class="hljs-comment"> *           until at least one event has been retrieved (or an error occurred).</span><br><span class="hljs-comment"> * Return: the number of ready events which have been fetched, or an error code, in case of error.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">ep_poll</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> eventpoll *ep, <span class="hljs-keyword">struct</span> epoll_event __user *events,<span class="hljs-type">int</span> maxevents, <span class="hljs-keyword">struct</span> timespec64 *timeout)</span><br>&#123;<br><span class="hljs-type">int</span> res, eavail, timed_out = <span class="hljs-number">0</span>;<br>u64 slack = <span class="hljs-number">0</span>;<br><span class="hljs-type">wait_queue_entry_t</span> wait;<br><span class="hljs-type">ktime_t</span> expires, *to = <span class="hljs-literal">NULL</span>;<br><br>lockdep_assert_irqs_enabled();<br><span class="hljs-comment">//是否带有超时时间</span><br><span class="hljs-keyword">if</span> (timeout &amp;&amp; (timeout-&gt;tv_sec | timeout-&gt;tv_nsec)) &#123;<br>slack = select_estimate_accuracy(timeout);<br>to = &amp;expires;<br>*to = timespec64_to_ktime(*timeout);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (timeout) &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Avoid the unnecessary trip to the wait queue loop, if the</span><br><span class="hljs-comment"> * caller specified a non blocking operation.</span><br><span class="hljs-comment"> */</span><br>timed_out = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * This call is racy: We may or may not see events that are being added</span><br><span class="hljs-comment"> * to the ready list under the lock (e.g., in IRQ callbacks). For cases</span><br><span class="hljs-comment"> * with a non-zero timeout, this thread will check the ready list under</span><br><span class="hljs-comment"> * lock and will add to the wait queue.  For cases with a zero</span><br><span class="hljs-comment"> * timeout, the user by definition should not care and will have to</span><br><span class="hljs-comment"> * recheck again.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//检查是否有可用的事件（查看rdlist）</span><br>eavail = ep_events_available(ep);<br><span class="hljs-comment">//死循环</span><br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">if</span> (eavail) &#123;<span class="hljs-comment">//如果已经有了可用的事件</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Try to transfer events to user space. In case we get</span><br><span class="hljs-comment"> * 0 events and there&#x27;s still timeout left over, we go</span><br><span class="hljs-comment"> * trying again in search of more luck.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//(主线)尝试将事件传输到用户空间</span><br>res = ep_send_events(ep, events, maxevents);<br><span class="hljs-keyword">if</span> (res)<span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-comment">//超时返回</span><br><span class="hljs-keyword">if</span> (timed_out)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>eavail = ep_busy_loop(ep, timed_out);<br><span class="hljs-keyword">if</span> (eavail)<span class="hljs-keyword">continue</span>;<br><span class="hljs-comment">//中断</span><br><span class="hljs-keyword">if</span> (signal_pending(current))<span class="hljs-keyword">return</span> -EINTR;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Internally init_wait() uses autoremove_wake_function(),</span><br><span class="hljs-comment"> * thus wait entry is removed from the wait queue on each</span><br><span class="hljs-comment"> * wakeup. Why it is important? In case of several waiters</span><br><span class="hljs-comment"> * each new wakeup will hit the next waiter, giving it the</span><br><span class="hljs-comment"> * chance to harvest new event. Otherwise wakeup can be</span><br><span class="hljs-comment"> * lost. This is also good performance-wise, because on</span><br><span class="hljs-comment"> * normal wakeup path no need to call __remove_wait_queue()</span><br><span class="hljs-comment"> * explicitly, thus ep-&gt;lock is not taken, which halts the</span><br><span class="hljs-comment"> * event delivery.</span><br><span class="hljs-comment"> */</span><br>init_wait(&amp;wait);<br><br>write_lock_irq(&amp;ep-&gt;lock);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Barrierless variant, waitqueue_active() is called under</span><br><span class="hljs-comment"> * the same lock on wakeup ep_poll_callback() side, so it</span><br><span class="hljs-comment"> * is safe to avoid an explicit barrier.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//设置当前状态位任务中断</span><br>__set_current_state(TASK_INTERRUPTIBLE);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Do the final check under the lock. ep_scan_ready_list()</span><br><span class="hljs-comment"> * plays with two lists (-&gt;rdllist and -&gt;ovflist) and there</span><br><span class="hljs-comment"> * is always a race when both lists are empty for short</span><br><span class="hljs-comment"> * period of time although events are pending, so lock is</span><br><span class="hljs-comment"> * important.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//再次判断就绪队列</span><br>eavail = ep_events_available(ep);<br><span class="hljs-keyword">if</span> (!eavail)__add_wait_queue_exclusive(&amp;ep-&gt;wq, &amp;wait);<br><br>write_unlock_irq(&amp;ep-&gt;lock);<br><br><span class="hljs-keyword">if</span> (!eavail)timed_out = !schedule_hrtimeout_range(to, slack,HRTIMER_MODE_ABS);<br>__set_current_state(TASK_RUNNING);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * We were woken up, thus go and try to harvest some events.</span><br><span class="hljs-comment"> * If timed out and still on the wait queue, recheck eavail</span><br><span class="hljs-comment"> * carefully under lock, below.</span><br><span class="hljs-comment"> */</span><br>eavail = <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">if</span> (!list_empty_careful(&amp;wait.entry)) &#123;<br>write_lock_irq(&amp;ep-&gt;lock);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * If the thread timed out and is not on the wait queue,</span><br><span class="hljs-comment"> * it means that the thread was woken up after its</span><br><span class="hljs-comment"> * timeout expired before it could reacquire the lock.</span><br><span class="hljs-comment"> * Thus, when wait.entry is empty, it needs to harvest</span><br><span class="hljs-comment"> * events.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (timed_out)eavail = list_empty(&amp;wait.entry);<br>__remove_wait_queue(&amp;ep-&gt;wq, &amp;wait);<br>write_unlock_irq(&amp;ep-&gt;lock);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-拷贝事件到用户空间"><a href="#4-拷贝事件到用户空间" class="headerlink" title="4.拷贝事件到用户空间"></a>4.拷贝事件到用户空间</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 发送事件到用户空间</span><br><span class="hljs-comment"> * @param ep eventpoll控制块</span><br><span class="hljs-comment"> * @param events</span><br><span class="hljs-comment"> * @param maxevents</span><br><span class="hljs-comment"> * @return event cnt</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">ep_send_events</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> eventpoll *ep,<span class="hljs-keyword">struct</span> epoll_event __user *events, <span class="hljs-type">int</span> maxevents)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epitem</span> *<span class="hljs-title">epi</span>, *<span class="hljs-title">tmp</span>;</span><br>LIST_HEAD(txlist);<br>poll_table pt;<br><span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Always short-circuit for fatal signals to allow threads to make a</span><br><span class="hljs-comment"> * timely exit without the chance of finding more events available and</span><br><span class="hljs-comment"> * fetching repeatedly.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (fatal_signal_pending(current))<span class="hljs-keyword">return</span> -EINTR;<br><span class="hljs-comment">//重置poll_table回调函数</span><br>init_poll_funcptr(&amp;pt, <span class="hljs-literal">NULL</span>);<br><br>mutex_lock(&amp;ep-&gt;mtx);<br><span class="hljs-comment">//开始扫描就绪的fd</span><br>ep_start_scan(ep, &amp;txlist);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * We can loop without lock because we are passed a task private list.</span><br><span class="hljs-comment"> * Items cannot vanish during the loop we are holding ep-&gt;mtx.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//传入链表进行遍历</span><br>list_for_each_entry_safe(epi, tmp, &amp;txlist, rdllink) &#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">wakeup_source</span> *<span class="hljs-title">ws</span>;</span><br><span class="hljs-type">__poll_t</span> revents;<br><br><span class="hljs-keyword">if</span> (res &gt;= maxevents)<span class="hljs-keyword">break</span>;<span class="hljs-comment">//超出最大长度结束循环</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Activate ep-&gt;ws before deactivating epi-&gt;ws to prevent</span><br><span class="hljs-comment"> * triggering auto-suspend here (in case we reactive epi-&gt;ws</span><br><span class="hljs-comment"> * below).</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * This could be rearranged to delay the deactivation of epi-&gt;ws</span><br><span class="hljs-comment"> * instead, but then epi-&gt;ws would temporarily be out of sync</span><br><span class="hljs-comment"> * with ep_is_linked().</span><br><span class="hljs-comment"> */</span><br>ws = ep_wakeup_source(epi);<br><span class="hljs-keyword">if</span> (ws) &#123;<br><span class="hljs-keyword">if</span> (ws-&gt;active)<br>__pm_stay_awake(ep-&gt;ws);<br>__pm_relax(ws);<br>&#125;<br><br>list_del_init(&amp;epi-&gt;rdllink);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * If the event mask intersect the caller-requested one,</span><br><span class="hljs-comment"> * deliver the event to userspace. Again, we are holding ep-&gt;mtx,</span><br><span class="hljs-comment"> * so no operations coming from userspace can change the item.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//(主线）调用 ep_item_poll</span><br>revents = ep_item_poll(epi, &amp;pt, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span> (!revents)<span class="hljs-keyword">continue</span>;<span class="hljs-comment">//如果没有准备好的事件直接结束当前循环</span><br><span class="hljs-comment">//(主线) 拷贝事件到用户空间</span><br>events = epoll_put_uevent(revents, epi-&gt;event.data, events);<br><span class="hljs-keyword">if</span> (!events) &#123;<br>list_add(&amp;epi-&gt;rdllink, &amp;txlist);<span class="hljs-comment">//添加进链表</span><br>ep_pm_stay_awake(epi);<br><span class="hljs-keyword">if</span> (!res)res = -EFAULT;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>res++;<br><span class="hljs-keyword">if</span> (epi-&gt;event.events &amp; EPOLLONESHOT)epi-&gt;event.events &amp;= EP_PRIVATE_BITS;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!(epi-&gt;event.events &amp; EPOLLET)) &#123;<span class="hljs-comment">//边缘触发方式</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * If this file has been added with Level</span><br><span class="hljs-comment"> * Trigger mode, we need to insert back inside</span><br><span class="hljs-comment"> * the ready list, so that the next call to</span><br><span class="hljs-comment"> * epoll_wait() will check again the events</span><br><span class="hljs-comment"> * availability. At this point, no one can insert</span><br><span class="hljs-comment"> * into ep-&gt;rdllist besides us. The epoll_ctl()</span><br><span class="hljs-comment"> * callers are locked out by</span><br><span class="hljs-comment"> * ep_scan_ready_list() holding &quot;mtx&quot; and the</span><br><span class="hljs-comment"> * poll callback will queue them in ep-&gt;ovflist.</span><br><span class="hljs-comment"> */</span><br>list_add_tail(&amp;epi-&gt;rdllink, &amp;ep-&gt;rdllist);<span class="hljs-comment">//添加进链表</span><br>ep_pm_stay_awake(epi);<br>&#125;<br>&#125;<br>ep_done_scan(ep, &amp;txlist);<span class="hljs-comment">//完成扫描</span><br>mutex_unlock(&amp;ep-&gt;mtx);<br><br><span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-1调用ep-start-scan"><a href="#4-1调用ep-start-scan" class="headerlink" title="4.1调用ep_start_scan"></a>4.1调用ep_start_scan</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * ep-&gt;mutex needs to be held because we could be hit by</span><br><span class="hljs-comment"> * eventpoll_release_file() and epoll_ctl().</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ep_start_scan</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> eventpoll *ep, <span class="hljs-keyword">struct</span> list_head *txlist)</span><br>&#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Steal the ready list, and re-init the original one to the</span><br><span class="hljs-comment"> * empty list. Also, set ep-&gt;ovflist to NULL so that events</span><br><span class="hljs-comment"> * happening while looping w/out locks, are not lost. We cannot</span><br><span class="hljs-comment"> * have the poll callback to queue directly on ep-&gt;rdllist,</span><br><span class="hljs-comment"> * because we want the &quot;sproc&quot; callback to be able to do it</span><br><span class="hljs-comment"> * in a lockless way.</span><br><span class="hljs-comment"> */</span><br>lockdep_assert_irqs_enabled();<br>write_lock_irq(&amp;ep-&gt;lock);<br>list_splice_init(&amp;ep-&gt;rdllist, txlist);<span class="hljs-comment">//拼接两个链表</span><br>WRITE_ONCE(ep-&gt;ovflist, <span class="hljs-literal">NULL</span>);<span class="hljs-comment">//写入ovflist链表</span><br>write_unlock_irq(&amp;ep-&gt;lock);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2调用ep-done-scan"><a href="#4-2调用ep-done-scan" class="headerlink" title="4.2调用ep_done_scan"></a>4.2调用ep_done_scan</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ep_done_scan</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> eventpoll *ep,<span class="hljs-keyword">struct</span> list_head *txlist)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epitem</span> *<span class="hljs-title">epi</span>, *<span class="hljs-title">nepi</span>;</span><br><br>write_lock_irq(&amp;ep-&gt;lock);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * During the time we spent inside the &quot;sproc&quot; callback, some</span><br><span class="hljs-comment"> * other events might have been queued by the poll callback.</span><br><span class="hljs-comment"> * We re-insert them inside the main ready-list here.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">for</span> (nepi = READ_ONCE(ep-&gt;ovflist); (epi = nepi) != <span class="hljs-literal">NULL</span>;<br>     nepi = epi-&gt;next, epi-&gt;next = EP_UNACTIVE_PTR) &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * We need to check if the item is already in the list.</span><br><span class="hljs-comment"> * During the &quot;sproc&quot; callback execution time, items are</span><br><span class="hljs-comment"> * queued into -&gt;ovflist but the &quot;txlist&quot; might already</span><br><span class="hljs-comment"> * contain them, and the list_splice() below takes care of them.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (!ep_is_linked(epi)) &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * -&gt;ovflist is LIFO, so we have to reverse it in order</span><br><span class="hljs-comment"> * to keep in FIFO.</span><br><span class="hljs-comment"> */</span><br>list_add(&amp;epi-&gt;rdllink, &amp;ep-&gt;rdllist);<span class="hljs-comment">//添加到链表</span><br>ep_pm_stay_awake(epi);<br>&#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * We need to set back ep-&gt;ovflist to EP_UNACTIVE_PTR, so that after</span><br><span class="hljs-comment"> * releasing the lock, events will be queued in the normal way inside</span><br><span class="hljs-comment"> * ep-&gt;rdllist.</span><br><span class="hljs-comment"> */</span><br>WRITE_ONCE(ep-&gt;ovflist, EP_UNACTIVE_PTR);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Quickly re-inject items left on &quot;txlist&quot;.</span><br><span class="hljs-comment"> */</span><br>list_splice(txlist, &amp;ep-&gt;rdllist);<span class="hljs-comment">//拼接</span><br>__pm_relax(ep-&gt;ws);<br><br><span class="hljs-keyword">if</span> (!list_empty(&amp;ep-&gt;rdllist)) &#123;<br><span class="hljs-keyword">if</span> (waitqueue_active(&amp;ep-&gt;wq))<br>wake_up(&amp;ep-&gt;wq);<br>&#125;<br><span class="hljs-comment">//释放锁</span><br>write_unlock_irq(&amp;ep-&gt;lock);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="流程图示-2"><a href="#流程图示-2" class="headerlink" title="流程图示"></a>流程图示</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/2630542/1661849505068-2a4e262a-cf00-46db-8af5-2dc722370475.jpeg"></p><h3 id="相关总结-2"><a href="#相关总结-2" class="headerlink" title="相关总结"></a>相关总结</h3><p>和select/poll相比，epoll进行了功能分离，将添加进阻塞队列和等待数据进行分离，先用 epoll_ctl 维护等待队列，再调用 epoll_wait 阻塞进程。具体流程是先用epoll_create 创建一个 epoll 对象 epfd，再通过 epoll_ctl 将需要监视的 socket 添加到 epfd 中，最后调用 epoll_wait 等待数据。</p><p>优点：</p><ul><li>相比 select/poll，epoll 拆分了功能，将操作和监听分离，操作粒度更小，效率更高</li><li>epoll采用回调方式将其准备好的fd加入就绪链表，用户进程无需遍历整个fd集</li></ul><p>缺点：</p><ul><li>epoll适合的是大量连接但操作不平凡的socket，如果是少了连接且触发频繁select和poll效率可能会更高</li></ul><h2 id="简单案例-2"><a href="#简单案例-2" class="headerlink" title="简单案例"></a>简单案例</h2><h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><p><a href="https://www.yuque.com/attachments/yuque/0/2022/pdf/2630542/1661783341845-c69743c3-eb76-41f3-8269-047052f642c6.pdf?_lake_card=%7B%22src%22:%22https://www.yuque.com/attachments/yuque/0/2022/pdf/2630542/1661783341845-c69743c3-eb76-41f3-8269-047052f642c6.pdf%22,%22name%22:%22Linux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B.pdf%22,%22size%22:34037912,%22type%22:%22application/pdf%22,%22ext%22:%22pdf%22,%22source%22:%22%22,%22status%22:%22done%22,%22mode%22:%22title%22,%22download%22:false,%22taskId%22:%22u0e81441a-33b6-4eec-874d-3d28c263df5%22,%22taskType%22:%22transfer%22,%22id%22:%22u390d6afb%22,%22card%22:%22file%22%7D">Linux高性能服务器编程.pdf</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>I/O</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux篇-select/poll/epoll详解</title>
    <link href="/2020/12/02/yuque/bzd3gz/"/>
    <url>/2020/12/02/yuque/bzd3gz/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1657548314271-6146a444-380f-45c1-9ad1-2f51537c2f24.png#averageHue=%23febd17&clientId=u121e745f-0dbf-4&from=markdown&id=DjrFn&originHeight=383&originWidth=900&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=u3dc3c2e2-816b-4793-b243-b039b6a65f9&title="></p><h1 id="用户态和内核态"><a href="#用户态和内核态" class="headerlink" title="用户态和内核态"></a>用户态和内核态</h1><ul><li> 首先，我们明确一个概念，Linux所谓的用户态和内核态，本质是对CPU提供的功能的一层封装抽象。现代CPU，其设计目标主要是为了完美高效的实现一个多任务系统，多任务系统的三个核心特征是：权限分级、数据隔离和任务切换。<br>以X86_64架构为例，权限分级通过CPU的多模式机制和分段机制实现，数据隔离通过分页机制实现，任务切换通过中断机制和任务机制（TR/TSS）实现。 </li><li> 然后，给内核态和用户态一个相对精确的概念定义。内核态和用户态的概念，是Linux为了有效实现CPU的权限分级和数据隔离的目标而出现的，是通过组合CPU的分段机制+分页机制而形成的。<br>还是以X86_64架构为例，在当CPU处于保护模式下时（X86_64CPU有5种模式，保护模式是其中之一，此时CPU.CR0.PE=1），当CPU.CS=系统代码段时（CS.CPL=0）为内核态，此时通过CPU的指令有操控全部寄存器的权限（包括FLAGS和CR寄存器），<br>当CPU.CS=用户代码段时（CS.CPL=3）为用户态，此时通过CPU的指令只有操控部分寄存器的权限。 </li><li> 所谓“一个进程主动跳进内核态”，是指该进程中的一个执行线程通过INT或者SYSCALL指令，使得当前线程的CS=系统代码段（这里还有不同的细节，不多说了）。 </li><li> 每个用户进程都有自己的虚拟地址空间，用户进程之间切换的时候，通过切换页表（CR3）来实现，不用改CS寄存器和DS寄存器。所以没有“代码映射在0-3G”一说。<br>就像班级名称和学号，同样的学号在不同的班级代表不同的人，同样的虚拟地址在不同的页表中代表不同的物理内存空间。 </li><li> 内核态允许多个用户线程同时进入，不存在阻塞的现象，尤其是多核CPU的情况下。 </li><li> 除了用户线程可以进入内核态之外，还有内核线程，即内核自己要干的事情，这种线程只运行在内核态。 </li></ul><p>从CPU的寄存器视角看，指令运行所处的三种CPU状态<br><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/keylin-1.jpg#id=PQdSO&originHeight=1134&originWidth=1992&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>从Linux线程角度看，指令运行所处的两种状态（要么属于某线程，要么黑色切换中)<br><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/keylin-2.jpg#id=S9VDU&originHeight=415&originWidth=720&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>Linux下，线程类型*CPU状态决定数据空间<br><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/keylin-3.jpg#id=HpddF&originHeight=281&originWidth=720&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p><a href="https://www.zhihu.com/question/397142622/answer/1246315406">Linux用户态和内核态怎么理解？ - 知乎</a></p><h1 id="Linux-I-O模型"><a href="#Linux-I-O模型" class="headerlink" title="Linux I/O模型"></a>Linux I/O模型</h1><p><a href="https://blog.csdn.net/z_ryan/article/details/80873449">Linux五种IO模型</a></p><p><a href="https://www.cnblogs.com/luyucheng/p/6249551.html">Linux下常见的IO模型</a></p><h1 id="select模型"><a href="#select模型" class="headerlink" title="select模型"></a>select模型</h1><blockquote><p>epoll跟select都能提供多路I/O复用的解决方案。在现在的Linux内核里有都能够支持，其中epoll是Linux所特有，而select则应该是POSIX所规定，一般操作系统均有实现</p></blockquote><p>select本质上是通过<code>设置或者检查存放fd标志位的数据结构</code>来进行下一步处理。这样所带来的缺点是：</p><p>1、 单个进程可监视的fd数量被限制，即能监听端口的大小有限。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">一般来说这个数目和系统内存关系很大，具体数目可以cat <span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/fs/</span><span class="hljs-keyword">file</span>-max察看。<span class="hljs-number">32</span>位机默认是<span class="hljs-number">1024</span>个。<span class="hljs-number">64</span>位机默认是<span class="hljs-number">2048</span>.<br></code></pre></td></tr></table></figure><p>2、 对socket进行扫描时是线性扫描，即采用轮询的方法，效率较低：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">当套接字比较多的时候，每次<span class="hljs-variable">select</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span>都要通过遍历<span class="hljs-type">FD_SETSIZE</span>个<span class="hljs-built_in">Socket</span>来完成调度<span class="hljs-operator">,</span>不管哪个<span class="hljs-built_in">Socket</span>是活跃的<span class="hljs-operator">,</span>都遍历一遍。这会浪费很多<span class="hljs-variable">CPU</span>时间。如果能给套接字注册某个回调函数，当他们活跃时，自动完成相关操作，那就避免了轮询，这正是<span class="hljs-variable">epoll</span>与<span class="hljs-variable">kqueue</span>做的。<br></code></pre></td></tr></table></figure><p>3、需要维护一个用来存放大量fd的数据结构，这样会使得用户空间和内核空间在传递该结构时复制开销大</p><p><code>fd</code>全称是file descriptor,是进程独有的文件描述符表的索引</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/select-process.png#id=jm9iE&originHeight=1360&originWidth=1760&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h1 id="poll-模型"><a href="#poll-模型" class="headerlink" title="poll 模型"></a>poll 模型</h1><p>poll本质上和select没有区别，它将用户传入的数组拷贝到内核空间，然后查询每个fd对应的设备状态，如果设备就绪则在设备等待队列中加入一项并继续遍历，如果遍历完所有fd后没有发现就绪设备，则挂起当前进程，直到设备就绪或者主动超时，被唤醒后它又要再次遍历fd。这个过程经历了多次无谓的遍历。</p><p>它没有最大连接数的限制，原因是它是基于<code>链表</code>来存储的，但是同样有一个缺点：</p><p>1、大量的fd的数组被整体复制于用户态和内核地址空间之间，而不管这样的复制是不是有意义。</p><p>2、poll还有一个特点是“水平触发”，如果报告了fd后，没有被处理，那么下次poll时会再次报告该fd。</p><h1 id="epoll模型"><a href="#epoll模型" class="headerlink" title="epoll模型"></a>epoll模型</h1><p>epoll有EPOLLLT和EPOLLET两种触发模式，LT是默认的模式，ET是“高速”模式。LT模式下，只要这个fd还有数据可读，每次 epoll_wait都会返回它的事件，提醒用户程序去操作，而在ET（边缘触发）模式中，它只会提示一次，直到下次再有数据流入之前都不会再提示了，无 论fd中是否还有数据可读。所以在ET模式下，read一个fd的时候一定要把它的buffer读光，也就是说一直读到read的返回值小于请求值，或者 遇到EAGAIN错误。还有一个特点是，epoll使用“事件”的就绪通知方式，通过epoll_ctl注册fd，一旦该fd就绪，内核就会采用类似callback的回调机制来激活该fd，epoll_wait便可以收到通知。</p><p>epoll为什么要有EPOLLET触发模式？</p><p>如果采用EPOLLLT模式的话，系统中一旦有大量你不需要读写的就绪文件描述符，它们每次调用epoll_wait都会返回，这样会大大降低处理程序检索自己关心的就绪文件描述符的效率.。而采用EPOLLET这种边沿触发模式的话，当被监控的文件描述符上有可读写事件发生时，epoll_wait()会通知处理程序去读写。如果这次没有把数据全部读写完(如读写缓冲区太小)，那么下次调用epoll_wait()时，它不会通知你，也就是它只会通知你一次，直到该文件描述符上出现第二次可读写事件才会通知你！！！这种模式比水平触发效率高，系统不会充斥大量你不关心的就绪文件描述符</p><p>epoll的优点</p><p>1、没有最大并发连接的限制，能打开的FD的上限远大于1024（1G的内存上能监听约10万个端口）；<br>2、效率提升，不是轮询的方式，不会随着FD数目的增加效率下降。只有活跃可用的FD才会调用callback函数；<br>即Epoll最大的优点就在于它只管你“活跃”的连接，而跟连接总数无关，因此在实际的网络环境中，Epoll的效率就会远远高于select和poll。</p><p>3、 内存拷贝，利用mmap()文件映射内存加速与内核空间的消息传递；即epoll使用mmap减少复制开销。</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/epoll-process.png#id=gzDCa&originHeight=1360&originWidth=1760&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h1 id="区别总结"><a href="#区别总结" class="headerlink" title="区别总结"></a>区别总结</h1><p>1、支持一个进程所能打开的最大连接数</p><p>select</p><blockquote><p>单个进程所能打开的最大连接数有FD_SETSIZE宏定义，其大小是32个整数的大小（在32位的机器上，大小就是3232，同理64位机器上FD_SETSIZE为3264），当然我们可以对进行修改，然后重新编译内核，但是性能可能会受到影响，这需要进一步的测试。</p></blockquote><p>poll</p><blockquote><p>poll本质上和select没有区别，但是它没有最大连接数的限制，原因是它是基于链表来存储的</p></blockquote><p>epoll</p><blockquote><p>虽然连接数有上限，但是很大，1G内存的机器上可以打开10万左右的连接，2G内存的机器可以打开20万左右的连接</p></blockquote><p>2、FD剧增后带来的IO效率问题</p><p>select</p><blockquote><p>因为每次调用时都会对连接进行线性遍历，所以随着FD的增加会造成遍历速度慢的“线性下降性能问题”。</p></blockquote><p>poll</p><blockquote><p>同上</p></blockquote><p>epoll</p><blockquote><p>因为epoll内核中实现是根据每个fd上的callback函数来实现的，只有活跃的socket才会主动调用callback，所以在活跃socket较少的情况下，使用epoll没有前面两者的线性下降的性能问题，但是所有socket都很活跃的情况下，可能会有性能问题。</p></blockquote><p>3、 消息传递方式</p><p>select</p><blockquote><p>内核需要将消息传递到用户空间，都需要内核拷贝动作</p></blockquote><p>poll</p><blockquote><p>同上</p></blockquote><p>epoll</p><blockquote><p>epoll通过内核和用户空间共享一块内存来实现的。</p></blockquote><p><strong>总结</strong></p><p>综上，在选择select，poll，epoll时要根据具体的使用场合以及这三种方式的自身特点。</p><p>1、表面上看epoll的性能最好，但是在连接数少并且连接都十分活跃的情况下，select和poll的性能可能比epoll好，毕竟epoll的通知机制需要很多函数回调。</p><p>2、select低效是因为每次它都需要轮询。但低效也是相对的，视情况而定，也可通过良好的设计改善</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">1.</span> select和poll两者每次调用 都需要重新 copy fd 的集合到内核态，这本身就浪费性能；而 select 的fdset 既做输入值又做输出值，每次还得再设置下 fdset 才行<br><span class="hljs-number">2.</span> poll 采用的链表方式，显然相比 select bitmap的方式支持的 fd 限制更少<br><span class="hljs-number">3.</span> 两者都会轮询一遍 所有的 fd ，这本身也是一种效率低的方式<br><span class="hljs-number">4.</span> 两者都不能精确的得到是哪个 fd 有事件，poll 返回数量，select 返回 fdset 的bitmap，都需要用户程序再轮询一遍是哪个fd 事件<br><span class="hljs-number">5.</span> poll 事件相比 select 的in/out/err ，明显支持的情况更多显然，当 fd 数量特别大的时候（如大量的socket），select 和 poll 的缺点就会很明显，而 epoll 提供了一种更好的方式。<br></code></pre></td></tr></table></figure><h1 id="底层代码"><a href="#底层代码" class="headerlink" title="底层代码"></a>底层代码</h1><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs latex">EPOLL(7)                                                                                  Linux Programmer&#x27;s Manual                                                                                  EPOLL(7)<br><br>NAME<br>       epoll - I/O event notification facility<br><br>SYNOPSIS<br>       <span class="hljs-params">#</span>include &lt;sys/epoll.h&gt;<br><br>DESCRIPTION<br>       The  epoll  API  performs a similar task to poll(2): monitoring multiple file descriptors to see if I/O is possible on any of them.  The epoll API can be used either as an edge-triggered or a level-<br>       triggered interface and scales well to large numbers of watched file descriptors.  The following system calls are provided to create and manage an epoll instance:<br><br>       *  epoll<span class="hljs-built_in">_</span>create(2) creates a new epoll instance and returns a file descriptor referring to that instance.  (The more recent epoll<span class="hljs-built_in">_</span>create1(2) extends the functionality of epoll<span class="hljs-built_in">_</span>create(2).)<br><br>       *  Interest in particular file descriptors is then registered via epoll<span class="hljs-built_in">_</span>ctl(2).  The set of file descriptors currently registered on an epoll instance is sometimes called an epoll set.<br><br>       *  epoll<span class="hljs-built_in">_</span>wait(2) waits for I/O events, blocking the calling thread if no events are currently available.<br><br>   Level-triggered and edge-triggered<br>       The epoll event distribution interface is able to behave both as edge-triggered (ET) and as level-triggered (LT).  The difference between the two mechanisms can be  described  as  follows.   Suppose<br>       that this scenario happens:<br><br>       1. The file descriptor that represents the read side of a pipe (rfd) is registered on the epoll instance.<br><br>       2. A pipe writer writes 2 kB of data on the write side of the pipe.<br><br>       3. A call to epoll<span class="hljs-built_in">_</span>wait(2) is done that will return rfd as a ready file descriptor.<br><br>       4. The pipe reader reads 1 kB of data from rfd.<br><br>       5. A call to epoll<span class="hljs-built_in">_</span>wait(2) is done.<br><br>       If the rfd file descriptor has been added to the epoll interface using the EPOLLET (edge-triggered) flag, the call to epoll<span class="hljs-built_in">_</span>wait(2) done in step 5 will probably hang despite the available data still<br>       present in the file input buffer; meanwhile the remote peer might be expecting a response based on the data it already sent.  The reason for this is that edge-triggered  mode  delivers  events  only<br>       when  changes occur on the monitored file descriptor.  So, in step 5 the caller might end up waiting for some data that is already present inside the input buffer.  In the above example, an event on<br>       rfd will be generated because of the write done in 2 and the event is consumed in 3.  Since the read operation done in 4 does not consume the whole buffer data, the call  to  epoll<span class="hljs-built_in">_</span>wait(2)  done  in<br>       step 5 might block indefinitely.<br><br>       An application that employs the EPOLLET flag should use nonblocking file descriptors to avoid having a blocking read or write starve a task that is handling multiple file descriptors.  The suggested<br>       way to use epoll as an edge-triggered (EPOLLET) interface is as follows:<br><br>              i   with nonblocking file descriptors; and<br><br>              ii  by waiting for an event only after read(2) or write(2) return EAGAIN.<br><br>       By contrast, when used as a level-triggered interface (the default, when EPOLLET is not specified), epoll is simply a faster poll(2), and can be used wherever the latter is used since it shares  the<br>       same semantics.<br><br>       Since  even  with edge-triggered epoll, multiple events can be generated upon receipt of multiple chunks of data, the caller has the option to specify the EPOLLONESHOT flag, to tell epoll to disable<br>       the associated file descriptor after the receipt of an event with epoll<span class="hljs-built_in">_</span>wait(2).  When the EPOLLONESHOT flag is specified, it is the caller&#x27;s  responsibility  to  rearm  the  file  descriptor  using<br>       epoll<span class="hljs-built_in">_</span>ctl(2) with EPOLL<span class="hljs-built_in">_</span>CTL<span class="hljs-built_in">_</span>MOD.<br><br>   Interaction with autosleep<br>       If  the system is in autosleep mode via /sys/power/autosleep and an event happens which wakes the device from sleep, the device driver will keep the device awake only until that event is queued.  To<br>       keep the device awake until the event has been processed, it is necessary to use the epoll<span class="hljs-built_in">_</span>ctl(2) EPOLLWAKEUP flag.<br><br>       When the EPOLLWAKEUP flag is set in the events field for a struct epoll<span class="hljs-built_in">_</span>event, the system will be kept awake from the moment the event is queued, through the epoll<span class="hljs-built_in">_</span>wait(2)  call  which  returns  the<br>       event until the subsequent epoll<span class="hljs-built_in">_</span>wait(2) call.  If the event should keep the system awake beyond that time, then a separate wake<span class="hljs-built_in">_</span>lock should be taken before the second epoll<span class="hljs-built_in">_</span>wait(2) call.<br><br>   /proc interfaces<br>       The following interfaces can be used to limit the amount of kernel memory consumed by epoll:<br><br>       /proc/sys/fs/epoll/max<span class="hljs-built_in">_</span>user<span class="hljs-built_in">_</span>watches (since Linux 2.6.28)<br>              This  specifies  a  limit  on  the  total  number  of file descriptors that a user can register across all epoll instances on the system.  The limit is per real user ID.  Each registered file<br>              descriptor costs roughly 90 bytes on a 32-bit kernel, and roughly 160 bytes on a 64-bit kernel.  Currently, the default value for max<span class="hljs-built_in">_</span>user<span class="hljs-built_in">_</span>watches is 1/25 (4<span class="hljs-comment">%) of the  available  low  memory,</span><br>              divided by the registration cost in bytes.<br><br>   Example for suggested usage<br>       While the usage of epoll when employed as a level-triggered interface does have the same semantics as poll(2), the edge-triggered usage requires more clarification to avoid stalls in the application<br>       event loop.  In this example, listener is a nonblocking socket on which listen(2) has been called.  The function do<span class="hljs-built_in">_</span>use<span class="hljs-built_in">_</span>fd() uses the new ready file descriptor until EAGAIN  is  returned  by  either<br>       read(2)  or write(2).  An event-driven state machine application should, after having received EAGAIN, record its current state so that at the next call to do<span class="hljs-built_in">_</span>use<span class="hljs-built_in">_</span>fd() it will continue to read(2) or<br>       write(2) from where it stopped before.<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#define MAX_EVENTS 10</span><br>struct epoll_event ev, events[MAX_EVENTS];<br>int listen_sock, conn_sock, nfds, epollfd;<br><br>/* Code to set up listening socket, <span class="hljs-string">&#x27;listen_sock&#x27;</span>,<br>   (socket(), bind(), listen()) omitted */<br><br>epollfd = epoll_create1(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (epollfd == -<span class="hljs-number">1</span>) &#123;<br>    perror(<span class="hljs-string">&quot;epoll_create1&quot;</span>);<br>    <span class="hljs-keyword">exit</span>(EXIT_FAILURE);<br>&#125;<br><br>ev.events = EPOLLIN;<br>ev.data.fd = listen_sock;<br><span class="hljs-keyword">if</span> (epoll_ctl(epollfd, EPOLL_CTL_ADD, listen_sock, &amp;ev) == -<span class="hljs-number">1</span>) &#123;<br>    perror(<span class="hljs-string">&quot;epoll_ctl: listen_sock&quot;</span>);<br>    <span class="hljs-keyword">exit</span>(EXIT_FAILURE);<br>&#125;<br><br><span class="hljs-keyword">for</span> (;;) &#123;<br>    nfds = epoll_wait(epollfd, events, MAX_EVENTS, -<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> (nfds == -<span class="hljs-number">1</span>) &#123;<br>        perror(<span class="hljs-string">&quot;epoll_wait&quot;</span>);<br>        <span class="hljs-keyword">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (n = <span class="hljs-number">0</span>; n &lt; nfds; ++n) &#123;<br>        <span class="hljs-keyword">if</span> (events[n].data.fd == listen_sock) &#123;<br>            conn_sock = accept(listen_sock,<br>                               (struct sockaddr *) &amp;addr, &amp;addrlen);<br>            <span class="hljs-keyword">if</span> (conn_sock == -<span class="hljs-number">1</span>) &#123;<br>                perror(<span class="hljs-string">&quot;accept&quot;</span>);<br>                <span class="hljs-keyword">exit</span>(EXIT_FAILURE);<br>            &#125;<br>            setnonblocking(conn_sock);<br>            ev.events = EPOLLIN | EPOLLET;<br>            ev.data.fd = conn_sock;<br>            <span class="hljs-keyword">if</span> (epoll_ctl(epollfd, EPOLL_CTL_ADD, conn_sock,<br>                        &amp;ev) == -<span class="hljs-number">1</span>) &#123;<br>                perror(<span class="hljs-string">&quot;epoll_ctl: conn_sock&quot;</span>);<br>                <span class="hljs-keyword">exit</span>(EXIT_FAILURE);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            do_use_fd(events[n].data.fd);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs latex">       When used as an edge-triggered interface, for performance reasons, it is possible to add the file descriptor inside the epoll interface (EPOLL<span class="hljs-built_in">_</span>CTL<span class="hljs-built_in">_</span>ADD) once by specifying  (EPOLLIN|EPOLLOUT).   This<br>       allows you to avoid continuously switching between EPOLLIN and EPOLLOUT calling epoll<span class="hljs-built_in">_</span>ctl(2) with EPOLL<span class="hljs-built_in">_</span>CTL<span class="hljs-built_in">_</span>MOD.<br><br>   Questions and answers<br>       Q0  What is the key used to distinguish the file descriptors registered in an epoll set?<br><br>       A0  The key is the combination of the file descriptor number and the open file description (also known as an &quot;open file handle&quot;, the kernel&#x27;s internal representation of an open file).<br><br>       Q1  What happens if you register the same file descriptor on an epoll instance twice?<br><br>       A1  You will probably get EEXIST.  However, it is possible to add a duplicate (dup(2), dup2(2), fcntl(2) F<span class="hljs-built_in">_</span>DUPFD) file descriptor to the same epoll instance.  This can be a useful technique for fil‐<br>           tering events, if the duplicate file descriptors are registered with different events masks.<br><br>       Q2  Can two epoll instances wait for the same file descriptor?  If so, are events reported to both epoll file descriptors?<br><br>       A2  Yes, and events would be reported to both.  However, careful programming may be needed to do this correctly.<br><br>       Q3  Is the epoll file descriptor itself poll/epoll/selectable?<br><br>       A3  Yes.  If an epoll file descriptor has events waiting, then it will indicate as being readable.<br><br>       Q4  What happens if one attempts to put an epoll file descriptor into its own file descriptor set?<br><br>       A4  The epoll<span class="hljs-built_in">_</span>ctl(2) call fails (EINVAL).  However, you can add an epoll file descriptor inside another epoll file descriptor set.<br><br>       Q5  Can I send an epoll file descriptor over a UNIX domain socket to another process?<br><br>       A5  Yes, but it does not make sense to do this, since the receiving process would not have copies of the file descriptors in the epoll set.<br><br>       Q6  Will closing a file descriptor cause it to be removed from all epoll sets automatically?<br><br>       A6  Yes, but be aware of the following point.  A file descriptor is a reference to an open file description (see open(2)).  Whenever a file descriptor is duplicated  via  dup(2),  dup2(2),  fcntl(2)<br>           F<span class="hljs-built_in">_</span>DUPFD,  or  fork(2),  a new file descriptor referring to the same open file description is created.  An open file description continues to exist until all file descriptors referring to it have<br>           been closed.  A file descriptor is removed from an epoll set only after all the file descriptors referring to the underlying open file description  have  been  closed  (or  before  if  the  file<br>           descriptor  is  explicitly  removed using epoll<span class="hljs-built_in">_</span>ctl(2) EPOLL<span class="hljs-built_in">_</span>CTL<span class="hljs-built_in">_</span>DEL).  This means that even after a file descriptor that is part of an epoll set has been closed, events may be reported for that<br>           file descriptor if other file descriptors referring to the same underlying file description remain open.<br><br>       Q7  If more than one event occurs between epoll<span class="hljs-built_in">_</span>wait(2) calls, are they combined or reported separately?<br><br>       A7  They will be combined.<br><br>       Q8  Does an operation on a file descriptor affect the already collected but not yet reported events?<br><br>       A8  You can do two operations on an existing file descriptor.  Remove would be meaningless for this case.  Modify will reread available I/O.<br><br>       Q9  Do I need to continuously read/write a file descriptor until EAGAIN when using the EPOLLET flag (edge-triggered behavior) ?<br><br>       A9  Receiving an event from epoll<span class="hljs-built_in">_</span>wait(2) should suggest to you that such file descriptor is ready for the requested I/O  operation.   You  must  consider  it  ready  until  the  next  (nonblocking)<br>           read/write yields EAGAIN.  When and how you will use the file descriptor is entirely up to you.<br><br>           For packet/token-oriented files (e.g., datagram socket, terminal in canonical mode), the only way to detect the end of the read/write I/O space is to continue to read/write until EAGAIN.<br><br>           For  stream-oriented  files (e.g., pipe, FIFO, stream socket), the condition that the read/write I/O space is exhausted can also be detected by checking the amount of data read from / written to<br>           the target file descriptor.  For example, if you call read(2) by asking to read a certain amount of data and read(2) returns a lower number of bytes, you can be sure of having exhausted the read<br>           I/O  space  for  the  file  descriptor.  The same is true when writing using write(2).  (Avoid this latter technique if you cannot guarantee that the monitored file descriptor always refers to a<br>           stream-oriented file.)<br><br>   Possible pitfalls and ways to avoid them<br>       o Starvation (edge-triggered)<br><br>       If there is a large amount of I/O space, it is possible that by trying to drain it the other files will not get processed causing starvation.  (This problem is not specific to epoll.)<br><br>       The solution is to maintain a ready list and mark the file descriptor as ready in its associated data structure, thereby allowing the application to remember which files need  to  be  processed  but<br>       still round robin amongst all the ready files.  This also supports ignoring subsequent events you receive for file descriptors that are already ready.<br><br>       o If using an event cache...<br><br>       If  you use an event cache or store all the file descriptors returned from epoll<span class="hljs-built_in">_</span>wait(2), then make sure to provide a way to mark its closure dynamically (i.e., caused by a previous event&#x27;s process‐<br>       ing).  Suppose you receive 100 events from epoll<span class="hljs-built_in">_</span>wait(2), and in event <span class="hljs-params">#4</span>7 a condition causes event <span class="hljs-params">#1</span>3 to be closed.  If you remove the structure and close(2) the file  descriptor  for  event  <span class="hljs-params">#1</span>3,<br>       then your event cache might still say there are events waiting for that file descriptor causing confusion.<br><br>       One  solution  for this is to call, during the processing of event 47, epoll<span class="hljs-built_in">_</span>ctl(EPOLL<span class="hljs-built_in">_</span>CTL<span class="hljs-built_in">_</span>DEL) to delete file descriptor 13 and close(2), then mark its associated data structure as removed and link<br>       it to a cleanup list.  If you find another event for file descriptor 13 in your batch processing, you will discover the file descriptor had been previously removed and there will be no confusion.<br><br>VERSIONS<br>       The epoll API was introduced in Linux kernel 2.5.44.  Support was added to glibc in version 2.3.2.<br><br>CONFORMING TO<br>       The epoll API is Linux-specific.  Some other systems provide similar mechanisms, for example, FreeBSD has kqueue, and Solaris has /dev/poll.<br><br>NOTES<br>       The set of file descriptors that is being monitored via an epoll file descriptor can be viewed via the entry for the epoll file descriptor in the process&#x27;s /proc/[pid]/fdinfo directory.  See proc(5)<br>       for further details.<br><br>       The kcmp(2) KCMP<span class="hljs-built_in">_</span>EPOLL<span class="hljs-built_in">_</span>TFD operation can be used to test whether a file descriptor is present in an epoll instance.<br><br>SEE ALSO<br>       epoll<span class="hljs-built_in">_</span>create(2), epoll<span class="hljs-built_in">_</span>create1(2), epoll<span class="hljs-built_in">_</span>ctl(2), epoll<span class="hljs-built_in">_</span>wait(2), poll(2), select(2)<br><br>COLOPHON<br>       This  page  is  part  of  release  4.15  of  the  Linux  man-pages  project.   A  description  of  the project, information about reporting bugs, and the latest version of this page, can be found at<br>       https://www.kernel.org/doc/man-pages/.<br><br>Linux                                                                                             2017-09-15                                                                                         EPOLL(7)<br></code></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.cnblogs.com/sunweiye/p/11172751.html">select、poll和epoll的区别</a></p><p><a href="https://www.cnblogs.com/zhaodahai/p/6831456.html">linux下select/poll/epoll机制的比较</a></p><p><a href="https://www.cnblogs.com/aspirant/p/9166944.html">select、poll、epoll之间的区别(搜狗面试)</a></p><p><a href="https://blog.csdn.net/nanxiaotao/article/details/90612404">select、poll、epoll的原理与区别</a></p><p>文中源码地址：<a href="https://github.com/torvalds/linux">https://github.com/torvalds/linux</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>I/O</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java篇-Servlet生命周期</title>
    <link href="/2020/11/30/yuque/pwepou/"/>
    <url>/2020/11/30/yuque/pwepou/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1657548063868-27cf4c85-ed5d-4b48-b0b2-19caef875e88.png#averageHue=%23c5b87b&clientId=u7fad58a7-29a5-4&from=markdown&id=CJftL&originHeight=383&originWidth=900&originalType=url&ratio=1&rotation=0&showTitle=false&size=31207&status=done&style=none&taskId=u78f22749-97f6-4b23-a10f-b3c6aaa8bb1&title=" alt="image.png"></p><h1 id="Servlet-生命周期"><a href="#Servlet-生命周期" class="headerlink" title="Servlet 生命周期"></a>Servlet 生命周期</h1><p>Servlet 生命周期可被定义为从创建直到毁灭的整个过程。以下是 Servlet 遵循的过程：</p><ul><li>Servlet 初始化后调用 <strong>init ()</strong> 方法。</li><li>Servlet 调用 <strong>service()</strong> 方法来处理客户端的请求。</li><li>Servlet 销毁前调用 <strong>destroy()</strong> 方法。</li><li>最后，Servlet 是由 JVM 的垃圾回收器进行垃圾回收的。</li></ul><p>现在让我们详细讨论生命周期的方法。</p><h2 id="init-方法"><a href="#init-方法" class="headerlink" title="init() 方法"></a>init() 方法</h2><p>init 方法被设计成只调用一次。它在第一次创建 Servlet 时被调用，在后续每次用户请求时不再调用。因此，它是用于一次性初始化，就像 Applet 的 init 方法一样。</p><p>Servlet 创建于用户第一次调用对应于该 Servlet 的 URL 时，但是您也可以指定 Servlet 在服务器第一次启动时被加载。</p><p>当用户调用一个 Servlet 时，就会创建一个 Servlet 实例，每一个用户请求都会产生一个新的线程，适当的时候移交给 doGet 或 doPost 方法。init() 方法简单地创建或加载一些数据，这些数据将被用于 Servlet 的整个生命周期。</p><p>init 方法的定义如下：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br>  <span class="hljs-comment">// 初始化代码...</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="service-方法"><a href="#service-方法" class="headerlink" title="service() 方法"></a>service() 方法</h2><p>service() 方法是执行实际任务的主要方法。Servlet 容器（即 Web 服务器）调用 service() 方法来处理来自客户端（浏览器）的请求，并把格式化的响应写回给客户端。</p><p>每次服务器接收到一个 Servlet 请求时，服务器会产生一个新的线程并调用服务。service() 方法检查 HTTP 请求类型（GET、POST、PUT、DELETE 等），并在适当的时候调用 doGet、doPost、doPut，doDelete 等方法。</p><p>下面是该方法的特征：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">service</span><span class="hljs-params">(ServletRequest request, </span></span><br><span class="hljs-params"><span class="hljs-function">                    ServletResponse response)</span> </span><br><span class="hljs-function">      <span class="hljs-keyword">throws</span> ServletException, IOException</span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>service() 方法由容器调用，service 方法在适当的时候调用 doGet、doPost、doPut、doDelete 等方法。所以，您不用对 service() 方法做任何动作，您只需要根据来自客户端的请求类型来重写 doGet() 或 doPost() 即可。</p><p>doGet() 和 doPost() 方法是每次服务请求中最常用的方法。下面是这两种方法的特征。</p><h2 id="doGet-方法"><a href="#doGet-方法" class="headerlink" title="doGet() 方法"></a>doGet() 方法</h2><p>GET 请求来自于一个 URL 的正常请求，或者来自于一个未指定 METHOD 的 HTML 表单，它由 doGet() 方法处理。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request,</span></span><br><span class="hljs-params"><span class="hljs-function">                  HttpServletResponse response)</span></span><br><span class="hljs-function">    <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>    <span class="hljs-comment">// Servlet 代码</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="doPost-方法"><a href="#doPost-方法" class="headerlink" title="doPost() 方法"></a>doPost() 方法</h2><p>POST 请求来自于一个特别指定了 METHOD 为 POST 的 HTML 表单，它由 doPost() 方法处理。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest request,</span></span><br><span class="hljs-params"><span class="hljs-function">                   HttpServletResponse response)</span></span><br><span class="hljs-function">    <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>    <span class="hljs-comment">// Servlet 代码</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="destroy-方法"><a href="#destroy-方法" class="headerlink" title="destroy() 方法"></a>destroy() 方法</h2><p>destroy() 方法只会被调用一次，在 Servlet 生命周期结束时被调用。destroy() 方法可以让您的 Servlet 关闭数据库连接、停止后台线程、把 Cookie 列表或点击计数器写入到磁盘，并执行其他类似的清理活动。</p><p>在调用 destroy() 方法之后，servlet 对象被标记为垃圾回收。destroy 方法定义如下所示：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span>()</span> &#123;<br>  <span class="hljs-comment">// 终止化代码...</span><br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/servlet-class.png#id=M33P8&originHeight=611&originWidth=554&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></th><th><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/generic-servlet.png#id=cNZu1&originHeight=490&originWidth=558&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></th></tr></thead></table><h2 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h2><p>下图显示了一个典型的 Servlet 生命周期方案。</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/Servlet-LifeCycle.jpg#id=gUqCG&originHeight=377&originWidth=421&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><ul><li>第一个到达服务器的 HTTP 请求被委派到 Servlet 容器。</li><li>Servlet 容器在调用 service() 方法之前加载 Servlet。</li><li>然后 Servlet 容器处理由多个线程产生的多个请求，每个线程执行一个单一的 Servlet 实例的 service() 方法。</li></ul><h1 id="Servlet-源码"><a href="#Servlet-源码" class="headerlink" title="Servlet 源码"></a>Servlet 源码</h1><p>展开</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Source code recreated from a .class file by IntelliJ IDEA</span><br><span class="hljs-comment">// (powered by Fernflower decompiler)</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-keyword">package</span> javax.servlet.http;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.text.MessageFormat;<br><span class="hljs-keyword">import</span> java.util.Enumeration;<br><span class="hljs-keyword">import</span> java.util.ResourceBundle;<br><span class="hljs-keyword">import</span> javax.servlet.GenericServlet;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.ServletOutputStream;<br><span class="hljs-keyword">import</span> javax.servlet.ServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.ServletResponse;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GenericServlet</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">METHOD_DELETE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;DELETE&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">METHOD_HEAD</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;HEAD&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">METHOD_GET</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;GET&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">METHOD_OPTIONS</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;OPTIONS&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">METHOD_POST</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;POST&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">METHOD_PUT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;PUT&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">METHOD_TRACE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;TRACE&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">HEADER_IFMODSINCE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;If-Modified-Since&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">HEADER_LASTMOD</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Last-Modified&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">LSTRING_FILE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;javax.servlet.http.LocalStrings&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ResourceBundle</span> <span class="hljs-variable">lStrings</span> <span class="hljs-operator">=</span> ResourceBundle.getBundle(<span class="hljs-string">&quot;javax.servlet.http.LocalStrings&quot;</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HttpServlet</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">protocol</span> <span class="hljs-operator">=</span> req.getProtocol();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> lStrings.getString(<span class="hljs-string">&quot;http.method_get_not_supported&quot;</span>);<br>        <span class="hljs-keyword">if</span> (protocol.endsWith(<span class="hljs-string">&quot;1.1&quot;</span>)) &#123;<br>            resp.sendError(<span class="hljs-number">405</span>, msg);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            resp.sendError(<span class="hljs-number">400</span>, msg);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getLastModified</span><span class="hljs-params">(HttpServletRequest req)</span> &#123;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1L</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doHead</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">NoBodyResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoBodyResponse</span>(resp);<br>        <span class="hljs-built_in">this</span>.doGet(req, response);<br>        response.setContentLength();<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">protocol</span> <span class="hljs-operator">=</span> req.getProtocol();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> lStrings.getString(<span class="hljs-string">&quot;http.method_post_not_supported&quot;</span>);<br>        <span class="hljs-keyword">if</span> (protocol.endsWith(<span class="hljs-string">&quot;1.1&quot;</span>)) &#123;<br>            resp.sendError(<span class="hljs-number">405</span>, msg);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            resp.sendError(<span class="hljs-number">400</span>, msg);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPut</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">protocol</span> <span class="hljs-operator">=</span> req.getProtocol();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> lStrings.getString(<span class="hljs-string">&quot;http.method_put_not_supported&quot;</span>);<br>        <span class="hljs-keyword">if</span> (protocol.endsWith(<span class="hljs-string">&quot;1.1&quot;</span>)) &#123;<br>            resp.sendError(<span class="hljs-number">405</span>, msg);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            resp.sendError(<span class="hljs-number">400</span>, msg);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doDelete</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">protocol</span> <span class="hljs-operator">=</span> req.getProtocol();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> lStrings.getString(<span class="hljs-string">&quot;http.method_delete_not_supported&quot;</span>);<br>        <span class="hljs-keyword">if</span> (protocol.endsWith(<span class="hljs-string">&quot;1.1&quot;</span>)) &#123;<br>            resp.sendError(<span class="hljs-number">405</span>, msg);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            resp.sendError(<span class="hljs-number">400</span>, msg);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Method[] getAllDeclaredMethods(Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span>&gt; c) &#123;<br>        Class&lt;?&gt; clazz = c;<br><br>        Method[] allMethods;<br>        <span class="hljs-keyword">for</span>(allMethods = <span class="hljs-literal">null</span>; !clazz.equals(HttpServlet.class); clazz = clazz.getSuperclass()) &#123;<br>            Method[] thisMethods = clazz.getDeclaredMethods();<br>            <span class="hljs-keyword">if</span> (allMethods != <span class="hljs-literal">null</span> &amp;&amp; allMethods.length &gt; <span class="hljs-number">0</span>) &#123;<br>                Method[] subClassMethods = allMethods;<br>                allMethods = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Method</span>[thisMethods.length + allMethods.length];<br>                System.arraycopy(thisMethods, <span class="hljs-number">0</span>, allMethods, <span class="hljs-number">0</span>, thisMethods.length);<br>                System.arraycopy(subClassMethods, <span class="hljs-number">0</span>, allMethods, thisMethods.length, subClassMethods.length);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                allMethods = thisMethods;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> allMethods != <span class="hljs-literal">null</span> ? allMethods : <span class="hljs-keyword">new</span> <span class="hljs-title class_">Method</span>[<span class="hljs-number">0</span>];<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doOptions</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        Method[] methods = <span class="hljs-built_in">this</span>.getAllDeclaredMethods(<span class="hljs-built_in">this</span>.getClass());<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">ALLOW_GET</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">ALLOW_HEAD</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">ALLOW_POST</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">ALLOW_PUT</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">ALLOW_DELETE</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">ALLOW_TRACE</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">ALLOW_OPTIONS</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; methods.length; ++i) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> methods[i].getName();<br>            <span class="hljs-keyword">if</span> (methodName.equals(<span class="hljs-string">&quot;doGet&quot;</span>)) &#123;<br>                ALLOW_GET = <span class="hljs-literal">true</span>;<br>                ALLOW_HEAD = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (methodName.equals(<span class="hljs-string">&quot;doPost&quot;</span>)) &#123;<br>                ALLOW_POST = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (methodName.equals(<span class="hljs-string">&quot;doPut&quot;</span>)) &#123;<br>                ALLOW_PUT = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (methodName.equals(<span class="hljs-string">&quot;doDelete&quot;</span>)) &#123;<br>                ALLOW_DELETE = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">allow</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">if</span> (ALLOW_GET) &#123;<br>            allow.append(<span class="hljs-string">&quot;GET&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (ALLOW_HEAD) &#123;<br>            <span class="hljs-keyword">if</span> (allow.length() &gt; <span class="hljs-number">0</span>) &#123;<br>                allow.append(<span class="hljs-string">&quot;, &quot;</span>);<br>            &#125;<br><br>            allow.append(<span class="hljs-string">&quot;HEAD&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (ALLOW_POST) &#123;<br>            <span class="hljs-keyword">if</span> (allow.length() &gt; <span class="hljs-number">0</span>) &#123;<br>                allow.append(<span class="hljs-string">&quot;, &quot;</span>);<br>            &#125;<br><br>            allow.append(<span class="hljs-string">&quot;POST&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (ALLOW_PUT) &#123;<br>            <span class="hljs-keyword">if</span> (allow.length() &gt; <span class="hljs-number">0</span>) &#123;<br>                allow.append(<span class="hljs-string">&quot;, &quot;</span>);<br>            &#125;<br><br>            allow.append(<span class="hljs-string">&quot;PUT&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (ALLOW_DELETE) &#123;<br>            <span class="hljs-keyword">if</span> (allow.length() &gt; <span class="hljs-number">0</span>) &#123;<br>                allow.append(<span class="hljs-string">&quot;, &quot;</span>);<br>            &#125;<br><br>            allow.append(<span class="hljs-string">&quot;DELETE&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (ALLOW_TRACE) &#123;<br>            <span class="hljs-keyword">if</span> (allow.length() &gt; <span class="hljs-number">0</span>) &#123;<br>                allow.append(<span class="hljs-string">&quot;, &quot;</span>);<br>            &#125;<br><br>            allow.append(<span class="hljs-string">&quot;TRACE&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (ALLOW_OPTIONS) &#123;<br>            <span class="hljs-keyword">if</span> (allow.length() &gt; <span class="hljs-number">0</span>) &#123;<br>                allow.append(<span class="hljs-string">&quot;, &quot;</span>);<br>            &#125;<br><br>            allow.append(<span class="hljs-string">&quot;OPTIONS&quot;</span>);<br>        &#125;<br><br>        resp.setHeader(<span class="hljs-string">&quot;Allow&quot;</span>, allow.toString());<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doTrace</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">CRLF</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\r\n&quot;</span>;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;TRACE &quot;</span>)).append(req.getRequestURI()).append(<span class="hljs-string">&quot; &quot;</span>).append(req.getProtocol());<br>        <span class="hljs-type">Enumeration</span> <span class="hljs-variable">reqHeaderEnum</span> <span class="hljs-operator">=</span> req.getHeaderNames();<br><br>        <span class="hljs-keyword">while</span>(reqHeaderEnum.hasMoreElements()) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">headerName</span> <span class="hljs-operator">=</span> (String)reqHeaderEnum.nextElement();<br>            buffer.append(CRLF).append(headerName).append(<span class="hljs-string">&quot;: &quot;</span>).append(req.getHeader(headerName));<br>        &#125;<br><br>        buffer.append(CRLF);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">responseLength</span> <span class="hljs-operator">=</span> buffer.length();<br>        resp.setContentType(<span class="hljs-string">&quot;message/http&quot;</span>);<br>        resp.setContentLength(responseLength);<br>        <span class="hljs-type">ServletOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> resp.getOutputStream();<br>        out.print(buffer.toString());<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> req.getMethod();<br>        <span class="hljs-type">long</span> lastModified;<br>        <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;GET&quot;</span>)) &#123;<br>            lastModified = <span class="hljs-built_in">this</span>.getLastModified(req);<br>            <span class="hljs-keyword">if</span> (lastModified == -<span class="hljs-number">1L</span>) &#123;<br>                <span class="hljs-built_in">this</span>.doGet(req, resp);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">long</span> <span class="hljs-variable">ifModifiedSince</span> <span class="hljs-operator">=</span> req.getDateHeader(<span class="hljs-string">&quot;If-Modified-Since&quot;</span>);<br>                <span class="hljs-keyword">if</span> (ifModifiedSince &lt; lastModified) &#123;<br>                    <span class="hljs-built_in">this</span>.maybeSetLastModified(resp, lastModified);<br>                    <span class="hljs-built_in">this</span>.doGet(req, resp);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    resp.setStatus(<span class="hljs-number">304</span>);<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;HEAD&quot;</span>)) &#123;<br>            lastModified = <span class="hljs-built_in">this</span>.getLastModified(req);<br>            <span class="hljs-built_in">this</span>.maybeSetLastModified(resp, lastModified);<br>            <span class="hljs-built_in">this</span>.doHead(req, resp);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;POST&quot;</span>)) &#123;<br>            <span class="hljs-built_in">this</span>.doPost(req, resp);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;PUT&quot;</span>)) &#123;<br>            <span class="hljs-built_in">this</span>.doPut(req, resp);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;DELETE&quot;</span>)) &#123;<br>            <span class="hljs-built_in">this</span>.doDelete(req, resp);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;OPTIONS&quot;</span>)) &#123;<br>            <span class="hljs-built_in">this</span>.doOptions(req, resp);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;TRACE&quot;</span>)) &#123;<br>            <span class="hljs-built_in">this</span>.doTrace(req, resp);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">errMsg</span> <span class="hljs-operator">=</span> lStrings.getString(<span class="hljs-string">&quot;http.method_not_implemented&quot;</span>);<br>            Object[] errArgs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;method&#125;;<br>            errMsg = MessageFormat.format(errMsg, errArgs);<br>            resp.sendError(<span class="hljs-number">501</span>, errMsg);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">maybeSetLastModified</span><span class="hljs-params">(HttpServletResponse resp, <span class="hljs-type">long</span> lastModified)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!resp.containsHeader(<span class="hljs-string">&quot;Last-Modified&quot;</span>)) &#123;<br>            <span class="hljs-keyword">if</span> (lastModified &gt;= <span class="hljs-number">0L</span>) &#123;<br>                resp.setDateHeader(<span class="hljs-string">&quot;Last-Modified&quot;</span>, lastModified);<br>            &#125;<br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest req, ServletResponse res)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-keyword">if</span> (req <span class="hljs-keyword">instanceof</span> HttpServletRequest &amp;&amp; res <span class="hljs-keyword">instanceof</span> HttpServletResponse) &#123;<br>            <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> (HttpServletRequest)req;<br>            <span class="hljs-type">HttpServletResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> (HttpServletResponse)res;<br>            <span class="hljs-built_in">this</span>.service(request, response);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletException</span>(<span class="hljs-string">&quot;non-HTTP request or response&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://blog.csdn.net/javaloveiphone/article/details/8154791">servlet的执行原理与生命周期</a></p>]]></content>
    
    
    <categories>
      
      <category>Java相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Servlet</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微服务篇-微服务基础知识</title>
    <link href="/2020/07/30/yuque/nqowtt/"/>
    <url>/2020/07/30/yuque/nqowtt/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1657550961784-9fb81b1f-e0a3-4fa0-9093-514f80efca08.png#clientId=ub8d85664-b10e-4&from=markdown&id=qsjs2&originHeight=395&originWidth=755&originalType=url&ratio=1&rotation=0&showTitle=false&size=93169&status=done&style=none&taskId=uce27e5b2-7787-4a78-aac2-649c24f5b97&title=" alt="image.png"></p><h1 id="服务注册发现"><a href="#服务注册发现" class="headerlink" title="服务注册发现"></a>服务注册发现</h1><p>服务注册就是维护一个登记簿,它管理系统内所有的服务地址。当新的服务启动后,它会向登记<br>簿交待自己的地址信息。服务的依赖方直接向登记簿要 Service Provider 地址就行了。当下用于服<br>务注册的工具非常多 ZooKeeper,Consul,Etcd, 还有 Netflix 家的 eureka 等。服务注册有两种<br>形式:客户端注册和第三方注册。</p><h1 id="客户端注册-zookeeper"><a href="#客户端注册-zookeeper" class="headerlink" title="客户端注册(zookeeper)"></a>客户端注册(zookeeper)</h1><p>客户端注册是服务自身要负责注册与注销的工作。当服务启动后向注册中心注册自身,当服务下<br>线时注销自己。期间还需要和注册中心保持心跳。心跳不一定要客户端来做,也可以由注册中心<br>负责(这个过程叫探活)。这种方式的缺点是注册工作与服务耦合在一起,不同语言都要实现一<br>套注册逻辑。</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/service-discovery.png#id=fYKdy&originHeight=401&originWidth=687&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h3 id="第三方注册-独立的服务-Registrar"><a href="#第三方注册-独立的服务-Registrar" class="headerlink" title="第三方注册( 独立的服务 Registrar )"></a>第三方注册( 独立的服务 Registrar )</h3><p>第三方注册由一个独立的服务 Registrar 负责注册与注销。当服务启动后以某种方式通知 Registrar,<br>然后 Registrar 负责向注册中心发起注册工作。同时注册中心要维护与服务之间的心跳,当服务不<br>可用时,向注册中心注销服务。这种方式的缺点是 Registrar 必须是一个高可用的系统,否则注册<br>工作没法进展。</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/simple-register.png#id=MGt8I&originHeight=423&originWidth=695&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h3 id="客户端发现"><a href="#客户端发现" class="headerlink" title="客户端发现"></a>客户端发现</h3><p>客户端发现是指客户端负责查询可用服务地址,以及负载均衡的工作。这种方式最方便直接,而<br>且也方便做负载均衡。再者一旦发现某个服务不可用立即换另外一个,非常直接。缺点也在于多<br>语言时的重复工作,每个语言实现相同的逻辑。</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/client-discovery.png#id=TK92d&originHeight=634&originWidth=700&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h3 id="服务端发现"><a href="#服务端发现" class="headerlink" title="服务端发现"></a>服务端发现</h3><p>服务端发现需要额外的 Router 服务,请求先打到 Router,然后 Router 负责查询服务与负载均衡。<br>这种方式虽然没有客户端发现的缺点,但是它的缺点是保证 Router 的高可用。</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/server-discovery.png#id=f7bWd&originHeight=437&originWidth=707&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>7.1.1.5. Consul<br>7.1.1.6. Eureka<br>7.1.1.7. SmartStack<br>7.1.1.8. Etcd</p><h2 id="Api-网关"><a href="#Api-网关" class="headerlink" title="Api 网关"></a>Api 网关</h2><p>API Gateway 是一个服务器,也可以说是进入系统的唯一节点。这跟面向对象设计模式中的<br>Facade 模式很像。API Gateway 封装内部系统的架构,并且提供 API 给各个客户端。它还可能有<br>其他功能,如授权、监控、负载均衡、缓存、请求分片和管理、静态响应处理等。下图展示了一<br>个适应当前架构的 API Gateway。</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/gateway.png#id=PW8yi&originHeight=480&originWidth=484&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p><code>API Gateway 负责请求转发、合成和协议转换。</code>所有来自客户端的请求都要先经过 API Gateway,然后路由这些请求到对应的微服务。API Gateway 将经常通过调用多个微服务来处理一个请求以及聚合多个服务的结果。它可以在 web 协议与内部使用的非 Web 友好型协议间进行转换,如HTTP 协议、WebSocket 协议。</p><p>请求转发</p><blockquote><p>服务转发主要是对客户端的请求安装微服务的负载转发到不同的服务上</p></blockquote><p>响应合并</p><blockquote><p>把业务上需要调用多个服务接口才能完成的工作合并成一次调用对外统一提供服务。</p></blockquote><p>协议转换</p><blockquote><p>重点是支持 SOAP,JMS,Rest 间的协议转换。</p></blockquote><p>数据转换</p><blockquote><p>重点是支持 XML 和 Json 之间的报文格式转换能力(可选)</p></blockquote><p>安全认证</p><blockquote><ol><li>基于 Token 的客户端访问控制和安全策略</li><li>传输数据和报文加密,到服务端解密,需要在客户端有独立的 SDK 代理包</li><li>基于 Https 的传输加密,客户端和服务端数字证书支持</li><li>基于 OAuth2.0 的服务安全认证(授权码,客户端,密码模式等)</li></ol></blockquote><h1 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h1><p>配置中心一般用作系统的参数配置,它需要满足如下几个要求:高效获取、实时感知、分布式访问。</p><h2 id="zookeeper-配置中心"><a href="#zookeeper-配置中心" class="headerlink" title="zookeeper 配置中心"></a>zookeeper 配置中心</h2><p>实现的架构图如下所示,采取数据加载到内存方式解决高效获取的问题,借助 zookeeper 的节点监听机制来实现实时感知。</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/zookeeper.png#id=FRY3s&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>配置中心数据分类<br><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/config-center-data-type.png#id=QVCg7&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>事件调度(kafka)</p><blockquote><p>消息服务和事件的统一调度,常用用 kafka ,activemq 等。</p></blockquote><p>服务跟踪( starter-sleuth )</p><blockquote><p>随着微服务数量不断增长,需要跟踪一个请求从一个微服务到下一个微服务的传播过程, SpringCloud Sleuth 正是解决这个问题,它在日志中引入唯一 ID,以保证微服务调用之间的一致性,这样你就能跟踪某个请求是如何从一个微服务传递到下一个。</p></blockquote><ol><li></li></ol><p>为了实现请求跟踪,当请求发送到分布式系统的入口端点时,只需要服务跟踪框架为该请求<br>创建一个唯一的跟踪标识,同时在分布式系统内部流转的时候,框架始终保持传递该唯一标<br>识,直到返回给请求方为止,这个唯一标识就是前文中提到的 Trace ID。通过 Trace ID 的记<br>录,我们就能将所有请求过程日志关联起来。<br>2.<br>为了统计各处理单元的时间延迟,当请求达到各个服务组件时,或是处理逻辑到达某个状态<br>时,也通过一个唯一标识来标记它的开始、具体过程以及结束,该标识就是我们前文中提到<br>的 Span ID,对于每个 Span 来说,它必须有开始和结束两个节点,通过记录开始 Span 和结<br>束 Span 的时间戳,就能统计出该 Span 的时间延迟,除了时间戳记录之外,它还可以包含一<br>些其他元数据,比如:事件名称、请求信息等。<br>3.<br>在快速入门示例中,我们轻松实现了日志级别的跟踪信息接入,这完全归功于 spring-cloud-<br>starter-sleuth 组件的实现。在 Spring Boot 应用中,通过在工程中引入 spring-cloud-<br>starter-sleuth 依赖之后, 它会自动的为当前应用构建起各通信通道的跟踪机制,比如:<br>通过诸如 RabbitMQ、Kafka(或者其他任何 Spring Cloud Stream 绑定器实现的消息<br>中间件)传递的请求。<br>通过 Zuul 代理传递的请求。<br>通过 RestTemplate 发起的请求。</p><h1 id="服务熔断-Hystrix"><a href="#服务熔断-Hystrix" class="headerlink" title="服务熔断(Hystrix)"></a>服务熔断(Hystrix)</h1><p>在微服务架构中通常会有多个服务层调用,基础服务的故障可能会导致级联故障,进而造成整个<br>系统不可用的情况,这种现象被称为服务雪崩效应。服务雪崩效应是一种因“服务提供者”的不<br>可用导致“服务消费者”的不可用,并将不可用逐渐放大的过程。</p><p>熔断器的原理很简单,如同电力过载保护器。它可以实现快速失败,如果它在一段时间内侦测到<br>许多类似的错误,会强迫其以后的多个调用快速失败,不再访问远程服务器,从而防止应用程序<br>不断地尝试执行可能会失败的操作,使得应用程序继续执行而不用等待修正错误,或者浪费 CPU<br>时间去等到长时间的超时产生。熔断器也可以使应用程序能够诊断错误是否已经修正,如果已经<br>修正,应用程序会再次尝试调用操作。</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/config.png#id=OAe9u&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="Hystrix-断路器机制"><a href="#Hystrix-断路器机制" class="headerlink" title="Hystrix 断路器机制"></a>Hystrix 断路器机制</h2><p>断路器很好理解, 当 Hystrix Command 请求后端服务失败数量超过一定比例(默认 50%), 断路器会<br>切换到开路状态(Open). 这时所有请求会直接失败而不会发送到后端服务. 断路器保持在开路状态<br>一段时间后(默认 5 秒), 自动切换到半开路状态(HALF-OPEN). 这时会判断下一次请求的返回情况,<br>如果请求成功, 断路器切回闭路状态(CLOSED), 否则重新切换到开路状态(OPEN). Hystrix 的断路器<br>就像我们家庭电路中的保险丝, 一旦后端服务不可用, 断路器会直接切断请求链, 避免发送大量无效<br>请求影响系统吞吐量, 并且断路器有自我检测并恢复的能力。</p><h2 id="API-管理"><a href="#API-管理" class="headerlink" title="API 管理"></a>API 管理</h2><p>SwaggerAPI 管理工具。</p>]]></content>
    
    
    <categories>
      
      <category>微服务篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java篇-Spring Framework 基础</title>
    <link href="/2020/07/20/yuque/kxk8hu/"/>
    <url>/2020/07/20/yuque/kxk8hu/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1657547525418-b2e26598-ae0c-4788-97fb-a86b5f12f537.png#averageHue=%23fefefe&clientId=u3d24de39-30be-4&from=markdown&id=Uez3D&originHeight=300&originWidth=641&originalType=url&ratio=1&rotation=0&showTitle=false&size=123796&status=done&style=none&taskId=u4796483e-98cb-429b-b9b8-b4ec4f731ac&title=" alt="image.png"></p><h1 id="Spring-原理"><a href="#Spring-原理" class="headerlink" title="Spring 原理"></a>Spring 原理</h1><blockquote><p>它是一个全面的、企业应用开发一站式的解决方案,贯穿表现层、业务层、持久层。但是 Spring仍然可以和其他的框架无缝整合。</p></blockquote><h1 id="Spring-特点"><a href="#Spring-特点" class="headerlink" title="Spring 特点"></a>Spring 特点</h1><ul><li>轻量级</li></ul><blockquote><p>从大小与开销两方面而言Spring都是轻量的，完整的Spring框架可以在一个大小只有1M多的JAR文件里发布，并且Spring所需的处理开销也是微不足道的。<br>此外Spring是非入侵式的：典型的Spring应用的对象不依赖Spring的特定类</p></blockquote><ul><li>控制反转</li></ul><blockquote><p>Spring通过一种称为控制反转IOC的技术促进了低耦合。当应用了IOC一个对象依赖的其他对象会通过被动的方式传递进来，而不是这个对象自己创建或者查找依赖对象。</p></blockquote><ul><li>面向切面</li></ul><blockquote><p>Spring支持面向切面的编程，并且把应用业务逻辑和系统服务分开</p></blockquote><ul><li>容器</li></ul><blockquote><p>Spring包含并管理应用对象的配置和生命周期，在这个意义上是一种容器，你可以配置你的每个bean如何被创建—–基于一个可配置的原型，你的bean可以创建一个单独的实例或者每次需要时都生成一个新的实例—以及他们是如何关联的。</p></blockquote><ul><li>框架集合</li></ul><blockquote><p>Spring可以将简单的组件配置，组合成为复杂的应用，在Spring中应用对象被声明式的组合，典型的是在一个XML文件里，Spring也提供了很多基础功能(事物管理，持久化框架集成等)，将应用逻辑的开发留给开发者。</p></blockquote><h1 id="Spring-核心组件"><a href="#Spring-核心组件" class="headerlink" title="Spring 核心组件"></a>Spring 核心组件</h1><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/spring-core.png#id=yhPJU&originHeight=448&originWidth=581&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h1 id="Spring-常用模块"><a href="#Spring-常用模块" class="headerlink" title="Spring 常用模块"></a>Spring 常用模块</h1><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/spring-model.png#id=E1W86&originHeight=483&originWidth=700&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h1 id="Spring-主要包"><a href="#Spring-主要包" class="headerlink" title="Spring 主要包"></a>Spring 主要包</h1><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/spring-package.png#id=DhWq1&originHeight=897&originWidth=700&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h1 id="Spring-常用注解"><a href="#Spring-常用注解" class="headerlink" title="Spring 常用注解"></a>Spring 常用注解</h1><blockquote><p>bean 注入与装配的的方式有很多种,可以通过 xml,get set 方式,构造函数或者注解等。简单易用的方式就是使用 Spring 的注解了,Spring 提供了大量的注解方式。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/spring-annotation.png#id=A8euZ&originHeight=524&originWidth=700&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h1 id="Spring-第三方结合"><a href="#Spring-第三方结合" class="headerlink" title="Spring 第三方结合"></a>Spring 第三方结合</h1><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/spring-another.png#id=y9X8d&originHeight=625&originWidth=1133&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h1 id="Spring-IOC-原理"><a href="#Spring-IOC-原理" class="headerlink" title="Spring IOC 原理"></a>Spring IOC 原理</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote><p>Spring 通过一个配置文件描述 Bean 及 Bean 之间的依赖关系,利用 Java 语言的反射功能实例化<br>Bean 并建立 Bean 之间的依赖关系。 Spring 的 IoC 容器在完成这些底层工作的基础上,还提供<br>了 Bean 实例缓存、生命周期管理、 Bean 实例代理、事件发布、资源装载等高级服务。</p></blockquote><h2 id="Spring-容器高层视图"><a href="#Spring-容器高层视图" class="headerlink" title="Spring 容器高层视图"></a>Spring 容器高层视图</h2><blockquote><p>Spring 启动时读取应用程序提供的 Bean 配置信息,并在 Spring 容器中生成一份相应的 Bean 配<br>置注册表,然后根据这张注册表实例化 Bean,装配好 Bean 之间的依赖关系,为上层应用提供准<br>备就绪的运行环境。其中 Bean 缓存池为 HashMap 实现</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/spring-ioc.png#id=X8IW4&originHeight=284&originWidth=566&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h1 id="IOC-容器实现"><a href="#IOC-容器实现" class="headerlink" title="IOC 容器实现"></a>IOC 容器实现</h1><h2 id="BeanFactory-框架基础设施"><a href="#BeanFactory-框架基础设施" class="headerlink" title="BeanFactory- 框架基础设施"></a>BeanFactory- 框架基础设施</h2><blockquote><p>BeanFactory 是 Spring 框架的基础设施,面向 Spring 本身;ApplicationContext 面向使用<br>Spring 框架的开发者,几乎所有的应用场合我们都直接使用 ApplicationContext 而非底层<br>的 BeanFactory。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/spring-ioc-beanfactory.png#id=c1UtC&originHeight=413&originWidth=640&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h3 id="1-BeanDefinitionRegistry-注册表"><a href="#1-BeanDefinitionRegistry-注册表" class="headerlink" title="1.BeanDefinitionRegistry 注册表"></a>1.BeanDefinitionRegistry 注册表</h3><p>Spring 配置文件中每一个节点元素在 Spring 容器里都通过一个 BeanDefinition 对象表示,<br>它 描 述 了 Bean 的 配 置 信 息 。 而 BeanDefinitionRegistry 接 口 提 供 了 向 容 器 手 工 注 册<br>BeanDefinition 对象的方法。</p><h3 id="2-BeanFactory-顶层接口"><a href="#2-BeanFactory-顶层接口" class="headerlink" title="2.BeanFactory 顶层接口"></a>2.BeanFactory 顶层接口</h3><p>位于类结构树的顶端 ,它最主要的方法就是 getBean(String beanName),该方法从容器中<br>返回特定名称的 Bean,BeanFactory 的功能通过其他的接口得到不断扩展:</p><h3 id="3-ListableBeanFactory"><a href="#3-ListableBeanFactory" class="headerlink" title="3.ListableBeanFactory"></a>3.ListableBeanFactory</h3><p>该接口定义了访问容器中 Bean 基本信息的若干方法,如查看 Bean 的个数、获取某一类型<br>Bean 的配置名、查看容器中是否包括某一 Bean 等方法;</p><h3 id="4-HierarchicalBeanFactory-父子级联"><a href="#4-HierarchicalBeanFactory-父子级联" class="headerlink" title="4.HierarchicalBeanFactory 父子级联"></a>4.HierarchicalBeanFactory 父子级联</h3><p>父子级联 IoC 容器的接口,子容器可以通过接口方法访问父容器; 通过<br>HierarchicalBeanFactory 接口, Spring 的 IoC 容器可以建立父子层级关联的容器体系,子<br>容器可以访问父容器中的 Bean,但父容器不能访问子容器的 Bean。Spring 使用父子容器实<br>现了很多功能,比如在 Spring MVC 中,展现层 Bean 位于一个子容器中,而业务层和持久<br>层的 Bean 位于父容器中。这样,展现层 Bean 就可以引用业务层和持久层的 Bean,而业务<br>层和持久层的 Bean 则看不到展现层的 Bean。</p><h3 id="5-ConfigurableBeanFactory"><a href="#5-ConfigurableBeanFactory" class="headerlink" title="5.ConfigurableBeanFactory"></a>5.ConfigurableBeanFactory</h3><p>是一个重要的接口,增强了 IoC 容器的可定制性,它定义了设置类装载器、属性编辑器、容<br>器初始化后置处理器等方法;</p><h3 id="AutowireCapableBeanFactory-自动装配"><a href="#AutowireCapableBeanFactory-自动装配" class="headerlink" title="AutowireCapableBeanFactory 自动装配"></a>AutowireCapableBeanFactory 自动装配</h3><p>6.定义了将容器中的 Bean 按某种规则(如按名字匹配、按类型匹配等)进行自动装配的方法;SingletonBeanRegistry 运行期间注册单例 Bean</p><p>7.定义了允许在运行期间向容器注册单实例 Bean 的方法;对于单实例( singleton)的 Bean<br>来说,BeanFactory 会缓存 Bean 实例,所以第二次使用 getBean() 获取 Bean 时将直接从<br>IoC 容器的缓存中获取 Bean 实例。Spring 在 DefaultSingletonBeanRegistry 类中提供了一<br>个用于缓存单实例 Bean 的缓存器,它是一个用 HashMap 实现的缓存器,单实例的 Bean 以<br>beanName 为键保存在这个 HashMap 中。<br>依赖日志框框</p><p>8.在初始化 BeanFactory 时,必须为其提供一种日志框架,比如使用 Log4J, 即在类路径下提供 Log4J 配置文件,这样启动 Spring 容器才不会报错。</p><h2 id="ApplicationContext-面向开发应用"><a href="#ApplicationContext-面向开发应用" class="headerlink" title="ApplicationContext 面向开发应用"></a>ApplicationContext 面向开发应用</h2><p>ApplicationContext 由 BeanFactory 派 生 而 来 , 提 供 了 更 多 面 向 实 际 应 用 的 功 能 。<br>ApplicationContext 继承了 HierarchicalBeanFactory 和 ListableBeanFactory 接口,在此基础上,还通过多个其他的接口扩展了 BeanFactory 的功能:</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/beanfactory.png#id=sH4S4&originHeight=569&originWidth=640&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><ol><li>ClassPathXmlApplicationContext:默认从类路径加载配置文件</li><li>FileSystemXmlApplicationContext:默认从文件系统中装载配置文件</li><li>ApplicationEventPublisher:让容器拥有发布应用上下文事件的功能,包括容器启动事件、关闭事件等。</li><li>MessageSource:为应用提供 i18n 国际化消息访问的功能;</li><li>ResourcePatternResolver : 所 有 ApplicationContext 实 现 类 都 实 现 了 类 似 于PathMatchingResourcePatternResolver 的功能,可以通过带前缀的 Ant 风格的资源文件路径装载 Spring 的配置文件。</li><li>LifeCycle:该接口是 Spring 2.0 加入的,该接口提供了 start()和 stop()两个方法,主要用于控制异步处理过程。在具体使用时,该接口同时被 ApplicationContext 实现及具体Bean 实现, ApplicationContext 会将 start/stop 的信息传递给容器中所有实现了该接口的 Bean,以达到管理和控制 JMX、任务调度等目的。</li><li>ConfigurableApplicationContext 扩展于 ApplicationContext,它新增加了两个主要的方法: refresh()和 close(),让 ApplicationContext 具有启动、刷新和关闭应用上下文的能力。在应用上下文关闭的情况下调用 refresh()即可启动应用上下文,在已经启动的状态下,调用 refresh()则清除缓存并重新装载配置信息,而调用 close()则可关闭应用上下文。</li></ol><h1 id="WebApplication-体系架构"><a href="#WebApplication-体系架构" class="headerlink" title="WebApplication 体系架构"></a>WebApplication 体系架构</h1><blockquote><p>WebApplicationContext 是专门为 Web 应用准备的,它允许从相对于 Web 根目录的<br>路 径 中 装 载 配 置 文 件 完 成 初 始 化 工 作 。 从 WebApplicationContext 中 可 以 获 得<br>ServletContext 的引用,整个 Web 应用上下文对象将作为属性放置到 ServletContext<br>中,以便 Web 应用环境可以访问 Spring 应用上下文。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/spring-web.png#id=qxhWW&originHeight=165&originWidth=620&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h1 id="Spring-Bean-作用域"><a href="#Spring-Bean-作用域" class="headerlink" title="Spring Bean 作用域"></a>Spring Bean 作用域</h1><p>Spring 3 中为 Bean 定义了 5 中作用域,分别为 <code>singleton(单例)</code>、<code>prototype(原型)</code>、<code>request</code>、<code>session</code> 和 <code>global session</code>,5 种作用域说明如下:</p><h3 id="singleton-单例模式-多线程下不安全"><a href="#singleton-单例模式-多线程下不安全" class="headerlink" title="singleton :单例模式(多线程下不安全)"></a>singleton :单例模式(多线程下不安全)</h3><p>1.singleton:单例模式,Spring IoC 容器中只会存在一个共享的 Bean 实例,无论有多少个Bean 引用它,始终指向同一对象。该模式在多线程下是不安全的。Singleton 作用域是Spring 中的缺省作用域,也可以显示的将 Bean 定义为 singleton 模式,配置为:<br><code>&lt;bean id=&quot;userDao&quot; class=&quot;com.ioc.UserDaoImpl&quot; scope=&quot;singleton&quot;/&gt;</code></p><h3 id="prototype-原型模式每次使用时创建"><a href="#prototype-原型模式每次使用时创建" class="headerlink" title="prototype: 原型模式每次使用时创建"></a>prototype: 原型模式每次使用时创建</h3><p>2.prototype:原型模式,每次通过 Spring 容器获取 prototype 定义的 bean 时,容器都将创建一个新的 Bean 实例,每个 Bean 实例都有自己的属性和状态,而 singleton 全局只有一个对象。根据经验,对有状态的 bean 使用 prototype 作用域,而对无状态的 bean 使用 singleton作用域。</p><h3 id="Request-一次-request-一个实例"><a href="#Request-一次-request-一个实例" class="headerlink" title="Request :一次 request 一个实例"></a>Request :一次 request 一个实例</h3><p>3.request:在一次 Http 请求中,容器会返回该 Bean 的同一实例。而对不同的 Http 请求则会产生新的 Bean,而且该 bean 仅在当前 Http Request 内有效,当前 Http 请求结束,该 bean实例也将会被销毁。<br><code>&lt;bean id=&quot;loginAction&quot; class=&quot;com.cnblogs.Login&quot; scope=&quot;request&quot;/&gt;</code></p><h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><p>4.session:在一次 Http Session 中,容器会返回该 Bean 的同一实例。而对不同的 Session 请求则会创建新的实例,该 bean 实例仅在当前 Session 内有效。同 Http 请求相同,每一次session 请求创建新的实例,而不同的实例之间不共享属性,且实例仅在自己的 session 请求内有效,请求结束,则实例将被销毁。<br><code>&lt;bean id=&quot;userPreference&quot; class=&quot;com.ioc.UserPreference&quot; scope=&quot;session&quot;/&gt;</code></p><h3 id="global-Session"><a href="#global-Session" class="headerlink" title="global Session"></a>global Session</h3><p>5.global Session:在一个全局的 Http Session 中,容器会返回该 Bean 的同一个实例,仅在使用 portlet context 时有效。</p><h1 id="Spring-Bean-生命周期"><a href="#Spring-Bean-生命周期" class="headerlink" title="Spring Bean 生命周期"></a>Spring Bean 生命周期</h1><h3 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h3><p>1.实例化一个 Bean,也就是我们常说的 new。</p><h3 id="IOC-依赖注入"><a href="#IOC-依赖注入" class="headerlink" title="IOC 依赖注入"></a>IOC 依赖注入</h3><p>2.按照 Spring 上下文对实例化的 Bean 进行配置,也就是 IOC 注入。</p><h3 id="setBeanName-实现"><a href="#setBeanName-实现" class="headerlink" title="setBeanName 实现"></a>setBeanName 实现</h3><p>3.如果这个 Bean 已经实现了 BeanNameAware 接口,会调用它实现的 setBeanName(String)方法,此处传递的就是 Spring 配置文件中 Bean 的 id 值</p><h3 id="BeanFactoryAware-实现"><a href="#BeanFactoryAware-实现" class="headerlink" title="BeanFactoryAware 实现"></a>BeanFactoryAware 实现</h3><p>4.如果这个 Bean 已经实现了 BeanFactoryAware 接口,会调用它实现的 setBeanFactory,setBeanFactory(BeanFactory)传递的是 Spring 工厂自身(可以用这个方式来获取其它 Bean,只需在 Spring 配置文件中配置一个普通的 Bean 就可以)。</p><h3 id="ApplicationContextAware-实现"><a href="#ApplicationContextAware-实现" class="headerlink" title="ApplicationContextAware 实现"></a>ApplicationContextAware 实现</h3><p>5.如果这个 Bean 已经实现了 ApplicationContextAware 接口,会调用setApplicationContext(ApplicationContext)方法,传入 Spring 上下文(同样这个方式也可以实现步骤 4 的内容,但比 4 更好,因为 ApplicationContext 是 BeanFactory 的子接口,有更多的实现方法)</p><h3 id="postProcessBeforeInitialization-接口实现-初始化预处理"><a href="#postProcessBeforeInitialization-接口实现-初始化预处理" class="headerlink" title="postProcessBeforeInitialization 接口实现 - 初始化预处理"></a>postProcessBeforeInitialization 接口实现 - 初始化预处理</h3><p>6.如果这个 Bean 关联了 BeanPostProcessor 接口,将会调用postProcessBeforeInitialization(Object obj, String s)方法,BeanPostProcessor 经常被用作是 Bean 内容的更改,并且由于这个是在 Bean 初始化结束时调用那个的方法,也可以被应用于内存或缓存技术。</p><h3 id="init-method"><a href="#init-method" class="headerlink" title="init-method"></a>init-method</h3><p>7.如果 Bean 在 Spring 配置文件中配置了 init-method 属性会自动调用其配置的初始化方法。</p><h3 id="postProcessAfterInitialization"><a href="#postProcessAfterInitialization" class="headerlink" title="postProcessAfterInitialization"></a>postProcessAfterInitialization</h3><p>8.如果这个 Bean 关联了 BeanPostProcessor 接口,将会调用postProcessAfterInitialization(Object obj, String s)方法。<br>注:以上工作完成以后就可以应用这个 Bean 了,那这个 Bean 是一个 Singleton 的,所以一般情况下我们调用同一个 id 的 Bean 会是在内容地址相同的实例,当然在 Spring 配置文件中也可以配置非 Singleton。</p><h3 id="Destroy-过期自动清理阶段"><a href="#Destroy-过期自动清理阶段" class="headerlink" title="Destroy 过期自动清理阶段"></a>Destroy 过期自动清理阶段</h3><p>9.当 Bean 不再需要时,会经过清理阶段,如果 Bean 实现了 DisposableBean 这个接口,会调用那个其实现的 destroy()方法;</p><h3 id="destroy-method-自配置清理"><a href="#destroy-method-自配置清理" class="headerlink" title="destroy-method 自配置清理"></a>destroy-method 自配置清理</h3><ol start="10"><li>最后,如果这个 Bean 的 Spring 配置中配置了 destroy-method 属性,会自动调用其配置的销毁方法。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/spring-live.png#id=KYLt7&originHeight=741&originWidth=786&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><ol start="11"><li>bean 标签有两个重要的属性(init-method 和 destroy-method)。用它们你可以自己定制初始化和注销方法。它们也有相应的注解(<a href="/PostConstruct">@PostConstruct </a> 和@PreDestroy)。 </li></ol><p><code>&lt;bean id=&quot;&quot; class=&quot;&quot; init-method=&quot;初始化方法&quot; destroy-method=&quot;销毁方法&quot;&gt;</code></p><h1 id="Spring-依赖注入四种方式"><a href="#Spring-依赖注入四种方式" class="headerlink" title="Spring 依赖注入四种方式"></a>Spring 依赖注入四种方式</h1><h2 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml">/*带参数,方便利用构造器进行注入*/<br>public CatDaoImpl(String message)&#123;<br>    this. message = message;<br>&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;CatDaoImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.CatDaoImpl&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot; message &quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="setter-方法注入"><a href="#setter-方法注入" class="headerlink" title="setter 方法注入"></a>setter 方法注入</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Id</span> &#123;<br>   <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">return</span> id;<br>   &#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>       <span class="hljs-built_in">this</span>.id = id; <br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.id &quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="静态工厂注入"><a href="#静态工厂注入" class="headerlink" title="静态工厂注入"></a>静态工厂注入</h2><blockquote><p>静态工厂顾名思义,就是通过调用静态工厂的方法来获取自己需要的对象,为了让 spring 管理所有对象,我们不能直接通过”工程类.静态方法()”来获取对象,而是依然通过 spring 注入的形式获取:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DaoFactory</span> &#123; <span class="hljs-comment">//静态工厂</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> FactoryDao <span class="hljs-title function_">getStaticFactoryDaoImpl</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StaticFacotryDaoImpl</span>();<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringAction</span> &#123;<br><span class="hljs-keyword">private</span> FactoryDao staticFactoryDao; <span class="hljs-comment">//注入对象</span><br><span class="hljs-comment">//注入对象的 set 方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setStaticFactoryDao</span><span class="hljs-params">(FactoryDao staticFactoryDao)</span> &#123;<br><span class="hljs-built_in">this</span>.staticFactoryDao = staticFactoryDao;<br>&#125;<br>&#125;<br><span class="hljs-comment">//factory-method=&quot;getStaticFactoryDaoImpl&quot;指定调用哪个工厂方法</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;springAction&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot; SpringAction&quot;</span> &gt;</span><br><span class="hljs-comment">&lt;!--使用静态工厂的方法注入对象,对应下面的配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;staticFactoryDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;staticFactoryDao&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-comment">&lt;!--此处获取对象的方式是从工厂类中获取静态方法--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;staticFactoryDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;DaoFactory&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;getStaticFactoryDaoImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="实例工厂"><a href="#实例工厂" class="headerlink" title="实例工厂"></a>实例工厂</h2><blockquote><p>实例工厂的意思是获取对象实例的方法不是静态的,所以你需要首先 new 工厂类,再调用普通的实例方法:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DaoFactory</span> &#123; <span class="hljs-comment">//实例工厂</span><br>    <span class="hljs-keyword">public</span> FactoryDao <span class="hljs-title function_">getFactoryDaoImpl</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FactoryDaoImpl</span>();&#125;<br>    &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringAction</span> &#123;<br>    <span class="hljs-keyword">private</span> FactoryDao factoryDao;<br>    <span class="hljs-comment">//注入对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFactoryDao</span><span class="hljs-params">(FactoryDao factoryDao)</span> &#123;<br>        <span class="hljs-built_in">this</span>.factoryDao = factoryDao;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;springAction&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;SpringAction&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--使用实例工厂的方法注入对象,对应下面的配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;factoryDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;factoryDao&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-comment">&lt;!--此处获取对象的方式是从工厂类中获取实例方法--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;daoFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.DaoFactory&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;factoryDao&quot;</span> <span class="hljs-attr">factory-bean</span>=<span class="hljs-string">&quot;daoFactory&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;getFactoryDaoImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="5-种不同方式的自动装配"><a href="#5-种不同方式的自动装配" class="headerlink" title="5 种不同方式的自动装配"></a>5 种不同方式的自动装配</h1><p>Spring 装配包括手动装配和自动装配,手动装配是有基于 xml 装配、构造方法、setter 方法等</p><p>自动装配有五种自动装配的方式,可以用来指导 Spring 容器用自动装配方式来进行依赖注入。</p><ol><li>no:默认的方式是不进行自动装配,通过显式设置 ref 属性来进行装配。</li><li>byName:通过参数名 自动装配,Spring 容器在配置文件中发现 bean 的 autowire 属性被设置成 byname,之后容器试图匹配、装配和该 bean 的属性具有相同名字的 bean。</li><li>byType:通过参数类型自动装配,Spring 容器在配置文件中发现 bean 的 autowire 属性被设置成 byType,之后容器试图匹配、装配和该 bean 的属性具有相同类型的 bean。如果有多个 bean 符合条件,则抛出错误。</li><li>constructor:这个方式类似于 byType, 但是要提供给构造器参数,如果没有确定的带参数的构造器参数类型,将会抛出异常。</li><li>autodetect:首先尝试使用 constructor 来自动装配,如果无法工作,则使用 byType 方式。</li></ol><h1 id="Spring-APO-原理"><a href="#Spring-APO-原理" class="headerlink" title="Spring APO 原理"></a>Spring APO 原理</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><p>“ 横切”的技术,剖解开封装的对象内部,并将那些影响了多个类的公共行为封装到一个可重用模块,并将其命名为”Aspect”,即切面。所谓”切面”,简单说就是那些与业务无关,却为业务模块所共<br>同调用的逻辑或责任封装起来,便于减少系统的重复代码,降低模块之间的耦合度,并有利于未来的可操作性和可维护性。使用”横切”技术,AOP 把软件系统分为两个部分:核心关注点和横切关注点。业务处理的主要流<br>程是核心关注点,与之关系不大的部分是横切关注点。横切关注点的一个特点是,他们经常发生在核心关注点的多处,而各处基本相似,比如权限认证、日志、事物。AOP 的作用在于分离系统中的各种关注点,将核心关注点和横切关注点分离开来。</p><h2 id="AOP-主要应用场景有"><a href="#AOP-主要应用场景有" class="headerlink" title="AOP 主要应用场景有:"></a>AOP 主要应用场景有:</h2><ol><li>Authentication 权限</li><li>Caching 缓存</li><li>Context passing 内容传递</li><li>Error handling 错误处理</li><li>Lazy loading 懒加载</li><li>Debugging 调试</li><li>logging, tracing, profiling and monitoring 记录跟踪 优化 校准</li><li>Performance optimization 性能优化</li><li>Persistence 持久化</li><li>Resource pooling 资源池</li><li>Synchronization 同步</li><li>Transactions 事务</li></ol><h2 id="AOP-核心概念"><a href="#AOP-核心概念" class="headerlink" title="AOP 核心概念"></a>AOP 核心概念</h2><p>1、切面(aspect):类是对物体特征的抽象,切面就是对横切关注点的抽象<br>2、横切关注点:对哪些方法进行拦截,拦截后怎么处理,这些关注点称之为横切关注点。<br>3、连接点(joinpoint):被拦截到的点,因为 Spring 只支持方法类型的连接点,所以在 Spring中连接点指的就是被拦截到的方法,实际上连接点还可以是字段或者构造器。<br>4、切入点(pointcut):对连接点进行拦截的定义<br>5、通知(advice):所谓通知指的就是指拦截到连接点之后要执行的代码,通知分为前置、后置、异常、最终、环绕通知五类。<br>6、目标对象:代理的目标对象<br>7、织入(weave):将切面应用到目标对象并导致代理对象创建的过程<br>8、引入(introduction):在不修改代码的前提下,引入可以在运行期为类动态地添加一些方法或字段。</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/spring-aop.png#id=rf5PP&originHeight=852&originWidth=948&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h3 id="AOP-两种代理方式"><a href="#AOP-两种代理方式" class="headerlink" title="AOP 两种代理方式"></a>AOP 两种代理方式</h3><p>Spring 提 供 了 两 种 方 式 来 生 成 代 理 对 象 : JDKProxy 和 Cglib , 具体使用哪种方式生成由AopProxyFactory 根据 AdvisedSupport 对象的配置来决定。默认的策略是如果目标类是接口,则使用 JDK 动态代理技术,否则使用 Cglib 来生成代理。</p><ul><li>JDK 动态接口代理</li></ul><blockquote><p>1.JDK 动态代理主要涉及到 java.lang.reflect 包中的两个类:Proxy 和 InvocationHandler。<br>InvocationHandler 是一个接口,通过实现该接口定义横切逻辑,并通过反射机制调用目标类<br>的代码,动态将横切逻辑和业务逻辑编制在一起。Proxy 利用 InvocationHandler 动态创建<br>一个符合某一接口的实例,生成目标类的代理对象。</p></blockquote><ul><li>CGLib 动态代理</li></ul><blockquote><p>2.:CGLib 全称为 Code Generation Library,是一个强大的高性能,高质量的代码生成类库,<br>可以在运行期扩展 Java 类与实现 Java 接口,CGLib 封装了 asm,可以再运行期动态生成新<br>的 class。和 JDK 动态代理相比较:JDK 创建代理有一个限制,就是只能为接口创建代理实例,<br>而对于没有通过接口定义业务方法的类,则可以通过 CGLib 创建动态代理。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransactionDemo</span> &#123;<br><span class="hljs-meta">@Pointcut(value=&quot;execution(* com.yangxin.core.service.*.*.*(..))&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">point</span><span class="hljs-params">()</span>&#123;<br>&#125;<br><span class="hljs-meta">@Before(value=&quot;point()&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;transaction begin&quot;</span>);<br>&#125;<br><span class="hljs-meta">@AfterReturning(value = &quot;point()&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;transaction commit&quot;</span>);<br>&#125;<br><span class="hljs-meta">@Around(&quot;point()&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span> <span class="hljs-keyword">throws</span> Throwable&#123;<br>System.out.println(<span class="hljs-string">&quot;transaction begin&quot;</span>);<br>joinPoint.proceed();<br>System.out.println(<span class="hljs-string">&quot;transaction commit&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/spring-proxy.png#id=wsy68&originHeight=709&originWidth=1009&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h1 id="Spring-MVC-原理"><a href="#Spring-MVC-原理" class="headerlink" title="Spring MVC 原理"></a>Spring MVC 原理</h1><blockquote><p>Spring 的模型-视图-控制器(MVC)框架是围绕一个 DispatcherServlet 来设计的,这个 Servlet会把请求分发给各个处理器,并支持可配置的处理器映射、视图渲染、本地化、时区与主题渲染等,甚至还能支持文件上传。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/spring-mvc.png#id=ei29Q&originHeight=333&originWidth=616&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h3 id="Http-请求到-DispatcherServlet"><a href="#Http-请求到-DispatcherServlet" class="headerlink" title="Http 请求到 DispatcherServlet"></a>Http 请求到 DispatcherServlet</h3><p>(1) 客户端请求提交到 DispatcherServlet。</p><h3 id="HandlerMapping-寻找处理器"><a href="#HandlerMapping-寻找处理器" class="headerlink" title="HandlerMapping 寻找处理器"></a>HandlerMapping 寻找处理器</h3><p>(2) 由 DispatcherServlet 控制器查询一个或多个 HandlerMapping,找到处理请求的Controller。</p><h3 id="调用处理器-Controller"><a href="#调用处理器-Controller" class="headerlink" title="调用处理器 Controller"></a>调用处理器 Controller</h3><p>(3) DispatcherServlet 将请求提交到 Controller。<br>Controller 调用业务逻辑处理后,返回 ModelAndView<br>(4)(5)调用业务处理和返回结果:Controller 调用业务逻辑处理后,返回 ModelAndView。</p><h3 id="DispatcherServlet-查询-ModelAndView"><a href="#DispatcherServlet-查询-ModelAndView" class="headerlink" title="DispatcherServlet 查询 ModelAndView"></a>DispatcherServlet 查询 ModelAndView</h3><p>(6)(7)处理视图映射并返回模型: DispatcherServlet 查询一个或多个 ViewResoler 视图解析器,找到 ModelAndView 指定的视图。</p><h3 id="ModelAndView-反馈浏览器-HTTP"><a href="#ModelAndView-反馈浏览器-HTTP" class="headerlink" title="ModelAndView 反馈浏览器 HTTP"></a>ModelAndView 反馈浏览器 HTTP</h3><p>(8) Http 响应:视图负责将结果显示到客户端。</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/spring-mvc-anno.png#id=aZSXV&originHeight=704&originWidth=1071&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h1 id="Spring-Boot-原理"><a href="#Spring-Boot-原理" class="headerlink" title="Spring Boot 原理"></a>Spring Boot 原理</h1><p>Spring Boot 是由 Pivotal 团队提供的全新框架,其设计目的是用来简化新 Spring 应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置,从而使开发人员不再需要定义样板化的配置。通过这种方式,Spring Boot 致力于在蓬勃发展的快速应用开发领域(rapid applicationdevelopment)成为领导者。其特点如下:</p><ol><li>创建独立的 Spring 应用程序</li><li>嵌入的 Tomcat,无需部署 WAR 文件</li><li>简化 Maven 配置</li><li>自动配置 Spring</li><li>提供生产就绪型功能,如指标,健康检查和外部配置</li><li>绝对没有代码生成和对 XML 没有要求配置 [1]</li></ol><h1 id="JPA-原理"><a href="#JPA-原理" class="headerlink" title="JPA 原理"></a>JPA 原理</h1><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>事务是计算机应用中不可或缺的组件模型,它保证了用户操作的原子性 ( Atomicity )、一致性( Consistency )、隔离性 ( Isolation ) 和持久性 ( Durabilily )。</p><h3 id="本地事务"><a href="#本地事务" class="headerlink" title="本地事务"></a>本地事务</h3><p>紧密依赖于底层资源管理器(例如数据库连接 ),事务处理局限在当前事务资源内。此种事务处理方式不存在对应用服务器的依赖,因而部署灵活却无法支持多数据源的分布式事务。在数据库连接中使用本地事务示例如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transferAccount</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span>&#123;<br>conn = getDataSource().getConnection();<br><span class="hljs-comment">// 将自动提交设置为 false,若设置为 true 则数据库将会把每一次数据更新认定为一个事务并自动提交</span><br>conn.setAutoCommit(<span class="hljs-literal">false</span>);<br>stmt = conn.createStatement();<br><span class="hljs-comment">// 将 A 账户中的金额减少 500</span><br>stmt.execute(<span class="hljs-string">&quot;update t_account set amount = amount - 500 where account_id = &#x27;A&#x27;&quot;</span>);<br><span class="hljs-comment">// 将 B 账户中的金额增加 500</span><br>stmt.execute(<span class="hljs-string">&quot;update t_account set amount = amount + 500 where account_id = &#x27;B&#x27;&quot;</span>);<br><span class="hljs-comment">// 提交事务</span><br>conn.commit();<br><span class="hljs-comment">// 事务提交:转账的两步操作同时成功</span><br>&#125; <span class="hljs-keyword">catch</span>(SQLException sqle)&#123;<br><span class="hljs-comment">// 发生异常,回滚在本事务中的操做</span><br>conn.rollback();<br><span class="hljs-comment">// 事务回滚:转账的两步操作完全撤销</span><br>stmt.close();<br>conn.close();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h3><blockquote><p>Java 事务编程接口(JTA:Java Transaction API)和 Java 事务服务 (JTS;Java Transaction<br>Service) 为 J2EE 平台提供了分布式事务服务。分布式事务(Distributed Transaction)包括事务<br>管 理 器 ( Transaction Manager ) 和 一 个 或 多 个 支 持 XA 协 议 的 资 源 管 理 器 ( Resource<br>Manager )。我们可以将资源管理器看做任意类型的持久化数据存储;事务管理器承担着所有事务<br>参与单元的协调与控制。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transferAccount</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">UserTransaction</span> <span class="hljs-variable">userTx</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">Connection</span> <span class="hljs-variable">connA</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>; <span class="hljs-type">Statement</span> <span class="hljs-variable">stmtA</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">Connection</span> <span class="hljs-variable">connB</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>; <span class="hljs-type">Statement</span> <span class="hljs-variable">stmtB</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span>&#123;<br><span class="hljs-comment">// 获得 Transaction 管理对象</span><br>userTx = (UserTransaction)getContext().lookup(<span class="hljs-string">&quot;java:comp/UserTransaction&quot;</span>);<br>connA = getDataSourceA().getConnection();<span class="hljs-comment">// 从数据库 A 中取得数据库连接</span><br>connB = getDataSourceB().getConnection();<span class="hljs-comment">// 从数据库 B 中取得数据库连接</span><br>userTx.begin(); <span class="hljs-comment">// 启动事务</span><br>stmtA = connA.createStatement();<span class="hljs-comment">// 将 A 账户中的金额减少 500</span><br>stmtA.execute(<span class="hljs-string">&quot;update t_account set amount = amount - 500 where account_id = &#x27;A&#x27;&quot;</span>);<br><span class="hljs-comment">// 将 B 账户中的金额增加 500</span><br>stmtB = connB.createStatement();<br>stmtB.execute(<span class="hljs-string">&quot;update t_account set amount = amount + 500 where account_id = &#x27;B&#x27;&quot;</span>);<br>userTx.commit();<span class="hljs-comment">// 提交事务</span><br><span class="hljs-comment">// 事务提交:转账的两步操作同时成功(数据库 A 和数据库 B 中的数据被同时更新)</span><br>&#125; <span class="hljs-keyword">catch</span>(SQLException sqle)&#123;<br><span class="hljs-comment">// 发生异常,回滚在本事务中的操纵</span><br>userTx.rollback();<span class="hljs-comment">// 事务回滚:数据库 A 和数据库 B 中的数据更新被同时撤销</span><br>&#125; <span class="hljs-keyword">catch</span>(Exception ne)&#123; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="两阶段提交"><a href="#两阶段提交" class="headerlink" title="两阶段提交"></a>两阶段提交</h2><blockquote><p>两阶段提交主要保证了分布式事务的原子性:即所有结点要么全做要么全不做,所谓的两个阶段是指:第一阶段:准备阶段;第二阶段:提交阶段。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/fbsswljd.png#id=dmiPh&originHeight=394&originWidth=628&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>1 准备阶段<br>事务协调者(事务管理器)给每个参与者(资源管理器)发送 Prepare 消息,每个参与者要么直接返回<br>失败(如权限验证失败),要么在本地执行事务,写本地的 redo 和 undo 日志,但不提交,到达一<br>种“万事俱备,只欠东风”的状态。<br>2 提交阶段:<br>如果协调者收到了参与者的失败消息或者超时,直接给每个参与者发送回滚(Rollback)消息;否则,<br>发送提交(Commit)消息;参与者根据协调者的指令执行提交或者回滚操作,释放所有事务处理过<br>程中使用的锁资源。(注意:必须在最后阶段释放锁资源)将提交分成两阶段进行的目的很明确,就是尽可能晚地提交事务,让事务在提交前尽可能地完成所有能完成的工作。</p><h1 id="Mybatis-缓存"><a href="#Mybatis-缓存" class="headerlink" title="Mybatis 缓存"></a>Mybatis 缓存</h1><blockquote><p>Mybatis 中有一级缓存和二级缓存,默认情况下一级缓存是开启的,而且是不能关闭的。</p></blockquote><h2 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h2><p>是指 SqlSession 级别的缓存,当在同一个 SqlSession 中进行相同的 SQL 语句查询时,第二次以后的查询不会从数据库查询,而是直接从缓存中获取,一级缓存最多缓存 1024 条 SQL。</p><h2 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h2><p>是指可以跨 SqlSession 的缓存。是 mapper 级别的缓存,对于 mapper 级别的缓存不同的sqlsession 是可以共享的。</p><p>Mybatis 的一级缓存原理( sqlsession 级别 )<br>第一次发出一个查询 sql,sql 查询结果写入 sqlsession 的一级缓存中,缓存使用的数据结构是一个 map。</p><blockquote><p>key:MapperID+offset+limit+Sql+所有的入参value:用户信息</p></blockquote><p>同一个 sqlsession 再次发出相同的 sql,就从缓存中取出数据。如果两次中间出现 commit 操作(修改、添加、删除),本 sqlsession 中的一级缓存区域全部清空,下次再去缓存中查询不到所以要从数据库查询,从数据库查询到再写入缓存。</p><p>二级缓存原理( mapper 基本 )</p><p>二级缓存的范围是 mapper 级别(mapper 同一个命名空间),mapper 以命名空间为单位创建缓存数据结构,结构是 map。mybatis 的二级缓存是通过 CacheExecutor 实现的。CacheExecutor</p><p>其实是 Executor 的代理对象。所有的查询操作,在 CacheExecutor 中都会先匹配缓存中是否存在,不存在则查询数据库。<br>key:MapperID+offset+limit+Sql+所有的入参</p><p>具体使用需要配置:</p><ol><li>Mybatis 全局配置中启用二级缓存配置</li><li>在对应的 Mapper.xml 中配置 cache 节点</li><li>在对应的 select 查询节点中添加 useCache=true</li></ol><h1 id="Tomcat-架构"><a href="#Tomcat-架构" class="headerlink" title="Tomcat 架构"></a>Tomcat 架构</h1><p><a href="https://www.cnblogs.com/alimayun/p/10604532.html">参考资料</a></p>]]></content>
    
    
    <categories>
      
      <category>Java相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库篇-数据库基础知识</title>
    <link href="/2020/07/09/yuque/fe7wmi/"/>
    <url>/2020/07/09/yuque/fe7wmi/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1665676908659-63c440cf-1a49-413b-9550-392a5cd65d54.png#clientId=u58b29bf4-342c-4&from=paste&height=253&id=u9ef99c7f&originHeight=506&originWidth=760&originalType=binary&ratio=1&rotation=0&showTitle=false&size=51209&status=done&style=none&taskId=u8f8a0da7-b73f-45a0-a622-0337f3fab94&title=&width=380" alt="image.png"></p><h1 id="数据库范式"><a href="#数据库范式" class="headerlink" title="数据库范式"></a>数据库范式</h1><h2 id="第一范式（1NF）"><a href="#第一范式（1NF）" class="headerlink" title="第一范式（1NF）"></a>第一范式（1NF）</h2><p>第一范式（1NF）：字段具有原子性,不可再分。所有关系型数据库系统都满足第一范式）<br>数据库表中的字段都是单一属性的，不可再分。例如，姓名字段，其中的姓和名必须作为一个整体，无法区分哪部分是姓，哪部分是名，如果要区分出姓和名，必须设计成两个独立的字段。</p><h2 id="第二范式（2NF）"><a href="#第二范式（2NF）" class="headerlink" title="第二范式（2NF）"></a>第二范式（2NF）</h2><p>第二范式（2NF）：第二范式（2NF）是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF）。<br>要求数据库表中的每个实例或行必须可以被惟一地区分。通常需要为表加上一个列，以存储各个实例的惟一标识。这个惟一属性列被称为主关键字或主键。<br>第二范式（2NF）要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性，如果存在，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体与原实体之间是一对多的关系。为实现区分通常需要为表加上一个列，以存储各个实例的惟一标识。简而言之，第二范式就是非主属性非部分依赖于主关键字。</p><h2 id="第三范式（3NF）"><a href="#第三范式（3NF）" class="headerlink" title="第三范式（3NF）"></a>第三范式（3NF）</h2><p>第三范式的要求如下：<br>满足第三范式（3NF）必须先满足第二范式（2NF）。简而言之，第三范式（3NF）<strong>要求一个数据库表中不包含已在其它表中已包含的非主关键字信息（冗余）</strong>。<br>所以第三范式具有如下特征：<br>1，每一列只有一个值<br>2，每一行都能区分。<br>3，每一个表都不包含其他表已经包含的非主关键字信息。<br>例如，帖子表中只能出现发帖人的id，而不能出现发帖人的id，还同时出现发帖人姓名，否则，只要出现同一发帖人id的所有记录，它们中的姓名部分都必须严格保持一致，这就是数据冗余。</p><h1 id="数据库事务"><a href="#数据库事务" class="headerlink" title="数据库事务"></a>数据库事务</h1><p><a href="https://www.yuque.com/aichihongdouheyumi/blog/lrcgql">https://www.yuque.com/aichihongdouheyumi/blog/lrcgql</a></p>]]></content>
    
    
    <categories>
      
      <category>数据库篇</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux篇-Ubuntu开发环境配置</title>
    <link href="/2020/06/25/yuque/qqcg3z/"/>
    <url>/2020/06/25/yuque/qqcg3z/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1657548017069-4c1bb1f7-df09-4a9f-9989-4fa093c96d43.png#clientId=u0533631f-d679-4&from=markdown&id=IRLlg&originHeight=300&originWidth=533&originalType=url&ratio=1&rotation=0&showTitle=false&size=76743&status=done&style=none&taskId=u6ed3c1c5-56b6-4e3b-b2a1-428c2369bc9&title=" alt="image.png"></p><h1 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h1><p><a href="https://ubuntu.com/download/desktop">镜像下载地址</a></p><blockquote><p>下载后制作成启动盘就可以安装系统了</p></blockquote><h1 id="挂载磁盘"><a href="#挂载磁盘" class="headerlink" title="挂载磁盘"></a>挂载磁盘</h1><h1 id="常用软件安装"><a href="#常用软件安装" class="headerlink" title="常用软件安装"></a>常用软件安装</h1><h3 id="JetBrains-系列"><a href="#JetBrains-系列" class="headerlink" title="JetBrains 系列"></a>JetBrains 系列</h3><ul><li>Android Studio</li><li>CLion</li><li>DataGrip</li><li>Intelli IDEA</li><li>GoLand</li><li>Pycharm</li><li>WebStorm</li></ul><h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><ul><li>Chrome</li><li>Chromium</li><li>Firefox</li></ul><h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><ul><li>Redis Desktop Manager</li><li>Sublime Text</li><li><a href="https://sunlogin.oray.com/">Sunlogin Client</a></li><li>Teamview</li><li>Xmind ZEN</li><li><a href="https://www.wps.cn/product/wpslinux">WPS</a></li><li><a href="https://github.com/nashaofu/dingtalk">DingTalk</a></li><li>Git</li><li>Typora</li><li>Sublime Text</li><li>Htop</li><li>Wireshark</li><li></li></ul><h3 id="其他软件"><a href="#其他软件" class="headerlink" title="其他软件"></a>其他软件</h3><ul><li>多端鼠标共享-synergy</li><li><a href="https://github.com/kinget007/electron-ssr">Electron-ssr</a></li><li>FileZilla</li><li><a href="https://github.com/getlantern/lantern">Lantern</a></li><li>Remmina</li><li>VirtualBox</li><li>网易云音乐</li><li>Sougou输入法</li><li>SimpleScreenRecorder</li><li>Tweaks</li><li>WPS</li><li><a href="https://codechina.csdn.net/mirrors/iberianpig/fusuma?utm_source=csdn_github_accelerator">Ubuntu触控板支持多指手势和滑动切换应用</a></li></ul><h3 id="社交软件"><a href="#社交软件" class="headerlink" title="社交软件"></a>社交软件</h3><ul><li><a href="https://gitee.com/wszqkzqk/deepin-wine-for-ubuntu">QQ</a></li><li><a href="https://gitee.com/wszqkzqk/deepin-wine-for-ubuntu">WeChat</a></li><li><a href="https://gitee.com/wszqkzqk/deepin-wine-for-ubuntu">TIM</a></li></ul><p>解决非中文系统中文乱码问题</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">在/opt/deepinwine/tools/<span class="hljs-keyword">run</span>.<span class="hljs-keyword">sh</span> 和 run_v2.<span class="hljs-keyword">sh</span> 中将 WINE_CMD 那一行修改为 WINE_CMD=<span class="hljs-string">&quot;LC_ALL=zh_CN.UTF-8 deepin-wine&quot;</span><br></code></pre></td></tr></table></figure><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><ul><li>JDK</li><li>Golang</li><li>Docker</li><li>Nodejs</li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Prometheus-服务监控系统</title>
    <link href="/2020/05/30/yuque/fwghba/"/>
    <url>/2020/05/30/yuque/fwghba/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2023/png/2630542/1676522669405-e0ec163b-b2b5-4f3c-9a39-a113deff588a.png#averageHue=%23da5739&clientId=ub396808d-7e62-4&from=paste&height=157&id=ue2e6fba7&originHeight=314&originWidth=750&originalType=binary&ratio=2&rotation=0&showTitle=false&size=72506&status=done&style=none&taskId=udadbe22c-08f3-4b67-a6f2-ad7c402478c&title=&width=375" alt="image.png"></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Prometheus 是一个开源的服务监控系统和时间序列数据库</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ol><li><p>下载</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">wget</span> <span class="hljs-string">https://github.com/prometheus/prometheus/releases/download/v2.42.0/prometheus-2.42.0.linux-arm64.tar.gz</span><br></code></pre></td></tr></table></figure></li><li><p>解压</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">tar</span> <span class="hljs-string">zxvf</span> <span class="hljs-string">prometheus-2.42.0.linux-arm64.tar.gz</span><br></code></pre></td></tr></table></figure></li><li><p>配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">scrape_configs:</span><br>  <span class="hljs-comment"># The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">&#x27;prometheus&#x27;</span><br>    <span class="hljs-comment"># metrics_path defaults to &#x27;/metrics&#x27;</span><br>    <span class="hljs-comment"># scheme defaults to &#x27;http&#x27;.</span><br><br>    <span class="hljs-attr">static_configs:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">targets:</span> [<span class="hljs-string">&#x27;localhost:9090&#x27;</span>]<br><span class="hljs-comment">#应用</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">&#x27;order&#x27;</span><br>    <span class="hljs-attr">metrics_path:</span> <span class="hljs-string">&#x27;/actuator/prometheus&#x27;</span><br>    <span class="hljs-attr">static_configs:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">targets:</span> [<span class="hljs-string">&#x27;127.0.0.1:8080&#x27;</span>]<br><span class="hljs-comment">#数据库</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">&#x27;mysql_export&#x27;</span><br>    <span class="hljs-attr">static_configs:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">targets:</span> [<span class="hljs-string">&#x27;127.0.0.1:9104&#x27;</span>]<br><span class="hljs-comment">#主机</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">&#x27;node_export&#x27;</span><br>    <span class="hljs-attr">static_configs:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">targets:</span> [<span class="hljs-string">&#x27;127.0.0.1:9100&#x27;</span>]<br></code></pre></td></tr></table></figure></li><li><p>运行</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">./prometheus</span> <span class="hljs-string">--config.file=prometheus.yml</span><br></code></pre></td></tr></table></figure></li></ol><h1 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h1><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2630542/1676526428681-b5e9cfab-8d76-4a79-9f0d-5e2850b33eba.png#averageHue=%23656362&clientId=u33904737-f643-4&from=paste&height=406&id=uebd6b852&originHeight=811&originWidth=1351&originalType=binary&ratio=2&rotation=0&showTitle=false&size=137263&status=done&style=none&taskId=u7a68f98a-1004-42e3-a08d-bd53be05f84&title=&width=675.5" alt="image.png"></p><h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><p>Prometheus提供了一种称为PromQL（PrometheusQueryLanguage）的函数查询语言，它允许用户实时选择和聚合时间序列数据。表达式的结果可以显示为图形，在Prometheus的表达式浏览器中显示为表格数据，也可以由外部系统通过HTTP API使用。</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="表达式类型"><a href="#表达式类型" class="headerlink" title="表达式类型"></a>表达式类型</h3><ul><li><strong>瞬时向量（Instant vector）</strong>：一组时间序列，包含每个时间序列的单个样本，所有样本共享相同的时间戳</li><li><strong>范围向量（Range vector）</strong>：一组时间序列，包含每个时间序列随时间变化的数据点范围</li><li><strong>标量（Scalar）</strong>：一个简单的数字浮点值</li><li><strong>字符串（String）</strong>：一个简单的字符串值；当前未使用</li></ul><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h2 id="HTTP-API"><a href="#HTTP-API" class="headerlink" title="HTTP API"></a>HTTP API</h2><h2 id="REMOTE-READ-API"><a href="#REMOTE-READ-API" class="headerlink" title="REMOTE READ API"></a>REMOTE READ API</h2><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><blockquote><p>将应用接入prometheus，在github找到对应语言的client，一些以go为案例</p></blockquote><p>client：<a href="https://github.com/prometheus/client_golang">https://github.com/prometheus/client_golang</a></p><ol><li><p>构建应用</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">go</span> <span class="hljs-string">mod</span> <span class="hljs-string">init</span><br><span class="hljs-string">go</span> <span class="hljs-string">get</span> <span class="hljs-string">github.com/prometheus/client_golang/prometheus</span><br><span class="hljs-string">go</span> <span class="hljs-string">get</span> <span class="hljs-string">github.com/prometheus/client_golang/prometheus/promauto</span><br><span class="hljs-string">go</span> <span class="hljs-string">get</span> <span class="hljs-string">github.com/prometheus/client_golang/prometheus/promhttp</span><br></code></pre></td></tr></table></figure></li><li><p>编写http指标采集入口</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;net/http&quot;</span><br>    <span class="hljs-string">&quot;time&quot;</span><br><br>    <span class="hljs-string">&quot;github.com/prometheus/client_golang/prometheus&quot;</span><br>    <span class="hljs-string">&quot;github.com/prometheus/client_golang/prometheus/promauto&quot;</span><br>    <span class="hljs-string">&quot;github.com/prometheus/client_golang/prometheus/promhttp&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">recordMetrics</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>        <span class="hljs-keyword">for</span> &#123;<br>            opsProcessed.Inc()<br>            time.Sleep(<span class="hljs-number">2</span> * time.Second)<br>        &#125;<br>    &#125;()<br>&#125;<br><br><span class="hljs-keyword">var</span> (<br>    opsProcessed = promauto.NewCounter(prometheus.CounterOpts&#123;<br>        Name: <span class="hljs-string">&quot;app_processed_ops_total&quot;</span>,<br>        Help: <span class="hljs-string">&quot;The total number of processed events&quot;</span>,<br>    &#125;)<br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    recordMetrics()<br>    http.Handle(<span class="hljs-string">&quot;/metrics&quot;</span>, promhttp.Handler())<br>    http.ListenAndServe(<span class="hljs-string">&quot;:8088&quot;</span>, <span class="hljs-literal">nil</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>配置prometheus.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">scrape_configs:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">myapp</span><br>  <span class="hljs-attr">scrape_interval:</span> <span class="hljs-string">10s</span><br>  <span class="hljs-attr">static_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">targets:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">localhost:8088</span><br></code></pre></td></tr></table></figure></li><li><p>运行应用</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">nohup</span> <span class="hljs-string">./main</span> <span class="hljs-number">2</span><span class="hljs-string">&gt;1</span> <span class="hljs-number">1</span><span class="hljs-string">&gt;/dev/null</span> <span class="hljs-string">&amp;</span><br></code></pre></td></tr></table></figure></li><li><p>导入大盘，当然你也可以自定义</p><blockquote><p>官网搜索地址：<a href="https://grafana.com/grafana/dashboards/">https://grafana.com/grafana/dashboards/</a></p></blockquote></li><li><p>查看大盘</p></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2630542/1676599521642-7e384126-cf55-4a49-8c9f-421ef878620d.png#averageHue=%231d1f24&clientId=u85f7820a-79f0-4&from=paste&height=834&id=u377a8a20&originHeight=1668&originWidth=3016&originalType=binary&ratio=2&rotation=0&showTitle=false&size=1300968&status=done&style=none&taskId=ue7fd37e7-489e-4d75-87c6-aa3125d78a3&title=&width=1508" alt="image.png"><br>参考资料：<a href="https://prometheus.io/docs/guides/go-application/">https://prometheus.io/docs/guides/go-application/</a></p><h1 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h1><h2 id="配置RT-TPS"><a href="#配置RT-TPS" class="headerlink" title="配置RT/TPS"></a>配置RT/TPS</h2><h3 id="应用提供指标"><a href="#应用提供指标" class="headerlink" title="应用提供指标"></a>应用提供指标</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br><br><span class="hljs-string">&quot;github.com/prometheus/client_golang/prometheus&quot;</span><br><span class="hljs-string">&quot;github.com/prometheus/client_golang/prometheus/promhttp&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> (<br>httpRequestDurationHistogram = prometheus.NewHistogram(<br>prometheus.HistogramOpts&#123;<br>Name:    <span class="hljs-string">&quot;http_request_duration_milliseconds&quot;</span>,<br>Help:    <span class="hljs-string">&quot;HTTP request duration distribution.&quot;</span>,<br>Buckets: []<span class="hljs-type">float64</span>&#123;<span class="hljs-number">10</span>, <span class="hljs-number">50</span>, <span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">500</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">2000</span>, <span class="hljs-number">5000</span>&#125;,<br>&#125;,<br>)<br>httpRequestsTotal = prometheus.NewCounter(<br>prometheus.CounterOpts&#123;<br>Name: <span class="hljs-string">&quot;http_requests_total&quot;</span>,<br>Help: <span class="hljs-string">&quot;Total number of HTTP requests.&quot;</span>,<br>&#125;,<br>)<br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;<br>prometheus.MustRegister(httpRequestsTotal, httpRequestDurationHistogram)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>http.Handle(<span class="hljs-string">&quot;/metrics&quot;</span>, promhttp.Handler())<br>http.Handle(<span class="hljs-string">&quot;/ok&quot;</span>, http.HandlerFunc(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;<br>httpRequestsTotal.Inc()<br>startTime := time.Now()<br><span class="hljs-comment">//DO SOMETHING</span><br>service()<br>duration := time.Since(startTime)<br>ms := <span class="hljs-type">float64</span>(duration.Nanoseconds()) / <span class="hljs-number">1e6</span><br><span class="hljs-comment">// 将请求处理时间作为指标值增加到Prometheus的histogram类型指标中</span><br>httpRequestDurationHistogram.Observe(ms)<br>writer.WriteHeader(http.StatusOK)<br>writer.Write([]<span class="hljs-type">byte</span>(time.Now().Format(<span class="hljs-string">&quot;2006-01-02 15:04:05&quot;</span>)))<br>&#125;))<br>http.ListenAndServe(<span class="hljs-string">&quot;:8088&quot;</span>, <span class="hljs-literal">nil</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">service</span><span class="hljs-params">()</span></span> &#123;<br>log.Println(time.Now().Format(<span class="hljs-string">&quot;2006-01-02 15:04:05&quot;</span>))<br>startTime := time.Now()<br>fib(<span class="hljs-number">40</span>)<br>duration := time.Since(startTime)<br>fmt.Println(duration)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fib</span><span class="hljs-params">(n <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">if</span> n == <span class="hljs-number">1</span> || n == <span class="hljs-number">2</span> &#123;<br><span class="hljs-keyword">return</span> n<br>&#125;<br><span class="hljs-keyword">return</span> fib(n<span class="hljs-number">-1</span>) + fib(n<span class="hljs-number">-2</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="配置查询指标"><a href="#配置查询指标" class="headerlink" title="配置查询指标"></a>配置查询指标</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">sum(rate(http_requests_total&#123;job=&quot;app&quot;&#125;[1m]))</span> <br><span class="hljs-string">sum(http_request_duration_milliseconds_sum)</span> <span class="hljs-string">/</span> <span class="hljs-string">sum(http_request_duration_milliseconds_count)</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2630542/1676605958200-e49ad159-c709-42b3-879f-127f7e840b0c.png#averageHue=%231d1f23&clientId=u85f7820a-79f0-4&from=paste&height=836&id=u4ddc9bdd&originHeight=1672&originWidth=3014&originalType=binary&ratio=2&rotation=0&showTitle=false&size=1144182&status=done&style=none&taskId=ue679d2c4-eb54-41c9-a34c-02b8f638b6c&title=&width=1507" alt="image.png"></p><h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><ol><li><a href="https://prometheus.io/">https://prometheus.io/</a></li><li><a href="https://github.com/prometheus">https://github.com/prometheus</a></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Prometheus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java篇-Tomcat容器中启动Netty服务器</title>
    <link href="/2020/01/19/yuque/ygev7g/"/>
    <url>/2020/01/19/yuque/ygev7g/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1657586296943-224c4754-e46a-4ae2-a168-c66217b8fad3.png#averageHue=%23f4f4f2&clientId=u6747e24c-5d09-4&from=paste&height=200&id=u94122786&originHeight=400&originWidth=700&originalType=binary&ratio=1&rotation=0&showTitle=false&size=95449&status=done&style=none&taskId=u33777088-3857-4999-b099-25c09ccdee0&title=&width=350" alt="image.png"></p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>关于在Tomcat容器中启动Netty服务器的方法</p><blockquote><p>最近在一个web应用上重构一个即时通信功能的,考虑到负载和性能的原因,所以决定采用Netty来作为服务器端,但是如果在主线程中启动netty就会陷入阻塞状态,导致Tomcat无法启动．</p></blockquote><h1 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h1><blockquote><p>我们知道，netty在主线程启动会陷入阻塞，那么我们就可以开启一个新线程来启动netty服务器，让主线程启动Tomcat即可</p></blockquote><h1 id="相关代码"><a href="#相关代码" class="headerlink" title="相关代码"></a>相关代码</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans   </span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/beans/spring-beans-4.1.xsd  </span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context   </span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context/spring-context-4.1.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 扫描关于Netty Websocket的包 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.gxwzu.websocket&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 把Netty的一些类服务器注册到Spring，方便处理和扩展 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 用于处理客户端连接请求 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bossGroup&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;io.netty.channel.nio.NioEventLoopGroup&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- 用于处理客户端I/O操作 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;workerGroup&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;io.netty.channel.nio.NioEventLoopGroup&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- 服务器启动引导类 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;serverBootstrap&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;io.netty.bootstrap.ServerBootstrap&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- 自定义的Netty Websocket服务器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;webSocketServer&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.gxwzu.websocket.WebSocketServer&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;port&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;chat.server.port&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;childChannelHandler&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;webSocketChildChannelHandler&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.gxwzu.websocket;<br><br><span class="hljs-keyword">import</span> io.netty.channel.ChannelHandler;<br><span class="hljs-keyword">import</span> io.netty.channel.ChannelInitializer;<br><span class="hljs-keyword">import</span> io.netty.channel.socket.SocketChannel;<br><span class="hljs-keyword">import</span> io.netty.handler.codec.http.HttpObjectAggregator;<br><span class="hljs-keyword">import</span> io.netty.handler.codec.http.HttpServerCodec;<br><span class="hljs-keyword">import</span> io.netty.handler.stream.ChunkedWriteHandler;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ProjectName</span> gdm</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> 麦奇</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Email</span> biaogejiushibiao@outlook.com</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Title</span>: WebSocketChildChannelHandler</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:</span><br><span class="hljs-comment"> **/</span><br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSocketChildChannelHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;SocketChannel&gt; &#123;<br><br>    <span class="hljs-meta">@Resource(name = &quot;webSocketServerHandler&quot;)</span><br>    <span class="hljs-keyword">private</span> ChannelHandler webSocketServerHandler;<br><br>    <span class="hljs-meta">@Resource(name = &quot;httpRequestHandler&quot;)</span><br>    <span class="hljs-keyword">private</span> ChannelHandler httpRequestHandler;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(SocketChannel ch)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        ch.pipeline().addLast(<span class="hljs-string">&quot;http-codec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpServerCodec</span>()); <span class="hljs-comment">// HTTP编码解码器</span><br>        ch.pipeline().addLast(<span class="hljs-string">&quot;aggregator&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpObjectAggregator</span>(<span class="hljs-number">65536</span>)); <span class="hljs-comment">// 把HTTP头、HTTP体拼成完整的HTTP请求</span><br>        ch.pipeline().addLast(<span class="hljs-string">&quot;http-chunked&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChunkedWriteHandler</span>()); <span class="hljs-comment">// 分块，方便大文件传输，不过实质上都是短的文本数据</span><br>        ch.pipeline().addLast(<span class="hljs-string">&quot;websocket-handler&quot;</span>,webSocketServerHandler);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs java">kage com.gxwzu.websocket;<br><br><span class="hljs-keyword">import</span> io.netty.bootstrap.ServerBootstrap;<br><span class="hljs-keyword">import</span> io.netty.channel.*;<br><span class="hljs-keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;<br><span class="hljs-keyword">import</span> io.netty.util.concurrent.Future;<br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ProjectName</span> gdm</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> 麦奇</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Email</span> biaogejiushibiao@outlook.com</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Title</span>: WebSocketServer</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:</span><br><span class="hljs-comment"> **/</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSocketServer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(WebSocketServer.class);<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EventLoopGroup bossGroup;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EventLoopGroup workerGroup;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ServerBootstrap serverBootstrap;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> port;<br><br>    <span class="hljs-keyword">private</span> ChannelHandler childChannelHandler;<br><br>    <span class="hljs-keyword">private</span> ChannelFuture serverChannelFuture;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">WebSocketServer</span><span class="hljs-params">()</span> &#123;&#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        build();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构建服务器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">build</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">begin</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>            serverBootstrap.group(bossGroup, workerGroup) <span class="hljs-comment">//boss辅助客户端的tcp连接请求  worker负责与客户端之前的读写操作</span><br>                    .channel(NioServerSocketChannel.class) <span class="hljs-comment">//配置客户端的channel类型</span><br>                    .option(ChannelOption.SO_BACKLOG, <span class="hljs-number">1024</span>) <span class="hljs-comment">//配置TCP参数，握手字符串长度设置</span><br>                    .option(ChannelOption.TCP_NODELAY, <span class="hljs-literal">true</span>) <span class="hljs-comment">//TCP_NODELAY算法，尽可能发送大块数据，减少充斥的小块数据</span><br>                    .childOption(ChannelOption.SO_KEEPALIVE, <span class="hljs-literal">true</span>)<span class="hljs-comment">//开启心跳包活机制，就是客户端、服务端建立连接处于ESTABLISHED状态，超过2小时没有交流，机制会被启动</span><br>                    .childOption(ChannelOption.RCVBUF_ALLOCATOR, <span class="hljs-keyword">new</span> <span class="hljs-title class_">FixedRecvByteBufAllocator</span>(<span class="hljs-number">592048</span>))<span class="hljs-comment">//配置固定长度接收缓存区分配器</span><br>                    .childHandler(childChannelHandler); <span class="hljs-comment">//绑定I/O事件的处理类,WebSocketChildChannelHandler中定义</span><br>            <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br>            logger.info(<span class="hljs-string">&quot;Netty Websocket服务器启动完成，耗时 &quot;</span> + (end - begin) + <span class="hljs-string">&quot; ms，已绑定端口 &quot;</span> + port + <span class="hljs-string">&quot; 阻塞式等候客户端连接&quot;</span>);<br><br>            serverChannelFuture = serverBootstrap.bind(port).sync();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            logger.info(e.getMessage());<br>            bossGroup.shutdownGracefully();<br>            workerGroup.shutdownGracefully();<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 关闭资源</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span>&#123;<br>        serverChannelFuture.channel().close();<br>        Future&lt;?&gt; bossGroupFuture = bossGroup.shutdownGracefully();<br>        Future&lt;?&gt; workerGroupFuture = workerGroup.shutdownGracefully();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            bossGroupFuture.await();<br>            workerGroupFuture.await();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException ignore) &#123;<br>            ignore.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> ChannelHandler <span class="hljs-title function_">getChildChannelHandler</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> childChannelHandler;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setChildChannelHandler</span><span class="hljs-params">(ChannelHandler childChannelHandler)</span> &#123;<br>        <span class="hljs-built_in">this</span>.childChannelHandler = childChannelHandler;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getPort</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> port;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPort</span><span class="hljs-params">(<span class="hljs-type">int</span> port)</span> &#123;<br>        <span class="hljs-built_in">this</span>.port = port;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> com.gxwzu.websocket;<br><br><span class="hljs-keyword">import</span> io.netty.channel.ChannelHandler;<br><span class="hljs-keyword">import</span> io.netty.channel.ChannelInitializer;<br><span class="hljs-keyword">import</span> io.netty.channel.socket.SocketChannel;<br><span class="hljs-keyword">import</span> io.netty.<span class="hljs-keyword">handler</span>.codec.http.HttpObjectAggregator;<br><span class="hljs-keyword">import</span> io.netty.<span class="hljs-keyword">handler</span>.codec.http.HttpServerCodec;<br><span class="hljs-keyword">import</span> io.netty.<span class="hljs-keyword">handler</span>.stream.ChunkedWriteHandler;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ProjectName</span> gdm</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> 麦奇</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Email</span> biaogejiushibiao@outlook.com</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Title</span>: WebSocketChildChannelHandler</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:</span><br><span class="hljs-comment"> **/</span><br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebSocketChildChannelHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ChannelInitializer</span>&lt;<span class="hljs-title">SocketChannel</span>&gt; </span>&#123;<br><br>    <span class="hljs-meta">@Resource</span>(name = <span class="hljs-string">&quot;webSocketServerHandler&quot;</span>)<br>    <span class="hljs-keyword">private</span> ChannelHandler webSocketServerHandler;<br><br>    <span class="hljs-meta">@Resource</span>(name = <span class="hljs-string">&quot;httpRequestHandler&quot;</span>)<br>    <span class="hljs-keyword">private</span> ChannelHandler httpRequestHandler;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">initChannel</span><span class="hljs-params">(SocketChannel ch)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        ch.pipeline().addLast(<span class="hljs-string">&quot;http-codec&quot;</span>, <span class="hljs-keyword">new</span> HttpServerCodec()); <span class="hljs-comment">// HTTP编码解码器</span><br>        ch.pipeline().addLast(<span class="hljs-string">&quot;aggregator&quot;</span>, <span class="hljs-keyword">new</span> HttpObjectAggregator(<span class="hljs-number">65536</span>)); <span class="hljs-comment">// 把HTTP头、HTTP体拼成完整的HTTP请求</span><br>        ch.pipeline().addLast(<span class="hljs-string">&quot;http-chunked&quot;</span>, <span class="hljs-keyword">new</span> ChunkedWriteHandler()); <span class="hljs-comment">// 分块，方便大文件传输，不过实质上都是短的文本数据</span><br>        ch.pipeline().addLast(<span class="hljs-string">&quot;http-handler&quot;</span>, httpRequestHandler);<br>        ch.pipeline().addLast(<span class="hljs-string">&quot;websocket-handler&quot;</span>,webSocketServerHandler);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">package</span> com.gxwzu.websocket;<br><br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.<span class="hljs-keyword">annotation</span>.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.context.<span class="hljs-keyword">annotation</span>.Scope;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> javax.<span class="hljs-keyword">annotation</span>.PostConstruct;<br><span class="hljs-keyword">import</span> javax.<span class="hljs-keyword">annotation</span>.PreDestroy;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Scope()</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppContext</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Logger logger = LoggerFactory.getLogger(AppContext.<span class="hljs-keyword">class</span>);<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> WebSocketServer webSocketServer;<br><br>    <span class="hljs-keyword">private</span> Thread nettyThread;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 描述：Tomcat加载完ApplicationContext-main和netty文件后：</span><br><span class="hljs-comment">     *      1. 启动Netty WebSocket服务器；</span><br><span class="hljs-comment">     *      2. 加载用户数据；</span><br><span class="hljs-comment">     *      3. 加载用户交流群数据。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> void <span class="hljs-keyword">init</span>() &#123;<br>        nettyThread = new Thread(webSocketServer);<br>        logger.info(<span class="hljs-string">&quot;开启独立线程，启动Netty WebSocket服务器...&quot;</span>);<br>        nettyThread.start();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 描述：Tomcat服务器关闭前需要手动关闭Netty Websocket相关资源，否则会造成内存泄漏。</span><br><span class="hljs-comment">     *      1. 释放Netty Websocket相关连接；</span><br><span class="hljs-comment">     *      2. 关闭Netty Websocket服务器线程。（强行关闭，是否有必要？）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@SuppressWarnings(<span class="hljs-string">&quot;deprecation&quot;</span>)</span><br>    <span class="hljs-meta">@PreDestroy</span><br>    <span class="hljs-keyword">public</span> void close() &#123;<br>        logger.info(<span class="hljs-string">&quot;正在释放Netty Websocket相关连接...&quot;</span>);<br>        webSocketServer.close();<br>        logger.info(<span class="hljs-string">&quot;正在关闭Netty Websocket服务器线程...&quot;</span>);<br>        nettyThread.stop();<br>        logger.info(<span class="hljs-string">&quot;系统成功关闭！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li>Netty： <a href="https://netty.io/">https://netty.io/</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>netty</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Golang篇-Gin学习笔记</title>
    <link href="/2019/05/23/yuque/qu0uv5/"/>
    <url>/2019/05/23/yuque/qu0uv5/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1657534953685-1599ce48-01e4-4b5d-92b8-a362d7a2f347.png#averageHue=%23c9cfc5&clientId=u2985d3d4-f9f2-4&from=markdown&id=qZneQ&originHeight=281&originWidth=200&originalType=url&ratio=1&rotation=0&showTitle=false&size=83433&status=done&style=none&taskId=u74cefd98-ba0f-4c5a-a72a-b9f76656a45&title=" alt="image.png"></p><h1 id="Gin简介"><a href="#Gin简介" class="headerlink" title="Gin简介"></a>Gin简介</h1><blockquote><p>Gin是用Go（Golang）编写的HTTP Web框架。它具有类似于Martini的API，但性能比Martini快40倍。</p></blockquote><h1 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h1><h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><p>go</p><h2 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h2><ol><li>下载安装</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go get -u github.com/gin-gonic/gin</span><br></code></pre></td></tr></table></figure><ol start="2"><li>简单案例</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>  <span class="hljs-string">&quot;net/http&quot;</span><br>  <span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>  r := gin.Default()<br>  r.GET(<span class="hljs-string">&quot;/ping&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>    c.JSON(http.StatusOK, gin.H&#123;<br>      <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;pong&quot;</span>,<br>    &#125;)<br>  &#125;)<br>  r.Run() <span class="hljs-comment">// listen and serve on 0.0.0.0:8080 (for windows &quot;localhost:8080&quot;)</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>启动服务器</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">go run main.go<br></code></pre></td></tr></table></figure><ol start="4"><li>访问<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl localhost:8080/ping<br></code></pre></td></tr></table></figure></li></ol><h1 id="中-间-件"><a href="#中-间-件" class="headerlink" title="中 间 件"></a>中 间 件</h1><blockquote><p>gin相关中间件其实相当于在我们处理器处理我们的业务请求之前会预先调用我们的中间件进行处理（链式调用），如通过配置跨域，鉴权的功能都可以实现</p></blockquote><h2 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>router := gin.Default()<br>    <span class="hljs-comment">//安装注册的先后顺序</span><br>router.Use(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;鉴权中间件&quot;</span>)<br>&#125;)<br>router.Use(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;黑白名单中间件&quot;</span>)<br>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>其Gin在进行链式调用的代码如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Context)</span></span> Next() &#123;<br>c.index++<br><span class="hljs-keyword">for</span> c.index &lt; <span class="hljs-type">int8</span>(<span class="hljs-built_in">len</span>(c.handlers)) &#123;<br>c.handlers[c.index](c)<span class="hljs-comment">//调用处理器</span><br>c.index++<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过这种添加中间件的方式，我们可以在业务代码之前做一些增强来满足我们的业务需求</p><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><h2 id="路由实现"><a href="#路由实现" class="headerlink" title="路由实现"></a>路由实现</h2><h6 id="1-创建根路由"><a href="#1-创建根路由" class="headerlink" title="1. 创建根路由"></a>1. 创建根路由</h6><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go">Router := gin.Default()<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Default</span><span class="hljs-params">()</span></span> *Engine &#123;<br>debugPrintWARNINGDefault()<br>engine := New()<br>engine.Use(Logger(), Recovery())<br><span class="hljs-keyword">return</span> engine<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="2-创建函数"><a href="#2-创建函数" class="headerlink" title="2. 创建函数"></a>2. 创建函数</h6><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">New</span><span class="hljs-params">()</span></span> *Engine &#123;<br>debugPrintWARNINGNew()<br>engine := &amp;Engine&#123;<br>RouterGroup: RouterGroup&#123;<span class="hljs-comment">//根路由</span><br>Handlers: <span class="hljs-literal">nil</span>,<br>basePath: <span class="hljs-string">&quot;/&quot;</span>,<br>root:     <span class="hljs-literal">true</span>,<br>&#125;,<br>FuncMap:                template.FuncMap&#123;&#125;,<br>RedirectTrailingSlash:  <span class="hljs-literal">true</span>,<br>RedirectFixedPath:      <span class="hljs-literal">false</span>,<br>HandleMethodNotAllowed: <span class="hljs-literal">false</span>,<br>ForwardedByClientIP:    <span class="hljs-literal">true</span>,<br>RemoteIPHeaders:        []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;X-Forwarded-For&quot;</span>, <span class="hljs-string">&quot;X-Real-IP&quot;</span>&#125;,<br>TrustedPlatform:        defaultPlatform,<br>UseRawPath:             <span class="hljs-literal">false</span>,<br>RemoveExtraSlash:       <span class="hljs-literal">false</span>,<br>UnescapePathValues:     <span class="hljs-literal">true</span>,<br>MaxMultipartMemory:     defaultMultipartMemory,<br>trees:                  <span class="hljs-built_in">make</span>(methodTrees, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>),<span class="hljs-comment">//这个其实就是我们的路由tree</span><br>delims:                 render.Delims&#123;Left: <span class="hljs-string">&quot;&#123;&#123;&quot;</span>, Right: <span class="hljs-string">&quot;&#125;&#125;&quot;</span>&#125;,<br>secureJSONPrefix:       <span class="hljs-string">&quot;while(1);&quot;</span>,<br>trustedProxies:         []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;0.0.0.0/0&quot;</span>, <span class="hljs-string">&quot;::/0&quot;</span>&#125;,<br>trustedCIDRs:           defaultTrustedCIDRs,<br>&#125;<br>engine.RouterGroup.engine = engine<br>engine.pool.New = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> any &#123;<br><span class="hljs-keyword">return</span> engine.allocateContext()<br>&#125;<br><span class="hljs-keyword">return</span> engine<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="3-路由节点设计"><a href="#3-路由节点设计" class="headerlink" title="3. 路由节点设计"></a>3. 路由节点设计</h6><p>gin的路由是通过切片存储node组成一个tree的方式来进行设计的，在每个node中有对应的路由处理器HandlersChain</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> node <span class="hljs-keyword">struct</span> &#123;<br>path      <span class="hljs-type">string</span> <span class="hljs-comment">//路由路径</span><br>indices   <span class="hljs-type">string</span><span class="hljs-comment">//</span><br>wildChild <span class="hljs-type">bool</span><br>nType     nodeType<span class="hljs-comment">//root根路由(非子节点)/statis/...</span><br>priority  <span class="hljs-type">uint32</span><br>    <span class="hljs-comment">//子路由</span><br>children  []*node <span class="hljs-comment">// child nodes, at most 1 :param style node at the end of the array</span><br>handlers  HandlersChain <span class="hljs-comment">//该路由对应的处理器</span><br>fullPath  <span class="hljs-type">string</span><span class="hljs-comment">//全路径</span><br>&#125;<br></code></pre></td></tr></table></figure><h6 id="4-添加路由"><a href="#4-添加路由" class="headerlink" title="4.添加路由"></a>4.添加路由</h6><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(engine *Engine)</span></span> addRoute(method, path <span class="hljs-type">string</span>, handlers HandlersChain) &#123;<br>assert1(path[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-string">&quot;path must begin with &#x27;/&#x27;&quot;</span>)<br>assert1(method != <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;HTTP method can not be empty&quot;</span>)<br>assert1(<span class="hljs-built_in">len</span>(handlers) &gt; <span class="hljs-number">0</span>, <span class="hljs-string">&quot;there must be at least one handler&quot;</span>)<br><br>debugPrintRoute(method, path, handlers)<br><br>root := engine.trees.get(method)<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br>root = <span class="hljs-built_in">new</span>(node)<br>root.fullPath = <span class="hljs-string">&quot;/&quot;</span><br>engine.trees = <span class="hljs-built_in">append</span>(engine.trees, methodTree&#123;method: method, root: root&#125;)<br>&#125;<br>root.addRoute(path, handlers)<br><br><span class="hljs-comment">// Update maxParams</span><br><span class="hljs-keyword">if</span> paramsCount := countParams(path); paramsCount &gt; engine.maxParams &#123;<br>engine.maxParams = paramsCount<br>&#125;<br><br><span class="hljs-keyword">if</span> sectionsCount := countSections(path); sectionsCount &gt; engine.maxSections &#123;<br>engine.maxSections = sectionsCount<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="5-处理请求入口"><a href="#5-处理请求入口" class="headerlink" title="5.处理请求入口"></a>5.处理请求入口</h6><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(engine *Engine)</span></span> ServeHTTP(w http.ResponseWriter, req *http.Request) &#123;<br>c := engine.pool.Get().(*Context)<br>c.writermem.reset(w)<br>c.Request = req<br>c.reset()<br><span class="hljs-comment">//主线：获取路由处理器进行调用</span><br>engine.handleHTTPRequest(c)<br><span class="hljs-comment">//把context放入并发安全的临时对象池中</span><br>engine.pool.Put(c)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(engine *Engine)</span></span> handleHTTPRequest(c *Context) &#123;<br>httpMethod := c.Request.Method<span class="hljs-comment">//请求方法</span><br>rPath := c.Request.URL.Path<span class="hljs-comment">//路径</span><br>unescape := <span class="hljs-literal">false</span><br><span class="hljs-keyword">if</span> engine.UseRawPath &amp;&amp; <span class="hljs-built_in">len</span>(c.Request.URL.RawPath) &gt; <span class="hljs-number">0</span> &#123;<br>rPath = c.Request.URL.RawPath<br>unescape = engine.UnescapePathValues<br>&#125;<br><br><span class="hljs-keyword">if</span> engine.RemoveExtraSlash &#123;<br>rPath = cleanPath(rPath)<br>&#125;<br><br><span class="hljs-comment">// Find root of the tree for the given HTTP method</span><br>t := engine.trees<span class="hljs-comment">//获取全局tree通过遍历的方式查找对应的路由处理器</span><br><span class="hljs-keyword">for</span> i, tl := <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(t); i &lt; tl; i++ &#123;<br><span class="hljs-keyword">if</span> t[i].method != httpMethod &#123;<span class="hljs-comment">//方法不匹配直接结束当前循环</span><br><span class="hljs-keyword">continue</span><br>&#125;<br>root := t[i].root<br>        <span class="hljs-comment">// 主线找到路由Tree中匹配的节点</span><br><span class="hljs-comment">// Find route in tree</span><br>value := root.getValue(rPath, c.params, c.skippedNodes, unescape)<br><span class="hljs-keyword">if</span> value.params != <span class="hljs-literal">nil</span> &#123;<br>c.Params = *value.params<br>&#125;<br><span class="hljs-keyword">if</span> value.handlers != <span class="hljs-literal">nil</span> &#123;<span class="hljs-comment">//如果对应的节点的处理器不为空则进行赋值给Context</span><br>c.handlers = value.handlers<br>c.fullPath = value.fullPath<br>c.Next()<span class="hljs-comment">//调用处理器链</span><br>c.writermem.WriteHeaderNow()<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">if</span> httpMethod != http.MethodConnect &amp;&amp; rPath != <span class="hljs-string">&quot;/&quot;</span> &#123;<br><span class="hljs-keyword">if</span> value.tsr &amp;&amp; engine.RedirectTrailingSlash &#123;<br>redirectTrailingSlash(c)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">if</span> engine.RedirectFixedPath &amp;&amp; redirectFixedPath(c, root, engine.RedirectFixedPath) &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">break</span><br>&#125;<br><br><span class="hljs-keyword">if</span> engine.HandleMethodNotAllowed &#123;<br><span class="hljs-keyword">for</span> _, tree := <span class="hljs-keyword">range</span> engine.trees &#123;<br><span class="hljs-keyword">if</span> tree.method == httpMethod &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-keyword">if</span> value := tree.root.getValue(rPath, <span class="hljs-literal">nil</span>, c.skippedNodes, unescape); value.handlers != <span class="hljs-literal">nil</span> &#123;<br>c.handlers = engine.allNoMethod<br>serveError(c, http.StatusMethodNotAllowed, default405Body)<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br>&#125;<br>c.handlers = engine.allNoRoute<br>serveError(c, http.StatusNotFound, default404Body)<br>&#125;<br></code></pre></td></tr></table></figure><p>查找路由树节点的方法</p><blockquote><p>github.com/gin-gonic/gin@v1.8.2/tree.go</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Returns the handle registered with the given path (key). The values of</span><br><span class="hljs-comment">// wildcards are saved to a map.</span><br><span class="hljs-comment">// If no handle can be found, a TSR (trailing slash redirect) recommendation is</span><br><span class="hljs-comment">// made if a handle exists with an extra (without the) trailing slash for the</span><br><span class="hljs-comment">// given path.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(n *node)</span></span> getValue(path <span class="hljs-type">string</span>, params *Params, skippedNodes *[]skippedNode, unescape <span class="hljs-type">bool</span>) (value nodeValue) &#123;<br><span class="hljs-keyword">var</span> globalParamsCount <span class="hljs-type">int16</span><br>walk: <span class="hljs-comment">// Outer loop for walking the tree</span><br><span class="hljs-keyword">for</span> &#123;<br>prefix := n.path<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(path) &gt; <span class="hljs-built_in">len</span>(prefix) &#123;<br><span class="hljs-keyword">if</span> path[:<span class="hljs-built_in">len</span>(prefix)] == prefix &#123;<br>path = path[<span class="hljs-built_in">len</span>(prefix):]<br><br><span class="hljs-comment">// Try all the non-wildcard children first by matching the indices</span><br>idxc := path[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">for</span> i, c := <span class="hljs-keyword">range</span> []<span class="hljs-type">byte</span>(n.indices) &#123;<br><span class="hljs-keyword">if</span> c == idxc &#123;<br><span class="hljs-comment">//  strings.HasPrefix(n.children[len(n.children)-1].path, &quot;:&quot;) == n.wildChild</span><br><span class="hljs-keyword">if</span> n.wildChild &#123;<br>index := <span class="hljs-built_in">len</span>(*skippedNodes)<br>*skippedNodes = (*skippedNodes)[:index+<span class="hljs-number">1</span>]<br>(*skippedNodes)[index] = skippedNode&#123;<br>path: prefix + path,<br>node: &amp;node&#123;<br>path:      n.path,<br>wildChild: n.wildChild,<br>nType:     n.nType,<br>priority:  n.priority,<br>children:  n.children,<br>handlers:  n.handlers,<br>fullPath:  n.fullPath,<br>&#125;,<br>paramsCount: globalParamsCount,<br>&#125;<br>&#125;<br><br>n = n.children[i]<br><span class="hljs-keyword">continue</span> walk<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> !n.wildChild &#123;<br><span class="hljs-comment">// If the path at the end of the loop is not equal to &#x27;/&#x27; and the current node has no child nodes</span><br><span class="hljs-comment">// the current node needs to roll back to last vaild skippedNode</span><br><span class="hljs-keyword">if</span> path != <span class="hljs-string">&quot;/&quot;</span> &#123;<br><span class="hljs-keyword">for</span> l := <span class="hljs-built_in">len</span>(*skippedNodes); l &gt; <span class="hljs-number">0</span>; &#123;<br>skippedNode := (*skippedNodes)[l<span class="hljs-number">-1</span>]<br>*skippedNodes = (*skippedNodes)[:l<span class="hljs-number">-1</span>]<br><span class="hljs-keyword">if</span> strings.HasSuffix(skippedNode.path, path) &#123;<br>path = skippedNode.path<br>n = skippedNode.node<br><span class="hljs-keyword">if</span> value.params != <span class="hljs-literal">nil</span> &#123;<br>*value.params = (*value.params)[:skippedNode.paramsCount]<br>&#125;<br>globalParamsCount = skippedNode.paramsCount<br><span class="hljs-keyword">continue</span> walk<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Nothing found.</span><br><span class="hljs-comment">// We can recommend to redirect to the same URL without a</span><br><span class="hljs-comment">// trailing slash if a leaf exists for that path.</span><br>value.tsr = path == <span class="hljs-string">&quot;/&quot;</span> &amp;&amp; n.handlers != <span class="hljs-literal">nil</span><br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// Handle wildcard child, which is always at the end of the array</span><br>n = n.children[<span class="hljs-built_in">len</span>(n.children)<span class="hljs-number">-1</span>]<br>globalParamsCount++<br><br><span class="hljs-keyword">switch</span> n.nType &#123;<br><span class="hljs-keyword">case</span> param:<br><span class="hljs-comment">// fix truncate the parameter</span><br><span class="hljs-comment">// tree_test.go  line: 204</span><br><br><span class="hljs-comment">// Find param end (either &#x27;/&#x27; or path end)</span><br>end := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> end &lt; <span class="hljs-built_in">len</span>(path) &amp;&amp; path[end] != <span class="hljs-string">&#x27;/&#x27;</span> &#123;<br>end++<br>&#125;<br><br><span class="hljs-comment">// Save param value</span><br><span class="hljs-keyword">if</span> params != <span class="hljs-literal">nil</span> &amp;&amp; <span class="hljs-built_in">cap</span>(*params) &gt; <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">if</span> value.params == <span class="hljs-literal">nil</span> &#123;<br>value.params = params<br>&#125;<br><span class="hljs-comment">// Expand slice within preallocated capacity</span><br>i := <span class="hljs-built_in">len</span>(*value.params)<br>*value.params = (*value.params)[:i+<span class="hljs-number">1</span>]<br>val := path[:end]<br><span class="hljs-keyword">if</span> unescape &#123;<br><span class="hljs-keyword">if</span> v, err := url.QueryUnescape(val); err == <span class="hljs-literal">nil</span> &#123;<br>val = v<br>&#125;<br>&#125;<br>(*value.params)[i] = Param&#123;<br>Key:   n.path[<span class="hljs-number">1</span>:],<br>Value: val,<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// we need to go deeper!</span><br><span class="hljs-keyword">if</span> end &lt; <span class="hljs-built_in">len</span>(path) &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(n.children) &gt; <span class="hljs-number">0</span> &#123;<br>path = path[end:]<br>n = n.children[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">continue</span> walk<br>&#125;<br><br><span class="hljs-comment">// ... but we can&#x27;t</span><br>value.tsr = <span class="hljs-built_in">len</span>(path) == end+<span class="hljs-number">1</span><br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-keyword">if</span> value.handlers = n.handlers; value.handlers != <span class="hljs-literal">nil</span> &#123;<br>value.fullPath = n.fullPath<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(n.children) == <span class="hljs-number">1</span> &#123;<br><span class="hljs-comment">// No handle found. Check if a handle for this path + a</span><br><span class="hljs-comment">// trailing slash exists for TSR recommendation</span><br>n = n.children[<span class="hljs-number">0</span>]<br>value.tsr = (n.path == <span class="hljs-string">&quot;/&quot;</span> &amp;&amp; n.handlers != <span class="hljs-literal">nil</span>) || (n.path == <span class="hljs-string">&quot;&quot;</span> &amp;&amp; n.indices == <span class="hljs-string">&quot;/&quot;</span>)<br>&#125;<br><span class="hljs-keyword">return</span><br><br><span class="hljs-keyword">case</span> catchAll:<br><span class="hljs-comment">// Save param value</span><br><span class="hljs-keyword">if</span> params != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> value.params == <span class="hljs-literal">nil</span> &#123;<br>value.params = params<br>&#125;<br><span class="hljs-comment">// Expand slice within preallocated capacity</span><br>i := <span class="hljs-built_in">len</span>(*value.params)<br>*value.params = (*value.params)[:i+<span class="hljs-number">1</span>]<br>val := path<br><span class="hljs-keyword">if</span> unescape &#123;<br><span class="hljs-keyword">if</span> v, err := url.QueryUnescape(path); err == <span class="hljs-literal">nil</span> &#123;<br>val = v<br>&#125;<br>&#125;<br>(*value.params)[i] = Param&#123;<br>Key:   n.path[<span class="hljs-number">2</span>:],<br>Value: val,<br>&#125;<br>&#125;<br><br>value.handlers = n.handlers<br>value.fullPath = n.fullPath<br><span class="hljs-keyword">return</span><br><br><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;invalid node type&quot;</span>)<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> path == prefix &#123;<br><span class="hljs-comment">// If the current path does not equal &#x27;/&#x27; and the node does not have a registered handle and the most recently matched node has a child node</span><br><span class="hljs-comment">// the current node needs to roll back to last vaild skippedNode</span><br><span class="hljs-keyword">if</span> n.handlers == <span class="hljs-literal">nil</span> &amp;&amp; path != <span class="hljs-string">&quot;/&quot;</span> &#123;<br><span class="hljs-keyword">for</span> l := <span class="hljs-built_in">len</span>(*skippedNodes); l &gt; <span class="hljs-number">0</span>; &#123;<br>skippedNode := (*skippedNodes)[l<span class="hljs-number">-1</span>]<br>*skippedNodes = (*skippedNodes)[:l<span class="hljs-number">-1</span>]<br><span class="hljs-keyword">if</span> strings.HasSuffix(skippedNode.path, path) &#123;<br>path = skippedNode.path<br>n = skippedNode.node<br><span class="hljs-keyword">if</span> value.params != <span class="hljs-literal">nil</span> &#123;<br>*value.params = (*value.params)[:skippedNode.paramsCount]<br>&#125;<br>globalParamsCount = skippedNode.paramsCount<br><span class="hljs-keyword">continue</span> walk<br>&#125;<br>&#125;<br><span class="hljs-comment">//n = latestNode.children[len(latestNode.children)-1]</span><br>&#125;<br><span class="hljs-comment">// We should have reached the node containing the handle.</span><br><span class="hljs-comment">// Check if this node has a handle registered.</span><br><span class="hljs-keyword">if</span> value.handlers = n.handlers; value.handlers != <span class="hljs-literal">nil</span> &#123;<br>value.fullPath = n.fullPath<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// If there is no handle for this route, but this route has a</span><br><span class="hljs-comment">// wildcard child, there must be a handle for this path with an</span><br><span class="hljs-comment">// additional trailing slash</span><br><span class="hljs-keyword">if</span> path == <span class="hljs-string">&quot;/&quot;</span> &amp;&amp; n.wildChild &amp;&amp; n.nType != root &#123;<br>value.tsr = <span class="hljs-literal">true</span><br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-keyword">if</span> path == <span class="hljs-string">&quot;/&quot;</span> &amp;&amp; n.nType == static &#123;<br>value.tsr = <span class="hljs-literal">true</span><br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// No handle found. Check if a handle for this path + a</span><br><span class="hljs-comment">// trailing slash exists for trailing slash recommendation</span><br><span class="hljs-keyword">for</span> i, c := <span class="hljs-keyword">range</span> []<span class="hljs-type">byte</span>(n.indices) &#123;<br><span class="hljs-keyword">if</span> c == <span class="hljs-string">&#x27;/&#x27;</span> &#123;<br>n = n.children[i]<br>value.tsr = (<span class="hljs-built_in">len</span>(n.path) == <span class="hljs-number">1</span> &amp;&amp; n.handlers != <span class="hljs-literal">nil</span>) ||<br>(n.nType == catchAll &amp;&amp; n.children[<span class="hljs-number">0</span>].handlers != <span class="hljs-literal">nil</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// Nothing found. We can recommend to redirect to the same URL with an</span><br><span class="hljs-comment">// extra trailing slash if a leaf exists for that path</span><br>value.tsr = path == <span class="hljs-string">&quot;/&quot;</span> ||<br>(<span class="hljs-built_in">len</span>(prefix) == <span class="hljs-built_in">len</span>(path)+<span class="hljs-number">1</span> &amp;&amp; prefix[<span class="hljs-built_in">len</span>(path)] == <span class="hljs-string">&#x27;/&#x27;</span> &amp;&amp;<br>path == prefix[:<span class="hljs-built_in">len</span>(prefix)<span class="hljs-number">-1</span>] &amp;&amp; n.handlers != <span class="hljs-literal">nil</span>)<br><br><span class="hljs-comment">// roll back to last valid skippedNode</span><br><span class="hljs-keyword">if</span> !value.tsr &amp;&amp; path != <span class="hljs-string">&quot;/&quot;</span> &#123;<br><span class="hljs-keyword">for</span> l := <span class="hljs-built_in">len</span>(*skippedNodes); l &gt; <span class="hljs-number">0</span>; &#123;<br>skippedNode := (*skippedNodes)[l<span class="hljs-number">-1</span>]<br>*skippedNodes = (*skippedNodes)[:l<span class="hljs-number">-1</span>]<br><span class="hljs-keyword">if</span> strings.HasSuffix(skippedNode.path, path) &#123;<br>path = skippedNode.path<br>n = skippedNode.node<br><span class="hljs-keyword">if</span> value.params != <span class="hljs-literal">nil</span> &#123;<br>*value.params = (*value.params)[:skippedNode.paramsCount]<br>&#125;<br>globalParamsCount = skippedNode.paramsCount<br><span class="hljs-keyword">continue</span> walk<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h6 id="6-分析总结"><a href="#6-分析总结" class="headerlink" title="6.分析总结"></a>6.分析总结</h6><p><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/2630542/1672913350490-9351d5c4-0205-436e-9084-43b50c480359.jpeg"></p><p>Gin的路由设计总体还是非常简洁的，这也是他高效的原因，我们通过创建engine的时候会初始化缺省的根路由，其总体的路由是以tree的结构进行存储，在查找时优先通过请求方法和路径获取我们对应的tree节点，得到节点来进行调用节点的处理器</p><h1 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h1><p><a href="https://github.com/gin-gonic/gin">官网文档</a> ：<a href="https://github.com/gin-gonic/gin">https://github.com/gin-gonic/gin</a><br><a href="https://geektutu.com/post/quick-go-gin.html">参考博文</a> ：<a href="https://geektutu.com/post/quick-go-gin.html">https://geektutu.com/post/quick-go-gin.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>gin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux篇-Centos安装图形化界面</title>
    <link href="/2018/07/05/yuque/sgxgae/"/>
    <url>/2018/07/05/yuque/sgxgae/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1657548483419-5019e2eb-9d2f-4114-b89b-8aedb681ff49.png#clientId=ub9a4d456-3928-4&from=markdown&id=cwgs8&originHeight=725&originWidth=1161&originalType=url&ratio=1&rotation=0&showTitle=false&size=508448&status=done&style=none&taskId=u4cf3529d-16e8-48f7-b180-9c8d734e8a2&title=" alt="image.png"></p><blockquote><p>最近有重新来捣鼓捣鼓Linux了，这次撸的版本是centos7.4的，虽然说是不要桌面，但是感觉初学者还是安装一下比较好balalalala。。。。。。。。。废话不说的直接进入正题：</p></blockquote><h1 id="安装X"><a href="#安装X" class="headerlink" title="安装X"></a>安装X</h1><blockquote><p>首先安装X(X Window System),如果不是root用户请先切换到root用户才能操作，命令为：</p></blockquote><p><code>su root</code></p><p>命令为</p><p><code>yum groupinstall &quot;X Window System&quot;</code></p><p>回车，安装时间可能会比较长，安装完出现complete！提示，如果出现要确认其他信息则一路输入输入 “y”回车</p><p>查看已装软件及可装软件：</p><p><code>yum grouplist</code></p><p>由于本屌已经安装好了所以就在已经安装的分组的啦</p><h1 id="安装图形界面软件GNOME-GNOME-Desktop"><a href="#安装图形界面软件GNOME-GNOME-Desktop" class="headerlink" title="安装图形界面软件GNOME(GNOME Desktop)"></a>安装图形界面软件GNOME(GNOME Desktop)</h1><blockquote><p>这里需要特别注意！！！！一定要注意 名称必须对应 不同版本的centOS的软件名可能不同 其他Linux系统类似否则会出现No packages in any requested group available to install or update 的错误。</p></blockquote><p><code>yum groupinstall &quot;GNOME Desktop&quot;</code></p><p>回车，出现提示一路输入”y”确认</p><p>这次的安装会更慢，内心等待，安装完会出现complete！提示。</p><h1 id="进入图形化界面"><a href="#进入图形化界面" class="headerlink" title="进入图形化界面"></a>进入图形化界面</h1><p>输入</p><p><code>startX</code></p><p>速度可能比较慢，可尝试重启</p><p><code>reboot</code></p><p>完成.</p>]]></content>
    
    
    <categories>
      
      <category>Linux学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java篇-多线程</title>
    <link href="/2018/05/30/yuque/mvszky/"/>
    <url>/2018/05/30/yuque/mvszky/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/2630542/1657545538369-a097a44a-0930-410f-aab5-6c013fb53dd5.jpeg#averageHue=%23473e39&clientId=u5ef7fb1f-43fd-4&from=markdown&id=ftPR1&originHeight=338&originWidth=600&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=ude07ca71-cef1-48b7-8c99-a4a69c30204&title="></p><h1 id="Java-并发知识库"><a href="#Java-并发知识库" class="headerlink" title="Java 并发知识库"></a>Java 并发知识库</h1><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/thread.png#id=yzIog&originHeight=681&originWidth=1381&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h1 id="Java线程实现-创建方式"><a href="#Java线程实现-创建方式" class="headerlink" title="Java线程实现/创建方式"></a>Java线程实现/创建方式</h1><h2 id="继承Thread"><a href="#继承Thread" class="headerlink" title="继承Thread"></a>继承Thread</h2><blockquote><p>Thread类本质上是实现了<code>Runnable</code>接口的一个实例，代表一个线程的实例。启动线程的唯一方法就是通过<code>Thread</code>类的<code>start</code>实例方法。start方法是一个native方法，它将启动一个新的线程，并执行run()方法。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;MyThread.run()&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">MyThread</span> <span class="hljs-variable">myThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br><br>myThread.start();<br></code></pre></td></tr></table></figure><h2 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h2><blockquote><p>实现Runnable接口</p></blockquote><p>如果自己的类已经extends另一个类，就无法直接extends Thread此时，可以实现一个Runnable接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">OtherClass</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span> <span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;MyThread.run()&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//启动 MyThread,需要首先实例化一个 Thread,并传入自己的 MyThread 实例:</span><br><br><span class="hljs-type">MyThread</span> <span class="hljs-variable">myThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br><span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myThread);<br>thread.start();<br><br><span class="hljs-comment">//事实上,当传入一个 Runnable target 参数给 Thread 后,Thread 的 run()方法就会调用</span><br>target.run()<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (target != <span class="hljs-literal">null</span>) &#123;<br>        target.run();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="执行器方式"><a href="#执行器方式" class="headerlink" title="执行器方式"></a>执行器方式</h2><blockquote><p>有返回值的任务必须实现 Callable 接口,类似的,无返回值的任务必须 Runnable 接口。执行Callable 任务后,可以获取一个 Future 的对象,在该对象上调用 get 就可以获取到 Callable 任务返回的 Object 了,再结合线程池接口 ExecutorService 就可以实现传说中有返回结果的多线程了。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建一个线程池</span><br><span class="hljs-type">ExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(taskSize);<br><span class="hljs-comment">// 创建多个有返回值的任务</span><br>List&lt;Future&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Future&gt;();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; taskSize; i++) &#123;<br><span class="hljs-type">Callable</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>(i + <span class="hljs-string">&quot; &quot;</span>);<br><span class="hljs-comment">// 执行任务并获取 Future 对象</span><br><span class="hljs-type">Future</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> pool.submit(c);<br>list.add(f);<br>&#125;<br><span class="hljs-comment">// 关闭线程池</span><br>pool.shutdown();<br><span class="hljs-comment">// 获取所有并发任务的运行结果</span><br><span class="hljs-keyword">for</span> (Future f : list) &#123;<br><span class="hljs-comment">// 从 Future 对象上获取任务的返回值,并输出到控制台</span><br>System.out.println(<span class="hljs-string">&quot;res:&quot;</span> + f.get().toString());<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="线程池方式"><a href="#线程池方式" class="headerlink" title="线程池方式"></a>线程池方式</h2><blockquote><p>线程和数据库连接这些资源都是非常宝贵的资源。那么每次需要的时候创建,不需要的时候销毁,是非常浪费资源的。那么我们就可以使用缓存的策略,也就是使用线程池。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建线程池</span><br><span class="hljs-type">ExecutorService</span> <span class="hljs-variable">threadPool</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">10</span>);<br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>    threadPool.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123; <span class="hljs-comment">// 提交多个线程任务,并执行</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; is running ..&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">3000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>       &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4种线程池"><a href="#4种线程池" class="headerlink" title="4种线程池"></a>4种线程池</h3><blockquote><p>Java 里面线程池的顶级接口是 Executor,但是严格意义上讲 Executor 并不是一个线程池,而只是一个执行线程的工具。真正的线程池接口是 ExecutorService。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/threadpool.png#id=yOJZh&originHeight=765&originWidth=811&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><ul><li>NewCachedThreadPool</li></ul><blockquote><p>创建一个可根据需要创建新线程的线程池，但是在以前构造的线程可用时将重用他们。对于执行很多短期异步任务的程序而言，这些线程池通常可提高程序性能<br><code>调用 execute 将重用以前构造 的线程(如果线程可用)。如果现有线程没有可用的,则创建一个新线程并添加到池中。终止并 从缓存中移除那些已有 60 秒钟未被使用的线程。</code>因此,长时间保持空闲的线程池不会使用任何资源。</p></blockquote><ul><li>newFixedThreadPool</li></ul><blockquote><p>创建一个可重用固定线程数的线程池,以共享的无界队列方式来运行这些线程。在任意点,在大<br>多数 nThreads 线程会处于处理任务的活动状态。如果在所有线程处于活动状态时提交附加任务,<br>则在有可用线程之前,附加任务将在队列中等待。如果在关闭前的执行期间由于失败而导致任何<br>线程终止,那么一个新线程将代替它执行后续的任务(如果需要)。在某个线程被显式地关闭之<br>前,池中的线程将一直存在。</p></blockquote><ul><li>newScheduledThreadPool</li></ul><blockquote><p>创建一个线程池,它可安排在给定延迟后运行命令或者定期地执行。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadPool</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        ScheduledExecutorService scheduledThreadPool= Executors.newScheduledThreadPool(<span class="hljs-number">3</span>);<br>        scheduledThreadPool.schedule(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>()&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;延迟三秒&quot;</span>);<br>            &#125;<br>        &#125;, <span class="hljs-number">3</span>, TimeUnit.SECONDS);<br>        scheduledThreadPool.scheduleAtFixedRate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>()&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;延迟 1 秒后每三秒执行一次&quot;</span>);<br>            &#125;<br>        &#125;,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,TimeUnit.SECONDS);<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>newSingleThreadExecutor</li></ul><blockquote><p>Executors.newSingleThreadExecutor()返回一个线程池(这个线程池只有一个线程),这个线程池可以在线程死后(或发生异常时)重新启动一个线程来替代原来的线程继续执行下去!</p></blockquote><h1 id="线程生命周期-状态"><a href="#线程生命周期-状态" class="headerlink" title="线程生命周期(状态)"></a>线程生命周期(状态)</h1><blockquote><p>当线程被创建并启动以后,它既不是一启动就进入了执行状态,也不是一直处于执行状态。在线程的生命周期中,它要经过新建(New)、就绪(Runnable)、运行(Running)、阻塞(Blocked)和死亡(Dead)5 种状态。尤其是当线程启动以后,它不可能一直”霸占”着 CPU 独自运行,所以 CPU 需要在多条线程之间切换,于是线程状态也会多次在运行、阻塞之间切换</p></blockquote><ul><li> 新建状态(NEW)<br>当程序使用 new 关键字创建了一个线程之后,该线程就处于新建状态,此时仅由 JVM 为其分配<br>内存,并初始化其成员变量的值 </li><li> 就绪状态(RUNNABLE):<br>当线程对象调用了 start()方法之后,该线程处于就绪状态。Java 虚拟机会为其创建方法调用栈和<br>程序计数器,等待调度运行。 </li><li> 运行状态(RUNNING):<br>如果处于就绪状态的线程获得了 CPU,开始执行 run()方法的线程执行体,则该线程处于运行状<br>态。 </li><li>阻塞状态(BLOCKED):<br>阻塞状态是指线程因为某种原因放弃了 cpu 使用权,也即让出了 cpu timeslice,暂时停止运行。<br>直到线程进入可运行(runnable)状态,才有机会再次获得 cpu timeslice 转到运行(running)状<br>态。阻塞的情况分三种: <ul><li>等待阻塞( o.wait-&gt; 等待对列):<br>运行(running)的线程执行 o.wait()方法,JVM 会把该线程放入等待队列(waitting queue)中。</li><li>同步阻塞 (lock-&gt; 锁池 )<br>运行(running)的线程在获取对象的同步锁时,若该同步锁被别的线程占用,则 JVM 会把该线</li><li>程放入锁池(lock pool)中。</li></ul></li></ul><p>其他阻塞 (sleep/join)</p><ul><li><p>运行(running)的线程执行 Thread.sleep(long ms)或 t.join()方法,或者发出了 I/O 请求时,JVM 会把该线程置为阻塞状态。当 sleep()状态超时、join()等待线程终止或者超时、或者 I/O处理完毕时,线程重新转入可运行(runnable)状态。 </p></li><li><p> 线程死亡(DEAD)<br>线程会以下面三种方式结束,结束后就是死亡状态。<br><em>正常结束</em> </p><blockquote><p>1.run()或 call()方法执行完成,线程正常结束。</p></blockquote></li></ul><p><em>异常结束</em><br><em>调用 stop</em>  </p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/QQ%E5%9B%BE%E7%89%8720200610172044.png#id=DCC6y&originHeight=435&originWidth=1165&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="终止线程-4-种方式"><a href="#终止线程-4-种方式" class="headerlink" title="终止线程 4 种方式"></a>终止线程 4 种方式</h2><ul><li>正常运行结束</li></ul><blockquote><p>程序运行结束,线程自动结束。</p></blockquote><ul><li>使用退出标志退出线程</li></ul><blockquote><p>一般 run()方法执行完,线程就会正常结束,然而,常常有些线程是伺服线程。它们需要长时间的运行,只有在外部某些条件满足的情况下,才能关闭这些线程。使用一个变量来控制循环,例如:最直接的方法就是设一个 boolean 类型的标志,并通过设置这个标志为 true 或 false 来控制 while<br>循环是否退出,代码示例:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadSafe</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">exit</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">while</span> (!exit)&#123;<br>           <span class="hljs-comment">//do something</span><br>       &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义了一个退出标志 exit,当 exit 为 true 时,while 循环退出,exit 的默认值为 false.在定义 exit<br>时,使用了一个 Java 关键字 volatile,这个关键字的目的是使 exit 同步,也就是说在同一时刻只<br>能由一个线程来修改 exit 的值。</p><ul><li>Interrupt 方法结束线程</li></ul><blockquote><p>使用 interrupt()方法来中断线程有两种情况:</p></blockquote><p>1.线程处于阻塞状态:如使用了 sleep,同步锁的 wait,socket 中的 receiver,accept 等方法时,<br>会使线程处于阻塞状态。当调用线程的 interrupt()方法时,会抛出 InterruptException 异常。<br>阻塞中的那个方法抛出这个异常,通过代码捕获该异常,然后 break 跳出循环状态,从而让<br>我们有机会结束这个线程的执行。通常很多人认为只要调用 interrupt 方法线程就会结束,实<br>际上是错的, 一定要先捕获 InterruptedException 异常之后通过 break 来跳出循环,才能正<br>常结束 run 方法。</p><p>2.线程未处于阻塞状态:使用 isInterrupted()判断线程的中断标志来退出循环。当使用<br>interrupt()方法时,中断标志就会置 true,和使用自定义的标志来控制循环是一样的道理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadSafe</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">while</span> (!isInterrupted())&#123; <span class="hljs-comment">//非阻塞过程中通过判断中断标志来退出</span><br>           <span class="hljs-keyword">try</span>&#123;<br>               Thread.sleep(<span class="hljs-number">5</span>*<span class="hljs-number">1000</span>);<span class="hljs-comment">//阻塞过程捕获中断异常来退出</span><br>           &#125;<span class="hljs-keyword">catch</span>(InterruptedException e)&#123;<br>               e.printStackTrace();<br>               <span class="hljs-keyword">break</span>;<span class="hljs-comment">//捕获到异常之后,执行 break 跳出循环</span><br>           &#125;<br>       &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>stop 方法终止线程(线程不安全)</li></ul><blockquote><p>程序中可以直接使用 thread.stop()来强行终止线程,但是 stop 方法是很危险的,就象突然关<br>闭计算机电源,而不是按正常程序关机一样,可能会产生不可预料的结果,不安全主要是:<br>thread.stop()调用之后,创建子线程的线程就会抛出 ThreadDeatherror 的错误,并且会释放子<br>线程所持有的所有锁。一般任何进行加锁的代码块,都是为了保护数据的一致性,如果在<code>调用 thread.stop()后导致了该线程所持有的所有锁的突然释放(不可控制)</code>,那么被保护数据就有可能呈<br>现不一致性,其他线程在使用这些被破坏的数据时,有可能导致一些很奇怪的应用程序错误。因<br>此,并不推荐使用 stop 方法来终止线程。</p></blockquote><h2 id="sleep-与-wait-区别"><a href="#sleep-与-wait-区别" class="headerlink" title="sleep 与 wait 区别"></a>sleep 与 wait 区别</h2><p>1.对于 sleep()方法,我们首先要知道该方法是属于 Thread 类中的。而 wait()方法,则是属于Object 类中的。<br>2.sleep()方法导致了程序暂停执行指定的时间,让出 cpu 该其他线程,但是他的监控状态依然保持者,当指定的时间到了又会自动恢复运行状态。<br>3. 在调用 sleep()方法的过程中,线程不会释放对象锁。<br>4. 而当调用 wait()方法的时候,线程会放弃对象锁,进入等待此对象的等待锁定池,只有针对此对象调用 notify()方法后本线程才进入对象锁定池准备获取对象锁进入运行状态。</p><h2 id="start-与-run-区别"><a href="#start-与-run-区别" class="headerlink" title="start 与 run 区别"></a>start 与 run 区别</h2><p>1.start()方法来启动线程,真正实现了多线程运行。这时无需等待 run 方法体代码执行完毕,可以直接继续执行下面的代码。<br>2.通过调用 Thread 类的 start()方法来启动一个线程, 这时此线程是处于就绪状态, 并没有运行。<br>3.方法 run()称为线程体,它包含了要执行的这个线程的内容,线程就进入了运行状态,开始运行 run 函数当中的代码。 Run 方法运行结束, 此线程终止。然后 CPU 再调度其它线程。</p><h2 id="JAVA-后台线程"><a href="#JAVA-后台线程" class="headerlink" title="JAVA 后台线程"></a>JAVA 后台线程</h2><p>1.定义:守护线程–也称“服务线程”,他是后台线程,它有一个特性,即为用户线程 提供 公共服务,在没有用户线程可服务时会自动离开。</p><p>2.优先级:守护线程的优先级比较低,用于为系统中的其它对象和线程提供服务。</p><p>3.设置:通过 setDaemon(true)来设置线程为“守护线程”;将一个用户线程设置为守护线程的方式是在 线程对象创建 之前 用线程对象的 setDaemon 方法。</p><p>4.在 Daemon 线程中产生的新线程也是 Daemon 的。</p><p>5.线程则是 JVM 级别的,以 Tomcat 为例,如果你在 Web 应用中启动一个线程,这个线程的生命周期并不会和 Web 应用程序保持同步。也就是说,即使你停止了 Web 应用,这个线程依旧是活跃的。</p><p>6.example: 垃圾回收线程就是一个经典的守护线程,当我们的程序中不再有任何运行的 Thread,程序就不会再产生垃圾,垃圾回收器也就无事可做,所以当垃圾回收线程是 JVM 上仅剩的线程时,垃圾回收线程会自动离开。它始终在低级别的状态中运行,用于实时监控和管理系统中的可回收资源。</p><p>7.生命周期:守护进程(Daemon)是运行在后台的一种特殊进程。它独立于控制终端并且周期性地执行某种任务或等待处理某些发生的事件。也就是说守护线程不依赖于终端,但是依赖于系统,与系统“同生共死”。当 JVM 中所有的线程都是守护线程的时候,JVM 就可以退出了;如果还有一个或以上的非守护线程则 JVM 不会退出。</p><h1 id="JAVA-锁"><a href="#JAVA-锁" class="headerlink" title="JAVA 锁"></a>JAVA 锁</h1><h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><blockquote><p>乐观锁是一种乐观思想,即认为读多写少,遇到并发写的可能性低,每次去拿数据的时候都认为别人不会修改,所以不会上锁,但是在更新的时候会判断一下在此期间别人有没有去更新这个数据,<br>采取在写时先读出当前版本号,然后加锁操作(比较跟上一次的版本号,如果一样则更新),如果失败则要重复读-比较-写的操作。java 中的乐观锁基本都是通过 CAS 操作实现的,CAS 是一种更新的原子操作,<br>比较当前值跟传入值是否一样,一样则更新,否则失败。</p></blockquote><h2 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h2><blockquote><p>悲观锁是就是悲观思想,即认为写多,遇到并发写的可能性高,每次去拿数据的时候都认为别人<br>会修改,所以每次在读写数据的时候都会上锁,这样别人想读写这个数据就会 block 直到拿到锁。<br>java 中的悲观锁就是 Synchronized,AQS 框架下的锁则是先尝试 cas 乐观锁去获取锁,获取不到,<br>才会转换为悲观锁,如 RetreenLock。</p></blockquote><h2 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h2><blockquote><p>自旋锁原理非常简单,如果持有锁的线程能在很短时间内释放锁资源,那么那些等待竞争锁<br>的线程就不需要做内核态和用户态之间的切换进入阻塞挂起状态,它们只需要等一等(自旋),<br>等持有锁的线程释放锁后即可立即获取锁,这样就避免用户线程和内核的切换的消耗。<br>线程自旋是需要消耗 cup 的,说白了就是让 cup 在做无用功,如果一直获取不到锁,那线程<br>也不能一直占用 cup 自旋做无用功,所以需要设定一个自旋等待的最大时间。<br>如果持有锁的线程执行的时间超过自旋等待的最大时间扔没有释放锁,就会导致其它争用锁<br>的线程在最大等待时间内还是获取不到锁,这时争用线程会停止自旋进入阻塞状态。</p></blockquote><p>自旋锁的优缺点</p><blockquote><p>自旋锁尽可能的减少线程的阻塞,这对于锁的竞争不激烈,且占用锁时间非常短的代码块来<br>说性能能大幅度的提升,因为自旋的消耗会小于线程阻塞挂起再唤醒的操作的消耗,这些操作会<br>导致线程发生两次上下文切换!<br>但是如果锁的竞争激烈,或者持有锁的线程需要长时间占用锁执行同步块,这时候就不适合<br>使用自旋锁了,因为自旋锁在获取锁前一直都是占用 cpu 做无用功,占着 XX 不 XX,同时有大量<br>线程在竞争一个锁,会导致获取锁的时间很长,线程自旋的消耗大于线程阻塞挂起操作的消耗,<br>其它需要 cup 的线程又不能获取到 cpu,造成 cpu 的浪费。所以这种情况下我们要关闭自旋锁;</p></blockquote><p>自旋锁时间阈值 ( 1.6 引入了适应性自旋锁)</p><blockquote><p>自旋锁的目的是为了占着 CPU 的资源不释放,等到获取到锁立即进行处理。但是如何去选择<br>自旋的执行时间呢?如果自旋执行时间太长,会有大量的线程处于自旋状态占用 CPU 资源,进而<br>会影响整体系统的性能。因此自旋的周期选的额外重要!JVM 对于自旋周期的选择,jdk1.5 这个限度是一定的写死的,在 1.6 引入了适应性自旋锁,适应<br>性自旋锁意味着自旋的时间不在是固定的了,而是由前一次在同一个锁上的自旋时间以及锁的拥<br>有者的状态来决定,基本认为一个线程上下文切换的时间是最佳的一个时间,同时 JVM 还针对当<br>前 CPU 的负荷情况做了较多的优化,如果平均负载小于 CPUs 则一直自旋,如果有超过(CPUs/2)<br>个线程正在自旋,则后来线程直接阻塞,如果正在自旋的线程发现 Owner 发生了变化则延迟自旋<br>时间(自旋计数)或进入阻塞,如果 CPU 处于节电模式则停止自旋,自旋时间的最坏情况是 CPU<br>的存储延迟(CPU A 存储了一个数据,到 CPU B 得知这个数据直接的时间差),自旋时会适当放<br>弃线程优先级之间的差异。<br>自旋锁的开启<br>JDK1.6 中-XX:+UseSpinning 开启;<br><code>-XX:PreBlockSpin=10</code> 为自旋次数;<br>JDK1.7 后,去掉此参数,由 jvm 控制;</p></blockquote><h3 id="Synchronized-同步锁"><a href="#Synchronized-同步锁" class="headerlink" title="Synchronized 同步锁"></a>Synchronized 同步锁</h3><p>synchronized 它可以把任意一个非 NULL 的对象当作锁。他属于独占式的悲观锁,同时属于可重入锁。</p><p><strong>Synchronized 作用范围</strong><br>1.作用于方法时,锁住的是对象的实例(this);<br>2.当作用于静态方法时,锁住的是 Class 实例,又因为 Class 的相关数据存储在永久带 PermGen(jdk1.8 则是 metaspace),永久带是全局共享的,因此静态方法锁相当于类的一个全局锁,会锁所有调用该方法的线程;<br>3.synchronized 作用于一个对象实例时,锁住的是所有以该对象为锁的代码块。它有多个队列,当多个线程一起访问某个对象监视器的时候,对象监视器会将这些线程存储在不同的容器中。</p><p><strong>Synchronized 核心组件</strong></p><ol><li>Wait Set:哪些调用 wait 方法被阻塞的线程被放置在这里;</li><li>Contention List:竞争队列,所有请求锁的线程首先被放在这个竞争队列中;</li><li>Entry List:Contention List 中那些有资格成为候选资源的线程被移动到 Entry List 中;</li><li>OnDeck:任意时刻,最多只有一个线程正在竞争锁资源,该线程被成为 OnDeck;</li><li>Owner:当前已经获取到所资源的线程被称为 Owner;</li><li>!Owner:当前释放锁的线程。</li></ol><p><strong>Synchronized 实现</strong></p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/synchronized.png#id=Wknex&originHeight=462&originWidth=986&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><blockquote><p>1.JVM 每次从队列的尾部取出一个数据用于锁竞争候选者(OnDeck),但是并发情况下,<br>ContentionList 会被大量的并发线程进行 CAS 访问,为了降低对尾部元素的竞争,JVM 会将<br>一部分线程移动到 EntryList 中作为候选竞争线程。</p></blockquote><blockquote><p>2.Owner 线程会在 unlock 时,将 ContentionList 中的部分线程迁移到 EntryList 中,并指定<br>EntryList 中的某个线程为 OnDeck 线程(一般是最先进去的那个线程)。</p></blockquote><blockquote><p>3.Owner 线程并不直接把锁传递给 OnDeck 线程,而是把锁竞争的权利交给 OnDeck,<br>OnDeck 需要重新竞争锁。这样虽然牺牲了一些公平性,但是能极大的提升系统的吞吐量,在<br>JVM 中,也把这种选择行为称之为“竞争切换”。</p></blockquote><blockquote><p>4.OnDeck 线程获取到锁资源后会变为 Owner 线程,而没有得到锁资源的仍然停留在 EntryList<br>中。如果 Owner 线程被 wait 方法阻塞,则转移到 WaitSet 队列中,直到某个时刻通过 notify<br>或者 notifyAll 唤醒,会重新进去 EntryList 中。</p></blockquote><blockquote><p>5.处于 ContentionList、EntryList、WaitSet 中的线程都处于阻塞状态,该阻塞是由操作系统<br>来完成的(Linux 内核下采用 pthread_mutex_lock 内核函数实现的)。</p></blockquote><blockquote><p>6.Synchronized 是非公平锁。 Synchronized 在线程进入 ContentionList 时,等待的线程会先<br>尝试自旋获取锁,如果获取不到就进入 ContentionList,这明显对于已经进入队列的线程是<br>不公平的,还有一个不公平的事情就是自旋获取锁的线程还可能直接抢占 OnDeck 线程的锁<br>资源。<a href="https://blog.csdn.net/zqz_zqz/article/details/70233767">参考</a></p></blockquote><blockquote><p>7.每个对象都有个 monitor 对象,加锁就是在竞争 monitor 对象,代码块加锁是在前后分别加<br>上 monitorenter 和 monitorexit 指令来实现的,方法加锁是通过一个标记位来判断的</p></blockquote><blockquote><p>8.synchronized 是一个重量级操作,需要调用操作系统相关接口,性能是低效的,有可能给线程加锁消耗的时间比有用操作消耗的时间更多。</p></blockquote><blockquote><p>9.Java1.6,synchronized 进行了很多的优化,有适应自旋、锁消除、锁粗化、轻量级锁及偏向锁等,效率有了本质上的提高。在之后推出的 Java1.7 与 1.8 中,均对该关键字的实现机理做<br>了优化。引入了偏向锁和轻量级锁。都是在对象头中有标记位,不需要经过操作系统加锁。</p></blockquote><blockquote><p>10.锁可以从偏向锁升级到轻量级锁,再升级到重量级锁。这种升级过程叫做锁膨胀;</p></blockquote><blockquote><p>11.JDK 1.6 中默认是开启偏向锁和轻量级锁,可以通过<code>-XX:-UseBiasedLocking</code> 来禁用偏向锁。</p></blockquote><h1 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h1><blockquote><p>ReentantLock 继承接口 Lock 并实现了接口中定义的方法,他是一种可重入锁,除了能完成 synchronized 所能完成的所有工作外,还提供了诸如可响应中断锁、可轮询锁请求、定时锁等避免多线程死锁的方法。</p></blockquote><h3 id="Lock-接口的主要方法"><a href="#Lock-接口的主要方法" class="headerlink" title="Lock 接口的主要方法"></a>Lock 接口的主要方法</h3><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs latex">void lock(): 执行此方法时, 如果锁处于空闲状态, 当前线程将获取到锁. 相反, 如果锁已经被其他线程持有, 将禁用当前线程, 直到当前线程获取到锁.<br>boolean tryLock():如果锁可用, 则获取锁, 并立即返回 true, 否则返回 false. 该方法和lock()的区别在于, tryLock()只是&quot;试图&quot;获取锁, 如果锁不可用, 不会导致当前线程被禁用,当前线程仍然继续往下执行代码. 而 lock()方法则是一定要获取到锁, 如果锁不可用, 就一直等待, 在未获得锁之前,当前线程并不继续向下执行.<br>void unlock():执行此方法时, 当前线程将释放持有的锁. 锁只能由持有者释放, 如果线程并不持有锁, 却执行该方法, 可能导致异常的发生.<br>Condition newCondition():条件对象,获取等待通知组件。该组件和当前的锁绑定,当前线程只有获取了锁,才能调用该组件的 await()方法,而调用后,当前线程将缩放锁。<br>getHoldCount() :查询当前线程保持此锁的次数,也就是执行此线程执行 lock 方法的次数。<br>getQueueLength():返回正等待获取此锁的线程估计数,比如启动 10 个线程,1 个线程获得锁,此时返回的是 9<br>getWaitQueueLength:(Condition condition)返回等待与此锁相关的给定条件的线程估计数。比如 10 个线程,用同一个 condition 对象,并且此时这 10 个线程都执行了condition 对象的 await 方法,那么此时执行此方法返回 10<br>hasWaiters(Condition condition) : 查 询 是 否 有 线 程 等 待 与 此 锁 有 关 的 给 定 条 件(condition),对于指定 contidion 对象,有多少线程执行了 condition.await 方法<br>hasQueuedThread(Thread thread):查询给定线程是否等待获取此锁<br>hasQueuedThreads():是否有线程等待此锁<br>isFair():该锁是否公平锁<br>isHeldByCurrentThread(): 当前线程是否保持锁锁定,线程的执行 lock 方法的前后分别是 false 和 true<br>isLock():此锁是否有任意线程占用<br>lockInterruptibly():如果当前线程未被中断,获取锁<br>tryLock():尝试获得锁,仅在调用时锁未被线程占用,获得锁<br>tryLock(long timeout TimeUnit unit):如果锁在给定等待时间内没有被另一个线程保持,则获取该锁。<br></code></pre></td></tr></table></figure><h1 id="非公平锁"><a href="#非公平锁" class="headerlink" title="非公平锁"></a>非公平锁</h1><p>JVM 按随机、就近原则分配锁的机制则称为不公平锁,ReentrantLock 在构造函数中提供了是否公平锁的初始化方式,默认为非公平锁。非公平锁实际执行的效率要远远超出公平锁,除非程序有特殊需要,否则最常用非公平锁的分配机制。</p><h1 id="公平锁"><a href="#公平锁" class="headerlink" title="公平锁"></a>公平锁</h1><p>公平锁指的是锁的分配机制是公平的,通常先对锁提出获取请求的线程会先被分配到锁,ReentrantLock 在构造函数中提供了是否公平锁的初始化方式来定义公平锁。</p><h1 id="ReentrantLock-与-synchronized"><a href="#ReentrantLock-与-synchronized" class="headerlink" title="ReentrantLock 与 synchronized"></a>ReentrantLock 与 synchronized</h1><p>1.ReentrantLock 通过方法 lock()与 unlock()来进行加锁与解锁操作,与 synchronized 会被 JVM 自动解锁机制不同,ReentrantLock 加锁后需要手动进行解锁。为了避免程序出现异常而无法正常解锁的情况,使用 ReentrantLock 必须在 finally 控制块中进行解锁操作。<br>2.ReentrantLock 相比 synchronized 的优势是可中断、公平锁、多个锁。这种情况下需要使用 ReentrantLock。</p><p>ReentrantLock 实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyService</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    <span class="hljs-comment">//Lock lock=new ReentrantLock(true);//公平锁</span><br>    <span class="hljs-comment">//Lock lock=new ReentrantLock(false);//非公平锁</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Condition</span> <span class="hljs-variable">condition</span> <span class="hljs-operator">=</span> lock.newCondition();<span class="hljs-comment">//创建 Condition</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testMethod</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            lock.lock();<span class="hljs-comment">//lock 加锁</span><br>            <span class="hljs-comment">//1:wait 方法等待:</span><br>            <span class="hljs-comment">//System.out.println(&quot;开始 wait&quot;);</span><br>            condition.await();<br>            <span class="hljs-comment">//通过创建 Condition 对象来使线程 wait,必须先执行 lock.lock 方法获得锁</span><br>            <span class="hljs-comment">//:2:signal 方法唤醒</span><br>            condition.signal();<span class="hljs-comment">//condition 对象的 signal 方法可以唤醒 wait 线程</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>                System.out.println(<span class="hljs-string">&quot;ThreadName=&quot;</span> + Thread.currentThread().getName() + (<span class="hljs-string">&quot; &quot;</span> + (i + <span class="hljs-number">1</span>)));<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Condition-类和-Object-类锁方法区别区别"><a href="#Condition-类和-Object-类锁方法区别区别" class="headerlink" title="Condition 类和 Object 类锁方法区别区别"></a>Condition 类和 Object 类锁方法区别区别</h2><ol><li>Condition 类的 awiat 方法和 Object 类的 wait 方法等效</li><li>Condition 类的 signal 方法和 Object 类的 notify 方法等效</li><li>Condition 类的 signalAll 方法和 Object 类的 notifyAll 方法等效</li><li>ReentrantLock 类可以唤醒指定条件的线程,而 object 的唤醒是随机的</li></ol><h2 id="tryLock-和-lock-和-lockInterruptibly-的区别"><a href="#tryLock-和-lock-和-lockInterruptibly-的区别" class="headerlink" title="tryLock 和 lock 和 lockInterruptibly 的区别"></a>tryLock 和 lock 和 lockInterruptibly 的区别</h2><p>1.tryLock 能获得锁就返回 true,不能就立即返回 false,tryLock(long timeout,TimeUnitunit),可以增加时间限制,如果超过该时间段还没获得锁,返回 false<br>2. lock 能获得锁就返回 true,不能的话一直等待获得锁<br>3. lock 和 lockInterruptibly,如果两个线程分别执行这两个方法,但此时中断这两个线程,lock 不会抛出异常,而 lockInterruptibly 会抛出异常。</p><h1 id="Semaphore-信号量"><a href="#Semaphore-信号量" class="headerlink" title="Semaphore 信号量"></a>Semaphore 信号量</h1><p>Semaphore 是一种基于计数的信号量。它可以设定一个阈值,基于此,多个线程竞争获取许可信号,做完自己的申请后归还,超过阈值后,线程申请许可信号将会被阻塞。Semaphore 可以用来构建一些对象池,资源池之类的,比如数据库连接池实现互斥锁(计数器为 1 )<br>我们也可以创建计数为 1 的 Semaphore,将其作为一种类似互斥锁的机制,这也叫二元信号量,表示两种互斥状态。<br>代码实现<br>它的用法如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建一个计数阈值为 5 的信号量对象</span><br><span class="hljs-comment">// 只能 5 个线程同时访问</span><br><span class="hljs-type">Semaphore</span> <span class="hljs-variable">semp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Semaphore</span>(<span class="hljs-number">5</span>);<br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// 申请许可</span><br>    semp.acquire();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 业务逻辑</span><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 释放许可</span><br>            semp.release();<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Semaphore-与-ReentrantLock"><a href="#Semaphore-与-ReentrantLock" class="headerlink" title="Semaphore 与 ReentrantLock"></a>Semaphore 与 ReentrantLock</h2><p>Semaphore 基本能完成 ReentrantLock 的所有工作,使用方法也与之类似,通过 acquire()与<br>release()方法来获得和释放临界资源。经实测,Semaphone.acquire()方法默认为可响应中断锁,<br>与 ReentrantLock.lockInterruptibly()作用效果一致,也就是说在等待临界资源的过程中可以被<br>Thread.interrupt()方法中断。</p><p>此外,Semaphore 也实现了<code>可轮询的锁请求与定时锁的功能</code>,除了方法名 tryAcquire 与 tryLock<br>不同,其使用方法与 ReentrantLock 几乎一致。Semaphore 也提供了公平与非公平锁的机制,也<br>可在构造函数中进行设定。<br>Semaphore 的锁释放操作也由手动进行,因此与 ReentrantLock 一样,为避免线程因抛出异常而<br>无法正常释放锁的情况发生,释放锁的操作也必须在 finally 代码块中完成。</p><h3 id="AtomicInteger"><a href="#AtomicInteger" class="headerlink" title="AtomicInteger"></a>AtomicInteger</h3><p>首 先 说 明 , 此 处 AtomicInteger , 一 个 提 供 原 子 操 作 的 Integer 的 类 , 常 见 的 还 有<br><code>AtomicBoolean</code>、<code>AtomicInteger</code>、<code>AtomicLong</code>、<code>AtomicReference</code> 等,他们的实现原理相同,<br>区别在与运算对象类型的不同。令人兴奋地,还可以通过 AtomicReference将一个对象的所<br>有操作转化成原子操作。</p><p>我们知道,在多线程程序中,诸如i 或 i等运算不具有原子性,是不安全的线程操作之一。<br>通常我们会使用 synchronized 将该操作变成一个原子操作,但 JVM 为此类操作特意提供了一些<br>同步类,使得使用更方便,且使程序运行效率变得更高。通过相关资料显示,通常 AtomicInteger<br>的性能是 ReentantLock 的好几倍。</p><h3 id="可重入锁-递归锁"><a href="#可重入锁-递归锁" class="headerlink" title="可重入锁(递归锁)"></a>可重入锁(递归锁)</h3><p>本文里面讲的是广义上的可重入锁,而不是单指 JAVA 下的 <code>ReentrantLock</code>。可重入锁,也叫<br>做递归锁,指的是同一线程 外层函数获得锁之后 ,内层递归函数仍然有获取该锁的代码,但不受<br>影响。在 JAVA 环境下 <code>ReentrantLock</code> 和 <code>synchronized</code> 都是 可重入锁。</p><h2 id="公平锁与非公平锁"><a href="#公平锁与非公平锁" class="headerlink" title="公平锁与非公平锁"></a>公平锁与非公平锁</h2><p>公平锁( Fair )<br>加锁前检查是否有排队等待的线程,优先排队等待的线程,先来先得<br>非公平锁( Nonfair )<br>加锁时不考虑排队等待问题,直接尝试获取锁,获取不到自动到队尾等待</p><ol><li>非公平锁性能比公平锁高 5~10 倍,因为公平锁需要在多核的情况下维护一个队列</li><li>Java 中的 synchronized 是非公平锁,ReentrantLock 默认的 lock()方法采用的是非公平锁。</li></ol><h3 id="ReadWriteLock-读写锁"><a href="#ReadWriteLock-读写锁" class="headerlink" title="ReadWriteLock 读写锁"></a>ReadWriteLock 读写锁</h3><p>为了提高性能,Java 提供了读写锁,在读的地方使用读锁,在写的地方使用写锁,灵活控制,如<br>果没有写锁的情况下,读是无阻塞的,在一定程度上提高了程序的执行效率。读写锁分为读锁和写<br>锁,多个读锁不互斥,读锁与写锁互斥,这是由 jvm 自己控制的,你只要上好相应的锁即可。<br>读锁<br>如果你的代码只读数据,可以很多人同时读,但不能同时写,那就上读锁<br>写锁<br>如果你的代码修改数据,只能有一个人在写,且不能同时读取,那就上写锁。总之,读的时候上<br>读锁,写的时候上写锁!<br>Java 中 读 写 锁 有 个 接 口 java.util.concurrent.locks.ReadWriteLock , 也 有 具 体 的 实 现</p><h3 id="ReentrantReadWriteLock"><a href="#ReentrantReadWriteLock" class="headerlink" title="ReentrantReadWriteLock"></a>ReentrantReadWriteLock</h3><h2 id="共享锁和独占锁"><a href="#共享锁和独占锁" class="headerlink" title="共享锁和独占锁"></a>共享锁和独占锁</h2><p>java 并发包提供的加锁模式分为独占锁和共享锁。<br>独占锁</p><blockquote><p>独占锁模式下,每次只能有一个线程能持有锁,ReentrantLock 就是以独占方式实现的互斥锁。<br>独占锁是一种悲观保守的加锁策略,它避免了读/读冲突,如果某个只读线程获取锁,则其他读线<br>程都只能等待,这种情况下就限制了不必要的并发性,因为读操作并不会影响数据的一致性。</p></blockquote><p>共享锁</p><blockquote><p>共享锁则允许多个线程同时获取锁,并发访问 共享资源,如:ReadWriteLock。共享锁则是一种<br>乐观锁,它放宽了加锁策略,允许多个执行读操作的线程同时访问共享资源。</p></blockquote><p>1.AQS 的内部类 Node 定义了两个常量 SHARED 和 EXCLUSIVE,他们分别标识 AQS 队列中等待线程的锁获取模式。<br>2.java 的并发包中提供了 ReadWriteLock,读-写锁。它允许一个资源可以被多个读操作访问,或者被一个 写操作访问,但两者不能同时进行。</p><h3 id="重量级锁-Mutex-Lock"><a href="#重量级锁-Mutex-Lock" class="headerlink" title="重量级锁( Mutex Lock )"></a>重量级锁( Mutex Lock )</h3><p>Synchronized 是通过对象内部的一个叫做监视器锁(monitor)来实现的。但是监视器锁本质又是依赖于底层的操作系统的 Mutex Lock 来实现的。而操作系统实现线程之间的切换这就需要从用户态转换到核心态,这个成本非常高,状态之间的转换需要相对比较长的时间,这就是为什么<br>Synchronized 效率低的原因。因此,这种依赖于操作系统 Mutex Lock 所实现的锁我们称之为“重量级锁”。JDK 中对 Synchronized 做的种种优化,其核心都是为了减少这种重量级锁的使用。<br>JDK1.6 以后,为了减少获得锁和释放锁所带来的性能消耗,提高性能,引入了“轻量级锁”和“偏向锁”。</p><h3 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h3><p>锁的状态总共有四种:无锁状态、偏向锁、轻量级锁和重量级锁。</p><p><strong>锁升级</strong><br>随着锁的竞争,锁可以从偏向锁升级到轻量级锁,再升级的重量级锁(但是锁的升级是单向的,<br>也就是说只能从低到高升级,不会出现锁的降级)。</p><p>“轻量级”是相对于使用操作系统互斥量来实现的传统锁而言的。但是,首先需要强调一点的是,<br>轻量级锁并不是用来代替重量级锁的,它的本意是在没有多线程竞争的前提下,减少传统的重量<br>级锁使用产生的性能消耗。在解释轻量级锁的执行过程之前,先明白一点,轻量级锁所适应的场<br>景是线程交替执行同步块的情况,如果存在同一时间访问同一锁的情况,就会导致轻量级锁膨胀<br>为重量级锁。</p><h3 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h3><blockquote><p>Hotspot 的作者经过以往的研究发现大多数情况下锁不仅不存在多线程竞争,而且总是由同一线<br>程多次获得。偏向锁的目的是在某个线程获得锁之后,消除这个线程锁重入(CAS)的开销,看起<br>来让这个线程得到了偏护。引入偏向锁是为了在无多线程竞争的情况下尽量减少不必要的轻量级<br>锁执行路径,因为轻量级锁的获取及释放依赖多次 CAS 原子指令,而偏向锁只需要在置换<br>ThreadID 的时候依赖一次 CAS 原子指令(由于一旦出现多线程竞争的情况就必须撤销偏向锁,所<br>以偏向锁的撤销操作的性能损耗必须小于节省下来的 CAS 原子指令的性能消耗)。上面说过,轻<br>量级锁是为了在线程交替执行同步块时提高性能,而偏向锁则是在只有一个线程执行同步块时进<br>一步提高性能。</p></blockquote><h3 id="分段锁"><a href="#分段锁" class="headerlink" title="分段锁"></a>分段锁</h3><blockquote><p>分段锁也并非一种实际的锁,而是一种思想 ConcurrentHashMap 是学习分段锁的最好实践</p></blockquote><h3 id="锁优化"><a href="#锁优化" class="headerlink" title="锁优化"></a>锁优化</h3><ul><li>减少锁持有时间</li></ul><blockquote><p>只用在有线程安全要求的程序上加锁</p></blockquote><ul><li>减小锁粒度</li></ul><blockquote><p>将大对象(这个对象可能会被很多线程访问),拆成小对象,大大增加并行度,降低锁竞争。<br>降低了锁的竞争,偏向锁,轻量级锁成功率才会提高。最最典型的减小锁粒度的案例就是<br>ConcurrentHashMap。</p></blockquote><ul><li>锁分离</li></ul><blockquote><p>最常见的锁分离就是读写锁 ReadWriteLock,根据功能进行分离成读锁和写锁,这样读读不互<br>斥,读写互斥,写写互斥,即保证了线程安全,又提高了性能,具体也请查看[高并发 Java 五]<br>JDK 并发包 1。读写分离思想可以延伸,只要操作互不影响,锁就可以分离。比如<br>LinkedBlockingQueue 从头部取出,从尾部放数据</p></blockquote><ul><li>锁粗化</li></ul><blockquote><p>通常情况下,为了保证多线程间的有效并发,会要求每个线程持有锁的时间尽量短,即在使用完<br>公共资源后,应该立即释放锁。但是,凡事都有一个度,如果对同一个锁不停的进行请求、同步<br>和释放,其本身也会消耗系统宝贵的资源,反而不利于性能的优化 。<br>锁消除<br>锁消除是在编译器级别的事情。在即时编译器时,如果发现不可能被共享的对象,则可以消除这<br>些对象的锁操作,多数是因为程序员编码不规范引起。<br><a href="https://www.jianshu.com/p/39628e1180a9">参考</a><br>4.1.10.</p></blockquote><ul><li>线程基本方法<br>线程相关的基本方法有 <code>wait,notify,notifyAll,sleep,join,yield</code> 等。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/threadmethods.png#id=yAP97&originHeight=489&originWidth=683&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="线程等待-wait"><a href="#线程等待-wait" class="headerlink" title="线程等待(wait)"></a>线程等待(wait)</h2><blockquote><p>调用该方法的线程进入 WAITING 状态,只有等待另外线程的通知或被中断才会返回,需要注意的<br>是调用 wait()方法后,会释放对象的锁。因此,wait 方法一般用在同步方法或同步代码块中。<br>4.1.10.2.</p></blockquote><h2 id="线程睡眠-sleep"><a href="#线程睡眠-sleep" class="headerlink" title="线程睡眠(sleep)"></a>线程睡眠(sleep)</h2><p>sleep 导致当前线程休眠,与 wait 方法不同的是 sleep 不会释放当前占有的锁,sleep(long)会导致线程进入 <code>TIMED-WATING</code> 状态,而 wait()方法会导致当前线程进入 <code>WATING</code> 状态</p><h2 id="线程让步-yield"><a href="#线程让步-yield" class="headerlink" title="线程让步(yield)"></a>线程让步(yield)</h2><p>yield 会使当前线程让出 CPU 执行时间片,与其他线程一起重新竞争 CPU 时间片。一般情况下,优先级高的线程有更大的可能性成功竞争得到 CPU 时间片,但这又不是绝对的,有的操作系统对线程优先级并不敏感。</p><h2 id="线程中断-interrupt"><a href="#线程中断-interrupt" class="headerlink" title="线程中断(interrupt)"></a>线程中断(interrupt)</h2><p>中断一个线程,其本意是给这个线程一个通知信号,会影响这个线程内部的一个中断标识位。这个线程本身并不会因此而改变状态(如阻塞,终止等)。</p><p>1.调用 interrupt()方法并不会中断一个正在运行的线程。也就是说处于 Running 状态的线程并不会因为被中断而被终止,仅仅改变了内部维护的中断标识位而已。</p><p>2.若调用 sleep()而使线程处于 TIMED-WATING 状态,这时调用 interrupt()方法,会抛出InterruptedException,从而使线程提前结束 TIMED-WATING 状态。</p><p>3.许多声明抛出 InterruptedException 的方法(如 Thread.sleep(long mills 方法)),抛出异常前,都会清除中断标识位,所以抛出异常后,调用 isInterrupted()方法将会返回 false。</p><p>4.中断状态是线程固有的一个标识位,可以通过此标识位安全的终止线程。比如,你想终止一个线程 thread 的时候,可以调用 thread.interrupt()方法,在线程的 run 方法内部可以根据 thread.isInterrupted()的值来优雅的终止线程。</p><h3 id="Join-等待其他线程终止"><a href="#Join-等待其他线程终止" class="headerlink" title="Join 等待其他线程终止"></a>Join 等待其他线程终止</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">join</span>() 方法,等待其他线程终止,在当前线程中调用一个线程的 <span class="hljs-built_in">join</span>() 方法,则当前线程转为阻塞状态,回到另一个线程结束,当前线程再由阻塞状态变为就绪状态,等待 cpu 的宠幸。<br></code></pre></td></tr></table></figure><h5 id="为什么要用-join-方法"><a href="#为什么要用-join-方法" class="headerlink" title="为什么要用 join()方法?"></a>为什么要用 join()方法?</h5><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">很多情况下,主线程生成并启动了子线程,需要用到子线程返回的结果,也就是需要主线程需要在子线程结束后再结束,这时候就要用到 <span class="hljs-built_in">join</span>() 方法。<br></code></pre></td></tr></table></figure><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs latex">System.out.println(Thread.currentThread().getName() + &quot;线程运行开始!&quot;);<br>Thread6 thread1 = new Thread6();<br>thread1.setName(&quot;线程 B&quot;);<br>thread1.join();<br>System.out.println(&quot;这时 thread1 执行完毕之后才能执行主线程&quot;);<br></code></pre></td></tr></table></figure><h3 id="线程唤醒-notify"><a href="#线程唤醒-notify" class="headerlink" title="线程唤醒(notify)"></a>线程唤醒(notify)</h3><p>Object 类中的 notify() 方法,唤醒在此对象监视器上等待的单个线程,如果所有线程都在此对象上等待,则会选择唤醒其中一个线程,选择是任意的,并在对实现做出决定时发生,线程通过调<br>用其中一个 wait() 方法,在对象的监视器上等待,直到当前的线程放弃此对象上的锁定,才能继续执行被唤醒的线程,被唤醒的线程将以常规方式与在该对象上主动同步的其他所有线程进行竞争。类似的方法还有 notifyAll() ,唤醒再次监视器上等待的所有线程。</p><h4 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法:"></a>其他方法:</h4><ol><li><code>sleep()</code>:强迫一个线程睡眠N毫秒。</li><li><code>isAlive()</code>: 判断一个线程是否存活。</li><li><code>join()</code>: 等待线程终止。</li><li><code>activeCount()</code>: 程序中活跃的线程数。</li><li><code>enumerate()</code>: 枚举程序中的线程。</li><li><code>currentThread()</code>: 得到当前线程。</li><li><code>isDaemon()</code>: 一个线程是否为守护线程。</li><li><code>setDaemon()</code>: 设置一个线程为守护线程。(用户线程和守护线程的区别在于,是否等待主线程依赖于主线程结束而结束)</li><li><code>setName()</code>: 为线程设置一个名称。</li><li><code>wait()</code>: 强迫一个线程等待。</li><li><code>notify()</code>: 通知一个线程继续运行。</li><li><code>setPriority()</code>: 设置一个线程的优先级。</li><li><code>getPriority()</code>::获得一个线程的优先级。</li></ol><h2 id="线程上下文切换"><a href="#线程上下文切换" class="headerlink" title="线程上下文切换"></a>线程上下文切换</h2><blockquote><p>巧妙地利用了时间片轮转的方式, CPU 给每个任务都服务一定的时间,然后把当前任务的状态保存下来,在加载下一任务的状态后,继续服务下一任务,任务的状态保存及再加载, 这段过程就叫做上下文切换。时间片轮转的方式使多个任务在同一颗 CPU 上执行变成了可能。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/threadcontentchange.png#id=YynVv&originHeight=201&originWidth=700&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h4 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h4><p>(有时候也称做任务)是指一个程序运行的实例。在 Linux 系统中,线程就是能并行运行并且与他们的父进程(创建他们的进程)共享同一地址空间(一段内存区域)和其他资源的轻量级的进程。</p><h3 id="上下文"><a href="#上下文" class="headerlink" title="上下文"></a>上下文</h3><p>是指某一时间点 CPU 寄存器和程序计数器的内容。</p><h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h3><p>是 CPU 内部的数量较少但是速度很快的内存(与之对应的是 CPU 外部相对较慢的 RAM 主内存)。寄存器通过对常用值(通常是运算的中间值)的快速访问来提高计算机程序运行的速度。</p><h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><p>是一个专用的寄存器,用于表明指令序列中 CPU 正在执行的位置,存的值为正在执行的指令的位置或者下一个将要被执行的指令的位置,具体依赖于特定的系统。</p><h3 id="PCB-“切换桢”"><a href="#PCB-“切换桢”" class="headerlink" title="PCB-“切换桢”"></a>PCB-“切换桢”</h3><p>上下文切换可以认为是内核(操作系统的核心)在 CPU 上对于进程(包括线程)进行切换,上下文切换过程中的信息是保存在进程控制块(PCB, process control block)中的。PCB 还经常被称作“切换桢”(switchframe)。信息会一直保存到 CPU 的内存中,直到他们被再次使用。</p><p>###上下文切换的活动:</p><ol><li>挂起一个进程,将这个进程在 CPU 中的状态(上下文)存储于内存中的某处。</li><li>在内存中检索下一个进程的上下文并将其在 CPU 的寄存器中恢复。</li><li>跳转到程序计数器所指向的位置(即跳转到进程被中断时的代码行),以恢复该进程在程序中。</li></ol><h3 id="引起线程上下文切换的原因"><a href="#引起线程上下文切换的原因" class="headerlink" title="引起线程上下文切换的原因"></a>引起线程上下文切换的原因</h3><ol><li>当前执行任务的时间片用完之后,系统 CPU 正常调度下一个任务;</li><li>当前执行任务碰到 IO 阻塞,调度器将此任务挂起,继续下一任务;</li><li>多个任务抢占锁资源,当前任务没有抢到锁资源,被调度器挂起,继续下一任务;</li><li>用户代码挂起当前任务,让出 CPU 时间;</li><li>硬件中断;</li></ol><h2 id="同步锁与死锁"><a href="#同步锁与死锁" class="headerlink" title="同步锁与死锁"></a>同步锁与死锁</h2><p>同步锁<br>当多个线程同时访问同一个数据时,很容易出现问题。为了避免这种情况出现,我们要保证线程同步互斥,就是指并发执行的多个线程,在同一时间内只允许一个线程访问共享数据。 Java 中可以使用 synchronized 关键字来取得一个对象的同步锁。</p><p>死锁<br>何为死锁,就是多个线程同时被阻塞,它们中的一个或者全部都在等待某个资源被释放。</p><p>线程池原理<br>线程池做的工作主要是控制运行的线程的数量,处理过程中将任务放入队列,然后在线程创建后启动这些任务,如果线程数量超过了最大数量超出数量的线程排队等候,等其它线程执行完毕,再从队列中取出任务来执行。他的主要特点为:线程复用;控制最大并发数;管理线程。</p><h3 id="线程复用"><a href="#线程复用" class="headerlink" title="线程复用"></a>线程复用</h3><p>每一个 Thread 的类都有一个 start 方法。 当调用 start 启动线程时 Java 虚拟机会调用该类的 run方法。 那么该类的 run() 方法中就是调用了 Runnable 对象的 run() 方法。 我们可以继承重写<br>Thread 类,在其 start 方法中添加不断循环调用传递过来的 Runnable 对象。 这就是线程池的实现原理。循环方法中不断获取 Runnable 是用 Queue 实现的,在获取下一个 Runnable 之前可以是阻塞的。</p><h3 id="线程池的组成"><a href="#线程池的组成" class="headerlink" title="线程池的组成"></a>线程池的组成</h3><p>一般的线程池主要分为以下 4 个组成部分:</p><ol><li>线程池管理器:用于创建并管理线程池</li><li>工作线程:线程池中的线程</li><li>任务接口:每个任务必须实现的接口,用于工作线程调度其运行</li><li>任务队列:用于存放待处理的任务,提供一种缓冲机制<br>Java 中 的 线 程 池 是 通 过 Executor 框 架 实 现 的 , 该 框 架 中 用 到 了 Executor , Executors ,ExecutorService,ThreadPoolExecutor ,Callable 和 Future、FutureTask 这几个类。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/threadpoolcon.png#id=FWykE&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>ThreadPoolExecutor 的构造方法如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadPoolExecutor</span><span class="hljs-params">(<span class="hljs-type">int</span> corePoolSize,<span class="hljs-type">int</span> maximumPoolSize, <span class="hljs-type">long</span> keepAliveTime,TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue)</span> &#123;<br>    <span class="hljs-built_in">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,Executors.defaultThreadFactory(), defaultHandler);<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>corePoolSize:指定了线程池中的线程数量。</li><li>maximumPoolSize:指定了线程池中的最大线程数量。</li><li>keepAliveTime:当前线程池数量超过 corePoolSize 时,多余的空闲线程的存活时间,即多次时间内会被销毁。</li><li>unit:keepAliveTime 的单位。</li><li>workQueue:任务队列,被提交但尚未被执行的任务。</li><li>threadFactory:线程工厂,用于创建线程,一般用默认的即可。</li><li>handler:拒绝策略,当任务太多来不及处理,如何拒绝任务。</li></ol><h4 id="拒绝策略"><a href="#拒绝策略" class="headerlink" title="拒绝策略"></a>拒绝策略</h4><p>线程池中的线程已经用完了,无法继续为新任务服务,同时,等待队列也已经排满了,再也<br>塞不下新任务了。这时候我们就需要拒绝策略机制合理的处理这个问题。<br>JDK 内置的拒绝策略如下:</p><ol><li>AbortPolicy : 直接抛出异常,阻止系统正常运行。</li><li>CallerRunsPolicy : 只要线程池未关闭,该策略直接在调用者线程中,运行当前被丢弃的任务。显然这样做不会真的丢弃任务,但是,任务提交线程的性能极有可能会急剧下降。</li><li>DiscardOldestPolicy : 丢弃最老的一个请求,也就是即将被执行的一个任务,并尝试再次提交当前任务。</li><li>DiscardPolicy : 该策略默默地丢弃无法处理的任务,不予任何处理。如果允许任务丢失,这是最好的一种方案。以上内置拒绝策略均实现了 RejectedExecutionHandler 接口,若以上策略仍无法满足实际需要,完全可以自己扩展 RejectedExecutionHandler 接口。</li></ol><h3 id="Java-线程池工作过程"><a href="#Java-线程池工作过程" class="headerlink" title="Java 线程池工作过程"></a>Java 线程池工作过程</h3><p>1.线程池刚创建时,里面没有一个线程。任务队列是作为参数传进来的。不过,就算队列里面有任务,线程池也不会马上执行它们。<br>2.当调用 execute() 方法添加一个任务时,线程池会做如下判断:</p><blockquote><p>a) 如果正在运行的线程数量小于 corePoolSize,那么马上创建线程运行这个任务;</p></blockquote><blockquote><p>b) 如果正在运行的线程数量大于或等于 corePoolSize,那么将这个任务放入队列;</p></blockquote><blockquote><p>c) 如果这时候队列满了,而且正在运行的线程数量小于 maximumPoolSize,那么还是要创建非核心线程立刻运行这个任务;</p></blockquote><blockquote><p>d)如果队列满了,而且正在运行的线程数量大于或等于 maximumPoolSize,那么线程池会抛出异常 RejectExecutionException。</p></blockquote><ol start="3"><li>当一个线程完成任务时,它会从队列中取下一个任务来执行。</li><li>当一个线程无事可做,超过一定的时间(keepAliveTime)时,线程池会判断,如果当前运行的线程数大于 corePoolSize,那么这个线程就被停掉。所以线程池的所有任务完成后,它最终会收缩到 corePoolSize 的大小。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/threadwork.png#id=aOA2T&originHeight=393&originWidth=690&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h3 id="JAVA-阻塞队列原理"><a href="#JAVA-阻塞队列原理" class="headerlink" title="JAVA 阻塞队列原理"></a>JAVA 阻塞队列原理</h3><blockquote><p>阻塞队列,关键字是阻塞,先理解阻塞的含义,在阻塞队列中,线程阻塞有这样的两种情况:</p></blockquote><p>1.当队列中没有数据的情况下,消费者端的所有线程都会被自动阻塞(挂起),直到有数据放入队列。<br><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/thread-1.png#id=Z6rBB&originHeight=164&originWidth=169&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>2.当队列中填满数据的情况下,生产者端的所有线程都会被自动阻塞(挂起),直到队列中有空的位置,线程被自动唤醒。<br><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/thread-2.png#id=UrJ61&originHeight=163&originWidth=236&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h3 id="阻塞队列的主要方法"><a href="#阻塞队列的主要方法" class="headerlink" title="阻塞队列的主要方法"></a>阻塞队列的主要方法</h3><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/blockqueue.png#id=SV5Bh&originHeight=236&originWidth=933&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><ul><li>抛出异常:抛出一个异常;</li><li>特殊值:返回一个特殊值(null 或 false,视情况而定)</li><li>则塞:在成功操作之前,一直阻塞线程</li><li>超时:放弃前只在最大的时间内阻塞</li></ul><h3 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作:"></a>插入操作:</h3><p>1:public abstract boolean add(E paramE):将指定元素插入此队列中(如果立即可行且不会违反容量限制),成功时返回 true,如果当前没有可用的空间,则抛出 IllegalStateException。如果该元素是 NULL,则会抛出 NullPointerException 异常。</p><p>2:public abstract boolean offer(E paramE):将指定元素插入此队列中(如果立即可行且不会违反容量限制),成功时返回 true,如果当前没有可用的空间,则返回 false。</p><p>3:public abstract void put(E paramE) throws InterruptedException: 将指定元素插入此队列中,将等待可用的空间(如果有必要)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(E paramE)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    checkNotNull(paramE);<br>    <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">localReentrantLock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.lock;<br>    localReentrantLock.lockInterruptibly();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-built_in">this</span>.count == <span class="hljs-built_in">this</span>.items.length)<br>            <span class="hljs-built_in">this</span>.notFull.await();<span class="hljs-comment">//如果队列满了,则线程阻塞等待</span><br>            enqueue(paramE);<br>            localReentrantLock.unlock();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            localReentrantLock.unlock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4:offer(E o, long timeout, TimeUnit unit):可以设定等待的时间,如果在指定的时间内,还不能往队列中加入 BlockingQueue,则返回失败。</p><h3 id="获取数据操作"><a href="#获取数据操作" class="headerlink" title="获取数据操作:"></a>获取数据操作:</h3><p>1:poll(time):取走 BlockingQueue 里排在首位的对象,若不能立即取出,则可以等 time 参数规定的时间,取不到时返回 null;</p><p>2:poll(long timeout, TimeUnit unit):从 BlockingQueue 取出一个队首的对象,如果在指定时间内,队列一旦有数据可取,则立即返回队列中的数据。否则直到时间超时还没有数据可取,返回失败。</p><p>3:take():取走 BlockingQueue 里排在首位的对象,若 BlockingQueue 为空,阻断进入等待状态直到 BlockingQueue 有新的数据被加入。</p><p>4.drainTo():一次性从 BlockingQueue 获取所有可用的数据对象(还可以指定获取数据的个数),通过该方法,可以提升获取数据效率;不需要多次分批加锁或释放锁。</p><h3 id="Java中的阻塞队列"><a href="#Java中的阻塞队列" class="headerlink" title="Java中的阻塞队列"></a>Java中的阻塞队列</h3><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/blocking_queue.png#id=Qr70o&originHeight=249&originWidth=831&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><ul><li>ArrayBlockingQueue: 由数组结构组成的有界阻塞队列.(公平、非公平)</li></ul><blockquote><p>用数组实现的有界阻塞队列。此队列按照先进先出(FIFO)的原则对元素进行排序。默认情况下<br>不保证访问者公平的访问队列,所谓公平访问队列是指阻塞的所有生产者线程或消费者线程,当<br>队列可用时,可以按照阻塞的先后顺序访问队列,即先阻塞的生产者线程,可以先往队列里插入<br>元素,先阻塞的消费者线程,可以先从队列里获取元素。通常情况下为了保证公平性会降低吞吐<br>量。我们可以使用以下代码创建一个公平的阻塞队列:<code>ArrayBlockingQueue fairQueue = new ArrayBlockingQueue(1000,true);</code></p></blockquote><ul><li>LinkedBlockingQueue: 由链表结构组成的有界阻塞队列.(两个独立锁提高并发)</li></ul><blockquote><p>基于链表的阻塞队列,同 ArrayListBlockingQueue 类似,此队列按照先进先出(FIFO)的原则对<br>元素进行排序。而 LinkedBlockingQueue 之所以能够高效的处理并发数据,还因为其对于生产者<br>端和消费者端分别采用了独立的锁来控制数据同步,这也意味着在高并发的情况下生产者和消费<br>者可以并行地操作队列中的数据,以此来提高整个队列的并发性能。<br>LinkedBlockingQueue 会默认一个类似无限大小的容量(Integer.MAX_VALUE)。</p></blockquote><ul><li>PriorityBlockingQueue: 支持优先级排序的无界阻塞队列.(compareTo 排序实现优先)</li></ul><blockquote><p>是 一 个 支持 优 先级 的 无界 队 列 。默 认 情况 下 元素 采 取 自然 顺 序升 序 排列 。 可 以自 定 义实 现<br>compareTo()方法来指定元素进行排序规则,或者初始化 PriorityBlockingQueue 时,指定构造<br>参数 Comparator 来对元素进行排序。需要注意的是不能保证同优先级元素的顺序。</p></blockquote><ul><li>DelayQueue: 使用优先级队列实现的无界阻塞队列.(缓存失效、定时任务 )</li></ul><blockquote><p>是一个支持延时获取元素的无界阻塞队列。队列使用 PriorityQueue 来实现。队列中的元素必须实<br>现 Delayed 接口,在创建元素时可以指定多久才能从队列中获取当前元素。只有在延迟期满时才<br>能从队列中提取元素。我们可以将 DelayQueue 运用在以下应用场景:</p></blockquote><blockquote><p>1.缓存系统的设计:可以用 DelayQueue 保存缓存元素的有效期,使用一个线程循环查询 DelayQueue,一旦能从 DelayQueue 中获取元素时,表示缓存有效期到了。<br>2.定时任务调度 : 使用 DelayQueue 保存当天将会执行的任务和执行时间,一旦从DelayQueue 中获取到任务就开始执行,从比如 TimerQueue 就是使用 DelayQueue 实现的。</p></blockquote><ul><li>SynchronousQueue: 不存储元素的阻塞队列.(不存储数据、可用于传递数据)</li></ul><blockquote><p>是一个不存储元素的阻塞队列。每一个 put 操作必须等待一个 take 操作,否则不能继续添加元素。<br>SynchronousQueue 可以看成是一个传球手,负责把生产者线程处理的数据直接传递给消费者线<br>程。队列本身并不存储任何元素,非常适合于传递性场景,比如在一个线程中使用的数据,传递给<br>另 外 一 个 线 程 使 用 , SynchronousQueue 的 吞 吐 量 高 于 LinkedBlockingQueue 和<br>ArrayBlockingQueue。</p></blockquote><ul><li>LinkedTransferQueue: 由链表结构组成的无界阻塞队列.</li></ul><blockquote><p>是 一 个 由 链 表 结 构 组 成 的 无 界 阻 塞 TransferQueue 队 列 。 相 对 于 其 他 阻 塞 队 列 ,<br>LinkedTransferQueue 多了 tryTransfer 和 transfer 方法。</p></blockquote><blockquote><p>1.transfer 方法:如果当前有消费者正在等待接收元素(消费者使用 take()方法或带时间限制的<br>poll()方法时),transfer 方法可以把生产者传入的元素立刻 transfer(传输)给消费者。如<br>果没有消费者在等待接收元素,transfer 方法会将元素存放在队列的 tail 节点,并等到该元素<br>被消费者消费了才返回。</p></blockquote><blockquote><p>2.tryTransfer 方法。则是用来试探下生产者传入的元素是否能直接传给消费者。如果没有消费<br>者等待接收元素,则返回 false。和 transfer 方法的区别是 tryTransfer 方法无论消费者是否<br>接收,方法立即返回。而 transfer 方法是必须等到消费者消费了才返回。<br>对于带有时间限制的 tryTransfer(E e, long timeout, TimeUnit unit)方法,则是试图把生产者传<br>入的元素直接传给消费者,但是如果没有消费者消费该元素则等待指定的时间再返回,如果超时<br>还没消费元素,则返回 false,如果在超时时间内消费了元素,则返回 true。</p></blockquote><ul><li>LinkedBlockingDeque: 由链表结构组成的双向阻塞队列.</li></ul><blockquote><p>是一个由链表结构组成的双向阻塞队列。所谓双向队列指的你可以从队列的两端插入和移出元素。<br>双端队列因为多了一个操作队列的入口,在多线程同时入队时,也就减少了一半的竞争。相比其<br>他 的 阻 塞 队 列 , LinkedBlockingDeque 多 了 addFirst , addLast , offerFirst , offerLast ,<br>peekFirst,peekLast 等方法,以 First 单词结尾的方法,表示插入,获取(peek)或移除双端队<br>列的第一个元素。以 Last 单词结尾的方法,表示插入,获取或移除双端队列的最后一个元素。另<br>外插入方法 add 等同于 addLast,移除方法 remove 等效于 removeFirst。但是 take 方法却等同<br>于 takeFirst,不知道是不是 Jdk 的 bug,使用时还是用带有 First 和 Last 后缀的方法更清楚。<br>在初始化 LinkedBlockingDeque 时可以设置容量防止其过渡膨胀。另外双向阻塞队列可以运用在<br>“工作窃取”模式中。</p></blockquote><h3 id="CyclicBarrier、CountDownLatch、Semaphore-的用法"><a href="#CyclicBarrier、CountDownLatch、Semaphore-的用法" class="headerlink" title="CyclicBarrier、CountDownLatch、Semaphore 的用法"></a>CyclicBarrier、CountDownLatch、Semaphore 的用法</h3><h4 id="CountDownLatch-线程计数器"><a href="#CountDownLatch-线程计数器" class="headerlink" title="CountDownLatch(线程计数器 )"></a>CountDownLatch(线程计数器 )</h4><blockquote><p>CountDownLatch 类位于 java.util.concurrent 包下,利用它可以实现类似计数器的功能。比如有<br>一个任务 A,它要等待其他 4 个任务执行完毕之后才能执行,此时就可以利用 CountDownLatch<br>来实现这种功能了。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">CountDownLatch</span> <span class="hljs-variable">latch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(<span class="hljs-number">2</span>);<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>() &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;子线程&quot;</span> + Thread.currentThread().getName() + <span class="hljs-string">&quot;正在执行&quot;</span>);<br>        Thread.sleep(<span class="hljs-number">3000</span>);<br>        System.out.println(<span class="hljs-string">&quot;子线程&quot;</span> + Thread.currentThread().getName() + <span class="hljs-string">&quot;执行完毕&quot;</span>);<br>        latch.countDown();<br>    &#125;<br><br>    ;<br>&#125;.start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>() &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;子线程&quot;</span> + Thread.currentThread().getName() + <span class="hljs-string">&quot;正在执行&quot;</span>);<br>        Thread.sleep(<span class="hljs-number">3000</span>);<br>        System.out.println(<span class="hljs-string">&quot;子线程&quot;</span> + Thread.currentThread().getName() + <span class="hljs-string">&quot;执行完毕&quot;</span>);<br>        latch.countDown();<br>    &#125;<br><br>    ;<br>&#125;.start();<br>System.out.println(<span class="hljs-string">&quot;等待 2 个子线程执行完毕...&quot;</span>);<br>latch.await();<br>System.out.println(<span class="hljs-string">&quot;2 个子线程已经执行完毕&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;继续执行主线程&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="CyclicBarrier-回环栅栏-等待至-barrier-状态再全部同时执行"><a href="#CyclicBarrier-回环栅栏-等待至-barrier-状态再全部同时执行" class="headerlink" title="CyclicBarrier(回环栅栏-等待至 barrier 状态再全部同时执行)"></a>CyclicBarrier(回环栅栏-等待至 barrier 状态再全部同时执行)</h4><blockquote><p>字面意思回环栅栏,通过它可以实现让一组线程等待至某个状态之后再全部同时执行。叫做回环<br>是因为当所有等待线程都被释放以后,CyclicBarrier 可以被重用。我们暂且把这个状态就叫做<br>barrier,当调用 await()方法之后,线程就处于 barrier 了。<br>CyclicBarrier 中最重要的方法就是 await 方法,它有 2 个重载版本:</p></blockquote><p>1.public int await():用来挂起当前线程,直至所有线程都到达 barrier 状态再同时执行后续任务;<br>2.public int await(long timeout, TimeUnit unit):让这些线程等待至一定的时间,如果还有线程没有到达 barrier 状态就直接让到达 barrier 的线程执行后续任务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br>    <span class="hljs-type">CyclicBarrier</span> <span class="hljs-variable">barrier</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CyclicBarrier</span>(N);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;N;i++)<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Writer</span>(barrier).start();<br>&#125;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Writer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">private</span> CyclicBarrier cyclicBarrier;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Writer</span><span class="hljs-params">(CyclicBarrier cyclicBarrier)</span> &#123;<br>        <span class="hljs-built_in">this</span>.cyclicBarrier = cyclicBarrier;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">5000</span>);<br>            <span class="hljs-comment">//以睡眠来模拟线程需要预定写入数据操作</span><br>            System.out.println(<span class="hljs-string">&quot; 线 程 &quot;</span>+Thread.currentThread().getName()+<span class="hljs-string">&quot; 写 入 数 据 完 毕,等待其他线程写入完毕&quot;</span>);<br>            cyclicBarrier.await();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">catch</span>( BrokenBarrierException e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;所有线程写入完毕,继续处理其他任务,比如数据操作&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Semaphore-信号量-控制同时访问的线程个数"><a href="#Semaphore-信号量-控制同时访问的线程个数" class="headerlink" title="Semaphore(信号量-控制同时访问的线程个数)"></a>Semaphore(信号量-控制同时访问的线程个数)</h4><p>Semaphore 翻译成字面意思为 信号量,Semaphore 可以控制同时访问的线程个数,通过<br>acquire() 获取一个许可,如果没有就等待,而 release() 释放一个许可。<br>Semaphore 类中比较重要的几个方法:</p><p>1.public void acquire(): 用来获取一个许可,若无许可能够获得,则会一直等待,直到获得许可。<br>2. public void acquire(int permits):获取 permits 个许可<br>3. public void release() { } :释放许可。注意,在释放许可之前,必须先获获得许可。<br>4. public void release(int permits) { }:释放 permits 个许可</p><blockquote><p>上面 4 个方法都会被阻塞,如果想立即得到执行结果,可以使用下面几个方法</p></blockquote><p>1.public boolean tryAcquire():尝试获取一个许可,若获取成功,则立即返回 true,若获取失败,则立即返回 false<br>2.public boolean tryAcquire(long timeout, TimeUnit unit):尝试获取一个许可,若在指定的时间内获取成功,则立即返回 true,否则则立即返回 false<br>3.public boolean tryAcquire(int permits):尝试获取 permits 个许可,若获取成功,则立即返回 true,若获取失败,则立即返回 false<br>4.public boolean tryAcquire(int permits, long timeout, TimeUnit unit): 尝试获取 permits个许可,若在指定的时间内获取成功,则立即返回 true,否则则立即返回 false<br>5.还可以通过 availablePermits()方法得到可用的许可数目。例子:若一个工厂有 5 台机器,但是有 8 个工人,一台机器同时只能被一个工人使用,只有使用完了,其他工人才能继续使用。那么我们就可以通过 Semaphore 来实现:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SemaphoreDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;<br>        <span class="hljs-comment">//工人数</span><br>        <span class="hljs-type">Semaphore</span> <span class="hljs-variable">semaphore</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Semaphore</span>(<span class="hljs-number">5</span>); <span class="hljs-comment">//机器数目</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Worker</span>(i, semaphore).start();<br><br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Worker</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> num;<br>        <span class="hljs-keyword">private</span> Semaphore semaphore;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Worker</span><span class="hljs-params">(<span class="hljs-type">int</span> num, Semaphore semaphore)</span> &#123;<br>            <span class="hljs-built_in">this</span>.num = num;<br>            <span class="hljs-built_in">this</span>.semaphore = semaphore;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                semaphore.acquire();<br>                System.out.println(<span class="hljs-string">&quot;工人&quot;</span> + <span class="hljs-built_in">this</span>.num + <span class="hljs-string">&quot;占用一个机器在生产...&quot;</span>);<br>                Thread.sleep(<span class="hljs-number">2000</span>);<br>                System.out.println(<span class="hljs-string">&quot;工人&quot;</span> + <span class="hljs-built_in">this</span>.num + <span class="hljs-string">&quot;释放出机器&quot;</span>);<br>                semaphore.release();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>CountDownLatch 和 CyclicBarrier 都能够实现线程之间的等待,只不过它们侧重点不同;CountDownLatch 一般用于某个线程 A 等待若干个其他线程执行完任务之后,它才执行;而 CyclicBarrier 一般用于一组线程互相等待至某个状态,然后这一组线程再同时执行;另外,CountDownLatch 是不能够重用的,而 CyclicBarrier 是可以重用的。</li><li>Semaphore 其实和锁有点类似,它一般用于控制对某组资源的访问权限。</li></ul><h4 id="volatile-关键字的作用-变量可见性、禁止重排序"><a href="#volatile-关键字的作用-变量可见性、禁止重排序" class="headerlink" title="volatile 关键字的作用(变量可见性、禁止重排序)"></a>volatile 关键字的作用(变量可见性、禁止重排序)</h4><blockquote><p>Java 语言提供了一种稍弱的同步机制,即 volatile 变量,用来确保将变量的更新操作通知到其他线程。volatile 变量具备两种特性,volatile 变量不会被缓存在寄存器或者对其他处理器不可见的地方,因此在读取 volatile 类型的变量时总会返回最新写入的值。</p></blockquote><p><strong>变量可见性</strong><br>其一是保证该变量对所有线程可见,这里的可见性指的是当一个线程修改了变量的值,那么新的<br>值对于其他线程是可以立即获取的。<br><strong>禁止重排序</strong><br>volatile 禁止了指令重排。<br><code>比 sychronized 更轻量级的同步锁</code><br>在访问 volatile 变量时不会执行加锁操作,因此也就不会使执行线程阻塞,因此 volatile 变量是一<br>种比 sychronized 关键字更轻量级的同步机制。volatile 适合这种场景:一个变量被多个线程共<br>享,线程直接给这个变量赋值。</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/volatile.png#id=C3IlC&originHeight=310&originWidth=438&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><blockquote><p>当对非 volatile 变量进行读写的时候,每个线程先从内存拷贝变量到 CPU 缓存中。如果计算机有<br>多个 CPU,每个线程可能在不同的 CPU 上被处理,这意味着每个线程可以拷贝到不同的 CPU<br>cache 中。而声明变量是 volatile 的,JVM 保证了每次读变量都从内存中读,跳过 CPU cache<br>这一步。</p></blockquote><p><strong>适用场景</strong><br>值得说明的是对 volatile 变量的单次读/写操作可以保证原子性的,如 long 和 double 类型变量,<br>但是并不能保证 i这种操作的原子性,因为本质上 i是读、写两次操作。在某些场景下可以<br>代替 Synchronized。但是,volatile 的不能完全取代 Synchronized 的位置,只有在一些特殊的场景下,<br>才能适用 volatile。总的来说,必须同时满足下面两个条件才能保证在并发环境的线程安全:</p><p>(1)对变量的写操作不依赖于当前值(比如 i++),或者说是单纯的变量赋值(boolean flag = true)。</p><p>(2)该变量没有包含在具有其他变量的不变式中,也就是说,不同的 volatile 变量之间,不能互相依赖。只有在状态真正独立于程序内其他内容时才能使用 volatile。</p><h2 id="如何在两个线程之间共享数据"><a href="#如何在两个线程之间共享数据" class="headerlink" title="如何在两个线程之间共享数据"></a>如何在两个线程之间共享数据</h2><p>Java 里面进行多线程通信的主要方式就是共享内存的方式,共享内存主要的关注点有两个:可见<br>性和有序性原子性。Java 内存模型(JMM)解决了可见性和有序性的问题,而锁解决了原子性的<br>问题,理想情况下我们希望做到“同步”和“互斥”。有以下常规实现方法:</p><p><code>将数据抽象成一个类,并将数据的操作作为这个类的方法</code></p><p>1.将数据抽象成一个类,并将对这个数据的操作作为这个类的方法,这么设计可以和容易做到同步,只要在方法上加”synchronized“</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyData</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>&#123;<br>            j++;<br>            System.out.println(<span class="hljs-string">&quot;线程&quot;</span>+Thread.currentThread().getName()+<span class="hljs-string">&quot;j 为:&quot;</span>+j);<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dec</span><span class="hljs-params">()</span>&#123;<br>            j--;<br>            System.out.println(<span class="hljs-string">&quot;线程&quot;</span>+Thread.currentThread().getName()+<span class="hljs-string">&quot;j 为:&quot;</span>+j);<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getData</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-keyword">return</span> j;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AddRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>        MyData data;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">AddRunnable</span><span class="hljs-params">(MyData data)</span>&#123;<br>            <span class="hljs-built_in">this</span>.data= data;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            data.add();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DecRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>        MyData data;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">DecRunnable</span><span class="hljs-params">(MyData data)</span>&#123;<br>            <span class="hljs-built_in">this</span>.data = data;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            data.dec();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MyData</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyData</span>();<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">add</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AddRunnable</span>(data);<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">dec</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DecRunnable</span>(data);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(add).start();<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(dec).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Runnable 对象作为一个类的内部类<br>2.将 Runnable 对象作为一个类的内部类,共享数据作为这个类的成员变量,每个线程对共享数<br>据的操作方法也封装在外部类,以便实现对数据的各个操作的同步和互斥,作为内部类的各<br>个 Runnable 对象调用外部类的这些方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyData</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>&#123;<br>        j++;<br>        System.out.println(<span class="hljs-string">&quot;线程&quot;</span>+Thread.currentThread().getName()+<span class="hljs-string">&quot;j 为:&quot;</span>+j);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dec</span><span class="hljs-params">()</span>&#123;<br>        j--;<br>        System.out.println(<span class="hljs-string">&quot;线程&quot;</span>+Thread.currentThread().getName()+<span class="hljs-string">&quot;j 为:&quot;</span>+j);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getData</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> j;&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestThread</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">MyData</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyData</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">2</span>;i++)&#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>()&#123;<br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                    data.add();<br>                &#125;<br>            &#125;).start();<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>()&#123;<br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                    data.dec();<br>                &#125;<br>            &#125;).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ThreadLocal-作用-线程本地存储"><a href="#ThreadLocal-作用-线程本地存储" class="headerlink" title="ThreadLocal 作用( 线程本地存储 )"></a>ThreadLocal 作用( 线程本地存储 )</h3><p>ThreadLocal,很多地方叫做线程本地变量,也有些地方叫做线程本地存储,ThreadLocal 的作用<br>是提供线程内的局部变量,这种变量在线程的生命周期内起作用,减少同一个线程内多个函数或<br>者组件之间一些公共变量的传递的复杂度。<br>ThreadLocalMap (线程的一个属性)<br>1.每个线程中都有一个自己的 ThreadLocalMap 类对象,可以将线程自己的对象保持到其中,各管各的,线程可以正确的访问到自己的对象。<br>2.将 一 个共 用的 ThreadLocal 静 态实 例作 为 key, 将 不同 对象 的引 用保存 到 不同 线程 的ThreadLocalMap 中,然后在线程执行的各处通过这个静态 ThreadLocal 实例的 get()方法取得自己线程保存的那个对象,避免了将这个对象作为参数传递的麻烦。<br>3.ThreadLocalMap 其实就是线程里面的一个属性,它在 Thread 类中定义<code>ThreadLocal.ThreadLocalMap threadLocals = null;</code></p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/ThreadLocal.png#id=Q4ZgK&originHeight=415&originWidth=494&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p><strong>使用场景</strong><br>最常见的 ThreadLocal 使用场景为 用来解决 数据库连接、Session 管理等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ThreadLocal</span> <span class="hljs-variable">threadSession</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>();<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Session <span class="hljs-title function_">getSession</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InfrastructureException &#123;<br>       <span class="hljs-type">Session</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> (Session) threadSession.get();<br>       <span class="hljs-keyword">try</span> &#123;<br>           <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">null</span>) &#123;<br>               s = getSessionFactory().openSession();<br>               threadSession.set(s);<br>           &#125;<br>       &#125; <span class="hljs-keyword">catch</span> (HibernateException ex) &#123;<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InfrastructureException</span>(ex);<br>       &#125;<br>       <span class="hljs-keyword">return</span> s;<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="synchronized-和-ReentrantLock-的区别"><a href="#synchronized-和-ReentrantLock-的区别" class="headerlink" title="synchronized 和 ReentrantLock 的区别"></a>synchronized 和 ReentrantLock 的区别</h3><p><strong>两者的共同点:</strong></p><ol><li>都是用来协调多线程对共享对象、变量的访问</li><li>都是可重入锁,同一线程可以多次获得同一个锁</li><li>都保证了可见性和互斥性</li></ol><p><strong>两者的不同点:</strong></p><ol><li>ReentrantLock 显示的获得、释放锁,synchronized 隐式获得释放锁</li><li>ReentrantLock 可响应中断、可轮回,synchronized 是不可以响应中断的,为处理锁的不可用性提供了更高的灵活性</li><li>ReentrantLock 是 API 级别的,synchronized 是 JVM 级别的</li><li>ReentrantLock 可以实现公平锁</li><li>ReentrantLock 通过 Condition 可以绑定多个条件</li><li>底层实现不一样, synchronized 是同步阻塞,使用的是悲观并发策略,lock 是同步非阻塞,采用的是乐观并发策略</li><li>Lock 是一个接口,而 synchronized 是 Java 中的关键字,synchronized 是内置的语言实现。</li><li>synchronized 在发生异常时,会自动释放线程占有的锁,因此不会导致死锁现象发生;而 Lock 在发生异常时,如果没有主动通过 unLock()去释放锁,则很可能造成死锁现象,因此使用 Lock 时需要在 finally 块中释放锁。</li><li>Lock 可以让等待锁的线程响应中断,而 synchronized 却不行,使用 synchronized 时,等待的线程会一直等待下去,不能够响应中断。</li><li>通过 Lock 可以知道有没有成功获取锁,而 synchronized 却无法办到。</li><li>Lock 可以提高多个线程进行读操作的效率,既就是实现读写锁等。</li></ol><h3 id="ConcurrentHashMap-并发"><a href="#ConcurrentHashMap-并发" class="headerlink" title="ConcurrentHashMap 并发"></a>ConcurrentHashMap 并发</h3><p>减小锁粒度</p><blockquote><p>减小锁粒度是指缩小锁定对象的范围,从而减小锁冲突的可能性,从而提高系统的并发能力。减<br>小锁粒度是一种削弱多线程锁竞争的有效手段,这种技术典型的应用是 ConcurrentHashMap(高<br>性能的 HashMap)类的实现。对于 HashMap 而言,最重要的两个方法是 get 与 set 方法,如果我<br>们对整个 HashMap 加锁,可以得到线程安全的对象,但是加锁粒度太大。Segment 的大小也被<br>称为 ConcurrentHashMap 的并发度。</p></blockquote><p>ConcurrentHashMap 分段锁</p><blockquote><p>ConcurrentHashMap,它内部细分了若干个小的 HashMap,称之为段(Segment)。默认情况下<br>一个 ConcurrentHashMap 被进一步细分为 16 个段,既就是锁的并发度。<br>如果需要在 ConcurrentHashMap 中添加一个新的表项,并不是将整个 HashMap 加锁,而是首<br>先根据 hashcode 得到该表项应该存放在哪个段中,然后对该段加锁,并完成 put 操作。在多线程<br>环境中,如果多个线程同时进行 put 操作,只要被加入的表项不存放在同一个段中,则线程间可以<br>做到真正的并行。</p></blockquote><p>ConcurrentHashMap 是由 Segment 数组结构和 HashEntry 数组结构组成</p><blockquote><p>ConcurrentHashMap 是由 Segment 数组结构和 HashEntry 数组结构组成。Segment 是一种可<br>重入锁 ReentrantLock,在 ConcurrentHashMap 里扮演锁的角色,HashEntry 则用于存储键值<br>对数据。一个 ConcurrentHashMap 里包含一个 Segment 数组,Segment 的结构和 HashMap<br>类似,是一种数组和链表结构, 一个 Segment 里包含一个 HashEntry 数组,每个 HashEntry 是<br>一个链表结构的元素, 每个 Segment 守护一个 HashEntry 数组里的元素,当对 HashEntry 数组的<br>数据进行修改时,必须首先获得它对应的 Segment 锁。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/ConcurrentHashMap.png#id=hBvkg&originHeight=316&originWidth=606&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="Java-中用到的线程调度"><a href="#Java-中用到的线程调度" class="headerlink" title="Java 中用到的线程调度"></a>Java 中用到的线程调度</h2><p>抢占式调度:</p><blockquote><p>抢占式调度指的是每条线程执行的时间、线程的切换都由系统控制,系统控制指的是在系统某种<br>运行机制下,可能每条线程都分同样的执行时间片,也可能是某些线程执行的时间片较长,甚至<br>某些线程得不到执行的时间片。在这种机制下,一个线程的堵塞不会导致整个进程堵塞。</p></blockquote><p>协同式调度:</p><blockquote><p>协同式调度指某一线程执行完后主动通知系统切换到另一线程上执行,这种模式就像接力赛一样,<br>一个人跑完自己的路程就把接力棒交接给下一个人,下个人继续往下跑。线程的执行时间由线程<br>本身控制,线程切换可以预知,不存在多线程同步问题,但它有一个致命弱点:如果一个线程编<br>写有问题,运行到一半就一直堵塞,那么可能导致整个系统崩溃。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/threadway.png#id=FIMlC&originHeight=427&originWidth=755&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>JVM 的线程调度实现(抢占式调度)</p><blockquote><p>java 使用的线程调使用抢占式调度,Java 中线程会按优先级分配 CPU 时间片运行,且优先级越高<br>越优先执行,但优先级高并不代表能独自占用执行时间片,可能是优先级高得到越多的执行时间<br>片,反之,优先级低的分到的执行时间少但不会分配不到执行时间。</p></blockquote><p>线程让出 cpu 的情况:</p><p>1.当前运行线程主动放弃 CPU,JVM 暂时放弃 CPU 操作(基于时间片轮转调度的 JVM 操作系统不会让线程永久放弃 CPU,或者说放弃本次时间片的执行权),例如调用 yield()方法。<br>2. 当前运行线程因为某些原因进入阻塞状态,例如阻塞在 I/O 上。<br>3. 当前运行线程结束,即运行完 run()方法里面的任务。</p><h3 id="进程调度算法"><a href="#进程调度算法" class="headerlink" title="进程调度算法"></a>进程调度算法</h3><p>优先调度算法</p><p>1.先来先服务调度算法(FCFS)<br>当在作业调度中采用该算法时,每次调度都是从后备作业队列中选择一个或多个最先进入该队列的作业,将它们调入内存,为它们分配资源、创建进程,然后放入就绪队列。在进程调度中采用 FCFS 算法时,则每次调度是从就绪队列中选择一个最先进入该队列的进程,为之分配处理机,使之投入运行。该进程一直运行到完成或发生某事件而阻塞后才放弃处理机,特点是:算法比较简单,可以实现基本上的公平。</p><p>2.短作业(进程)优先调度算法<br>短作业优先(SJF)的调度算法是从后备队列中选择一个或若干个估计运行时间最短的作业,将它们调入内存运行。而短进程优先(SPF)调度算法则是从就绪队列中选出一个估计运行时间最短的进程,将处理机分配给它,使它立即执行并一直执行到完成,或发生某事件而被阻塞放弃处理机时再重新调度。该算法未照顾紧迫型作业。</p><h3 id="高优先权优先调度算法"><a href="#高优先权优先调度算法" class="headerlink" title="高优先权优先调度算法"></a>高优先权优先调度算法</h3><p>为了照顾紧迫型作业,使之在进入系统后便获得优先处理,引入了最高优先权优先(FPF)调度<br>算法。当把该算法用于作业调度时,系统将从后备队列中选择若干个优先权最高的作业装入内存。<br>当用于进程调度时,该算法是把处理机分配给就绪队列中优先权最高的进程。</p><p>1.非抢占式优先权算法<br>在这种方式下,系统一旦把处理机分配给就绪队列中优先权最高的进程后,该进程便一直执行下<br>去,直至完成;或因发生某事件使该进程放弃处理机时。这种调度算法主要用于批处理系统中;<br>也可用于某些对实时性要求不严的实时系统中。</p><p>2.抢占式优先权调度算法<br>在这种方式下,系统同样是把处理机分配给优先权最高的进程,使之执行。但在其执行期间,只<br>要又出现了另一个其优先权更高的进程,进程调度程序就立即停止当前进程(原优先权最高的进程)<br>的执行,重新将处理机分配给新到的优先权最高的进程。显然,这种抢占式的优先权调度算法能<br>更好地满足紧迫作业的要求,故而常用于要求比较严格的实时系统中,以及对性能要求较高的批<br>处理和分时系统中。</p><h3 id="高响应比优先调度算法"><a href="#高响应比优先调度算法" class="headerlink" title="高响应比优先调度算法"></a>高响应比优先调度算法</h3><p>在批处理系统中,短作业优先算法是一种比较好的算法,其主要的不足之处是长作业的运行<br>得不到保证。如果我们能为每个作业引入前面所述的动态优先权,并使作业的优先级随着等待时<br>间的增加而以速率 a 提高,则长作业在等待一定的时间后,必然有机会分配到处理机。该优先权的<br>变化规律可描述为:</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/hightresponse.png#id=lsAcg&originHeight=98&originWidth=719&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>(1) 如果作业的等待时间相同,则要求服务的时间愈短,其优先权愈高,因而该算法有利于短作业。<br>(2) 当要求服务的时间相同时,作业的优先权决定于其等待时间,等待时间愈长,其优先权愈高,因而它实现的是先来先服务。<br>(3) 对于长作业,作业的优先级可以随等待时间的增加而提高,当其等待时间足够长时,其优先级便可升到很高,从而也可获得处理机。简言之,该算法既照顾了短作业,又考虑了作业到达的先后次序,不会使长作业长期得不到服务。因此,该算法实现了一种较好的折衷。当然,在利用该算法时,每要进行调度之前,都须先做响应比的计算,这会增加系统开销。</p><h3 id="基于时间片的轮转调度算法"><a href="#基于时间片的轮转调度算法" class="headerlink" title="基于时间片的轮转调度算法"></a>基于时间片的轮转调度算法</h3><p>1.时间片轮转法<br>在早期的时间片轮转法中,系统将所有的就绪进程按先来先服务的原则排成一个队列,每次调度<br>时,把 CPU 分配给队首进程,并令其执行一个时间片。时间片的大小从几 ms 到几百 ms。当执行<br>的时间片用完时,由一个计时器发出时钟中断请求,调度程序便据此信号来停止该进程的执行,<br>并将它送往就绪队列的末尾;然后,再把处理机分配给就绪队列中新的队首进程,同时也让它执<br>行一个时间片。这样就可以保证就绪队列中的所有进程在一给定的时间内均能获得一时间片的处<br>理机执行时间。</p><p>2.多级反馈队列调度算法</p><p>(1) 应设置多个就绪队列,并为各个队列赋予不同的优先级。第一个队列的优先级最高,第二<br>个队列次之,其余各队列的优先权逐个降低。该算法赋予各个队列中进程执行时间片的大小也各<br>不相同,在优先权愈高的队列中,为每个进程所规定的执行时间片就愈小。例如,第二个队列的<br>时间片要比第一个队列的时间片长一倍,……,第 i+1 个队列的时间片要比第 i 个队列的时间片长<br>一倍。</p><p>(2) 当一个新进程进入内存后,首先将它放入第一队列的末尾,按 FCFS 原则排队等待调度。当<br>轮到该进程执行时,如它能在该时间片内完成,便可准备撤离系统;如果它在一个时间片结束时<br>尚未完成,调度程序便将该进程转入第二队列的末尾,再同样地按 FCFS 原则等待调度执行;如果<br>它在第二队列中运行一个时间片后仍未完成,再依次将它放入第三队列,……,如此下去,当一个<br>长作业(进程)从第一队列依次降到第 n 队列后,在第 n 队列便采取按时间片轮转的方式运行。</p><p>(3) 仅当第一队列空闲时,调度程序才调度第二队列中的进程运行;仅当第 1<del>(i-1)队列均空时,<br>才会调度第 i 队列中的进程运行。如果处理机正在第 i 队列中为某进程服务时,又有新进程进入优<br>先权较高的队列(第 1</del>(i-1)中的任何一个队列),则此时新进程将抢占正在运行进程的处理机,即<br>由调度程序把正在运行的进程放回到第 i 队列的末尾,把处理机分配给新到的高优先权进程。<br>在多级反馈队列调度算法中,如果规定第一个队列的时间片略大于多数人机交互所需之处理时间<br>时,便能够较好的满足各种类型用户的需要。</p><h1 id="什么是-CAS-比较并交换-乐观锁机制-锁自旋"><a href="#什么是-CAS-比较并交换-乐观锁机制-锁自旋" class="headerlink" title="什么是 CAS( 比较并交换-乐观锁机制-锁自旋 )"></a>什么是 CAS( 比较并交换-乐观锁机制-锁自旋 )</h1><h3 id="概念及特性"><a href="#概念及特性" class="headerlink" title="概念及特性"></a>概念及特性</h3><blockquote><p>CAS(Compare And Swap/Set)比较并交换,CAS 算法的过程是这样:它包含 3 个参数<br>CAS(V,E,N)。V 表示要更新的变量(内存值),E 表示预期值(旧的),N 表示新值。当且仅当 V 值等<br>于 E 值时,才会将 V 的值设为 N,如果 V 值和 E 值不同,则说明已经有其他线程做了更新,则当<br>前线程什么都不做。最后,CAS 返回当前 V 的真实值。<br>CAS 操作是抱着乐观的态度进行的(乐观锁),它总是认为自己可以成功完成操作。当多个线程同时<br>使用 CAS 操作一个变量时,只有一个会胜出,并成功更新,其余均会失败。失败的线程不会被挂<br>起,仅是被告知失败,并且允许再次尝试,当然也允许失败的线程放弃操作。基于这样的原理,<br>CAS 操作即使没有锁,也可以发现其他线程对当前线程的干扰,并进行恰当的处理。</p></blockquote><h3 id="原子包-java-util-concurrent-atomic-锁自旋"><a href="#原子包-java-util-concurrent-atomic-锁自旋" class="headerlink" title="原子包 java.util.concurrent.atomic(锁自旋)"></a>原子包 java.util.concurrent.atomic(锁自旋)</h3><blockquote><p>JDK1.5 的原子包:java.util.concurrent.atomic 这个包里面提供了一组原子类。其基本的特性就<br>是在多线程环境下,当有多个线程同时执行这些类的实例包含的方法时,具有排他性,即当某个<br>线程进入方法,执行其中的指令时,不会被其他线程打断,而别的线程就像自旋锁一样,一直等<br>到该方法执行完成,才由 JVM 从等待队列中选择一个另一个线程进入,这只是一种逻辑上的理解。<br>相对于对于 synchronized 这种阻塞算法,CAS 是非阻塞算法的一种常见实现。由于一般 CPU 切<br>换时间比 CPU 指令集操作更加长, 所以 J.U.C 在性能上有了很大的提升。如下代码:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AtomicInteger</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Number</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.io.Serializable &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> value;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAndIncrement</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (;;) &#123; <span class="hljs-comment">//CAS 自旋,一直尝试,直达成功</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> get();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> current + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (compareAndSet(current, next))<br>                <span class="hljs-keyword">return</span> current;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">compareAndSet</span><span class="hljs-params">(<span class="hljs-type">int</span> expect, <span class="hljs-type">int</span> update)</span> &#123;<br>        <span class="hljs-keyword">return</span> unsafe.compareAndSwapInt(<span class="hljs-built_in">this</span>, valueOffset, expect, update);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>getAndIncrement 采用了 CAS 操作,每次从内存中读取数据然后将此数据和+1 后的结果进行<br>CAS 操作,如果成功就返回结果,否则重试直到成功为止。而 compareAndSet 利用 JNI 来完成<br>CPU 指令的操作。</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/CAS.png#id=rjxpo&originHeight=370&originWidth=552&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h3 id="ABA-问题"><a href="#ABA-问题" class="headerlink" title="ABA 问题"></a>ABA 问题</h3><p>CAS 会导致“ABA 问题”。CAS 算法实现一个重要前提需要取出内存中某时刻的数据,而在下时<br>刻比较并替换,那么在这个时间差类会导致数据的变化。<br>比如说一个线程 one 从内存位置 V 中取出 A,这时候另一个线程 two 也从内存中取出 A,并且<br>two 进行了一些操作变成了 B,然后 two 又将 V 位置的数据变成 A,这时候线程 one 进行 CAS 操<br>作发现内存中仍然是 A,然后 one 操作成功。尽管线程 one 的 CAS 操作成功,但是不代表这个过<br>程就是没有问题的。<br>部分乐观锁的实现是通过版本号(version)的方式来解决 ABA 问题,乐观锁每次在执行数据的修<br>改操作时,都会带上一个版本号,一旦版本号和数据的版本号一致就可以执行修改操作并对版本<br>号执行+1 操作,否则就执行失败。因为每次操作的版本号都会随之增加,所以不会出现 ABA 问<br>题,因为版本号只会增加不会减少。</p><h3 id="什么是-AQS-抽象的队列同步器"><a href="#什么是-AQS-抽象的队列同步器" class="headerlink" title="什么是 AQS( 抽象的队列同步器 )"></a>什么是 AQS( 抽象的队列同步器 )</h3><p>AbstractQueuedSynchronizer 类如其名,抽象的队列式的同步器,AQS 定义了一套多线程访问<br>共享资源的同步器框架,许多同步类实现都依赖于它,如常用的<br><code>ReentrantLock/Semaphore/CountDownLatch</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/ABA.png#id=F1isL&originHeight=303&originWidth=766&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>它维护了一个 volatile int state(代表共享资源)和一个 FIFO 线程等待队列(多线程争用资源被<br>阻塞时会进入此队列)。这里 volatile 是核心关键词,具体 volatile 的语义,在此不述。state 的<br>访问方式有三种:</p><ul><li>getState()</li><li>setState()</li><li>compareAndSetState()</li></ul><h3 id="AQS-定义两种资源共享方式"><a href="#AQS-定义两种资源共享方式" class="headerlink" title="AQS 定义两种资源共享方式"></a>AQS 定义两种资源共享方式</h3><ul><li>Exclusive 独占资源 -ReentrantLock</li><li>Exclusive(独占,只有一个线程能执行,如 ReentrantLock)</li><li>Share 共享资源 -Semaphore/CountDownLatch</li><li>Share(共享,多个线程可同时执行,如 Semaphore/CountDownLatch)。</li></ul><p>AQS 只是一个框架,具体资源的获取/释放方式交由自定义同步器去实现,AQS 这里只定义了一个接口,具体资源的获取交由自定义同步器去实现了(通过 state 的 get/set/CAS)之所以没有定义成<br>abstract , 是 因 为 独 占 模 式 下 只 用 实 现 tryAcquire-tryRelease , 而 共 享 模 式 下 只 用 实 现tryAcquireShared-tryReleaseShared。如果都定义成 abstract,那么每个模式也要去实现另一模式下的接口。不同的自定义同步器争用共享资源的方式也不同。自定义同步器在实现时只需要实现共享资源 state 的获取与释放方式即可,至于具体线程等待队列的维护(如获取资源失败入队/唤醒出队等),AQS 已经在顶层实现好了。自定义同步器实现时主要实现以下几种方法:</p><ol><li>isHeldExclusively():该线程是否正在独占资源。只有用到 condition 才需要去实现它。</li><li>tryAcquire(int):独占方式。尝试获取资源,成功则返回 true,失败则返回 false。</li><li>tryRelease(int):独占方式。尝试释放资源,成功则返回 true,失败则返回 false。</li><li>tryAcquireShared(int):共享方式。尝试获取资源。负数表示失败;0 表示成功,但没有剩余可用资源;正数表示成功,且有剩余资源。</li><li>tryReleaseShared(int):共享方式。尝试释放资源,如果释放后允许唤醒后续等待结点返回true,否则返回 false。</li></ol><h3 id="同步器的实现是-ABS-核心-state-资源状态计数"><a href="#同步器的实现是-ABS-核心-state-资源状态计数" class="headerlink" title="同步器的实现是 ABS 核心( state 资源状态计数)"></a>同步器的实现是 ABS 核心( state 资源状态计数)</h3><p>同步器的实现是 ABS 核心,以 ReentrantLock 为例,state 初始化为 0,表示未锁定状态。A 线程<br>lock()时,会调用 tryAcquire()独占该锁并将 state+1。此后,其他线程再 tryAcquire()时就会失<br>败,直到 A 线程 unlock()到 state=0(即释放锁)为止,其它线程才有机会获取该锁。当然,释放<br>锁之前,A 线程自己是可以重复获取此锁的(state 会累加),这就是可重入的概念。但要注意,<br>获取多少次就要释放多么次,这样才能保证 state 是能回到零态的。<br>以 CountDownLatch 以例,任务分为 N 个子线程去执行,state 也初始化为 N(注意 N 要与<br>线程个数一致)。这 N 个子线程是并行执行的,每个子线程执行完后 countDown()一次,state<br>会 CAS 减 1。等到所有子线程都执行完后(即 state=0),会 unpark()主调用线程,然后主调用线程<br>就会从 await()函数返回,继续后余动作。</p><h3 id="ReentrantReadWriteLock-实现独占和共享两种方式"><a href="#ReentrantReadWriteLock-实现独占和共享两种方式" class="headerlink" title="ReentrantReadWriteLock 实现独占和共享两种方式"></a>ReentrantReadWriteLock 实现独占和共享两种方式</h3><p>一般来说,自定义同步器要么是独占方法,要么是共享方式,他们也只需实现 tryAcquire-tryRelease、tryAcquireShared-tryReleaseShared 中的一种即可。但 AQS 也支持自定义同步器同时实现独占和共享两种方式,如 ReentrantReadWriteLock。</p>]]></content>
    
    
    <categories>
      
      <category>Java相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Thread</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java篇-Java集合</title>
    <link href="/2018/05/29/yuque/ke0g2t/"/>
    <url>/2018/05/29/yuque/ke0g2t/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1657536248384-c96c61bd-f853-431d-891a-74f1362fc359.png#averageHue=%23f0c66b&clientId=u04701f05-5d52-4&from=paste&height=250&id=u61dbb5aa&originHeight=500&originWidth=1200&originalType=binary&ratio=1&rotation=0&showTitle=false&size=114131&status=done&style=none&taskId=u8b968ea0-387e-4512-ae8c-44fc2744e9f&title=&width=600" alt="image.png"></p><h1 id="接口继承关系和实现"><a href="#接口继承关系和实现" class="headerlink" title="接口继承关系和实现"></a>接口继承关系和实现</h1><blockquote><p>集合类存放于Java.util包中，主要有三种：<code>set(集)</code>，<code>list(列表包含Queue)</code>，<code>map(映射)</code></p></blockquote><ul><li>Collection:Collection是集合List、Set、Queue的最基本的接口。</li><li>Iterator:迭代器，可以通过迭代器遍历集合中的数据。</li><li>Map:是映射表的基础接口</li></ul><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/TIM%E5%9B%BE%E7%89%8720200529102225.png#id=FMawr&originHeight=544&originWidth=1529&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>集合框架</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/TIM%E5%9B%BE%E7%89%8720200529102233.png#id=H0RkO&originHeight=947&originWidth=759&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h1 id="List"><a href="#List" class="headerlink" title="List"></a>List</h1><blockquote><p>Java的List是非常常用的的数据类型。List是有序的Collection。Java List一共三个实现：<code>ArrayList</code>，<code>Vector</code>，<code>LinkedList</code></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/List.png#id=UyBTW&originHeight=854&originWidth=1292&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><ul><li>ArrayList(数组)</li></ul><blockquote><p>ArrayList是最常用的List实现类，内部是通过数组实现的，它允许对元素进行快速随机访问。数组的缺点是每个元素之间不能有间隔，当数组大小不满足时需要增加存储能力，就要将已经有数组的数据复制到新的存储空间中。当从ArrayList的中间位置插入或者删除元素时，需要对数组进行复制、移动、代价比较高。因此，它适合随机查找和遍历，不适合插入和删除。</p></blockquote><ul><li>Vector(数组实现、线程同步)</li></ul><blockquote><p>Vector与ArrayList一样，也是通过数组实现的，不同的是它支持线程同步，即某一刻只有一个线程能够写Vector，避免多线程同时而引起的不一致性，但实现同步需要很高的花费，因此访问它比访问ArrayList慢。</p></blockquote><ul><li>LinkList(链表)</li></ul><blockquote><p>LinkedList是用链表结构存储数据的，很适合数据的动态插入和删除，随机访问和遍历速度比较慢。另外，他还提供List接口中没有定义的方法，专门用于操作表头和表尾元素，可以当做堆栈、队列和双向队列使用</p></blockquote><h1 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h1><blockquote><p>Set注重独一无二的性质，该体系结合用于存储无序(存入存出的顺序不一定相同)元素，值元素不能重复。对象的相等本质是对象的hashCode值(java是依据对象的内存地址计算出的此序号)判断的，如果想让两个不同的对象视为相等的，就必须覆盖Object的hashCode方法和equals方法</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/TIM%E5%9B%BE%E7%89%8720200529175509.png#id=uSQJN&originHeight=891&originWidth=1270&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="HashSet-Hash表"><a href="#HashSet-Hash表" class="headerlink" title="HashSet(Hash表)"></a>HashSet(Hash表)</h2><blockquote><p>哈希表存放的是哈希值。HashSet存储元素的顺序并不是按照存入时的顺序<code>(和List显然不同)</code>而是按照哈希值来存的所以取数据也是按照哈希值取的。元素的哈希值是通过元素的<code>hashcode</code>方法获取的，HashSet首先判断两个元素的哈希值，如果哈希值用于，接着会比较<code>equals</code>方法如果equals结果为true，HashSet就视为同一个元素。如果equals为false就不是同一个元素。</p></blockquote><blockquote><p>哈希值相同equals为false的元素是怎么存储呢？就是在同样的哈希值下顺延<code>(可以认为哈希值相同的元素放在一个哈希桶中)</code>也就是哈希一样的存一列。如图1所示表示hashCode值不相同的情况;图2表示hashCode值相同，但是equals不相同情况。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/TIM%E5%9B%BE%E7%89%8720200529102233.png#id=zID2O&originHeight=947&originWidth=759&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><blockquote><p>HashSet通过hashCode值来确定元素在内存中的位置。一个hashCode位置上可以存放多个元素。</p></blockquote><h2 id="TreeSet-二叉树"><a href="#TreeSet-二叉树" class="headerlink" title="TreeSet(二叉树)"></a>TreeSet(二叉树)</h2><ul><li> TreeSet()是使用二叉树的原理对新add()的对象按照指定的顺序排序(升序、降序)，每增加一个对象都会进行进行排序，将对象插入的二叉树指定的位置。 </li><li> Integer和String对象都可以进行默认的TreeSet排序，而自定义类的对象是不可以的，<code>自己定义的类必须实现Comparable接口，并且复写相应的compareTo()函数</code>，才可以正常使用。 </li><li> 在覆写compare()函数时，要返回相应的值才能使TreeSet按照一定的规则来排序 </li><li> 在比较此对象与指定对象的顺序。如果该对象大小，等于或大于指定对象，则分别防护负整数、零或正整数。 </li></ul><h2 id="LinkHashSet-HashSet-LinkedHashMap"><a href="#LinkHashSet-HashSet-LinkedHashMap" class="headerlink" title="LinkHashSet(HashSet+LinkedHashMap)"></a>LinkHashSet(HashSet+LinkedHashMap)</h2><blockquote><p>对于LinkedHashSet而言，它继承与HashSet、又基于LinkedHashMap来实现的。LinkedHashSet底层使用LinkedHashMap来保存所有元素，它继承于HashSet，其所有的方法操作上又与HashSet相同，因此LinkedHashSet的实现上非常简单，只提供了四个构造方法，并通过传递一个标识参数，调用父类的构造器，底层构造一个LinkedHashMap来实现，在相关操作上与父类HashSet的操作相同，直接调用父类HashSet的方法即可。</p></blockquote><h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/TIM%E5%9B%BE%E7%89%8720200530115930.png#id=XLtHO&originHeight=597&originWidth=1271&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="HashMap-数组-链表-红黑树"><a href="#HashMap-数组-链表-红黑树" class="headerlink" title="HashMap(数组+链表+红黑树)"></a>HashMap(数组+链表+红黑树)</h2><blockquote><p>HashMap 根据键的 hashCode 值存储数据,大多数情况下可以直接定位到它的值,因而具有很快<br>的访问速度,但遍历顺序却是不确定的。 HashMap 最多只允许一条记录的键为 null,允许多条记<br>录的值为 null。HashMap 非线程安全,即任一时刻可以有多个线程同时写 HashMap,可能会导<br>致数据的不一致。如果需要满足线程安全,可以用 Collections 的 synchronizedMap 方法使<br>HashMap 具有线程安全的能力,或者使用 ConcurrentHashMap。我们用下面这张图来介绍<br>HashMap 的结构。</p></blockquote><h2 id="Java7实现"><a href="#Java7实现" class="headerlink" title="Java7实现"></a>Java7实现</h2><blockquote><p>Java7HashMap结构</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/TIM%E5%9B%BE%E7%89%8720200530121604.png#id=eD61T&originHeight=476&originWidth=1295&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><blockquote><p>大方向上,HashMap 里面是一个数组,然后数组中每个元素是一个单向链表。上图中,每个绿色<br>的实体是嵌套类 Entry 的实例,Entry 包含四个属性:key, value, hash 值和用于单向链表的 next。</p></blockquote><ol><li>capacity:当前数组容量,始终保持 2^n,可以扩容,扩容后数组大小为当前的 2 倍。</li><li>loadFactor:负载因子,默认为 0.75。</li><li>threshold:扩容的阈值,等于 capacity * loadFactor</li></ol><h2 id="Java8实现"><a href="#Java8实现" class="headerlink" title="Java8实现"></a>Java8实现</h2><blockquote><p>Java8 对 HashMap 进行了一些修改,最大的不同就是利用了红黑树,所以其由 数组+链表+红黑<br>树 组成。<br>根据 Java7 HashMap 的介绍,我们知道,查找的时候,根据 hash 值我们能够快速定位到数组的<br>具体下标,但是之后的话,需要顺着链表一个个比较下去才能找到我们需要的,时间复杂度取决<br>于链表的长度,为 O(n)。为了降低这部分的开销,在 Java8 中,当链表中的元素超过了 8 个以后,<br>会将链表转换为红黑树,在这些位置进行查找的时候可以降低时间复杂度为 O(logN)。</p></blockquote><blockquote><p>Java8 HashMap结构</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/TIM%E5%9B%BE%E7%89%8720200530121933.png#id=KtkDj&originHeight=486&originWidth=1275&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h2><h3 id="Segment-段"><a href="#Segment-段" class="headerlink" title="Segment 段"></a>Segment 段</h3><blockquote><p>ConcurrentHashMap 和 HashMap 思路是差不多的,但是因为它支持并发操作,所以要复杂一<br>些。整个 ConcurrentHashMap 由一个个 Segment 组成,Segment 代表”部分“或”一段“的<br>意思,所以很多地方都会将其描述为分段锁。注意,行文中,我很多地方用了“槽”来代表一个segment。</p></blockquote><h3 id="线程安全-Segment-继承-ReentrantLock-加锁"><a href="#线程安全-Segment-继承-ReentrantLock-加锁" class="headerlink" title="线程安全(Segment 继承 ReentrantLock 加锁)"></a>线程安全(Segment 继承 ReentrantLock 加锁)</h3><blockquote><p>简单理解就是,ConcurrentHashMap 是一个 Segment 数组,Segment 通过继承<br>ReentrantLock 来进行加锁,所以每次需要加锁的操作锁住的是一个 segment,这样只要保证每<br>个 Segment 是线程安全的,也就实现了全局的线程安全。</p></blockquote><h4 id="Java7-ConcurrentHashMap结构"><a href="#Java7-ConcurrentHashMap结构" class="headerlink" title="Java7 ConcurrentHashMap结构"></a>Java7 ConcurrentHashMap结构</h4><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/TIM%E5%9B%BE%E7%89%8720200530122248.png#id=Pyyon&originHeight=802&originWidth=761&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h4 id="并行度-默认-16"><a href="#并行度-默认-16" class="headerlink" title="并行度(默认 16)"></a>并行度(默认 16)</h4><blockquote><p>concurrencyLevel:并行级别、并发数、Segment 数,怎么翻译不重要,理解它。默认是 16,<br>也就是说 ConcurrentHashMap 有 16 个 Segments,所以理论上,这个时候,最多可以同时支<br>持 16 个线程并发写,只要它们的操作分别分布在不同的 Segment 上。这个值可以在初始化的时<br>候设置为其他值,但是一旦初始化以后,它是不可以扩容的。再具体到每个 Segment 内部,其实<br>每个 Segment 很像之前介绍的 HashMap,不过它要保证线程安全,所以处理起来要麻烦些。</p></blockquote><h4 id="Java8-ConcurrentHashMap结构"><a href="#Java8-ConcurrentHashMap结构" class="headerlink" title="Java8 ConcurrentHashMap结构"></a>Java8 ConcurrentHashMap结构</h4><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/TIM%E5%9B%BE%E7%89%8720200530122718.png#id=HTLdk&originHeight=456&originWidth=1001&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="HashTable-线程安全"><a href="#HashTable-线程安全" class="headerlink" title="HashTable(线程安全)"></a>HashTable(线程安全)</h2><p>Hashtable 是遗留类,很多映射的常用功能与 HashMap 类似,不同的是它承自 Dictionary 类,<br>并且是线程安全的,任一时间只有一个线程能写 Hashtable,并发性不如 ConcurrentHashMap,<br>因为 ConcurrentHashMap 引入了分段锁。Hashtable 不建议在新代码中使用,不需要线程安全<br>的场合可以用 HashMap 替换,需要线程安全的场合可以用 ConcurrentHashMap 替换。</p><h2 id="TreeMap-可排序"><a href="#TreeMap-可排序" class="headerlink" title="TreeMap(可排序)"></a>TreeMap(可排序)</h2><p>TreeMap 实现 SortedMap 接口,能够把它保存的记录根据键排序,默认是按键值的升序排序,<br>也可以指定排序的比较器,当用 Iterator 遍历 TreeMap 时,得到的记录是排过序的。<br>如果使用排序的映射,建议使用 TreeMap。<br>在使用 TreeMap 时,key 必须实现 Comparable 接口或者在构造 TreeMap 传入自定义的<br>Comparator,否则会在运行时抛出 java.lang.ClassCastException 类型的异常。</p><p><a href="https://www.ibm.com/developerworks/cn/java/j-lo-tree/index.html">参考</a></p><h2 id="LinkHashMap-记录插入顺序"><a href="#LinkHashMap-记录插入顺序" class="headerlink" title="LinkHashMap(记录插入顺序)"></a>LinkHashMap(记录插入顺序)</h2><p>LinkedHashMap 是 HashMap 的 一 个 子 类 , 保 存 了 记 录 的 插 入 顺 序 , 在 用 Iterator 遍 历<br>LinkedHashMap 时,先得到的记录肯定是先插入的,也可以在构造时带参数,按照访问次序排序。</p><p><a href="http://www.importnew.com/28263.html">参考 1</a><br><a href="http://www.importnew.com/20386.html#comment-648123">参考 2</a></p>]]></content>
    
    
    <categories>
      
      <category>Java相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Collection</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java篇-枚举的使用</title>
    <link href="/2018/03/09/yuque/xvqlie/"/>
    <url>/2018/03/09/yuque/xvqlie/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1657546027171-2644179c-96a3-4564-8749-e97dafa2023a.png#clientId=ufbc8e1a8-1927-4&from=markdown&id=ukEQl&originHeight=480&originWidth=840&originalType=url&ratio=1&rotation=0&showTitle=false&size=209905&status=done&style=none&taskId=u3700fa8e-f3ed-4cb5-a7dc-360d551140e&title=" alt="image.png"></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Enum是所有 Java 语言枚举类型的公共基本类（注意Enum是抽象类），以下是它的常见方法：</p><table><thead><tr><th>返回类型</th><th>方法名称</th><th>方法说明</th></tr></thead><tbody><tr><td>int</td><td>compareTo(E o)</td><td>比较此枚举与指定对象的顺序</td></tr><tr><td>boolean</td><td>equals(Object other)</td><td>当指定对象等于此枚举常量时，返回 true。</td></tr><tr><td>Class&lt;?&gt;</td><td>getDeclaringClass()</td><td>返回与此枚举常量的枚举类型相对应的 Class 对象</td></tr><tr><td>String</td><td>name()</td><td>返回此枚举常量的名称，在其枚举声明中对其进行声明</td></tr><tr><td>int</td><td>ordinal()</td><td>返回枚举常量的序数</td></tr><tr><td>String</td><td>toString()</td><td>返回枚举常量的名称，它包含在声明中</td></tr><tr><td>static<T extends Enum> T</td><td>static valueOf(Class enumType, String name)</td><td>返回带指定名称的指定枚举类型的枚举常量。</td></tr></tbody></table><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><p>定义枚举类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.enumdemo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">HttpRequestMethod</span> <span class="hljs-variable">httpRequestMethod</span> <span class="hljs-operator">=</span> HttpRequestMethod.POST;<br><br>        System.out.println(httpRequestMethod.name());<br>        System.out.println(httpRequestMethod.getType());<br>        System.out.println(httpRequestMethod.getDesc());<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">getHttpRequestMethod</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;GET&quot;</span>;<br><br>        <span class="hljs-keyword">switch</span> (HttpRequestMethod.valueOf(getHttpRequestMethod))&#123;<br>            <span class="hljs-keyword">case</span> GET:<br>                System.out.println(HttpRequestMethod.GET.getDesc());<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>简单使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.enumdemo;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *http请求枚举类型</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">HttpRequestMethod</span> &#123;<br>    <span class="hljs-comment">//每个枚举成员实际上是一个枚举实例</span><br>    GET(<span class="hljs-string">&quot;get&quot;</span>,<span class="hljs-string">&quot;这是一个get请求&quot;</span>),<br>    POST(<span class="hljs-string">&quot;post&quot;</span>,<span class="hljs-string">&quot;这是一个post请求&quot;</span>),<br>    PUT(<span class="hljs-string">&quot;put&quot;</span>,<span class="hljs-string">&quot;这是一个put请求&quot;</span>),<br>    DELETE(<span class="hljs-string">&quot;delete&quot;</span>,<span class="hljs-string">&quot;这是一个delete请求&quot;</span>),<br>    OPTIONS(<span class="hljs-string">&quot;option&quot;</span>,<span class="hljs-string">&quot;这是一个option请求&quot;</span>),<br>    PATCH(<span class="hljs-string">&quot;patch&quot;</span>,<span class="hljs-string">&quot;这是一个patch请求&quot;</span>),<br>    TRACE(<span class="hljs-string">&quot;trace&quot;</span>,<span class="hljs-string">&quot;这是一个trace请求&quot;</span>),<br>    CONNECT(<span class="hljs-string">&quot;connect&quot;</span>,<span class="hljs-string">&quot;这是一个connect请求&quot;</span>);<br>    <span class="hljs-comment">//类型</span><br>    <span class="hljs-keyword">private</span> String type;<br>    <span class="hljs-comment">//描述</span><br>    <span class="hljs-keyword">private</span> String desc;<br>    <span class="hljs-comment">//私有化构造函数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">HttpRequestMethod</span><span class="hljs-params">(String type,String desc)</span>&#123;<br>        <span class="hljs-built_in">this</span>.type=type;<br>        <span class="hljs-built_in">this</span>.desc=desc;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getType</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> type;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setType</span><span class="hljs-params">(String type)</span> &#123;<br>        <span class="hljs-built_in">this</span>.type = type;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDesc</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> desc;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDesc</span><span class="hljs-params">(String desc)</span> &#123;<br>        <span class="hljs-built_in">this</span>.desc = desc;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/qq_39949109/article/details/80432477">Java 枚举(enum) 详解7种常见的用法</a></p>]]></content>
    
    
    <categories>
      
      <category>Java相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>枚举</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java篇-自定义注解</title>
    <link href="/2018/03/08/yuque/udsryw/"/>
    <url>/2018/03/08/yuque/udsryw/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1657536577762-7d50e7b1-1dd6-4baf-8a9d-b02cca2777eb.png#clientId=u35a0db8c-6453-4&from=markdown&id=odxNm&originHeight=425&originWidth=1400&originalType=url&ratio=1&rotation=0&showTitle=false&size=56088&status=done&style=none&taskId=u618299ea-0af4-47b0-9c1d-6a4854f7f24&title=" alt="image.png"></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Java 注解（Annotation）又称 Java 标注，是 JDK5.0 引入的一种注释机制。<br>Java 语言中的类、方法、变量、参数和包等都可以被标注。和 Javadoc 不同，Java 标注可以通过反射获取标注内容。在编译器生成类文件时，标注可以被嵌入到字节码中。Java 虚拟机可以保留标注内容，在运行时可以获取到标注内容 。 当然它也支持自定义 Java 标注。</p><h1 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h1><ul><li> <code>@Retention</code> - 标识这个注解怎么保存，是只在代码中，还是编入class文件中，或者是在运行时可以通过反射访问。 </li><li> <code>@Documented</code> - 标记这些注解是否包含在用户文档中。 </li><li> <code>@Target</code> - 标记这个注解应该是哪种 Java 成员。 </li><li> <code>@Inherited</code> - 标记这个注解是继承于哪个注解类(默认 注解并没有继承于任何子类)<br>从 Java 7 开始，额外添加了 3 个注解: </li><li> <code>@SafeVarargs</code> - Java 7 开始支持，忽略任何使用参数为泛型变量的方法或构造函数调用产生的警告。 </li><li> <code>@FunctionalInterface</code> - Java 8 开始支持，标识一个匿名函数或函数式接口。 </li><li> <code>@Repeatable</code> - Java 8 开始支持，标识某注解可以在同一个声明上使用多次。 </li></ul><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/28123151-d471f82eb2bc4812b46cc5ff3e9e6b82.jpg#id=Uisfp&originHeight=605&originWidth=965&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h1 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h1><p>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-meta">@Target(&#123; ElementType.FIELD, ElementType.METHOD &#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Value &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>实体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String introduce;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-meta">@Value(value = &quot;mikey&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getIntroduce</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> introduce;<br>    &#125;<br><br>    <span class="hljs-meta">@Value(value = &quot;i am mikey&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setIntroduce</span><span class="hljs-params">(String introduce)</span> &#123;<br>        <span class="hljs-built_in">this</span>.introduce = introduce;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实体工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserFactory</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> User <span class="hljs-title function_">create</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        Method[] methods = User.class.getMethods();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">for</span> (Method method : methods) &#123;<br>                <span class="hljs-keyword">if</span> (method.isAnnotationPresent(Value.class))&#123;<br>                    <span class="hljs-type">Value</span> <span class="hljs-variable">annotation</span> <span class="hljs-operator">=</span> method.getAnnotation(Value.class);<br>                    method.invoke(user,annotation.value());<br>                &#125;<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> UserFactory.create();<br>        System.out.println(user.getName());<br>        System.out.println(user.getIntroduce());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="简单案例"><a href="#简单案例" class="headerlink" title="简单案例"></a>简单案例</h1><blockquote><p>打印日志注解的实现</p></blockquote><p>1.定义注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.annotation.annotation;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><br><span class="hljs-meta">@Target(ElementType.METHOD)</span><span class="hljs-comment">//作用于方法</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Log &#123;<br>    <span class="hljs-comment">//注解属性</span><br>    String <span class="hljs-title function_">name</span><span class="hljs-params">()</span>  <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;;<br>    String <span class="hljs-title function_">prot</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;;<br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;默认值&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.定义切面和解析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.annotation.aop;<br><br><span class="hljs-keyword">import</span> com.example.annotation.annotation.Log;<br><span class="hljs-keyword">import</span> org.aspectj.lang.JoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.After;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Before;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Pointcut;<br><span class="hljs-keyword">import</span> org.aspectj.lang.reflect.MethodSignature;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 切面</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Aspect</span> <span class="hljs-comment">// 注解声明一个切面</span><br><span class="hljs-meta">@Component</span> <span class="hljs-comment">// 受spring管理的容器</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogAspect</span> &#123;<br>    <span class="hljs-meta">@Pointcut(&quot;@annotation(com.example.annotation.annotation.Log)&quot;)</span> <span class="hljs-comment">// 注解声明切点，注解的全限定名</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">annotationPointcut</span><span class="hljs-params">()</span> &#123;<br>    &#125;;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * befor</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> joinPoint</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Before(&quot;annotationPointcut()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123;<br>        <span class="hljs-type">MethodSignature</span> <span class="hljs-variable">methodSignature</span> <span class="hljs-operator">=</span> (MethodSignature)joinPoint.getSignature();<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> methodSignature.getMethod();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> method.getName();<br>        <span class="hljs-comment">//获取方法上的注解</span><br>        <span class="hljs-type">Log</span> <span class="hljs-variable">annotation</span> <span class="hljs-operator">=</span> method.getAnnotation(Log.class);<br>        System.out.println(name+<span class="hljs-string">&quot;方法执行之前执行&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;name:&quot;</span>+annotation.name());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * after</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> joinPoint</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@After(&quot;annotationPointcut()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">(JoinPoint joinPoint)</span> &#123;<br>        <span class="hljs-type">MethodSignature</span> <span class="hljs-variable">methodSignature</span> <span class="hljs-operator">=</span> (MethodSignature)joinPoint.getSignature();<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> methodSignature.getMethod();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> method.getName();<br>        <span class="hljs-comment">//获取方法上的注解</span><br>        <span class="hljs-type">Log</span> <span class="hljs-variable">annotation</span> <span class="hljs-operator">=</span> method.getAnnotation(Log.class);<br>        System.out.println(name+<span class="hljs-string">&quot;方法执行之后执行&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;name:&quot;</span>+annotation.name());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.使用注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Controller</span> &#123;<br><br>    <span class="hljs-meta">@Log(name = &quot;测试日志注解&quot;)</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">logAnnoMethod</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Controller logAnnoMethod Method body execute...&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.测试使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@Configuration</span> <span class="hljs-comment">//注册被spring管理</span><br><span class="hljs-meta">@EnableAspectJAutoProxy</span> <span class="hljs-comment">//注解开启对aspectJ的支持</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnnotationApplication</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    SpringApplication.run(AnnotationApplication.class, args);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>5.使用效果</p><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/I9fQXR4DCdtlsW8.png#id=Q8F2t&originHeight=156&originWidth=528&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.cnblogs.com/liangweiping/p/3837332.html">Java自定义注解</a></p>]]></content>
    
    
    <categories>
      
      <category>Java相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>注解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java篇-Java基础</title>
    <link href="/2018/03/01/yuque/tv34ti/"/>
    <url>/2018/03/01/yuque/tv34ti/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1657536308421-c1d6eb53-98cf-4b7f-b051-57b0092cf5f3.png#averageHue=%233a412d&clientId=u440f420c-15f5-4&errorMessage=unknown%20error&from=markdown&id=vqwLS&originHeight=424&originWidth=640&originalType=url&ratio=1&rotation=0&showTitle=false&size=382292&status=error&style=none&taskId=u961b725a-af11-4d86-9477-26dac5ccd26&title=" alt="image.png"></p><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote><p>如果某个方法不能按照正常的途径完成任务,就可以通过另一种路径退出方法。在这种情况下会抛出一个封装了错误信息的对象。此时,这个方法会立刻退出同时不返回任何值。另外,调用这个方法的其他代码也无法继续执行,异常处理机制会将代码执行交给异常处理器。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/exception.png#id=K7F3J&originHeight=459&originWidth=725&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="异常分类"><a href="#异常分类" class="headerlink" title="异常分类"></a>异常分类</h2><blockquote><p>Throwable 是 Java 语言中所有错误或异常的超类。下一层分为 Error 和 Exception</p></blockquote><h3 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h3><blockquote><p>Error 类是指 java 运行时系统的内部错误和资源耗尽错误。应用程序不会抛出该类对象。如果出现了这样的错误,除了告知用户,剩下的就是尽力使程序安全的终止。</p></blockquote><h3 id="Exception-RuntimeException、CheckedException"><a href="#Exception-RuntimeException、CheckedException" class="headerlink" title="Exception(RuntimeException、CheckedException)"></a>Exception(RuntimeException、CheckedException)</h3><blockquote><p>Exception 又 有 两 个 分 支 , 一 个 是 运 行 时 异 常 RuntimeException , 一 个 是CheckedException。</p></blockquote><h3 id="RuntimeException"><a href="#RuntimeException" class="headerlink" title="RuntimeException"></a>RuntimeException</h3><blockquote><p>如 : <code>NullPointerException</code> 、 <code>ClassCastException</code> ; 一 个 是 检 查 异 常CheckedException,如 I/O 错误导致的 <code>IOException</code>、<code>SQLException</code>。 RuntimeException 是那些可能在 Java 虚拟机正常运行期间抛出的异常的超类。 如果出现 RuntimeException,那么一定是程序员的错误.</p></blockquote><h3 id="检查异常-CheckedException"><a href="#检查异常-CheckedException" class="headerlink" title="检查异常 CheckedException:"></a>检查异常 CheckedException:</h3><blockquote><p>一般是外部错误,这种异常都发生在编译阶段,Java 编译器会强制程序去捕获此类异常,即会出现要求你把这段可能出现异常的程序进行 try catch,该类异常一般包括几个方面:</p></blockquote><ol><li>试图在文件尾部读取数据</li><li>试图打开一个错误格式的 URL</li><li>试图根据给定的字符串查找 class 对象,而这个字符串表示的类并不存在</li></ol><h3 id="异常的处理方式"><a href="#异常的处理方式" class="headerlink" title="异常的处理方式"></a>异常的处理方式</h3><p>遇到问题不进行具体处理,而是继续抛给调用者 (throw,throws)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br>        <span class="hljs-keyword">if</span>(s.equals(<span class="hljs-string">&quot;abc&quot;</span>)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NumberFormatException</span>();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(s);<br>    &#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">div</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>    <span class="hljs-keyword">return</span> a/b;<br>&#125;<br></code></pre></td></tr></table></figure><p>try catch 捕获异常针对性处理方式<br>Throw 和 throws 的区别:<br>位置不同:</p><blockquote><p>throws 用在函数上,后面跟的是异常类,可以跟多个;而 throw 用在函数内,后面跟的是异常对象。</p></blockquote><p>功能不同:</p><blockquote><p>throws 用来声明异常,让调用者只知道该功能可能出现的问题,可以给出预先的处理方式;throw 抛出具体的问题对象,执行到 throw,功能就已经结束了,跳转到调用者,并将具体的问题对象抛给调用者。也就是说 throw 语句独立存在时,下面不要定义其他语句,因为执行不到。</p></blockquote><blockquote><p>throws 表示出现异常的一种可能性,并不一定会发生这些异常;throw 则是抛出了异常,执行 throw 则一定抛出了某种异常对象。</p></blockquote><blockquote><p>两者都是消极处理异常的方式,只是抛出或者可能抛出异常,但是不会由函数去处理异常,真正的处理异常由函数的上层调用处理。</p></blockquote><p><strong>注意：不要在 finally 语句块中使用 return! 当 try 语句和 finally 语句中都有 return 语句时，try 语句块中的 return 语句会被忽略。这是因为 try 语句中的 return 返回值会先被暂存在一个本地变量中，当执行到 finally 语句中的 return 之后，这个本地变量的值就变为了 finally 语句中的 return 返回值。</strong></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">//3</span><br>public int <span class="hljs-title function_ invoke__">tryCatchFinal</span>()&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        int ret = <span class="hljs-number">1</span>/<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-title function_ invoke__">catch</span> (Exception e)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>    &#125; finally &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//3</span><br>public int <span class="hljs-title function_ invoke__">tryCatchFinal</span>()&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-title function_ invoke__">catch</span> (Exception e)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>    &#125; finally &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><h2 id="动态语言"><a href="#动态语言" class="headerlink" title="动态语言"></a>动态语言</h2><blockquote><p>动态语言,是指程序在运行时可以改变其结构:新的函数可以引进,已有的函数可以被删除等结构上的变化。比如常见的 JavaScript 就是动态语言,除此之外 Ruby,Python 等也属于动态语言,而 C、C++则不属于动态语言。从反射角度说 JAVA 属于半动态语言。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/reflex.png#id=wzIM2&originHeight=478&originWidth=1304&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="反射机制概念-运行状态中知道类所有的属性和方法"><a href="#反射机制概念-运行状态中知道类所有的属性和方法" class="headerlink" title="反射机制概念 (运行状态中知道类所有的属性和方法)"></a>反射机制概念 (运行状态中知道类所有的属性和方法)</h2><blockquote><p>在 Java 中的反射机制是指在运行状态中,对于任意一个类都能够知道这个类所有的属性和方法;并且对于任意一个对象,都能够调用它的任意一个方法;这种动态获取信息以及动态调用对象方法的功能成为 Java 语言的反射机制。</p></blockquote><h3 id="反射的应用场合"><a href="#反射的应用场合" class="headerlink" title="反射的应用场合"></a>反射的应用场合</h3><p>编译时类型和运行时类型</p><p>在 Java 程序中许多对象在运行是都会出现两种类型:编译时类型和运行时类型。 编译时的类型由<br>声明对象时实用的类型来决定,运行时的类型由实际赋值给对象的类型决定 。如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Person person=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br></code></pre></td></tr></table></figure><p>其中编译时类型为 Person,运行时类型为 Student。的编译时类型无法获取具体方法</p><blockquote><p>程序在运行时还可能接收到外部传入的对象,该对象的编译时类型为 Object,但是程序有需要调用该对象的运行时类型的方法。为了解决这些问题,程序需要在运行时发现对象和类的真实信息。然而,如果编译时根本无法预知该对象和类属于哪些类,程序只能依靠运行时信息来发现该对象和类的真实信息,此时就必须使用到反射了。</p></blockquote><h3 id="Java-反射-API"><a href="#Java-反射-API" class="headerlink" title="Java 反射 API"></a>Java 反射 API</h3><p>反射 API 用来生成 JVM 中的类、接口或则对象的信息。</p><blockquote><ol><li>Class 类:反射的核心类,可以获取类的属性,方法等信息。</li><li>Field 类:Java.lang.reflec 包中的类,表示类的成员变量,可以用来获取和设置类之中的属性值。</li><li>Method 类: Java.lang.reflec 包中的类,表示类的方法,它可以用来获取类中的方法信息或者执行方法。</li><li>Constructor 类: Java.lang.reflec 包中的类,表示类的构造方法。</li></ol></blockquote><h4 id="反射使用步骤-获取-Class-对象、调用对象方法"><a href="#反射使用步骤-获取-Class-对象、调用对象方法" class="headerlink" title="反射使用步骤(获取 Class 对象、调用对象方法)"></a>反射使用步骤(获取 Class 对象、调用对象方法)</h4><blockquote><ol><li>反射使用步骤(获取 Class 对象、调用对象方法)获取想要操作的类的 Class 对象,他是反射的核心,通过 Class 对象我们可以任意调用类的方法</li><li>调用 Class 类中的方法,既就是反射的使用阶段</li><li>使用反射 API 来操作这些信息</li></ol></blockquote><p>获取 Class 对象的 3 种方法<br>调用某个对象的 getClass()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Person p=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>Class clazz=p.getClass();<br></code></pre></td></tr></table></figure><p>调用某个类的 class 属性来获取该类对应的 Class 对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Class clazz=Person.class;<br></code></pre></td></tr></table></figure><p>使用 Class 类中的 forName()静态方法(最安全/性能最好)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Class clazz=Class.forName(<span class="hljs-string">&quot;类的全路径&quot;</span>); (最常用)<br></code></pre></td></tr></table></figure><p>当我们获得了想要操作的类的 Class 对象后,可以通过 Class 类中的方法获取并查看该类中的方法和属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取 Person 类的 Class 对象</span><br>Class clazz=Class.forName(<span class="hljs-string">&quot;reflection.Person&quot;</span>);<br><span class="hljs-comment">//获取 Person 类的所有方法信息</span><br>Method[] method=clazz.getDeclaredMethods();<br><span class="hljs-keyword">for</span>(Method m:method)&#123;<br>    System.out.println(m.toString());<br>&#125;<br><span class="hljs-comment">//获取 Person 类的所有成员属性信息</span><br>Field[] field=clazz.getDeclaredFields();<br><span class="hljs-keyword">for</span>(Field f:field)&#123;<br>    System.out.println(f.toString());<br>&#125;<br><span class="hljs-comment">//获取 Person 类的所有构造方法信息</span><br>Constructor[] constructor=clazz.getDeclaredConstructors();<br><span class="hljs-keyword">for</span>(Constructor c:constructor)&#123;<br>    System.out.println(c.toString());<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="创建对象的两种方法"><a href="#创建对象的两种方法" class="headerlink" title="创建对象的两种方法"></a>创建对象的两种方法</h4><p>Class 对象的 newInstance()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">使用 Class 对象的 newInstance()方法来创建该 Class 对象对应类的实例,但是这种方法要求<br>该 Class 对象对应的类有默认的空构造器。<br></code></pre></td></tr></table></figure><p>调用 Constructor 对象的 newInstance()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">先使用 Class 对象获取指定的 Constructor 对象,再调用 Constructor 对象的 newInstance()<br>方法来创建 Class 对象对应类的实例,通过这种方法可以选定构造方法创建实例。<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取 Person 类的 Class 对象</span><br>Class clazz=Class.forName(<span class="hljs-string">&quot;reflection.Person&quot;</span>);<br><span class="hljs-comment">//使用.newInstane 方法创建对象</span><br>Person p=(Person) clazz.newInstance();<br><span class="hljs-comment">//获取构造方法并创建对象</span><br>Constructor c=clazz.getDeclaredConstructor(String.class,String.class,<span class="hljs-type">int</span>.class);<br><span class="hljs-comment">//创建对象并设置属性</span><br>Person p1=(Person) c.newInstance(<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-string">&quot;男&quot;</span>,<span class="hljs-number">20</span>);<br></code></pre></td></tr></table></figure><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><blockquote><p>Annotation(注解)是 Java 提供的一种对元程序中元素关联信息和元数据(metadata)的途径和方法。Annatation(注解)是一个接口,程序可以通过反射来获取指定程序中元素的 Annotation对象,然后通过该 Annotation 对象来获取注解中的元数据信息。</p></blockquote><h2 id="四种标准元注解"><a href="#四种标准元注解" class="headerlink" title="四种标准元注解"></a>四种标准元注解</h2><blockquote><p>元注解的作用是负责注解其他注解。 Java5.0 定义了 4 个标准的 meta-annotation 类型,它们被用来提供对其它 annotation 类型作说明。</p></blockquote><p><a href="/Target">@Target </a> 修饰的对象范围 </p><blockquote><p><a href="/Target">@Target </a> 说明了 Annotation 所修饰的对象范围: Annotation 可被用于 packages、types(类、接口、枚举、Annotation 类型)、类型成员(方法、构造方法、成员变量、枚举值)、方法参数和本地变量(如循环变量、catch 参数)。在 Annotation 类型的声明中使用了 target 可更加明晰其修饰的目标 </p></blockquote><p><a href="/Retention">@Retention </a> 定义 被保留的时间长短 </p><blockquote><p>Retention 定义了该 Annotation 被保留的时间长短:表示需要在什么级别保存注解信息,用于描述注解的生命周期(即:被描述的注解在什么范围内有效),取值(RetentionPoicy)由:</p></blockquote><ul><li>SOURCE:在源文件中有效(即源文件保留)</li><li>CLASS:在 class 文件中有效(即 class 保留)</li><li>RUNTIME:在运行时有效(即运行时保留)</li></ul><p><a href="/Documented">@Documented </a> 描述-javadoc </p><blockquote><p><a href="/Documented">@Documented </a> 用于描述其它类型的 annotation 应该被作为被标注的程序成员的公共 API,因此可以被例如 javadoc 此类的工具文档化。 </p></blockquote><p><a href="/Inherited">@Inherited </a> 阐述了某个被标注的类型是被继承的 </p><blockquote><p><a href="/Inherited">@Inherited </a> 元注解是一个标记注解,<a href="/Inherited">@Inherited </a> 阐述了某个被标注的类型是被继承的。如果一个使用了<a href="/Inherited">@Inherited </a> 修饰的 annotation 类型被用于一个 class,则这个 annotation 将被用于该class 的子类。 </p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/annotation.png#id=Oo8yu&originHeight=1248&originWidth=1322&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>注解处理器</p><blockquote><p>如果没有用来读取注解的方法和工作,那么注解也就不会比注释更有用处了。使用注解的过程中,很重要的一部分就是创建于使用注解处理器。Java SE5 扩展了反射机制的 API,以帮助程序员快速的构造自定义注解处理器。下面实现一个注解处理器。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java">/<span class="hljs-number">1</span>:*** 定义注解*/<br><span class="hljs-meta">@Target(ElementType.FIELD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> FruitProvider &#123;<br>    <span class="hljs-comment">/**供应商编号*/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">id</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> -<span class="hljs-number">1</span>;<br>    <span class="hljs-comment">/*** 供应商名称*/</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">name</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-comment">/** * 供应商地址*/</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">address</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br><span class="hljs-comment">//2:注解使用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Apple</span> &#123;<br>    <span class="hljs-meta">@FruitProvider(id = 1, name = &quot;陕西红富士集团&quot;, address = &quot;陕西省西安市延安路&quot;)</span><br>    <span class="hljs-keyword">private</span> String appleProvider;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAppleProvider</span><span class="hljs-params">(String appleProvider)</span> &#123;<br>        <span class="hljs-built_in">this</span>.appleProvider = appleProvider;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getAppleProvider</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> appleProvider;<br>    &#125;<br>&#125;<br>/<span class="hljs-number">3</span>:*********** 注解处理器 ***************/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FruitInfoUtil</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getFruitInfo</span><span class="hljs-params">(Class&lt;?&gt; clazz)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">strFruitProvicer</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;供应商信息:&quot;</span>;<br>        Field[] fields = clazz.getDeclaredFields();<span class="hljs-comment">//通过反射获取处理注解</span><br>        <span class="hljs-keyword">for</span> (Field field : fields) &#123;<br>            <span class="hljs-keyword">if</span> (field.isAnnotationPresent(FruitProvider.class)) &#123;<br>                <span class="hljs-type">FruitProvider</span> <span class="hljs-variable">fruitProvider</span> <span class="hljs-operator">=</span> (FruitProvider) field.getAnnotation(FruitProvider.class);<br><span class="hljs-comment">//注解信息的处理地方</span><br>                strFruitProvicer = <span class="hljs-string">&quot; 供应商编号:&quot;</span> + fruitProvider.id() + <span class="hljs-string">&quot; 供应商名称:&quot;</span><br>                        + fruitProvider.name() + <span class="hljs-string">&quot; 供应商地址:&quot;</span>+ fruitProvider.address();<br>                System.out.println(strFruitProvicer);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FruitRun</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        FruitInfoUtil.getFruitInfo(Apple.class);<br><span class="hljs-comment">/***********输出结果***************/</span><br><span class="hljs-comment">// 供应商编号:1 供应商名称:陕西红富士集团 供应商地址:陕西省西安市延</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><blockquote><p>Java 类中不仅可以定义变量和方法,还可以定义类,这样定义在类内部的类就被称为内部类。根据定义的方式不同,内部类分为静态内部类,成员内部类,局部内部类,匿名内部类四种。<br>静态内部类<br>定义在类内部的静态类,就是静态内部类。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Out</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> a;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> b;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(a);<br>            &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>静态内部类可以访问外部类所有的静态变量和方法,即使是 private 的也一样。</li><li>静态内部类和一般类一致,可以定义静态变量、方法,构造方法等。</li><li>其它类使用静态内部类需要使用“外部类.静态内部类”方式,如下所示:Out.Inner inner = new Out.Inner();inner.print();</li><li>Java 集合类 HashMap 内部就有一个静态内部类 Entry。Entry 是 HashMap 存放元素的抽象,HashMap 内部维护 Entry 数组用了存放元素,但是 Entry 对使用者是透明的。像这种和外部类关系密切的,且不依赖外部类实例的,都可以使用静态内部类。</li></ol><h2 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h2><blockquote><p>定义在类内部的非静态类,就是成员内部类。成员内部类不能定义静态方法和变量(final 修饰的除外)。这是因为成员内部类是非静态的,类初始化的时候先初始化静态成员,如果允许成员内部类定义静态变量,那么成员内部类的静态变量初始化顺序是有歧义的。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Out</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> a;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> b;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(a);<br>      System.out.println(b);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="局部内部类-定义在方法中的类"><a href="#局部内部类-定义在方法中的类" class="headerlink" title="局部内部类(定义在方法中的类)"></a>局部内部类(定义在方法中的类)</h2><blockquote><p>定义在方法中的类,就是局部类。如果一个类只在某个方法中使用,则可以考虑使用局部类。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Out</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> a;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> b;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-type">int</span> c)</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span> &#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(c);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>匿名内部类(要继承一个父类或者实现一个接口、直接使用 new 来生成一个对象的引用)</p><blockquote><p>匿名内部类我们必须要继承一个父类或者实现一个接口,当然也仅能只继承一个父类或者实现一个接口。同时它也是没有 class 关键字,这是因为匿名内部类是直接使用 new 来生成一个对象的引用。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Bird</span> &#123;<br>   <span class="hljs-keyword">private</span> String name;<br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">return</span> name;<br>   &#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>       <span class="hljs-built_in">this</span>.name = name;<br>   &#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fly</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(Bird bird)</span>&#123;<br>       System.out.println(bird.getName() + <span class="hljs-string">&quot;能够飞 &quot;</span> + bird.fly() + <span class="hljs-string">&quot;米&quot;</span>);<br>   &#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>       <span class="hljs-type">Test</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br>       test.test(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Bird</span>() &#123;<br>           <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fly</span><span class="hljs-params">()</span> &#123;<br>               <span class="hljs-keyword">return</span> <span class="hljs-number">10000</span>;<br>           &#125;<br>           <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>               <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;大雁&quot;</span>;<br>           &#125;<br>       &#125;);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><blockquote><p>泛型提供了编译时类型安全检测机制,该机制允许程序员在编译时检测到非法的类型。泛型的本<br>质是参数化类型,也就是说所操作的数据类型被指定为一个参数。比如我们要写一个排序方法,<br>能够对整型数组、字符串数组甚至其他任何类型的数组进行排序,我们就可以使用 Java 泛型。</p></blockquote><h2 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法()"></a>泛型方法()</h2><blockquote><p>你可以写一个泛型方法,该方法在调用时可以接收不同类型的参数。根据传递给泛型方法的参数<br>类型,编译器适当地处理每一个方法调用。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 泛型方法 printArray</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt; E &gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">printArray</span><span class="hljs-params">( E[] inputArray )</span><br>&#123;<br>    <span class="hljs-keyword">for</span> ( E element : inputArray )&#123;<br>        System.out.printf( <span class="hljs-string">&quot;%s &quot;</span>, element );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li> 表示该通配符所代表的类型是 T 类型的子类。 </li><li> 表示该通配符所代表的类型是 T 类型的父类。 </li></ol><h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><blockquote><p>泛型类的声明和非泛型类的声明类似,除了在类名后面添加了类型参数声明部分。和泛型方法一<br>样,泛型类的类型参数声明部分也包含一个或多个类型参数,参数间用逗号隔开。一个泛型参数,<br>也被称为一个类型变量,是用于指定一个泛型类型名称的标识符。因为他们接受一个或多个参数,<br>这些类被称为参数化的类或参数化的类型。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Box</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">private</span> T t;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(T t)</span> &#123;<br>        <span class="hljs-built_in">this</span>.t = t;<br>        &#125;<br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> t;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="类型通配符"><a href="#类型通配符" class="headerlink" title="类型通配符?"></a>类型通配符?</h2><blockquote><p>类型通配符一般是使用 ? 代替具体的类型参数。例如List&lt;?&gt; 在逻辑上是List,List 等所有 List&lt;具体类型实参&gt;的父类。</p></blockquote><h3 id="类型擦除"><a href="#类型擦除" class="headerlink" title="类型擦除"></a>类型擦除</h3><blockquote><p>Java 中的泛型基本上都是在编译器这个层次来实现的。在生成的 Java 字节代码中是不包含泛型中的类型信息的。<br>使用泛型的时候加上的类型参数,会被编译器在编译的时候去掉。这个过程就称为类型擦除。如在代码中定义的<br><code>List&lt;Object&gt;</code>和 <code>List&lt;String&gt;</code>等类型,在编译之后都会变成 List。JVM 看到的只是 List,<br>而由泛型附加的类型信息对 JVM 来说是不可见的。类型擦除的基本过程也比较简单,首先是找到用来替换类型参数的具体类。<br>这个具体类一般是 Object。如果指定了类型参数的上界的话,则使用这个上界。把代码中的类型参数都替换 成具体的类。</p></blockquote><p><code>&lt;? super T&gt;</code>与<code>&lt;? extends T&gt;</code>有何不同 ?</p><p><code>&lt;? super T&gt;</code> ：是指 “<strong>下界通配符 （Lower Bounds Wildcards）</strong>“ 表示包括T在内的任何T的父类;</p><p><code>&lt;? extends T&gt;</code> ：是指 “<strong>上界通配符 （Upper Bounds Wildcards）</strong>“ 表示包括T在内的任何T的子类;</p><p><strong>PECS</strong>原则：生产者（Producer）使用extends，消费者（Consumer）使用super；</p><p>对于一些容器使用上下界通配符会带来一些操作上的限制，如</p><ul><li>生产者使用extends但不能往列表中添加任何元素，只能往外取元素；</li><li>消费者使用super，可以往里存，但是往外取只能放在Object对象里，如果没有放在Object中就不能保证从中读取到的元素的类型，也可以理解Set（）方法失效。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">LinkedList&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&gt; l1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br><span class="hljs-comment">//l1.add(new B());//无法添加数据</span><br>l1.getFirst();<span class="hljs-comment">//只能获取数据</span><br><br>List&lt;? <span class="hljs-built_in">super</span> A&gt; l2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>l2.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>());<span class="hljs-comment">//可以添加数据但是必须是父类中有A</span><br><span class="hljs-comment">//l2.add(new Object());//无法添加</span><br>l2.get(<span class="hljs-number">0</span>);<span class="hljs-comment">//可以获取数据</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h1><p>保存(持久化)对象及其状态到内存或者磁盘</p><blockquote><p>Java 平台允许我们在内存中创建可复用的 Java 对象,但一般情况下,只有当 JVM 处于运行时,这些对象才可能存在,即,这些对象的生命周期不会比 JVM 的生命周期更长。但在现实应用中,就可能要求在 JVM 停止运行之后能够保存(持久化)指定的对象,并在将来重新读取被保存的对象。Java 对象序列化就能够帮助我们实现该功能。</p></blockquote><p>序列化对象以字节数组保持-静态成员不保存</p><blockquote><p>使用 Java 对象序列化,在保存对象时,会把其状态保存为一组字节,在未来,再将这些字节组装<br>成对象。必须注意地是,对象序列化保存的是对象的”状态”,即它的成员变量。由此可知,对<br>象序列化不会关注类中的静态变量。</p></blockquote><p>序列化用户远程对象传输</p><blockquote><p>除了在持久化对象时会用到对象序列化之外,当使用 RMI(远程方法调用),或在网络中传递对象时,<br>都会用到对象序列化。Java 序列化 API 为处理对象序列化提供了一个标准机制,该 API 简单易用。</p></blockquote><p>Serializable 实现序列化</p><blockquote><p>在 Java 中,只要一个类实现了 java.io.Serializable 接口,那么它就可以被序列化。</p></blockquote><p>ObjectOutputStream 和 ObjectInputStream 对对象进行序列化及反序列化</p><blockquote><p>通过 ObjectOutputStream 和 ObjectInputStream 对对象进行序列化及反序列化。</p></blockquote><p>writeObject 和 readObject 自定义序列化策略</p><blockquote><p>在类中增加 writeObject 和 readObject 方法可以实现自定义序列化策略。</p></blockquote><p>序列化 ID</p><blockquote><p>虚拟机是否允许反序列化,不仅取决于类路径和功能代码是否一致,一个非常重要的一点是两个<br>类的序列化 ID 是否一致(就是 private static final long serialVersionUID)</p></blockquote><h3 id="序列化并不保存静态变量"><a href="#序列化并不保存静态变量" class="headerlink" title="序列化并不保存静态变量"></a>序列化并不保存静态变量</h3><p>序列化子父类说明</p><p>Transient 关键字阻止该变量被序列化到文件中</p><blockquote><p>1.在变量声明前加上 Transient 关键字,可以阻止该变量被序列化到文件中,在被反序列<br>化后,transient 变量的值被设为初始值,如 int 型的是 0,对象型的是 null。</p></blockquote><blockquote><p>2.服务器端给客户端发送序列化对象数据,对象中有一些数据是敏感的,比如密码字符串<br>等,希望对该密码字段在序列化时,进行加密,而客户端如果拥有解密的密钥,只有在<br>客户端进行反序列化时,才可以对密码进行读取,这样可以一定程度保证序列化对象的<br>数据安全。</p></blockquote><h1 id="对象复制"><a href="#对象复制" class="headerlink" title="对象复制"></a>对象复制</h1><blockquote><p>将一个对象的引用复制给另外一个对象,一共有三种方式。第一种方式是直接赋值,第二种方式<br>是浅拷贝,第三种是深拷贝。所以大家知道了哈,这三种概念实际上都是为了拷贝对象。</p></blockquote><p>直接赋值复制</p><blockquote><p>直接赋值。在 Java 中,A a1 = a2,我们需要理解的是这实际上复制的是引用,也就是<br>说 a1 和 a2 指向的是同一个对象。因此,当 a1 变化的时候,a2 里面的成员变量也会跟<br>着变化。</p></blockquote><p>浅复制(复制引用但不复制引用的对象)</p><blockquote><p>创建一个新对象,然后将当前对象的非静态字段复制到该新对象,如果字段是值类型的,<br>那么对该字段执行复制;如果该字段是引用类型的话,则复制引用但不复制引用的对象。<br>因此,原始对象及其副本引用同一个对象。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Resume</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span>&#123;<br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> (Resume)<span class="hljs-built_in">super</span>.clone();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>深复制(复制对象和其应用对象)</p><blockquote><p>深拷贝不仅复制对象本身，而且复制对象包含的引用指向的所有对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span> &#123;<br>    String name;<br>    <span class="hljs-type">int</span> age;<br>    Professor p;<br>    Student(String name, <span class="hljs-type">int</span> age, Professor p) &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.p = p;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            o = (Student) <span class="hljs-built_in">super</span>.clone();<br>        &#125; <span class="hljs-keyword">catch</span> (CloneNotSupportedException e) &#123;<br>            System.out.println(e.toString());<br>        &#125;<br>        o.p = (Professor) p.clone();<br>        <span class="hljs-keyword">return</span> o;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>序列化(深 clone 一中实现)</p><blockquote><p>在 Java 语言里深复制一个对象,常常可以先使对象实现 Serializable 接口,然后把对象(实际上只是对象的一个拷贝)写到一个流里,再从流里读出来,便可以重建对象。</p></blockquote><h1 id="类的加载顺序"><a href="#类的加载顺序" class="headerlink" title="类的加载顺序"></a>类的加载顺序</h1><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">static</span> class Message &#123;<br>    public <span class="hljs-title function_ invoke__">Message</span>(<span class="hljs-type">String</span> message)&#123;<br>        System.out.<span class="hljs-title function_ invoke__">println</span>(message);<br>    &#125;<br>&#125;<br>class Father&#123;<br>    private <span class="hljs-keyword">static</span> Message message = new <span class="hljs-title function_ invoke__">Message</span>(<span class="hljs-string">&quot;我是父类静态变量&quot;</span>);<span class="hljs-comment">//1</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.<span class="hljs-title function_ invoke__">println</span>(<span class="hljs-string">&quot;我是父类静态代码块&quot;</span>);<span class="hljs-comment">//2</span><br>    &#125;<br>    &#123;<br>        System.out.<span class="hljs-title function_ invoke__">println</span>(<span class="hljs-string">&quot;我是父类代码块&quot;</span>);<span class="hljs-comment">//5</span><br>    &#125;<br>    <span class="hljs-title function_ invoke__">Father</span>()&#123;<br>        System.out.<span class="hljs-title function_ invoke__">println</span>(<span class="hljs-string">&quot;我是父类构造方法&quot;</span>);<span class="hljs-comment">//6</span><br>    &#125;<br>&#125;<br>class Child extends Father&#123;<br>    private <span class="hljs-keyword">static</span> Message message = new <span class="hljs-title function_ invoke__">Message</span>(<span class="hljs-string">&quot;我是子类静态变量&quot;</span>);<span class="hljs-comment">//3</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.<span class="hljs-title function_ invoke__">println</span>(<span class="hljs-string">&quot;我是子类静态代码块&quot;</span>);<span class="hljs-comment">//4</span><br>    &#125;<br>    &#123;<br>        System.out.<span class="hljs-title function_ invoke__">println</span>(<span class="hljs-string">&quot;我是子类代码块&quot;</span>);<span class="hljs-comment">//7</span><br>    &#125;<br>    <span class="hljs-title function_ invoke__">Child</span>()&#123;<br>        System.out.<span class="hljs-title function_ invoke__">println</span>(<span class="hljs-string">&quot;我是子类构造方法&quot;</span>);<span class="hljs-comment">//8</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs rust">我是父类静态变量<br>我是父类静态代码块<br><br>我是子类静态变量<br>我是子类静态代码块<br><br>我是父类代码块<br>我是父类构造方法<br><br>我是子类代码块<br>我是子类构造方法<br></code></pre></td></tr></table></figure><h1 id="类的生命周期"><a href="#类的生命周期" class="headerlink" title="类的生命周期"></a>类的生命周期</h1><ul><li><p>加载：查找并加载类的二进制数据</p></li><li><p>链接：包括验证、准备和解析类的二进制数据</p></li></ul><ol><li>验证：确保被加载类的正确性</li><li>准备：为类的静态变量分配内存，并将其初始化为默认值</li><li>解析：把类中的符号引用转换为直接引用</li></ol><ul><li><p>初始化：给类的静态变量赋予正确的初始值</p></li><li><p>卸载销毁</p></li></ul><h1 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h1><ul><li>启动类加载器（Bootstrap Class Loader）</li><li>扩展类加载器（Extension Class Loader）</li><li>应用类加载器（Application Class Loader)</li></ul><h2 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h2><p>当一个类加载器收到一个类的加载请求时，它首先不会自己尝试去加载它，会给它的父加载器去完成，层一层的委派，因此所有的加载请求最终都会传送到顶层启动类加载器中，只有当父加载器反馈无法加载这个类的时，子类加载器才会尝试自己去加载。</p><p>正常加载类的流程，按照AppClassLoader-&gt;ExtensionClassLoader-&gt;BootStrapClassLoader这个顺序加载。</p><p>优点：</p><ol><li>类型安全，避免自定义的类覆盖核心类库， </li><li>避免类的重复加载，保证类的唯一性。</li></ol><p>Tomcat为什么打破双亲委派机制 ？ </p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust">    Bootstrap<br>        |<br>     System<br>        |<br>     Common<br>     /     \<br>Webapp1   Webapp2 ...<br></code></pre></td></tr></table></figure><p>WebappX-为部署在单个Tomcat实例中的每个web应用程序创建类加载器。WEB应用程序的/WEB-INF/classes目录中的所有解包类和资源，以及WEB应用程序/WEB-INF/lib目录下的JAR文件中的类和资源都对该WEB应用程序可见，但对其他应用程序不可见。</p><p>web应用程序类加载器与默认的Java委托模型不同（根据Servlet规范2.4版第9.7.2节web应用程序类加载器中的建议）。当从web应用程序的WebappX类加载程序加载类的请求被处理时，该类加载程序将首先查看本地存储库，而不是在查看之前委托。也有例外。不能重写属于JRE基类的类。有一些例外，例如XML解析器组件，可以使用适当的JVM特性来重写，JVM特性是Java&lt;=8的认可标准重写特性，Java 9+的可升级模块特性。最后，web应用程序类加载器将始终首先为Tomcat实现的规范（Servlet、JSP、EL、WebSocket）的JavaEEAPI类委托。Tomcat中的所有其他类装入器都遵循通常的委托模式。</p><p>因此，从web应用程序的角度来看，类或资源加载按以下顺序排列在存储库中：</p><ul><li>Bootstrap classes of your JVM</li><li>/WEB-INF/classes of your web application</li><li>/WEB-INF/lib/*.jar of your web application</li><li>System class loader classes (described above)</li><li>Common class loader classes (described above)</li></ul><p>如果web应用程序类加载器配置为＜loader delegate=“true”/＞，则顺序为：</p><ul><li>Bootstrap classes of your JVM</li><li>System class loader classes (described above)</li><li>Common class loader classes (described above)</li><li>/WEB-INF/classes of your web application</li><li>/WEB-INF/lib/*.jar of your web application</li></ul><p>参考： <a href="https://tomcat.apache.org/tomcat-9.0-doc/class-loader-howto.html">https://tomcat.apache.org/tomcat-9.0-doc/class-loader-howto.html</a></p><p>综上所述：Tomcat打破（部分打破）双亲委派机制是为了达到应用隔离，优先选择自己应用下的相关classes为目的的</p><p>那如何打破双亲委派机制？</p><p>可以通过继承 ClassLoader 类，自定义类的加载器，Tomcat 自定义了 WebAppClassLoader ,  SharedClassLoader , CatalinaClassLoader 等类来实现</p><h1 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h1><p>什么是代理？</p><blockquote><p>代理简单理解就是在执行的过程中多了一个中间代理的环节，交由代理对象去调用，并不是直接调用</p></blockquote><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><blockquote><p>在程序运行之前就已经生成了.class文件</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> jdk;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Target</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> jdk;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RealTarget</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Target</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> jdk;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloProxy</span> &#123;<br>    <span class="hljs-keyword">private</span> Target target;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invoke</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;代理之前可以做一些处理&quot;</span>);<br>        target.hello();<br>        System.out.println(<span class="hljs-string">&quot;代理之后可以做一些处理&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> jdk;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Target</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RealTarget</span>();<br>        <span class="hljs-type">HelloProxy</span> <span class="hljs-variable">helloProxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HelloProxy</span>(target);<br>        helloProxy.hello();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><blockquote><p>在运行期间动态的创建出的类（通过反射实现）</p></blockquote><h3 id="jdk动态代理"><a href="#jdk动态代理" class="headerlink" title="jdk动态代理"></a>jdk动态代理</h3><blockquote><p>jdk动态代理要求目标对象实现一个接口，通过Proxy类利用反射实例化代理类进行调用</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> jdk;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br><br>    Object proxyTarget;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ProxyHandler</span><span class="hljs-params">(Object proxyTarget)</span> &#123;<br>        <span class="hljs-built_in">this</span>.proxyTarget = proxyTarget;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable&#123;<br>        System.out.println(<span class="hljs-string">&quot;代理之前可以做一些处理&quot;</span>);<br>        method.invoke(proxyTarget,args);<br>        System.out.println(<span class="hljs-string">&quot;代理之后可以做一些处理&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> jdk;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Target</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RealTarget</span>();<br>        <span class="hljs-type">ProxyHandler</span> <span class="hljs-variable">proxyHandler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProxyHandler</span>(target);<br>        <span class="hljs-type">Target</span> <span class="hljs-variable">proxyInstance</span> <span class="hljs-operator">=</span> (Target) Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), proxyHandler);<br>        proxyInstance.hello();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="cglib动态代理"><a href="#cglib动态代理" class="headerlink" title="cglib动态代理"></a>cglib动态代理</h3><blockquote><p>构建一个子类继承实际的目标类通过重写目标类的方法达到功能修改的效果</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/cglib/cglib --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cglib<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cglib<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.cglib;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Target</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.cglib;<br><br><span class="hljs-keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;<br><span class="hljs-keyword">import</span> net.sf.cglib.proxy.MethodProxy;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TargetInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MethodInterceptor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">intercept</span><span class="hljs-params">(Object o, Method method, Object[] params, MethodProxy methodProxy)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;调用前&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> methodProxy.invokeSuper(o, params);<br>        System.out.println(<span class="hljs-string">&quot; 调用后&quot;</span>+result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.cglib;<br><br><span class="hljs-keyword">import</span> net.sf.cglib.proxy.Enhancer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Enhancer</span> <span class="hljs-variable">enhancer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Enhancer</span>();<br>        enhancer.setSuperclass(Target.class);<br>        enhancer.setCallback(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TargetInterceptor</span>());<br>        Target target=(Target)enhancer.create();<br>        target.hello();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="jdk和cglib的异同"><a href="#jdk和cglib的异同" class="headerlink" title="jdk和cglib的异同"></a>jdk和cglib的异同</h3><ul><li>JDK动态代理是面向接口的。CGLib没有这个限制</li><li>CGLib动态代理是通过字节码底层继承要代理类来实现，因此如果被代理类被final关键字所修饰，会失败。</li><li>在JDK的升级迭代其JDK动态代理性能会比CGLib高</li></ul><p>Spring中的代理（Spirng默认采用JDK动态代理实现机制）</p><ol><li>如果目标对象实现了接口，则默认使用JDK动态代理</li><li>如果目标对象没有实现接口，则默认使用CGLIB动态代理</li><li>如果目标对象实现了接口，程序里面依旧可以指定使用CGLIB动态代理</li></ol>]]></content>
    
    
    <categories>
      
      <category>Java相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作系统-局部性原理</title>
    <link href="/2018/02/10/yuque/dn7msyn1pls8hcv7/"/>
    <url>/2018/02/10/yuque/dn7msyn1pls8hcv7/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1668874427677-1e9d6ad5-95c1-4391-ba07-2410c0a10d5d.png#averageHue=%23f7f7f6&clientId=u42edfa3d-1952-4&from=paste&height=622&id=ud9b582d4&originHeight=1244&originWidth=2406&originalType=binary&ratio=1&rotation=0&showTitle=false&size=504738&status=done&style=none&taskId=u4725dbdc-3c6c-4924-880c-eb3573b2518&title=&width=1203" alt="image.png"></p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><blockquote><p>本文用于记录学习计算机局部性原理的相关笔记</p></blockquote><h1 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h1><p>局部性原理是指CPU访问存储器时，无论是存取指令还是存取数据，所访问的存储单元都趋于聚集在一个较小的连续区域中。</p><h2 id="时间局部性"><a href="#时间局部性" class="headerlink" title="时间局部性"></a>时间局部性</h2><p>时间局部性（Temporal Locality）：如果一个信息项正在被访问，那么在近期它很可能还会被再次访问。</p><h2 id="空间局部性"><a href="#空间局部性" class="headerlink" title="空间局部性"></a>空间局部性</h2><p>空间局部性（Spatial Locality）：在最近的将来将用到的信息很可能与正在使用的信息在空间地址上是临近的。</p><h2 id="顺序局部性"><a href="#顺序局部性" class="headerlink" title="顺序局部性"></a>顺序局部性</h2><p>顺序局部性（Order Locality）：在典型程序中，除转移类指令外，大部分指令是顺序进行的。顺序执行和非顺序执行的比例大致是5:1。此外，对大型数组访问也是顺序的。</p><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><p>高速缓存，越接近cup的存储器速度越快容量越小，越远离cup的存储器速度越慢容量越大。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2630542/1673014058692-7789f279-1612-490f-acab-afc45ddcf0d9.png#averageHue=%23f9faf6&clientId=u490343d2-270d-4&from=paste&height=319&id=uba04619b&originHeight=638&originWidth=1054&originalType=binary&ratio=1&rotation=0&showTitle=false&size=907180&status=done&style=none&taskId=ub6e2ab18-ba1f-4e58-b9bf-56e0387f4c6&title=&width=527" alt="image.png"><br>在查询数据过程中会优先在缓存中查找，L1-&gt;L2-&gt;L3…硬盘，我们知道缓存的大小有限，那么我们读取的数据会放入缓存中，如果我们频繁的读取那个数据，那可以直接在缓存中拿到，根据时间局部性和空间局部性原理设计的高速缓冲区能够极大提高数据的读取效率</p><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><ol><li>测试案例-数组访问<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5000</span>][<span class="hljs-number">5000</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>[] a:arr)Arrays.fill(a,<span class="hljs-number">1</span>);<br>    test1(arr);<br>    test2(arr);<br>    test3(arr);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] arr)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5000</span>; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">5000</span>; j++) &#123;<br>            ret+=arr[i][j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">spend</span> <span class="hljs-operator">=</span> System.currentTimeMillis() - start;<br>    System.out.println(<span class="hljs-string">&quot;耗时：&quot;</span>+spend+ <span class="hljs-string">&quot; ms&quot;</span>);<span class="hljs-comment">//耗时：15 ms</span><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] arr)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5000</span>; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">5000</span>; j++) &#123;<br>            ret+=arr[j][i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">spend</span> <span class="hljs-operator">=</span> System.currentTimeMillis() - start;<br>    System.out.println(<span class="hljs-string">&quot;耗时：&quot;</span>+spend+ <span class="hljs-string">&quot; ms&quot;</span>);<span class="hljs-comment">//耗时：107 ms</span><br>&#125;<br><span class="hljs-comment">//随机访问</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] arr)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span>[][] idx = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5000</span> * <span class="hljs-number">5000</span>][<span class="hljs-number">2</span>];<br>    <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5000</span> * <span class="hljs-number">5000</span>; i++) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> random.nextInt(<span class="hljs-number">5000</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> random.nextInt(<span class="hljs-number">5000</span>);<br>        idx[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;x,y&#125;;<br>    &#125;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>[] site:idx) &#123;<br>        ret+=arr[site[<span class="hljs-number">0</span>]][site[<span class="hljs-number">1</span>]];<br>    &#125;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">spend</span> <span class="hljs-operator">=</span> System.currentTimeMillis() - start;<br>    System.out.println(<span class="hljs-string">&quot;耗时：&quot;</span>+spend+ <span class="hljs-string">&quot; ms&quot;</span>);<span class="hljs-comment">//耗时：252 ms</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>局部性原理，一个好的程序，在我们实际编码中如果想要提高程序的执行效率需要尽可能的使其满足局部性原理</p><h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><p>书籍：CSAPP  <a href="https://www.yuque.com/attachments/yuque/0/2022/pdf/2630542/1668875919212-4b4eda1e-469d-45bd-a142-ef972480bd6e.pdf?_lake_card=%7B%22src%22:%22https://www.yuque.com/attachments/yuque/0/2022/pdf/2630542/1668875919212-4b4eda1e-469d-45bd-a142-ef972480bd6e.pdf%22,%22name%22:%22Computer_Systems_A_Programmers_Perspective(3rd).pdf%22,%22size%22:5485172,%22type%22:%22application/pdf%22,%22ext%22:%22pdf%22,%22source%22:%22%22,%22status%22:%22done%22,%22mode%22:%22title%22,%22download%22:true,%22taskId%22:%22ua507ed88-5f57-4e11-af3e-108971e986d%22,%22taskType%22:%22upload%22,%22__spacing%22:%22both%22,%22id%22:%22ua9fec83b%22,%22margin%22:%7B%22top%22:true,%22bottom%22:true%7D,%22card%22:%22file%22%7D">Computer_Systems_A_Programmers_Perspective(3rd).pdf</a></p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>局部性原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>麦奇</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<!--### 个人简历--><!--<details>-->  <!--<summary><span>查看简历</span></summary>--><!--<a href="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/pdf/杨彪-个人简历-后端开发.pdf">点击查看简历</a>--><!--</details>--><h3 id="学习方向"><a href="#学习方向" class="headerlink" title="学习方向"></a>学习方向</h3><blockquote><p>后端开发、分布式系统、DDD、微服务、区块链、Linux</p></blockquote><h3 id="人生目标"><a href="#人生目标" class="headerlink" title="人生目标"></a>人生目标</h3><blockquote><p>企业级应用开发架构师 可以独挡一面</p></blockquote><h3 id="最喜欢的一句话"><a href="#最喜欢的一句话" class="headerlink" title="最喜欢的一句话"></a>最喜欢的一句话</h3><blockquote><p>做你没做过的事情叫成长，做你不愿意做的事情叫改变，做你不敢做的事情叫突破。人生充满了曲折与不定；没有尝试，谁也不知道结果如何。 因此，我们在人生道路上，要勇于尝试，敢于探索。只有这样，才能不断前进，取得成果。要敢于突破自己，去寻找真正属于自己的路，敢于去打破约束的牢笼，哪怕前方有艰难险阻，为了心中的梦想，也要一直笑到最后。人的一生是短暂的，努力超越自己，才不会在心中留下后悔与遗憾。</p></blockquote>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[/* 滚动条bynote.cn */::-moz-selection {    color: #fff;    background-color: #8d7e7e;}::-webkit-scrollbar {    width: 0px;    height: 0px;}::-webkit-scrollbar-thumb {    background-color: #3c4858;    background-image: -webkit-linear-gradient( 45deg, rgba(255, 255, 255, 0.4) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.4) 50%, rgba(255, 255, 255, 0.4) 75%, transparent 75%, transparent);    border-radius: 2em;}::-webkit-scrollbar-corner {    background-color: transparent;}.dropdown-menu {    position: absolute;    top: 100%;    left: 0;    z-index: 1000;    display: none;    float: left;    min-width: 6rem;    padding: .5rem 0;    margin: .125rem 0 0;    font-size: 1rem;    color: #212529;    text-align: left;    list-style: none;    background-color: #fff;    background-clip: padding-box;    border: 1px solid rgba(0,0,0,.15);    border-radius: .25rem;}]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[/* * Anime v1.1.2 * http://anime-js.com * JavaScript animation engine * Copyright (c) 2016 Julian Garnier * http://juliangarnier.com * Released under the MIT license */(function (root, factory) {  if (typeof define === 'function' && define.amd) {    // AMD. Register as an anonymous module.    define([], factory);  } else if (typeof module === 'object' && module.exports) {    // Node. Does not work with strict CommonJS, but    // only CommonJS-like environments that support module.exports,    // like Node.    module.exports = factory();  } else {    // Browser globals (root is window)    root.anime = factory();  }}(this, function () {  var version = '1.1.2';  // Defaults  var defaultSettings = {    duration: 1000,    delay: 0,    loop: false,    autoplay: true,    direction: 'normal',    easing: 'easeOutElastic',    elasticity: 400,    round: false,    begin: undefined,    update: undefined,    complete: undefined  }  // Transforms  var validTransforms = ['translateX', 'translateY', 'translateZ', 'rotate', 'rotateX', 'rotateY', 'rotateZ', 'scale', 'scaleX', 'scaleY', 'scaleZ', 'skewX', 'skewY'];  var transform, transformStr = 'transform';  // Utils  var is = {    arr: function(a) { return Array.isArray(a) },    obj: function(a) { return Object.prototype.toString.call(a).indexOf('Object') > -1 },    svg: function(a) { return a instanceof SVGElement },    dom: function(a) { return a.nodeType || is.svg(a) },    num: function(a) { return !isNaN(parseInt(a)) },    str: function(a) { return typeof a === 'string' },    fnc: function(a) { return typeof a === 'function' },    und: function(a) { return typeof a === 'undefined' },    nul: function(a) { return typeof a === 'null' },    hex: function(a) { return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(a) },    rgb: function(a) { return /^rgb/.test(a) },    hsl: function(a) { return /^hsl/.test(a) },    col: function(a) { return (is.hex(a) || is.rgb(a) || is.hsl(a)) }  }  // Easings functions adapted from http://jqueryui.com/  var easings = (function() {    var eases = {};    var names = ['Quad', 'Cubic', 'Quart', 'Quint', 'Expo'];    var functions = {      Sine: function(t) { return 1 - Math.cos( t * Math.PI / 2 ); },      Circ: function(t) { return 1 - Math.sqrt( 1 - t * t ); },      Elastic: function(t, m) {        if( t === 0 || t === 1 ) return t;        var p = (1 - Math.min(m, 998) / 1000), st = t / 1, st1 = st - 1, s = p / ( 2 * Math.PI ) * Math.asin( 1 );        return -( Math.pow( 2, 10 * st1 ) * Math.sin( ( st1 - s ) * ( 2 * Math.PI ) / p ) );      },      Back: function(t) { return t * t * ( 3 * t - 2 ); },      Bounce: function(t) {        var pow2, bounce = 4;        while ( t < ( ( pow2 = Math.pow( 2, --bounce ) ) - 1 ) / 11 ) {}        return 1 / Math.pow( 4, 3 - bounce ) - 7.5625 * Math.pow( ( pow2 * 3 - 2 ) / 22 - t, 2 );      }    }    names.forEach(function(name, i) {      functions[name] = function(t) {        return Math.pow( t, i + 2 );      }    });    Object.keys(functions).forEach(function(name) {      var easeIn = functions[name];      eases['easeIn' + name] = easeIn;      eases['easeOut' + name] = function(t, m) { return 1 - easeIn(1 - t, m); };      eases['easeInOut' + name] = function(t, m) { return t < 0.5 ? easeIn(t * 2, m) / 2 : 1 - easeIn(t * -2 + 2, m) / 2; };      eases['easeOutIn' + name] = function(t, m) { return t < 0.5 ? (1 - easeIn(1 - 2 * t, m)) / 2 : (easeIn(t * 2 - 1, m) + 1) / 2; };    });    eases.linear = function(t) { return t; };    return eases;  })();  // Strings  var numberToString = function(val) {    return (is.str(val)) ? val : val + '';  }  var stringToHyphens = function(str) {    return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();  }  var selectString = function(str) {    if (is.col(str)) return false;    try {      var nodes = document.querySelectorAll(str);      return nodes;    } catch(e) {      return false;    }  }  // Numbers  var random = function(min, max) {    return Math.floor(Math.random() * (max - min + 1)) + min;  }  // Arrays  var flattenArray = function(arr) {    return arr.reduce(function(a, b) {      return a.concat(is.arr(b) ? flattenArray(b) : b);    }, []);  }  var toArray = function(o) {    if (is.arr(o)) return o;    if (is.str(o)) o = selectString(o) || o;    if (o instanceof NodeList || o instanceof HTMLCollection) return [].slice.call(o);    return [o];  }  var arrayContains = function(arr, val) {    return arr.some(function(a) { return a === val; });  }  var groupArrayByProps = function(arr, propsArr) {    var groups = {};    arr.forEach(function(o) {      var group = JSON.stringify(propsArr.map(function(p) { return o[p]; }));      groups[group] = groups[group] || [];      groups[group].push(o);    });    return Object.keys(groups).map(function(group) {      return groups[group];    });  }  var removeArrayDuplicates = function(arr) {    return arr.filter(function(item, pos, self) {      return self.indexOf(item) === pos;    });  }  // Objects  var cloneObject = function(o) {    var newObject = {};    for (var p in o) newObject[p] = o[p];    return newObject;  }  var mergeObjects = function(o1, o2) {    for (var p in o2) o1[p] = !is.und(o1[p]) ? o1[p] : o2[p];    return o1;  }  // Colors  var hexToRgb = function(hex) {    var rgx = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;    var hex = hex.replace(rgx, function(m, r, g, b) { return r + r + g + g + b + b; });    var rgb = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);    var r = parseInt(rgb[1], 16);    var g = parseInt(rgb[2], 16);    var b = parseInt(rgb[3], 16);    return 'rgb(' + r + ',' + g + ',' + b + ')';  }  var hslToRgb = function(hsl) {    var hsl = /hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.exec(hsl);    var h = parseInt(hsl[1]) / 360;    var s = parseInt(hsl[2]) / 100;    var l = parseInt(hsl[3]) / 100;    var hue2rgb = function(p, q, t) {      if (t < 0) t += 1;      if (t > 1) t -= 1;      if (t < 1/6) return p + (q - p) * 6 * t;      if (t < 1/2) return q;      if (t < 2/3) return p + (q - p) * (2/3 - t) * 6;      return p;    }    var r, g, b;    if (s == 0) {      r = g = b = l;    } else {      var q = l < 0.5 ? l * (1 + s) : l + s - l * s;      var p = 2 * l - q;      r = hue2rgb(p, q, h + 1/3);      g = hue2rgb(p, q, h);      b = hue2rgb(p, q, h - 1/3);    }    return 'rgb(' + r * 255 + ',' + g * 255 + ',' + b * 255 + ')';  }  var colorToRgb = function(val) {    if (is.rgb(val)) return val;    if (is.hex(val)) return hexToRgb(val);    if (is.hsl(val)) return hslToRgb(val);  }  // Units  var getUnit = function(val) {    return /([\+\-]?[0-9|auto\.]+)(%|px|pt|em|rem|in|cm|mm|ex|pc|vw|vh|deg)?/.exec(val)[2];  }  var addDefaultTransformUnit = function(prop, val, intialVal) {    if (getUnit(val)) return val;    if (prop.indexOf('translate') > -1) return getUnit(intialVal) ? val + getUnit(intialVal) : val + 'px';    if (prop.indexOf('rotate') > -1 || prop.indexOf('skew') > -1) return val + 'deg';    return val;  }  // Values  var getCSSValue = function(el, prop) {    // First check if prop is a valid CSS property    if (prop in el.style) {      // Then return the property value or fallback to '0' when getPropertyValue fails      return getComputedStyle(el).getPropertyValue(stringToHyphens(prop)) || '0';    }  }  var getTransformValue = function(el, prop) {    var defaultVal = prop.indexOf('scale') > -1 ? 1 : 0;    var str = el.style.transform;    if (!str) return defaultVal;    var rgx = /(\w+)\((.+?)\)/g;    var match = [];    var props = [];    var values = [];    while (match = rgx.exec(str)) {      props.push(match[1]);      values.push(match[2]);    }    var val = values.filter(function(f, i) { return props[i] === prop; });    return val.length ? val[0] : defaultVal;  }  var getAnimationType = function(el, prop) {    if ( is.dom(el) && arrayContains(validTransforms, prop)) return 'transform';    if ( is.dom(el) && (el.getAttribute(prop) || (is.svg(el) && el[prop]))) return 'attribute';    if ( is.dom(el) && (prop !== 'transform' && getCSSValue(el, prop))) return 'css';    if (!is.nul(el[prop]) && !is.und(el[prop])) return 'object';  }  var getInitialTargetValue = function(target, prop) {    switch (getAnimationType(target, prop)) {      case 'transform': return getTransformValue(target, prop);      case 'css': return getCSSValue(target, prop);      case 'attribute': return target.getAttribute(prop);    }    return target[prop] || 0;  }  var getValidValue = function(values, val, originalCSS) {    if (is.col(val)) return colorToRgb(val);    if (getUnit(val)) return val;    var unit = getUnit(values.to) ? getUnit(values.to) : getUnit(values.from);    if (!unit && originalCSS) unit = getUnit(originalCSS);    return unit ? val + unit : val;  }  var decomposeValue = function(val) {    var rgx = /-?\d*\.?\d+/g;    return {      original: val,      numbers: numberToString(val).match(rgx) ? numberToString(val).match(rgx).map(Number) : [0],      strings: numberToString(val).split(rgx)    }  }  var recomposeValue = function(numbers, strings, initialStrings) {    return strings.reduce(function(a, b, i) {      var b = (b ? b : initialStrings[i - 1]);      return a + numbers[i - 1] + b;    });  }  // Animatables  var getAnimatables = function(targets) {    var targets = targets ? (flattenArray(is.arr(targets) ? targets.map(toArray) : toArray(targets))) : [];    return targets.map(function(t, i) {      return { target: t, id: i };    });  }  // Properties  var getProperties = function(params, settings) {    var props = [];    for (var p in params) {      if (!defaultSettings.hasOwnProperty(p) && p !== 'targets') {        var prop = is.obj(params[p]) ? cloneObject(params[p]) : {value: params[p]};        prop.name = p;        props.push(mergeObjects(prop, settings));      }    }    return props;  }  var getPropertiesValues = function(target, prop, value, i) {    var values = toArray( is.fnc(value) ? value(target, i) : value);    return {      from: (values.length > 1) ? values[0] : getInitialTargetValue(target, prop),      to: (values.length > 1) ? values[1] : values[0]    }  }  // Tweens  var getTweenValues = function(prop, values, type, target) {    var valid = {};    if (type === 'transform') {      valid.from = prop + '(' + addDefaultTransformUnit(prop, values.from, values.to) + ')';      valid.to = prop + '(' + addDefaultTransformUnit(prop, values.to) + ')';    } else {      var originalCSS = (type === 'css') ? getCSSValue(target, prop) : undefined;      valid.from = getValidValue(values, values.from, originalCSS);      valid.to = getValidValue(values, values.to, originalCSS);    }    return { from: decomposeValue(valid.from), to: decomposeValue(valid.to) };  }  var getTweensProps = function(animatables, props) {    var tweensProps = [];    animatables.forEach(function(animatable, i) {      var target = animatable.target;      return props.forEach(function(prop) {        var animType = getAnimationType(target, prop.name);        if (animType) {          var values = getPropertiesValues(target, prop.name, prop.value, i);          var tween = cloneObject(prop);          tween.animatables = animatable;          tween.type = animType;          tween.from = getTweenValues(prop.name, values, tween.type, target).from;          tween.to = getTweenValues(prop.name, values, tween.type, target).to;          tween.round = (is.col(values.from) || tween.round) ? 1 : 0;          tween.delay = (is.fnc(tween.delay) ? tween.delay(target, i, animatables.length) : tween.delay) / animation.speed;          tween.duration = (is.fnc(tween.duration) ? tween.duration(target, i, animatables.length) : tween.duration) / animation.speed;          tweensProps.push(tween);        }      });    });    return tweensProps;  }  var getTweens = function(animatables, props) {    var tweensProps = getTweensProps(animatables, props);    var splittedProps = groupArrayByProps(tweensProps, ['name', 'from', 'to', 'delay', 'duration']);    return splittedProps.map(function(tweenProps) {      var tween = cloneObject(tweenProps[0]);      tween.animatables = tweenProps.map(function(p) { return p.animatables });      tween.totalDuration = tween.delay + tween.duration;      return tween;    });  }  var reverseTweens = function(anim, delays) {    anim.tweens.forEach(function(tween) {      var toVal = tween.to;      var fromVal = tween.from;      var delayVal = anim.duration - (tween.delay + tween.duration);      tween.from = toVal;      tween.to = fromVal;      if (delays) tween.delay = delayVal;    });    anim.reversed = anim.reversed ? false : true;  }  var getTweensDuration = function(tweens) {    if (tweens.length) return Math.max.apply(Math, tweens.map(function(tween){ return tween.totalDuration; }));  }  var getTweensDelay = function(tweens) {    if (tweens.length) return Math.min.apply(Math, tweens.map(function(tween){ return tween.delay; }));  }  // will-change  var getWillChange = function(anim) {    var props = [];    var els = [];    anim.tweens.forEach(function(tween) {      if (tween.type === 'css' || tween.type === 'transform' ) {        props.push(tween.type === 'css' ? stringToHyphens(tween.name) : 'transform');        tween.animatables.forEach(function(animatable) { els.push(animatable.target); });      }    });    return {      properties: removeArrayDuplicates(props).join(', '),      elements: removeArrayDuplicates(els)    }  }  var setWillChange = function(anim) {    var willChange = getWillChange(anim);    willChange.elements.forEach(function(element) {      element.style.willChange = willChange.properties;    });  }  var removeWillChange = function(anim) {    var willChange = getWillChange(anim);    willChange.elements.forEach(function(element) {      element.style.removeProperty('will-change');    });  }  /* Svg path */  var getPathProps = function(path) {    var el = is.str(path) ? selectString(path)[0] : path;    return {      path: el,      value: el.getTotalLength()    }  }  var snapProgressToPath = function(tween, progress) {    var pathEl = tween.path;    var pathProgress = tween.value * progress;    var point = function(offset) {      var o = offset || 0;      var p = progress > 1 ? tween.value + o : pathProgress + o;      return pathEl.getPointAtLength(p);    }    var p = point();    var p0 = point(-1);    var p1 = point(+1);    switch (tween.name) {      case 'translateX': return p.x;      case 'translateY': return p.y;      case 'rotate': return Math.atan2(p1.y - p0.y, p1.x - p0.x) * 180 / Math.PI;    }  }  // Progress  var getTweenProgress = function(tween, time) {    var elapsed = Math.min(Math.max(time - tween.delay, 0), tween.duration);    var percent = elapsed / tween.duration;    var progress = tween.to.numbers.map(function(number, p) {      var start = tween.from.numbers[p];      var eased = easings[tween.easing](percent, tween.elasticity);      var val = tween.path ? snapProgressToPath(tween, eased) : start + eased * (number - start);      val = tween.round ? Math.round(val * tween.round) / tween.round : val;      return val;    });    return recomposeValue(progress, tween.to.strings, tween.from.strings);  }  var setAnimationProgress = function(anim, time) {    var transforms;    anim.currentTime = time;    anim.progress = (time / anim.duration) * 100;    for (var t = 0; t < anim.tweens.length; t++) {      var tween = anim.tweens[t];      tween.currentValue = getTweenProgress(tween, time);      var progress = tween.currentValue;      for (var a = 0; a < tween.animatables.length; a++) {        var animatable = tween.animatables[a];        var id = animatable.id;        var target = animatable.target;        var name = tween.name;        switch (tween.type) {          case 'css': target.style[name] = progress; break;          case 'attribute': target.setAttribute(name, progress); break;          case 'object': target[name] = progress; break;          case 'transform':          if (!transforms) transforms = {};          if (!transforms[id]) transforms[id] = [];          transforms[id].push(progress);          break;        }      }    }    if (transforms) {      if (!transform) transform = (getCSSValue(document.body, transformStr) ? '' : '-webkit-') + transformStr;      for (var t in transforms) {        anim.animatables[t].target.style[transform] = transforms[t].join(' ');      }    }  }  // Animation  var createAnimation = function(params) {    var anim = {};    anim.animatables = getAnimatables(params.targets);    anim.settings = mergeObjects(params, defaultSettings);    anim.properties = getProperties(params, anim.settings);    anim.tweens = getTweens(anim.animatables, anim.properties);    anim.duration = getTweensDuration(anim.tweens) || params.duration;    anim.delay = getTweensDelay(anim.tweens) || params.delay;    anim.currentTime = 0;    anim.progress = 0;    anim.ended = false;    return anim;  }  // Public  var animations = [];  var raf = 0;  var engine = (function() {    var play = function() { raf = requestAnimationFrame(step); };    var step = function(t) {      if (animations.length) {        for (var i = 0; i < animations.length; i++) animations[i].tick(t);        play();      } else {        cancelAnimationFrame(raf);        raf = 0;      }    }    return play;  })();  var animation = function(params) {    var anim = createAnimation(params);    var time = {};    anim.tick = function(now) {      anim.ended = false;      if (!time.start) time.start = now;      time.current = Math.min(Math.max(time.last + now - time.start, 0), anim.duration);      setAnimationProgress(anim, time.current);      var s = anim.settings;      if (time.current >= anim.delay) {        if (s.begin) s.begin(anim); s.begin = undefined;        if (s.update) s.update(anim);      }      if (time.current >= anim.duration) {        if (s.loop) {          time.start = now;          if (s.direction === 'alternate') reverseTweens(anim, true);          if (is.num(s.loop)) s.loop--;        } else {          anim.ended = true;          anim.pause();          if (s.complete) s.complete(anim);        }        time.last = 0;      }    }    anim.seek = function(progress) {      setAnimationProgress(anim, (progress / 100) * anim.duration);    }    anim.pause = function() {      removeWillChange(anim);      var i = animations.indexOf(anim);      if (i > -1) animations.splice(i, 1);    }    anim.play = function(params) {      anim.pause();      if (params) anim = mergeObjects(createAnimation(mergeObjects(params, anim.settings)), anim);      time.start = 0;      time.last = anim.ended ? 0 : anim.currentTime;      var s = anim.settings;      if (s.direction === 'reverse') reverseTweens(anim);      if (s.direction === 'alternate' && !s.loop) s.loop = 1;      setWillChange(anim);      animations.push(anim);      if (!raf) engine();    }    anim.restart = function() {      if (anim.reversed) reverseTweens(anim);      anim.pause();      anim.seek(0);      anim.play();    }    if (anim.settings.autoplay) anim.play();    return anim;  }  // Remove one or multiple targets from all active animations.  var remove = function(elements) {    var targets = flattenArray(is.arr(elements) ? elements.map(toArray) : toArray(elements));    for (var i = animations.length-1; i >= 0; i--) {      var animation = animations[i];      var tweens = animation.tweens;      for (var t = tweens.length-1; t >= 0; t--) {        var animatables = tweens[t].animatables;        for (var a = animatables.length-1; a >= 0; a--) {          if (arrayContains(targets, animatables[a].target)) {            animatables.splice(a, 1);            if (!animatables.length) tweens.splice(t, 1);            if (!tweens.length) animation.pause();          }        }      }    }  }  animation.version = version;  animation.speed = 1;  animation.list = animations;  animation.remove = remove;  animation.easings = easings;  animation.getValue = getInitialTargetValue;  animation.path = getPathProps;  animation.random = random;  return animation;}));]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[/* 2017 Julian Garnier Released under the MIT license*/var $jscomp={scope:{}};$jscomp.defineProperty="function"==typeof Object.defineProperties?Object.defineProperty:function(e,r,p){if(p.get||p.set)throw new TypeError("ES3 does not support getters and setters.");e!=Array.prototype&&e!=Object.prototype&&(e[r]=p.value)};$jscomp.getGlobal=function(e){return"undefined"!=typeof window&&window===e?e:"undefined"!=typeof global&&null!=global?global:e};$jscomp.global=$jscomp.getGlobal(this);$jscomp.SYMBOL_PREFIX="jscomp_symbol_";$jscomp.initSymbol=function(){$jscomp.initSymbol=function(){};$jscomp.global.Symbol||($jscomp.global.Symbol=$jscomp.Symbol)};$jscomp.symbolCounter_=0;$jscomp.Symbol=function(e){return $jscomp.SYMBOL_PREFIX+(e||"")+$jscomp.symbolCounter_++};$jscomp.initSymbolIterator=function(){$jscomp.initSymbol();var e=$jscomp.global.Symbol.iterator;e||(e=$jscomp.global.Symbol.iterator=$jscomp.global.Symbol("iterator"));"function"!=typeof Array.prototype[e]&&$jscomp.defineProperty(Array.prototype,e,{configurable:!0,writable:!0,value:function(){return $jscomp.arrayIterator(this)}});$jscomp.initSymbolIterator=function(){}};$jscomp.arrayIterator=function(e){var r=0;return $jscomp.iteratorPrototype(function(){return r<e.length?{done:!1,value:e[r++]}:{done:!0}})};$jscomp.iteratorPrototype=function(e){$jscomp.initSymbolIterator();e={next:e};e[$jscomp.global.Symbol.iterator]=function(){return this};return e};$jscomp.array=$jscomp.array||{};$jscomp.iteratorFromArray=function(e,r){$jscomp.initSymbolIterator();e instanceof String&&(e+="");var p=0,m={next:function(){if(p<e.length){var u=p++;return{value:r(u,e[u]),done:!1}}m.next=function(){return{done:!0,value:void 0}};return m.next()}};m[Symbol.iterator]=function(){return m};return m};$jscomp.polyfill=function(e,r,p,m){if(r){p=$jscomp.global;e=e.split(".");for(m=0;m<e.length-1;m++){var u=e[m];u in p||(p[u]={});p=p[u]}e=e[e.length-1];m=p[e];r=r(m);r!=m&&null!=r&&$jscomp.defineProperty(p,e,{configurable:!0,writable:!0,value:r})}};$jscomp.polyfill("Array.prototype.keys",function(e){return e?e:function(){return $jscomp.iteratorFromArray(this,function(e){return e})}},"es6-impl","es3");var $jscomp$this=this;(function(e,r){"function"===typeof define&&define.amd?define([],r):"object"===typeof module&&module.exports?module.exports=r():e.anime=r()})(this,function(){function e(a){if(!h.col(a))try{return document.querySelectorAll(a)}catch(c){}}function r(a,c){for(var d=a.length,b=2<=arguments.length?arguments[1]:void 0,f=[],n=0;n<d;n++)if(n in a){var k=a[n];c.call(b,k,n,a)&&f.push(k)}return f}function p(a){return a.reduce(function(a,d){return a.concat(h.arr(d)?p(d):d)},[])}function m(a){if(h.arr(a))return a;h.str(a)&&(a=e(a)||a);return a instanceof NodeList||a instanceof HTMLCollection?[].slice.call(a):[a]}function u(a,c){return a.some(function(a){return a===c})}function C(a){var c={},d;for(d in a)c[d]=a[d];return c}function D(a,c){var d=C(a),b;for(b in a)d[b]=c.hasOwnProperty(b)?c[b]:a[b];return d}function z(a,c){var d=C(a),b;for(b in c)d[b]=h.und(a[b])?c[b]:a[b];return d}function T(a){a=a.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i,function(a,c,d,k){return c+c+d+d+k+k});var c=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(a);a=parseInt(c[1],16);var d=parseInt(c[2],16),c=parseInt(c[3],16);return"rgba("+a+","+d+","+c+",1)"}function U(a){function c(a,c,b){0>b&&(b+=1);1<b&&--b;return b<1/6?a+6*(c-a)*b:.5>b?c:b<2/3?a+(c-a)*(2/3-b)*6:a}var d=/hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.exec(a)||/hsla\((\d+),\s*([\d.]+)%,\s*([\d.]+)%,\s*([\d.]+)\)/g.exec(a);a=parseInt(d[1])/360;var b=parseInt(d[2])/100,f=parseInt(d[3])/100,d=d[4]||1;if(0==b)f=b=a=f;else{var n=.5>f?f*(1+b):f+b-f*b,k=2*f-n,f=c(k,n,a+1/3),b=c(k,n,a);a=c(k,n,a-1/3)}return"rgba("+255*f+","+255*b+","+255*a+","+d+")"}function y(a){if(a=/([\+\-]?[0-9#\.]+)(%|px|pt|em|rem|in|cm|mm|ex|ch|pc|vw|vh|vmin|vmax|deg|rad|turn)?$/.exec(a))return a[2]}function V(a){if(-1<a.indexOf("translate")||"perspective"===a)return"px";if(-1<a.indexOf("rotate")||-1<a.indexOf("skew"))return"deg"}function I(a,c){return h.fnc(a)?a(c.target,c.id,c.total):a}function E(a,c){if(c in a.style)return getComputedStyle(a).getPropertyValue(c.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase())||"0"}function J(a,c){if(h.dom(a)&&u(W,c))return"transform";if(h.dom(a)&&(a.getAttribute(c)||h.svg(a)&&a[c]))return"attribute";if(h.dom(a)&&"transform"!==c&&E(a,c))return"css";if(null!=a[c])return"object"}function X(a,c){var d=V(c),d=-1<c.indexOf("scale")?1:0+d;a=a.style.transform;if(!a)return d;for(var b=[],f=[],n=[],k=/(\w+)\((.+?)\)/g;b=k.exec(a);)f.push(b[1]),n.push(b[2]);a=r(n,function(a,b){return f[b]===c});return a.length?a[0]:d}function K(a,c){switch(J(a,c)){case "transform":return X(a,c);case "css":return E(a,c);case "attribute":return a.getAttribute(c)}return a[c]||0}function L(a,c){var d=/^(\*=|\+=|-=)/.exec(a);if(!d)return a;var b=y(a)||0;c=parseFloat(c);a=parseFloat(a.replace(d[0],""));switch(d[0][0]){case "+":return c+a+b;case "-":return c-a+b;case "*":return c*a+b}}function F(a,c){return Math.sqrt(Math.pow(c.x-a.x,2)+Math.pow(c.y-a.y,2))}function M(a){a=a.points;for(var c=0,d,b=0;b<a.numberOfItems;b++){var f=a.getItem(b);0<b&&(c+=F(d,f));d=f}return c}function N(a){if(a.getTotalLength)return a.getTotalLength();switch(a.tagName.toLowerCase()){case "circle":return 2*Math.PI*a.getAttribute("r");case "rect":return 2*a.getAttribute("width")+2*a.getAttribute("height");case "line":return F({x:a.getAttribute("x1"),y:a.getAttribute("y1")},{x:a.getAttribute("x2"),y:a.getAttribute("y2")});case "polyline":return M(a);case "polygon":var c=a.points;return M(a)+F(c.getItem(c.numberOfItems-1),c.getItem(0))}}function Y(a,c){function d(b){b=void 0===b?0:b;return a.el.getPointAtLength(1<=c+b?c+b:0)}var b=d(),f=d(-1),n=d(1);switch(a.property){case "x":return b.x;case "y":return b.y;case "angle":return 180*Math.atan2(n.y-f.y,n.x-f.x)/Math.PI}}function O(a,c){var d=/-?\d*\.?\d+/g,b;b=h.pth(a)?a.totalLength:a;if(h.col(b))if(h.rgb(b)){var f=/rgb\((\d+,\s*[\d]+,\s*[\d]+)\)/g.exec(b);b=f?"rgba("+f[1]+",1)":b}else b=h.hex(b)?T(b):h.hsl(b)?U(b):void 0;else f=(f=y(b))?b.substr(0,b.length-f.length):b,b=c&&!/\s/g.test(b)?f+c:f;b+="";return{original:b,numbers:b.match(d)?b.match(d).map(Number):[0],strings:h.str(a)||c?b.split(d):[]}}function P(a){a=a?p(h.arr(a)?a.map(m):m(a)):[];return r(a,function(a,d,b){return b.indexOf(a)===d})}function Z(a){var c=P(a);return c.map(function(a,b){return{target:a,id:b,total:c.length}})}function aa(a,c){var d=C(c);if(h.arr(a)){var b=a.length;2!==b||h.obj(a[0])?h.fnc(c.duration)||(d.duration=c.duration/b):a={value:a}}return m(a).map(function(a,b){b=b?0:c.delay;a=h.obj(a)&&!h.pth(a)?a:{value:a};h.und(a.delay)&&(a.delay=b);return a}).map(function(a){return z(a,d)})}function ba(a,c){var d={},b;for(b in a){var f=I(a[b],c);h.arr(f)&&(f=f.map(function(a){return I(a,c)}),1===f.length&&(f=f[0]));d[b]=f}d.duration=parseFloat(d.duration);d.delay=parseFloat(d.delay);return d}function ca(a){return h.arr(a)?A.apply(this,a):Q[a]}function da(a,c){var d;return a.tweens.map(function(b){b=ba(b,c);var f=b.value,e=K(c.target,a.name),k=d?d.to.original:e,k=h.arr(f)?f[0]:k,w=L(h.arr(f)?f[1]:f,k),e=y(w)||y(k)||y(e);b.from=O(k,e);b.to=O(w,e);b.start=d?d.end:a.offset;b.end=b.start+b.delay+b.duration;b.easing=ca(b.easing);b.elasticity=(1E3-Math.min(Math.max(b.elasticity,1),999))/1E3;b.isPath=h.pth(f);b.isColor=h.col(b.from.original);b.isColor&&(b.round=1);return d=b})}function ea(a,c){return r(p(a.map(function(a){return c.map(function(b){var c=J(a.target,b.name);if(c){var d=da(b,a);b={type:c,property:b.name,animatable:a,tweens:d,duration:d[d.length-1].end,delay:d[0].delay}}else b=void 0;return b})})),function(a){return!h.und(a)})}function R(a,c,d,b){var f="delay"===a;return c.length?(f?Math.min:Math.max).apply(Math,c.map(function(b){return b[a]})):f?b.delay:d.offset+b.delay+b.duration}function fa(a){var c=D(ga,a),d=D(S,a),b=Z(a.targets),f=[],e=z(c,d),k;for(k in a)e.hasOwnProperty(k)||"targets"===k||f.push({name:k,offset:e.offset,tweens:aa(a[k],d)});a=ea(b,f);return z(c,{children:[],animatables:b,animations:a,duration:R("duration",a,c,d),delay:R("delay",a,c,d)})}function q(a){function c(){return window.Promise&&new Promise(function(a){return p=a})}function d(a){return g.reversed?g.duration-a:a}function b(a){for(var b=0,c={},d=g.animations,f=d.length;b<f;){var e=d[b],k=e.animatable,h=e.tweens,n=h.length-1,l=h[n];n&&(l=r(h,function(b){return a<b.end})[0]||l);for(var h=Math.min(Math.max(a-l.start-l.delay,0),l.duration)/l.duration,w=isNaN(h)?1:l.easing(h,l.elasticity),h=l.to.strings,p=l.round,n=[],m=void 0,m=l.to.numbers.length,t=0;t<m;t++){var x=void 0,x=l.to.numbers[t],q=l.from.numbers[t],x=l.isPath?Y(l.value,w*x):q+w*(x-q);p&&(l.isColor&&2<t||(x=Math.round(x*p)/p));n.push(x)}if(l=h.length)for(m=h[0],w=0;w<l;w++)p=h[w+1],t=n[w],isNaN(t)||(m=p?m+(t+p):m+(t+" "));else m=n[0];ha[e.type](k.target,e.property,m,c,k.id);e.currentValue=m;b++}if(b=Object.keys(c).length)for(d=0;d<b;d++)H||(H=E(document.body,"transform")?"transform":"-webkit-transform"),g.animatables[d].target.style[H]=c[d].join(" ");g.currentTime=a;g.progress=a/g.duration*100}function f(a){if(g[a])g[a](g)}function e(){g.remaining&&!0!==g.remaining&&g.remaining--}function k(a){var k=g.duration,n=g.offset,w=n+g.delay,r=g.currentTime,x=g.reversed,q=d(a);if(g.children.length){var u=g.children,v=u.length;if(q>=g.currentTime)for(var G=0;G<v;G++)u[G].seek(q);else for(;v--;)u[v].seek(q)}if(q>=w||!k)g.began||(g.began=!0,f("begin")),f("run");if(q>n&&q<k)b(q);else if(q<=n&&0!==r&&(b(0),x&&e()),q>=k&&r!==k||!k)b(k),x||e();f("update");a>=k&&(g.remaining?(t=h,"alternate"===g.direction&&(g.reversed=!g.reversed)):(g.pause(),g.completed||(g.completed=!0,f("complete"),"Promise"in window&&(p(),m=c()))),l=0)}a=void 0===a?{}:a;var h,t,l=0,p=null,m=c(),g=fa(a);g.reset=function(){var a=g.direction,c=g.loop;g.currentTime=0;g.progress=0;g.paused=!0;g.began=!1;g.completed=!1;g.reversed="reverse"===a;g.remaining="alternate"===a&&1===c?2:c;b(0);for(a=g.children.length;a--;)g.children[a].reset()};g.tick=function(a){h=a;t||(t=h);k((l+h-t)*q.speed)};g.seek=function(a){k(d(a))};g.pause=function(){var a=v.indexOf(g);-1<a&&v.splice(a,1);g.paused=!0};g.play=function(){g.paused&&(g.paused=!1,t=0,l=d(g.currentTime),v.push(g),B||ia())};g.reverse=function(){g.reversed=!g.reversed;t=0;l=d(g.currentTime)};g.restart=function(){g.pause();g.reset();g.play()};g.finished=m;g.reset();g.autoplay&&g.play();return g}var ga={update:void 0,begin:void 0,run:void 0,complete:void 0,loop:1,direction:"normal",autoplay:!0,offset:0},S={duration:1E3,delay:0,easing:"easeOutElastic",elasticity:500,round:0},W="translateX translateY translateZ rotate rotateX rotateY rotateZ scale scaleX scaleY scaleZ skewX skewY perspective".split(" "),H,h={arr:function(a){return Array.isArray(a)},obj:function(a){return-1<Object.prototype.toString.call(a).indexOf("Object")},pth:function(a){return h.obj(a)&&a.hasOwnProperty("totalLength")},svg:function(a){return a instanceof SVGElement},dom:function(a){return a.nodeType||h.svg(a)},str:function(a){return"string"===typeof a},fnc:function(a){return"function"===typeof a},und:function(a){return"undefined"===typeof a},hex:function(a){return/(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(a)},rgb:function(a){return/^rgb/.test(a)},hsl:function(a){return/^hsl/.test(a)},col:function(a){return h.hex(a)||h.rgb(a)||h.hsl(a)}},A=function(){function a(a,d,b){return(((1-3*b+3*d)*a+(3*b-6*d))*a+3*d)*a}return function(c,d,b,f){if(0<=c&&1>=c&&0<=b&&1>=b){var e=new Float32Array(11);if(c!==d||b!==f)for(var k=0;11>k;++k)e[k]=a(.1*k,c,b);return function(k){if(c===d&&b===f)return k;if(0===k)return 0;if(1===k)return 1;for(var h=0,l=1;10!==l&&e[l]<=k;++l)h+=.1;--l;var l=h+(k-e[l])/(e[l+1]-e[l])*.1,n=3*(1-3*b+3*c)*l*l+2*(3*b-6*c)*l+3*c;if(.001<=n){for(h=0;4>h;++h){n=3*(1-3*b+3*c)*l*l+2*(3*b-6*c)*l+3*c;if(0===n)break;var m=a(l,c,b)-k,l=l-m/n}k=l}else if(0===n)k=l;else{var l=h,h=h+.1,g=0;do m=l+(h-l)/2,n=a(m,c,b)-k,0<n?h=m:l=m;while(1e-7<Math.abs(n)&&10>++g);k=m}return a(k,d,f)}}}}(),Q=function(){function a(a,b){return 0===a||1===a?a:-Math.pow(2,10*(a-1))*Math.sin(2*(a-1-b/(2*Math.PI)*Math.asin(1))*Math.PI/b)}var c="Quad Cubic Quart Quint Sine Expo Circ Back Elastic".split(" "),d={In:[[.55,.085,.68,.53],[.55,.055,.675,.19],[.895,.03,.685,.22],[.755,.05,.855,.06],[.47,0,.745,.715],[.95,.05,.795,.035],[.6,.04,.98,.335],[.6,-.28,.735,.045],a],Out:[[.25,.46,.45,.94],[.215,.61,.355,1],[.165,.84,.44,1],[.23,1,.32,1],[.39,.575,.565,1],[.19,1,.22,1],[.075,.82,.165,1],[.175,.885,.32,1.275],function(b,c){return 1-a(1-b,c)}],InOut:[[.455,.03,.515,.955],[.645,.045,.355,1],[.77,0,.175,1],[.86,0,.07,1],[.445,.05,.55,.95],[1,0,0,1],[.785,.135,.15,.86],[.68,-.55,.265,1.55],function(b,c){return.5>b?a(2*b,c)/2:1-a(-2*b+2,c)/2}]},b={linear:A(.25,.25,.75,.75)},f={},e;for(e in d)f.type=e,d[f.type].forEach(function(a){return function(d,f){b["ease"+a.type+c[f]]=h.fnc(d)?d:A.apply($jscomp$this,d)}}(f)),f={type:f.type};return b}(),ha={css:function(a,c,d){return a.style[c]=d},attribute:function(a,c,d){return a.setAttribute(c,d)},object:function(a,c,d){return a[c]=d},transform:function(a,c,d,b,f){b[f]||(b[f]=[]);b[f].push(c+"("+d+")")}},v=[],B=0,ia=function(){function a(){B=requestAnimationFrame(c)}function c(c){var b=v.length;if(b){for(var d=0;d<b;)v[d]&&v[d].tick(c),d++;a()}else cancelAnimationFrame(B),B=0}return a}();q.version="2.2.0";q.speed=1;q.running=v;q.remove=function(a){a=P(a);for(var c=v.length;c--;)for(var d=v[c],b=d.animations,f=b.length;f--;)u(a,b[f].animatable.target)&&(b.splice(f,1),b.length||d.pause())};q.getValue=K;q.path=function(a,c){var d=h.str(a)?e(a)[0]:a,b=c||100;return function(a){return{el:d,property:a,totalLength:N(d)*(b/100)}}};q.setDashoffset=function(a){var c=N(a);a.setAttribute("stroke-dasharray",c);return c};q.bezier=A;q.easings=Q;q.timeline=function(a){var c=q(a);c.pause();c.duration=0;c.add=function(d){c.children.forEach(function(a){a.began=!0;a.completed=!0});m(d).forEach(function(b){var d=z(b,D(S,a||{}));d.targets=d.targets||a.targets;b=c.duration;var e=d.offset;d.autoplay=!1;d.direction=c.direction;d.offset=h.und(e)?b:L(e,b);c.began=!0;c.completed=!0;c.seek(d.offset);d=q(d);d.began=!0;d.completed=!0;d.duration>b&&(c.duration=d.duration);c.children.push(d)});c.seek(0);c.reset();c.autoplay&&c.restart();return c};return c};q.random=function(a,c){return Math.floor(Math.random()*(c-a+1))+a};return q});]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[//背景黑色线条// !function(){function o(w,v,i){return w.getAttribute(v)||i}function j(i){return document.getElementsByTagName(i)}function l(){var i=j("script"),w=i.length,v=i[w-1];return{l:w,z:o(v,"zIndex",-1),o:o(v,"opacity",0.5),c:o(v,"color","0,0,0"),n:o(v,"count",99)}}function k(){r=u.width=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,n=u.height=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight}function b(){e.clearRect(0,0,r,n);var w=[f].concat(t);var x,v,A,B,z,y;t.forEach(function(i){i.x+=i.xa,i.y+=i.ya,i.xa*=i.x>r||i.x<0?-1:1,i.ya*=i.y>n||i.y<0?-1:1,e.fillRect(i.x-0.5,i.y-0.5,1,1);for(v=0;v<w.length;v++){x=w[v];if(i!==x&&null!==x.x&&null!==x.y){B=i.x-x.x,z=i.y-x.y,y=B*B+z*z;y<x.max&&(x===f&&y>=x.max/2&&(i.x-=0.03*B,i.y-=0.03*z),A=(x.max-y)/x.max,e.beginPath(),e.lineWidth=A/2,e.strokeStyle="rgba("+s.c+","+(A+0.2)+")",e.moveTo(i.x,i.y),e.lineTo(x.x,x.y),e.stroke())}}w.splice(w.indexOf(i),1)}),m(b)}var u=document.createElement("canvas"),s=l(),c="c_n"+s.l,e=u.getContext("2d"),r,n,m=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(i){window.setTimeout(i,1000/45)},a=Math.random,f={x:null,y:null,max:20000};u.id=c;u.style.cssText="position:fixed;top:0;left:0;z-index:"+s.z+";opacity:"+s.o;j("body")[0].appendChild(u);k(),window.onresize=k;window.onmousemove=function(i){i=i||window.event,f.x=i.clientX,f.y=i.clientY},window.onmouseout=function(){f.x=null,f.y=null};for(var t=[],p=0;s.n>p;p++){var h=a()*r,g=a()*n,q=2*a()-1,d=2*a()-1;t.push({x:h,y:g,xa:q,ya:d,max:6000})}setTimeout(function(){b()},100)}();//点击爆炸效果if (!document.getElementById('clickBoom')){    let canvas=document.createElement("canvas");    canvas.classList.add('fireworks');    canvas.id = 'clickBoom';    document.body.appendChild(canvas);    canvas.style.position = 'fixed';    canvas.style.left = '0';    canvas.style.top = '0';    canvas.style.zIndex = '99999999';    canvas.style.pointerEvents = 'none'}let iOS = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);let ff = navigator.userAgent.indexOf('Firefox') > 0;let tap = ('ontouchstart' in window || navigator.msMaxTouchPoints) ? 'touchstart' : 'mousedown';if (iOS) document.body.classList.add('iOS');let fireworks = (function() {    let getFontSize = function() {        return parseFloat(getComputedStyle(document.documentElement).fontSize);    }    var canvas = document.querySelector('.fireworks');    var ctx = canvas.getContext('2d');    var numberOfParticules = 24;    var distance = 200;    var x = 0;    var y = 0;    var animations = [];    var setCanvasSize = function() {        canvas.width = window.innerWidth;        canvas.height = window.innerHeight;    }    var updateCoords = function(e) {        x = e.clientX || e.touches[0].clientX;        y = e.clientY || e.touches[0].clientY;    }    var colors = ['#FF324A', '#31FFA6', '#206EFF', '#FFFF99'];    var createCircle = function(x,y) {        var p = {};        p.x = x;        p.y = y;        p.color = colors[anime.random(0, colors.length - 1)];        p.color = '#FFF';        p.radius = 0;        p.alpha = 1;        p.lineWidth = 6;        p.draw = function() {            ctx.globalAlpha = p.alpha;            ctx.beginPath();            ctx.arc(p.x, p.y, p.radius, 0, 2 * Math.PI, true);            ctx.lineWidth = p.lineWidth;            ctx.strokeStyle = p.color;            ctx.stroke();            ctx.globalAlpha = 1;        }        return p;    }    let createParticule = function (x, y) {        let p = {};        p.x = x;        p.y = y;        p.color = colors[anime.random(0, colors.length - 1)];        p.radius = anime.random(getFontSize(), getFontSize() * 2);        p.draw = function () {            ctx.beginPath();            ctx.arc(p.x, p.y, p.radius, 0, 2 * Math.PI, true);            ctx.fillStyle = p.color;            ctx.fill();        }        return p;    };    var createParticles = function(x,y) {        var particules = [];        for (var i = 0; i < numberOfParticules; i++) {            var p = createParticule(x, y);            particules.push(p);        }        return particules;    }    var removeAnimation = function(animation) {        var index = animations.indexOf(animation);        if (index > -1) animations.splice(index, 1);    }    var animateParticules = function(x, y) {        setCanvasSize();        var particules = createParticles(x, y);        var circle = createCircle(x, y);        var particulesAnimation = anime({            targets: particules,            x: function(p) { return p.x + anime.random(-distance, distance); },            y: function(p) { return p.y + anime.random(-distance, distance); },            radius: 0,            duration: function() { return anime.random(1200, 1800); },            easing: 'easeOutExpo',            complete: removeAnimation        });        var circleAnimation = anime({            targets: circle,            radius: function() { return anime.random(getFontSize() * 8.75, getFontSize() * 11.25); },            lineWidth: 0,            alpha: {                value: 0,                easing: 'linear',                duration: function() { return anime.random(400, 600); }            },            duration: function() { return anime.random(1200, 1800); },            easing: 'easeOutExpo',            complete: removeAnimation        });        animations.push(particulesAnimation);        animations.push(circleAnimation);    }    anime({        duration: Infinity,        update: function() {            ctx.clearRect(0, 0, canvas.width, canvas.height);            animations.forEach(function(anim) {                anim.animatables.forEach(function(animatable) {                    animatable.target.draw();                });            });        }    });    document.addEventListener(tap, function(e) {        updateCoords(e);        animateParticules(x, y);    }, false);})();]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[var oMeta = document.createElement('meta');oMeta.name = 'referrer';oMeta.content = 'no-referrer';document.getElementsByTagName('head')[0].appendChild(oMeta);]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>链接</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<style>    td{border:1px solid transparent;padding: 5px;} </style><p class="note note-primary">框架</p><table>    <tr>        <td><a href="https://hexo.io/">Hexo</a></td>        <td><a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid</a></td>    </tr></table><p class="note note-primary">学习</p><table>    <tr>        <td><a href="https://tech.meituan.com/">美团技术团队</a></td>        <td><a href="https://codetop.cc">笔试算法高频题</a></td>        <td><a href="https://github.com/chefyuan/algorithm-base">algorithm-base</a></td>        <td><a href="https://leetcode-cn.com/">LeetCode官网</a></td>        <td><a href="https://mirrors.huaweicloud.com/">华为开源镜像站</a></td>        <td><a href="https://www.katacoda.com/">Katacoda</a></td>        <td><a href="https://www.orchome.com/">Orchome</a></td>        <td><a href="https://snailclimb.gitee.io/javaguide/">JavaGuide</a></td>    </tr>    <tr>        <td><a href="https://github.com/SharingSource/LogicStack-LeetCode/wiki">宫水三叶</a></td>        <td><a href="https://www.geeksforgeeks.org/">geeksforgeeks</a></td>        <td><a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html">usfca</a></td>    </tr></table><p class="note note-primary">创作</p><table>    <tr>        <td><a href="https://mp.weixin.qq.com/cgi-bin/home">公众号</a></td>        <td><a href="https://www.cnblogs.com/biaogejiushibiao/">博客园</a></td>        <td><a href="https://mp.csdn.net/console/home">CSDN</a></td>        <td><a href="https://mp.toutiao.com/profile_v4/graphic/publish?from=toutiao_pc">今日头条</a></td>        <td><a href="https://zhuanlan.zhihu.com/write">知乎</a></td>        <td><a href="https://juejin.cn/">掘金</a></td>    </tr></table><p class="note note-primary">其他</p><table>    <tr>        <td><a href="https://www.pianku.li/">片库</a></td>        <td><a href="https://mfcb.net">魔方城堡</a></td>        <td><a href="http://pan.naifei.cc/new">网盘下载</a></td>        <td><a href="https://teahour.fm/">Teahour</a></td>        <td><a href="https://www.321tool.com/book/type/1">321在线工具站</a></td>        <td><a href="http://45.runchang.top/">短连接生成</a></td>    </tr></table><p class="note note-primary">友链</p><table>    <tr>        <td><a href="https://blog.csdn.net/significantfrank">张建飞</a></td>        <td><a href="https://sunbufu.vercel.app/posts/">孙不服的博客</a></td>        <td><a href="https://hiwannz.com/">见字如面</a></td>        <td><a href="https://you.ci/">有次博客</a></td>        <td><a href="https://geekplayers.com/">极客玩家大白</a></td>        <td><a href="https://blog.dhbxs.top">灯火不休时</a></td>        <td><a href="https://blog.ccknbc.cc">CC的部落格</a></td>        <td><a href="https://www.mgxnb.club">M-GX</a></td>        <td><a href="https://goopher97-github-io.vercel.app">GOOPHER's Blog</a></td>    </tr>    <tr>        <td><a href="https://dreamylost.cn/">梦境迷离</a></td>        <td><a href="https://riris.cn">Bryce's Club</a></td>        <td><a href="https://xyz922.github.io/">xyz922</a></td>        <td><a href="https://www.ruanx.net">Pion1eer</a></td>        <td><a href="https://www.52txr.cn/">陶小桃Blog</a></td>        <td><a href="https://zhile.io/">知了</a></td>        <td><a href="http://blog.cleancoder.com/">Clean Code</a></td>    </tr></table>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>音乐</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<head>    <script src="https://cdn.jsdelivr.net/npm/aplayer@1.7.0/dist/APlayer.min.js"></script>    <link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@1.7.0/dist/APlayer.min.css">  </head>        <div id="aplayer-WEjLKxmn" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;"></div>  <script>  var options = {"narrow":false,"autoplay":false,"showlrc":0,"listmaxheight":"513px","music":[{"title":"后来的我们","author":"五月天","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/后来的我们-五月天.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"玫瑰少年","author":"五月天","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/玫瑰少年-五月天.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"像鱼","author":"王贰浪","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/王贰浪 - 像鱼.flac","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"给你们","author":"张宇","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/张宇 - 给你们.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"白月光与朱砂痣","author":"大籽","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/大籽 - 白月光与朱砂痣.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"踏山河","author":"是七叔呢","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/踏山河 - 是七叔呢.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"错位时空","author":"韩可可","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/韩可可 - 错位时空.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"将军","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 将军.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"稻香","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 稻香.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"止战之殇","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 止战之殇.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"困兽之斗","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 困兽之斗.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"黑色毛衣","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 黑色毛衣.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"七里香","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 七里香.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"米兰的小铁匠","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 米兰的小铁匠.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"青花瓷","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 青花瓷.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"分裂","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 分裂.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"园游会","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 园游会.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"晴天","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 晴天.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"青花","author":"周传雄","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周传雄 - 青花.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"爱在西元前","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 爱在西元前.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"红尘客栈","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 红尘客栈.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"寒流来袭","author":"Hotdog","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/Hotdog - 寒流来袭.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"迷迭香","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 迷迭香.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"断了的弦","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 断了的弦.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"白色风车","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 白色风车.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"龙拳","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 龙拳.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"甜甜的","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 甜甜的.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"布拉格广场","author":"蔡依林","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/蔡依林 - 布拉格广场.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"飘移","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 飘移.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"一口气全念对","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 一口气全念对.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"四季列车","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 四季列车.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"手写的从前","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 手写的从前.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"C边G事","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - C边G事.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"娘子","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 娘子.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"大笨钟","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 大笨钟.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"斗牛","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 斗牛.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"听见下雨的声音","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 听见下雨的声音.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"枫","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 枫.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"时光机","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 时光机.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"一路向北","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 一路向北.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"蓝色风暴","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 蓝色风暴.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"世界未末日","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 世界未末日.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"雨下一整晚","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 雨下一整晚.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"说好的幸福呢","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 说好的幸福呢.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"星晴","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 星晴.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"双刀","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 双刀.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"前S情R","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 前S情R.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"我要夏天","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 我要夏天.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"爷爷泡的茶","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 爷爷泡的茶.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"威廉古堡","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 威廉古堡.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"天涯过客","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 天涯过客.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"忍者","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 忍者.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"四面楚歌","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 四面楚歌.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"麦芽糖","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 麦芽糖.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"以父之名","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 以父之名.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"献世","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 献世.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"明明就","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 明明就.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"红模仿","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 红模仿.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"世界末日","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 世界末日.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"琴伤","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 琴伤.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"流浪诗人","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 流浪诗人.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"外婆","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 外婆.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"她的睫毛","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 她的睫毛.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"迷魂曲","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 迷魂曲.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"本草纲目","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 本草纲目.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"梦想启动","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 梦想启动.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"可ai女人","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 可ai女人.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"阳明山","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 阳明山.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"反方向的钟","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 反方向的钟.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"我的地盘","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 我的地盘.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"千里之外","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 千里之外.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"逆鳞","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 逆鳞.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"英雄","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 英雄.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"牛仔很忙","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 牛仔很忙.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"爸我回来了","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 爸我回来了.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"跨时代","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 跨时代.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"惊叹号","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 惊叹号.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"公主病","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 公主病.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"哪里都是你","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 哪里都是你.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"火车叨位去","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 火车叨位去.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"听爸爸的话","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 听爸爸的话.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"怎么了","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 怎么了.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"黄金甲","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 黄金甲.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"龙战骑士","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 龙战骑士.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"窃爱","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 窃爱.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"你好吗","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 你好吗.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"安静","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 安静.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"听妈妈的话","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 听妈妈的话.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"扯","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 扯.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"魔术先生","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 魔术先生.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"你比从前快乐","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 你比从前快乐.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"冬天的秘密","author":"周传雄","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周传雄 - 冬天的秘密.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"懦夫","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 懦夫.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"借口","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 借口.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"发如雪","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 发如雪.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"蜗牛","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 蜗牛.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"傻笑","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 傻笑.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"Mine","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - Mine Mine.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"伊斯坦堡","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 伊斯坦堡.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"半兽人","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 半兽人.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"皮影戏","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 皮影戏.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"同一种调调","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 同一种调调.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"阳光宅男","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 阳光宅男.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"疗伤烧肉粽","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 疗伤烧肉粽.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"水手怕水","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 水手怕水.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"夜的第七章","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 夜的第七章.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"双截棍","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 双截棍.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"爱你没差","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 爱你没差.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"无双","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 无双.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"开不了口","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 开不了口.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"浪漫手机","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 浪漫手机.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"比较大的大提琴","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 比较大的大提琴.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"Try","author":"派伟俊","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/派伟俊 - Try.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"我不配","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 我不配.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"蛇舞","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 蛇舞.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"搁浅","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 搁浅.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"三年二班","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 三年二班.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"兰亭序","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 兰亭序.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"超跑女神","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 超跑女神.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"霍元甲","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 霍元甲.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"印第安老斑鸠","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 印第安老斑鸠.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"彩虹","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 彩虹.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"美人鱼","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 美人鱼.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"我落泪情绪零碎","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 我落泪情绪零碎.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"鞋子特大号","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 鞋子特大号.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"蒲公英的约定","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 蒲公英的约定.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"退后","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 退后.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"对不起","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 对不起.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"给我一首歌的时间","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 给我一首歌的时间.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"龙卷风","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 龙卷风.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"简单爱","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 简单爱.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"画沙","author":"袁咏琳","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/袁咏琳 - 画沙.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"免费教学录影带","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 免费教学录影带.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"乱舞春秋","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 乱舞春秋.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"自导自演","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 自导自演.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"东风破","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 东风破.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"花海","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 花海.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"完美主义","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 完美主义.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"珊瑚海","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 珊瑚海.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"好久不见","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 好久不见.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"烟花易冷","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 烟花易冷.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"天地一斗","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 天地一斗.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"算什么男人","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 算什么男人.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"梯田","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 梯田.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"你听得到","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 你听得到.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"回到过去","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 回到过去.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"最长的电影","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 最长的电影.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"手语","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 手语.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"半岛铁盒","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 半岛铁盒.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"乔克叔叔","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 乔克叔叔.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"超人不会飞","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 超人不会飞.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"爱情悬崖","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 爱情悬崖.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"说了再见","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 说了再见.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"上海一九四三","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 上海一九四三.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"公公偏Tou痛","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 公公偏Tou痛.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"麦烝玮","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 麦烝玮.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"嘻哈空姐","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 嘻哈空姐.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"等你下课","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 等你下课.flac","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"黑色幽默","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 黑色幽默.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"轨迹","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 轨迹.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"夜曲","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 夜曲.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"暗号","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 暗号.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"菊花台","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 菊花台.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"最后的战役","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 最后的战役.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"爱的飞行日记","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 爱的飞行日记.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"乌克丽丽","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 乌克丽丽.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"},{"title":"心雨","author":"周杰伦","url":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/music/周杰伦 - 心雨.mp3","pic":"https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/music.png"}]};  options.element = document.getElementById("aplayer-WEjLKxmn");  var ap = new APlayer(options);    window.aplayers || (window.aplayers = []);  window.aplayers.push(ap);  </script>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>照片</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<!DOCTYPE html><html><head>    <meta charset="utf-8">    <meta name="viewport" content="maximum-scale=1.0,minimum-scale=1.0,user-scalable=0,width=device-width,initial-scale=1.0"/>    <title>timeline</title>    <style>        .timeline-small {            max-width: 100%;            max-height: 630px;            overflow: hidden;            margin: 30px auto 0;            box-shadow: 0 0 40px #a0a0a0;            font-family: 'Open Sans', sans-serif;        }        .timeline-small-body ul {            padding: 1em 0 0 2em;            margin: 0;            list-style: none;            position: relative;        }        .timeline-small-body ul::before {            content: ' ';            height: 100%;            width: 5px;            background-color: #d9d9d9;            position: absolute;            top: 0;            left: 2.4em;            z-index: -1;        }        .timeline-small-body li div {            display: inline-block;            margin: 1em 0;            vertical-align: top;        }        .timeline-small-body .bullet {            width: 1rem;            height: 1rem;            box-sizing: border-box;            border-radius: 50%;            background: #fff;            z-index: 1;            margin-right: 1rem;        }        .timeline-small-body .bullet.pink {            background-color: hotpink;            border: 3px solid #F93B69;        }        .timeline-small-body .bullet.green {            background-color: lightseagreen;            border: 3px solid #B0E8E2;        }        .timeline-small-body .bullet.blue {            background-color: aquamarine;            border: 3px solid cadetblue;        }        .timeline-small-body .bullet.orange {            background-color: salmon;            border: 3px solid #EB8B6E;        }        .timeline-small-body .date {            width: 23%;            font-size: 0.75em;            padding-top: 0.40rem;            padding-right: 2rem;        }        .timeline-small-body .desc {            width: 50%;        }        .timeline-small-body h3 {            font-size: 0.9em;            font-weight: 400;            margin: 0;            margin-top: 5px;        }        .timeline-small-body h4 {            margin: 0;            font-size: 0.7em;            font-weight: 400;            color: #808080;            margin-top: 5px;        }        .timeline-small-body img {            margin: 5px;            width: 100%;            height: auto;            display: inline-block;         }         img{             width: auto;             height: auto;             max-width: 100%;             max-height: 100%;           }         .img-father {            width:100%;height:300px;         }    </style></head><body>    <div class="timeline-small-body">        <ul>        <li>           <div class="bullet pink"></div>           <div class="date">2021年09月21日</div>           <div class="desc">             <h3>短暂的相聚</h3>             <h4>生活原本沉闷,但跑起来就有风</h4>             <img src="https://cdn.nlark.com/yuque/0/2021/jpeg/2630542/1632217982318-12f51996-979c-46f9-ae10-04cdee221f85.jpeg">             </div>         </li>                            <li>           <div class="bullet pink"></div>           <div class="date">2021年09月19日</div>           <div class="desc">             <h3>多啦A梦</h3>             <h4>带着满怀期待</h4>             <img src="https://cdn.nlark.com/yuque/0/2021/jpeg/2630542/1632217974128-86af0429-2d6e-460f-a149-2dfb42d354be.jpeg">             </div>         </li>                        <li>           <div class="bullet pink"></div>           <div class="date">2021年09月04日</div>           <div class="desc">             <h3>胡雪岩故里</h3>             <h4>被迫当工具人的一天</h4>             <img src="https://cdn.nlark.com/yuque/0/2021/png/2630542/1630816210530-84288cbe-9d98-4447-b706-2104eddad918.png">             </div>         </li>                            <li>           <div class="bullet pink"></div>           <div class="date">2021年08月27日</div>           <div class="desc">             <h3>记录一下</h3>             <h4>日复一日</h4>             <img src="https://cdn.nlark.com/yuque/0/2021/jpeg/2630542/1630214231400-527b1a51-8311-466b-bf62-3f358d9d3db4.jpeg">             </div>         </li>                    <li>           <div class="bullet pink"></div>           <div class="date">2021年07月12日</div>           <div class="desc">             <h3>下班时刻</h3>             <h4>Try harder</h4>             <img src="https://cdn.nlark.com/yuque/0/2021/jpeg/2630542/1628413459033-13287c31-eba1-4147-8647-6f96c7e0189e.jpeg">             </div>         </li>                      <li>           <div class="bullet pink"></div>           <div class="date">2021年07月02日</div>           <div class="desc">             <h3>正阳步行街</h3>             <h4>去吃摩天脆脆去啦哈哈哈哈哈</h4>             <img src="https://cdn.nlark.com/yuque/0/2021/jpeg/2630542/1626065293426-173d881b-a2eb-4ad4-8069-9e3609b7b6f3.jpeg">             </div>         </li>        <li>           <div class="bullet pink"></div>           <div class="date">2021年07月01日</div>           <div class="desc">             <h3>大圩古镇</h3>             <h4>左看看右看看</h4>             <img src="https://cdn.nlark.com/yuque/0/2021/png/2630542/1628422506678-ef947da2-ecea-43b1-b4f4-04437ebc8b6a.png">             </div>         </li>                     <li>           <div class="bullet blue"></div>           <div class="date">2021年06月29日</div>           <div class="desc">             <h3>毕业快乐</h3>             <h4>毕业快乐呀</h4>             <img src="https://cdn.nlark.com/yuque/0/2021/jpeg/2630542/1625298314653-825ea09f-3588-404b-82c3-691553287e1d.jpeg">             </div>         </li>                        <li>           <div class="bullet blue"></div>           <div class="date">2021年06月28日</div>           <div class="desc">             <h3>拨穗仪式</h3>             <h4>和校长唯一的一张合影</h4>             <img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1671164299966-2336a1f5-89d9-4ccd-bfbd-78d40b645961.png">             </div>         </li>                        <li>           <div class="bullet blue"></div>           <div class="date">2021年06月24日</div>           <div class="desc">             <h3>结束啦</h3>             <h4>开启下一段征程</h4>             <img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1671164280710-b08d1ccc-0d7c-4b5c-96bf-fde26460657c.png">             </div>         </li>            <li>           <div class="bullet blue"></div>           <div class="date">2021年06月24日</div>           <div class="desc">             <h3>荣誉证书</h3>             <h4>在学校的最后一张证书</h4>             <img src="https://cdn.nlark.com/yuque/0/2022/png/2630542/1671164240555-f44320a3-24bc-4aa2-8c84-fccf1ad3e713.png">             </div>         </li>            <li>           <div class="bullet pink"></div>           <div class="date">2021年06月14日</div>           <div class="desc">             <h3>返程</h3>             <h4>回学校啦</h4>             <img src="https://cdn.nlark.com/yuque/0/2021/jpeg/2630542/1623770934335-6a5e2225-82e8-49d6-8ce9-f2cb5f842a03.jpeg">             </div>         </li>                      <li>           <div class="bullet green"></div>           <div class="date">2021年06月11日</div>           <div class="desc">             <h3>端午节礼盒</h3>             <h4>公司发的端午节粽子</h4>             <img src="https://cdn.nlark.com/yuque/0/2021/jpeg/2630542/1623513010087-db7dd495-96bd-4745-886a-a3f0c2cea2ff.jpeg">             </div>         </li>                     <li>           <div class="bullet blue"></div>           <div class="date">2021年05月31日</div>           <div class="desc">             <h3>日落时分</h3>             <h4>夕阳无限好、只是近黄昏</h4>             <img src="https://cdn.nlark.com/yuque/0/2021/jpeg/2630542/1622595017906-91e8f176-46be-43ee-a04a-bc9048e5dead.jpeg">             </div>         </li>         <li>           <div class="bullet pink"></div>           <div class="date">2021年05月27日</div>           <div class="desc">             <h3>无骨烤鱼</h3>             <h4>和学校的烤鱼饭味道相差挺大，还是比较怀念学校的烤鱼饭呀</h4>             <img src="https://cdn.nlark.com/yuque/0/2021/jpeg/2630542/1622124907891-130f369e-1524-4f8a-9a02-443f2f83a160.jpeg">             </div>         </li>          <li>           <div class="bullet pink"></div>           <div class="date">2021年05月25日</div>           <div class="desc">             <h3>园区一角</h3>             <h4>这是不是薰衣草哈哈哈哈</h4>             <img src="https://cdn.nlark.com/yuque/0/2021/jpeg/2630542/1622124895276-ac7998d0-6615-4e8e-b8d5-7db726cb5cc4.jpeg">             </div>         </li>         <li>           <div class="bullet green"></div>           <div class="date">2021年05月23日</div>           <div class="desc">             <h3>随手一拍</h3>             <h4>夜晚绚丽的灯光下，格外的靓丽</h4>             <img src="https://cdn.nlark.com/yuque/0/2021/jpeg/2630542/1621747343259-5c19f2a9-a668-4d4b-a7e1-bd6220ab98a9.jpeg">             </div>         </li>        <li>           <div class="bullet pink"></div>           <div class="date">2021年05月21日</div>           <div class="desc">             <h3>梦想小镇</h3>             <h4>未来梦想框</h4>             <img src="https://cdn.nlark.com/yuque/0/2021/jpeg/2630542/1621611702609-b39b67f9-2172-426d-8546-494f87e5e5b9.jpeg">             </div>         </li>         <li>           <div class="bullet blue"></div>           <div class="date">2021年05月14日</div>           <div class="desc">             <h3>牛肉水饺</h3>             <h4>真好吃哈哈哈哈哈</h4>             <img src="https://cdn.nlark.com/yuque/0/2021/jpeg/2630542/1621133489508-9757e78e-8a07-4d1b-9fbf-aafcdac3c028.jpeg">             </div>         </li>         <li>           <div class="bullet blue"></div>           <div class="date">2021年05月01日</div>           <div class="desc">             <h3>夕阳西下</h3>             <h4>再忙也要注意锻炼身体</h4>             <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/xyxx.jpg">             </div>         </li>              <li>           <div class="bullet blue"></div>           <div class="date">2021年04月25日</div>           <div class="desc">             <h3>电脑使用时长</h3>             <h4>时间咋过得这么慢</h4>             <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/WeChatImage_20210427234503.jpg">             </div>         </li>                <li>          <div class="bullet blue"></div>          <div class="date">2021年04月14日</div>          <div class="desc">            <h3>加班常态</h3>            <h4>日出而作，日落不息</h4>            <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/WeChatImage_20210427234335.jpg">            </div>        </li>         <li>          <div class="bullet blue"></div>          <div class="date">2021年04月04日</div>          <div class="desc">            <h3>杭州西湖</h3>            <h4>人山人海、景色没看到多少、光看人去了</h4>            <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/hangzhou-xihu.jpg">            </div>        </li>                <li>          <div class="bullet pink"></div>          <div class="date">2021年04月01日</div>          <div class="desc">            <h3>卷帘大将</h3>            <h4>扶我起来、我还能卷</h4>            <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/img/spring-native.png">            </div>        </li>        <li>          <div class="bullet blue"></div>          <div class="date">2021年03月23日</div>          <div class="desc">            <h3>春意满园</h3>            <h4>梨花盛开</h4>            <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/WeChat Image_20210327235237.jpg">            </div>        </li>        <li>          <div class="bullet blue"></div>          <div class="date">2021年03月20日</div>          <div class="desc">            <h3>POC演练</h3>            <h4>很累很累，已经是凌晨一点钟，但是也能学到很多东西</h4>            <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/WeChat Image_20210327234952.jpg">            </div>        </li>        <li>          <div class="bullet blue"></div>          <div class="date">2021年03月15日</div>          <div class="desc">            <h3>正式入职</h3>            <h4>同事、导师都很优秀，自己接触的东西太少，要抓紧时间向他们学习</h4>            <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/xiaodun.jpg">            </div>        </li>        <li>          <div class="bullet blue"></div>          <div class="date">2021年03月13日</div>          <div class="desc">            <h3>阿里访客中心</h3>            <h4>夏导带领阿里一圈</h4>            <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/0fa8226e3e6f07afb3489cf8201701e.jpg">            </div>        </li>        <li>          <div class="bullet pink"></div>          <div class="date">2020年03月10日</div>          <div class="desc">            <h3>杭州未来科技城</h3>            <h4>租房子的心酸、辛辛苦苦加班来的两块钱都进房东的手里了</h4>            <div class="img-father">            <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/WeChat Image_20210311235438.jpg">            </div>            </div>        </li>        <li>          <div class="bullet blue"></div>          <div class="date">2021年03月09日</div>          <div class="desc">            <h3>出发杭州</h3>            <h4>还有几天就要实习了、提前过去租个房子</h4>            <div class="img-father">            <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/WeChat Image_20210311235520.jpg">                </div>            </div>        </li>        <li>          <div class="bullet blue"></div>          <div class="date">2021年03月06日</div>          <div class="desc">            <h3>突如其来的惊喜</h3>            <h4>O(∩_∩)O~~开心哈哈哈哈哈哈哈哈哈哈哈哈</h4>            <div class="img-father">            <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/QQ图片20210306234459.png">                </div>            </div>        </li>        <li>          <div class="bullet pink"></div>          <div class="date">2021年03月03日</div>          <div class="desc">            <h3>Service mesh</h3>            <h4>我们要偷偷学习、然后卷死所有人</h4>            <div class="img-father">            <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/20191202095545.png">                </div>            </div>        </li>            <li>              <div class="bullet blue"></div>              <div class="date">2021年03月02日</div>              <div class="desc">                <h3>解放桥</h3>                <h4>夜晚的灯光还是挺好看的</h4>            <div class="img-father">                <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/QQ图片20210302204421.png">                </div>                </div>            </li>            <li>              <div class="bullet green"></div>              <div class="date">2021年02月26日</div>              <div class="desc">                <h3>日月双塔</h3>                <h4>在等、等、等</h4>            <div class="img-father">                <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/IMG_20210226_201927.jpg">                </div>                </div>            </li>            <li>              <div class="bullet blue"></div>              <div class="date">2021年02月14日</div>              <div class="desc">                <h3>爬山远眺</h3>                <h4>颇有心旷神怡、会当凌绝顶、一览众山小的感觉</h4>            <div class="img-father">                <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/IMG_20210214_172640.jpg">                </div>                </div>            </li>            <li>                <div class="bullet pink"></div>                <div class="date">2021年02月11日</div>                <div class="desc">                    <h3>新年快乐</h3>                    <h4>新年快乐、牛气冲天</h4>            <div class="img-father">                    <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/1613141748819.gif">                </div>                </div>            </li>            <li>                <div class="bullet orange"></div>                <div class="date">2021年01月24日</div>                <div class="desc">                    <h3>荣誉证书</h3>                    <h4>大学生涯结束了</h4>            <div class="img-father">                    <img src="https://cdn.nlark.com/yuque/0/2022/jpeg/2630542/1671164333634-73409877-159d-489f-b865-5a0b5be824d2.jpeg">                </div>                </div>            </li>            <li>              <div class="bullet blue"></div>              <div class="date">2021年01月21日</div>              <div class="desc">                <h3>学习空间</h3>                <h4>一回到家第一时间就是把电脑搭起来</h4>            <div class="img-father">                <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/IMG_20210121_164134.jpg">                </div>                </div>            </li>            <li>              <div class="bullet pink"></div>              <div class="date">2021年01月18日</div>              <div class="desc">                <h3>代小孩</h3>                <h4>桂林正阳步行街</h4>            <div class="img-father">                <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/IMG_20210118_162854.jpg">                </div>                </div>            </li>            <li>              <div class="bullet blue"></div>              <div class="date">2020年11月14日</div>              <div class="desc">                <h3>锻炼身体</h3>                <h4>跑步跑步</h4>            <div class="img-father">                <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/IMG_20201114_185105.jpg">                </div>                </div>            </li>            <li>              <div class="bullet pink"></div>              <div class="date">2020年12月13日</div>              <div class="desc">                <h3>算法学习</h3>                <h4>东哥保佑我算法</h4>            <div class="img-father">                <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/IMG_20201213_123123.jpg">                </div>                </div>            </li>            <li>              <div class="bullet green"></div>              <div class="date">2020年12月08日</div>              <div class="desc">                <h3>国励奖学</h3>                <h4>终于拿到红本本了</h4>            <div class="img-father">                <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/IMG_20201208_165131.jpg">                </div>                </div>            </li>            <li>              <div class="bullet green"></div>              <div class="date">2020年12月06日</div>              <div class="desc">                <h3>好基友们</h3>                <h4>哈哈哈哈哈哈哈哈</h4>            <div class="img-father">                <img src="https://cdn.nlark.com/yuque/0/2021/jpeg/2630542/1624414180203-5ae7aeeb-e1c5-4283-b8db-0cc5292551f6.jpeg">                </div>                </div>            </li>                        <li>              <div class="bullet blue"></div>              <div class="date">2020年09月05日</div>              <div class="desc">                <h3>旅行日记</h3>                <h4>大海给人的感觉真是舒爽</h4>            <div class="img-father">                <img src="https://cdn.nlark.com/yuque/0/2021/jpeg/2630542/1622124878864-09db62f0-9646-4c49-8548-d9e975716d6e.jpeg">                </div>                </div>            </li>            <li>              <div class="bullet pink"></div>              <div class="date">2020年09月04日</div>              <div class="desc">                <h3>旅行日记</h3>                <h4>北海银滩</h4>            <div class="img-father">                <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/IMG_20200904_184622.jpg">                </div>                </div>            </li>            <li>              <div class="bullet blue"></div>              <div class="date">2020年06月05日</div>              <div class="desc">                <h3>华为鲲鹏</h3>                <h4>华为鲲鹏开发者大赛广西赛区</h4>            <div class="img-father">                <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/IMG_20200605_140222.jpg">                </div>                </div>            </li>            <li>              <div class="bullet blue"></div>              <div class="date">2020年05月20日</div>              <div class="desc">                <h3>特殊的日子</h3>                <h4>活抓一个小仙女</h4>            <div class="img-father">                <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/QQ图片20210303203439.png">                </div>              </div>            </li>            <li>                <div class="bullet pink"></div>                <div class="date">2020年03月03日</div>                <div class="desc">                    <h3>长板速降</h3>                    <h4>第一次上山了</h4>            <div class="img-father">                    <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/39799393c2bb775a.jpg">                </div>                </div>            </li>            <li>                <div class="bullet pink"></div>                <div class="date">2019年08月15日</div>                <div class="desc">                    <h3>一等奖</h3>                    <h4>我真厉害哈哈哈</h4>            <div class="img-father">                    <img src="https://cdn.nlark.com/yuque/0/2021/jpeg/2630542/1632299118185-cfa23875-d53d-4f47-ab36-ae25fc8a0a79.jpeg">                </div>                </div>            </li>                        <li>              <div class="bullet blue"></div>              <div class="date">2018年10月20日</div>              <div class="desc">                <h3>2017软件工程</h3>                <h4>软件工程5班</h4>            <div class="img-father">                <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/1597941896099.jpeg">                </div>                </div>            </li>               <li>              <div class="bullet pink"></div>              <div class="date">2018年10月13日</div>              <div class="desc">                <h3>毕业开会</h3>                <h4>提前了解了解他们毕业设计都要做啥作品</h4>            <div class="img-father">                <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/IMG_20181013_082830.jpg">                </div>                </div>            </li>                     <li>              <div class="bullet blue"></div>              <div class="date">2018年10月10日</div>              <div class="desc">                <h3>开发中心</h3>                <h4>以后这就是我的工位了</h4>            <div class="img-father">                <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/IMG_20181010_211452.jpg">                </div>                </div>            </li>            <li>              <div class="bullet green"></div>              <div class="date">2018年02月02日</div>              <div class="desc">                <h3>广东打工</h3>                <h4>第一次去广东打工、以为会在一声声靓仔中迷失自我，谁知道他们居然叫我叼毛</h4>            <div class="img-father">                <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/6be820f6a3b04417.jpg">                </div>                </div>            </li>            <li>              <div class="bullet blue"></div>              <div class="date">2017年10月12日</div>              <div class="desc">                <h3>班级小聚</h3>                <h4>软件工程5班</h4>            <div class="img-father">                <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/1595605440433.jpeg">                </div>                </div>            </li>            <li>              <div class="bullet pink"></div>              <div class="date">2017年09月24日</div>              <div class="desc">                <h3>校园一角</h3>                <h4>这是目前学校最大的一栋教学楼</h4>            <div class="img-father">                <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/WP_20150407_09_01_22_Pro.jpg">                </div>                </div>            </li>            <li>              <div class="bullet blue"></div>              <div class="date">2017年09月19日</div>              <div class="desc">                <h3>玉圭园游</h3>                <h4>天气可真热</h4>            <div class="img-father">                <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/yuguiyuan.jpeg">                </div>                </div>            </li>            <li>              <div class="bullet blue"></div>              <div class="date">2017年09月17日</div>              <div class="desc">                <h3>生日快乐</h3>                <h4>Happy birthday!</h4>            <div class="img-father">                <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/WP_20170917_23_43_00_Pro.jpg">                </div>                </div>            </li>            <li>              <div class="bullet blue"></div>              <div class="date">2017年06月16日</div>              <div class="desc">                <h3>R720</h3>                <h4>我的游戏本本终于到了</h4>            <div class="img-father">                <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/WP_20170620_08_21_19_Pro.jpg">                </div>                </div>            </li>                          <li>              <div class="bullet blue"></div>              <div class="date">2017年06月16日</div>              <div class="desc">                <h3>茶园</h3>                <h4>绿油油的</h4>            <div class="img-father">                <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/WP_20170616_14_26_11_Pro.jpg">                </div>                </div>            </li>                        <li>              <div class="bullet blue"></div>              <div class="date">2017年06月11日</div>              <div class="desc">                <h3>茶园山峰</h3>                <h4>总有一天要登上那座高峰</h4>            <div class="img-father">                <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/WP_20170611_13_37_29_Pro.jpg">                </div>                </div>            </li>            <li>              <div class="bullet pink"></div>              <div class="date">2017年06月10日</div>              <div class="desc">                <h3>蓝天白云</h3>                <h4>天空的蓝色</h4>            <div class="img-father">                <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/WP_20170609_19_33_49_Pro.jpg">                </div>                </div>            </li>            <li>              <div class="bullet pink"></div>              <div class="date">2017年06月09日</div>              <div class="desc">                <h3>毕业散场</h3>                <h4>人去楼空</h4>            <div class="img-father">                <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/WP_20170609_14_42_09_Pro.jpg">                </div>                </div>            </li>                    <li>              <div class="bullet blue"></div>              <div class="date">2017年06月08日</div>              <div class="desc">                <h3>校园一角</h3>                <h4>从宿舍楼上看的校园</h4>            <div class="img-father">                <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/WP_20170609_16_32_03_Pro.jpg">                </div>                </div>            </li>                <li>              <div class="bullet blue"></div>              <div class="date">2017年05月30日</div>              <div class="desc">                <h3>网吧一排</h3>                <h4>全体宿舍</h4>            <div class="img-father">                <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/WP_20170530_14_42_52_Pro.jpg">                </div>                </div>            </li>            <li>              <div class="bullet blue"></div>              <div class="date">2017年05月05日</div>              <div class="desc">                <h3>沙雕同桌</h3>                <h4>这是我认识的最幽默的一个同桌</h4>            <div class="img-father">                <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/MTXX_20170505_224028.jpg">                </div>                </div>            </li>            <li>                <div class="bullet green"></div>                <div class="date">2017年05月24日</div>                <div class="desc">                    <h3>三江中学</h3>                    <h4>1403班全体男生</h4>            <div class="img-father">                    <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/hight-school.jpg">                </div>                </div>            </li>            <li>              <div class="bullet orange"></div>              <div class="date">2017年04月22日</div>              <div class="desc">                <h3>锻炼身体</h3>                <h4>高考每天学习有压力了就做运动</h4>            <div class="img-father">                <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/MTXX_20170521_231349.png">                </div>                </div>            </li>            <li>              <div class="bullet blue"></div>              <div class="date">2017年04月03日</div>              <div class="desc">                <h3>吊脚凉亭</h3>                <h4>由木制和瓦片制造而成</h4>            <div class="img-father">                <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/WP_20170403_13_09_02_Pro.jpg">                </div>                </div>            </li>            <li>              <div class="bullet pink"></div>              <div class="date">2017年01月25日</div>              <div class="desc">                <h3>青青草地</h3>                <h4>感觉这张拍的比较好看</h4>            <div class="img-father">                <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/WP_20170125_10_05_15_Pro.jpg">                </div>                </div>            </li>            <li>              <div class="bullet blue"></div>              <div class="date">2016年11月17日</div>              <div class="desc">                <h3>体育运动会</h3>                <h4>1403班全体合照</h4>            <div class="img-father">                <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/2016-11-17[10_59_47].jpg">                </div>                </div>            </li>            <li>              <div class="bullet blue"></div>              <div class="date">2016年11月02日</div>              <div class="desc">                <h3>乒乓球</h3>                <h4>两位好基友</h4>            <div class="img-father">                <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/WP_20161102_17_30_26_Pro.jpg">                </div>                </div>            </li>            <li>              <div class="bullet pink"></div>              <div class="date">2016年08月18日</div>              <div class="desc">                <h3>自习课</h3>                <h4>按耐不住蠢蠢欲动的下课心情</h4>            <div class="img-father">                <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/2016-08-18.jpg">                </div>                </div>            </li>            <li>              <div class="bullet blue"></div>              <div class="date">2016年06月08日</div>              <div class="desc">                <h3>野生杨梅</h3>                <h4>估计老爸拿去做杨梅酒</h4>            <div class="img-father">                <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/WP_20160608_19_57_54_Pro.jpg">                </div>                </div>            </li>            <li>              <div class="bullet green"></div>              <div class="date">2016年04月03日</div>              <div class="desc">                <h3>鸟窝</h3>                <h4>茶园子里的鸟窝</h4>            <div class="img-father">                <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/WP_20160403_15_17_18_Pro.jpg">                </div>                </div>            </li>            <li>              <div class="bullet pink"></div>              <div class="date">2015年07月20日</div>              <div class="desc">                <h3>傻乎乎的老弟</h3>                <h4>路上捡到了一个小孩</h4>            <div class="img-father">                <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/QQ图片20210303184213.png">                </div>                </div>            </li>            <li>              <div class="bullet green"></div>              <div class="date">2015年07月27日</div>              <div class="desc">                <h3>大雨之后</h3>                <h4>空气都清新很多</h4>            <div class="img-father">                <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/WP_20150727_18_53_27_Pro.jpg">                </div>                </div>            </li>            <li>              <div class="bullet blue"></div>              <div class="date">2015年05月05日</div>              <div class="desc">                <h3>学自行车</h3>                <h4>腿不够长哈哈哈哈哈哈多吃饭长大先吧</h4>                <div class="img-father">                <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/WP_20170505_20_57_14_Pro.jpg">                </div>                </div>            </li>            <li>              <div class="bullet pink"></div>              <div class="date">2015年01月21日</div>              <div class="desc">                <h3>下棋</h3>                <h4>小弟弟还挺厉害，哈哈哈哈</h4>                <div class="img-father">                <img src="https://cdn.jsdelivr.net/gh/mikeygithub/jsDeliver@master/resource/photo/WP_20170121_16_08_27_Pro.jpg">                </div>                </div>            </li>        </ul>    </div></body></html>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>代办</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<div class="markdown-body"><h1 id="2022-05-01"><a href="#2022-05-01" class="headerlink" title="2022-05-01"></a>2022-05-01</h1><div>            <input type="checkbox" disabled >《程序员的底层思维》          </div><h1 id="2021-05-01"><a href="#2021-05-01" class="headerlink" title="2021-05-01"></a>2021-05-01</h1><div>            <input type="checkbox" disabled >云原生篇          </div><h1 id="2021-04-28"><a href="#2021-04-28" class="headerlink" title="2021-04-28"></a>2021-04-28</h1><div>            <input type="checkbox" disabled >远程调试          </div><h1 id="2021-04-16"><a href="#2021-04-16" class="headerlink" title="2021-04-16"></a>2021-04-16</h1><div>            <input type="checkbox" disabled >Velocity 模板引擎          </div><h1 id="2021-04-04"><a href="#2021-04-04" class="headerlink" title="2021-04-04"></a>2021-04-04</h1><div>            <input type="checkbox" disabled >分布式锁          </div><h1 id="2021-03-28"><a href="#2021-03-28" class="headerlink" title="2021-03-28"></a>2021-03-28</h1><div>            <input type="checkbox" disabled >单机部署天策          </div><h1 id="2021-03-28-1"><a href="#2021-03-28-1" class="headerlink" title="2021-03-28"></a>2021-03-28</h1><div>            <input type="checkbox" disabled checked="checked">Kafka          </div><div>            <input type="checkbox" disabled checked="checked">ES          </div><div>            <input type="checkbox" disabled checked="checked">Aerospike          </div><div>            <input type="checkbox" disabled checked="checked">ZK          </div><div>            <input type="checkbox" disabled checked="checked">Dubbo          </div><div>            <input type="checkbox" disabled >Cassandra          </div><h1 id="2021-02-28"><a href="#2021-02-28" class="headerlink" title="2021-02-28"></a>2021-02-28</h1><div>            <input type="checkbox" disabled checked="checked">源码分析          </div><h1 id="2021-02-15"><a href="#2021-02-15" class="headerlink" title="2021-02-15"></a>2021-02-15</h1><div>            <input type="checkbox" disabled >手写系统          </div><h1 id="2021-02-15-1"><a href="#2021-02-15-1" class="headerlink" title="2021-02-15"></a>2021-02-15</h1><div>            <input type="checkbox" disabled checked="checked">操作系统          </div>  <h1 id="2021-02-08"><a href="#2021-02-08" class="headerlink" title="2021-02-08"></a>2021-02-08</h1><div>            <input type="checkbox" disabled >学习路线          </div><h1 id="2021-02-03"><a href="#2021-02-03" class="headerlink" title="2021-02-03"></a>2021-02-03</h1><div>            <input type="checkbox" disabled >虚拟机篇          </div><h1 id="2021-01-16"><a href="#2021-01-16" class="headerlink" title="2021-01-16"></a>2021-01-16</h1><div>            <input type="checkbox" disabled >算法刷题          </div><div>            <input type="checkbox" disabled >坚持阅读          </div><h1 id="2021-01-10"><a href="#2021-01-10" class="headerlink" title="2021-01-10"></a>2021-01-10</h1><div>            <input type="checkbox" disabled checked="checked">毕业答辩          </div><h1 id="2021-01-03"><a href="#2021-01-03" class="headerlink" title="2021-01-03"></a>2021-01-03</h1><div>            <input type="checkbox" disabled checked="checked">论文 PPT          </div><div>            <input type="checkbox" disabled checked="checked">打印论文          </div><h1 id="2020-12-01"><a href="#2020-12-01" class="headerlink" title="2020-12-01"></a>2020-12-01</h1><div>            <input type="checkbox" disabled checked="checked">算法学习          </div><h1 id="2018-07-03"><a href="#2018-07-03" class="headerlink" title="2018-07-03"></a>2018-07-03</h1><div>            <input type="checkbox" disabled checked="checked">grpc 学习笔记          </div><div>            <input type="checkbox" disabled >Go-kit 学习笔记          </div><div>            <input type="checkbox" disabled checked="checked">Iris 学习笔记          </div><div>            <input type="checkbox" disabled >Gin 学习笔记          </div><h1 id="2018-05-05"><a href="#2018-05-05" class="headerlink" title="2018-05-05"></a>2018-05-05</h1><div>            <input type="checkbox" disabled >微机原理学习总结          </div><div>            <input type="checkbox" disabled >编译原理学习总结          </div></div>]]></content>
    
  </entry>
  
  
  
</search>
